*This page is still under construction*

<wiki:toc max_depth="3" />

=Example List=

Here, we give more examples on using Palus to automatically create test for complex and highly constrained Java programs. Palus has various configuration options, you may need to change the best option combinations for your own project.

For the following programs, the version used in evaluating Palus could also be downloaded from the [http://code.google.com/p/tpalus/downloads/list downloads] tab

==TinySQL DBMS engine==

tinySQL is a lightweight, 100% Java SQL engine that also includes a JDBC driver. [http://www.jepstone.net/tinySQL/ Here] is its homepage.

The jar could be downloaded [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/experiment-program/tinsql-jdk1.6.jar here]. The class file could be found [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/tinysqlexperiment/tinysqlclass.txt tinySQL]

tinySQL has a command line user interface, which allows users to interact with the database engine.

1. collect a sample execution trace
   {{{ java -agent:./palus-0.1.jar=tinysql -cp ./tinysql-jdk1.6.jar:./asm-all-3.1.jar:$CLASSPATH com.sqlmagic.tinysql.tinySQLCmd}}}

   You will see a command line prompt like:

   {{{tinySQL>}}}

2. Feed the command line with some inputs. Here is 10 lines of simple command:

   {{{
help commands
show tables
drop table TEST
create table TEST (shortcol char(12))
select * from TEST
insert into TEST (shortcol) values ('hell world')
select * from TEST
update TEST set shortcol = 'sai' where TRIM(shortcol)='hell world'
select * from TEST
exit
   }}}

3. Generate tests  via the following command:

{{{ java -Xmx2G -cp ./palus-0.1.jar:./asm-all-3.1.jar:./plume.jar:./tinysql-jdk1.6.jar palus.main.OfflineMain --time_limit 50 --class_file ./tinysqlclass.txt --trace_file tinysql_trace.model}}}

A group of *sample tests* generated in an experimental environment could be found [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/tinysqlexperiment/tinysql_tests.tar.bz2 here]

==SAT4J Solver==

SAT4J is an efficient solver for SAT problems. [http://www.sat4j.org/ Here] is its homepage.

The jar for experiment could be downloaded [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/experiment-program/sat4j-jdk1.6.jar here]. The class file could be downloaded [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/sat4jexperiment/sat4jclass.txt here]

1. collect a sample execution trace

{{{java -javaagent:./palus-0.1.jar=sat4j -cp ./palus-0.1.jar:./sat4j-jdk1.6.jar:./asm-all-3.1.jar org.sat4j.BasicLauncher ./sample.cnf}}}

2. generate tests

{{{java -Xmx2G -cp ./palus-0,.1.jar:asm-all-3.1.jar:./plume.jar:./sat4j-jdk1.6.jar palus.main.OfflineMain --time_limit 100 --class_file ./sat4jclass.txt --trace_file sat4j_trace.model}}}

==JSAP Command Line Parser===

1. collect a sample execute trace

{{{java -javaagent:./palus-0.1.jar=jsap -cp ./palus-0.1.jar:./jsap-2.1-exp.jar:./asm-all-3.1.jar:./junit-4.8.2.jar com.martiansoftware.jsap.TestAll}}}

2. 


==Rhino Java Script Interpreter==

Rhino is an open-source implementation of JavaScript written entirely in Java. It is typically embedded into Java applications to provide scripting to end users. It could be downloaded [http://www.mozilla.org/rhino/ here]


==Apache Common Collections==

The Java Collections Framework was a major addition in JDK 1.2. It added many powerful data structures that accelerate development of most significant Java applications. [http://commons.apache.org/collections/ Here] is its homepage.

You can download the version for experiment [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/experiment-program/apache-3.2-exp.jar here] with a text [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/apachecollectionexperiment/apacheclass.tx file] with all classes under test

1. collect a sample execution trace via the following command:
   
{{{   java -javaagent:./palus-0.1.jar=apache -cp ./palus-0.1.jar:./asm-all-3.1.jar:./apache-3.2-exp.jar:./junit-4.8.2.jar:$CLASSPATH org.apache.commons.collections.TestAll}}}

The {{{org.apache.commons.collections.TestAll}}} contains a subset of  entries of the built-in unit tests

2. generate tests via the following command:

{{{ java -Xmx2G -cp ./palus-0.1.jar:./asm-all-3.1.jar:./plume.jar:./apache-3.2-exp.jar palus.main.OfflineMain --time_limit 50 --class_file ./apacheclass.txt --trace_file apache_trace.model --switch_time_to_random 6000 --process_large_trace}}}

A group of generated *sample tests* (with *coverage chart*) by Palus in 20s, 50s, 100s, 150s in an experiment environment could be found [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/apachecollectionexperiment/apache_collection_tests_coverage.tar.bz2 here]

You may note from the generated tests, that the Palus approach is *not* a panaceas. Unlike the above examples, the tests generated tests by Palus achieves almost the same (or even less) coverage than Randoop. The major reason is that apache collections do not have many constrains to build a legal sequence. Thus, the model inferred from dynamic execution will confine the exploration of the test generation engine. In contrast, a pure random approach may create more diverse sequence. More explainations will be discussed in an upcoming technique report which describes the techniques used in Palus.

A possible way to increase coverage is to turn on the {{{-exhaustive_diversify_seq}}} option, which will slightly improve the test coverage, but generate more tests.

=Comparison with Randoop=

A part of Palus is built on top of the Randoop test generation engine. Palus' release jar contains a slightly modified Randoop version (fixing known bugs and some syntax edits to relax method visibility for extension). You can invoke Randoop using the following command:

{{{java -cp palus-0.1.jar:$YOUR_CLASS_PATH randoop.main.Main }}}[http://randoop.googlecode.com/hg/doc/index.html#command-line-options randoop_args]


You may find the classtxt file for evaluation useful. [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/tinysqlexperiment/tinysqlclass.txt tinySQL], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/sat4jexperiment/sat4jclass.txt SAT4J], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/rhinoexperiment/rhinoclass.txt Rhino], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/bcelexperiment/bcelclass.txt BCEL], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/jsap2.1experiment/jsapclass.txt JSAP], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/apachecollectionexperiment/apacheclass.txt Apache Commons]

=Known bugs=

Randoop has a known bug reported [http://code.google.com/p/randoop/issues/detail?id=14 here], which will lead Palus crash in some nondeterminstic circumstances. The Randoop developers are working in fixing this bug, and we recommend users to run Palus multiple times.