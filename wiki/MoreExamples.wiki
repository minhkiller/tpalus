*This page is still under construction*

<wiki:toc max_depth="3" />

=Example List=

Here, we give more examples on using Palus to automatically create test for complex and highly constrained Java programs. Palus has various configuration options, you may need to change the best option combinations for your own project.

For the following programs, the version used in evaluating Palus could also be downloaded from the [http://code.google.com/p/tpalus/downloads/list downloads] tab

==TinySQL DBMS engine==

tinySQL is a lightweight, 100% Java SQL engine that also includes a JDBC driver. It could be downloaded [http://www.jepstone.net/tinySQL/ here]

==SAT4J Solver==

SAT4J is an efficient solver for SAT problems. It could be downloaded [http://www.sat4j.org/ here]

==Rhino Java Script Interpreter==

Rhino is an open-source implementation of JavaScript written entirely in Java. It is typically embedded into Java applications to provide scripting to end users. It could be downloaded [http://www.mozilla.org/rhino/ here]


==Apache Common Collections==

The Java Collections Framework was a major addition in JDK 1.2. It added many powerful data structures that accelerate development of most significant Java applications. [http://commons.apache.org/collections/ Here] is its homepage.

You can download the version for experiment [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/experiment-program/apache-3.2-exp.jar here] with a text [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/apachecollectionexperiment/apacheclass.tx file] with all classes under test

1. collect a sample execution trace via the following command:
   
{{{   java -javaagent:./palus-0.1.jar=apache -cp ./palus-0.1.jar:./asm-all-3.1.jar:./apache-3.2-exp.jar:./junit-4.8.2.jar:$CLASSPATH org.apache.commons.collections.TestAll}}}

The {{{org.apache.commons.collections.TestAll}}} contains a subset of  entries of the built-in unit tests

2. generate tests via the following command:

{{{ java -Xmx2G -cp ./palus-0.1.jar:./asm-all-3.1.jar:./plume.jar:./apache-3.2-exp.jar palus.main.OfflineMain --time_limit 50 --class_file ./apacheclass.txt --trace_file apache_trace.model --switch_time_to_random 6000 --process_large_trace}}}


You may note from the generated tests, the Palus approach is *not* a panaceas. Unlike the above examples, the tests generated tests by Palus achieves almost the same (or even less) coverage than Randoop. The major reason is that apache collections do not have many constrains to build a legal sequence. Thus, the model inferred from dynamic execution will confine the exploration of the test generation engine. In contrast, a pure random approach may create more diverse sequence. More explainations will be discussed in an upcoming technique report which describes the techniques used in Palus.

=Comparison with Randoop=

A part of Palus is built on top of the Randoop test generation engine. Palus' release jar contains a slightly modified Randoop version (fixing known bugs and some syntax edits to relax method visibility for extension). You can invoke Randoop using the following command:

{{{java -cp palus-0.1.jar:$YOUR_CLASS_PATH randoop.main.Main }}}[http://randoop.googlecode.com/hg/doc/index.html#command-line-options randoop_args]


You may find the classtxt file for evaluation useful. [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/tinysqlexperiment/tinysqlclass.txt tinySQL], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/sat4jexperiment/sat4jclass.txt SAT4J], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/rhinoexperiment/rhinoclass.txt Rhino], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/bcelexperiment/bcelclass.txt BCEL], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/jsap2.1experiment/jsapclass.txt JSAP], [http://code.google.com/p/tpalus/source/browse/trunk/%20tpalus%20--username%20racezhang/Palus/apachecollectionexperiment/apacheclass.txt Apache Commons]