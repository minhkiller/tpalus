package tests;


import junit.framework.*;

public class RandoopTest2 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(RandoopTest2.class);
  }

  public void test1() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    java.util.List var2 = var0.getCatchs();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.stmt.TryStmt var5 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var6 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var7 = var6.getType();
    java.lang.String var8 = var6.getName();
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    japa.parser.ast.type.ReferenceType var19 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var9, 0);
    japa.parser.Token var20 = new japa.parser.Token(0);
    var6.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var22 = new japa.parser.ast.body.MethodDeclaration();
    int var23 = var22.getModifiers();
    japa.parser.ast.stmt.BlockStmt var24 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var24);
    japa.parser.ast.stmt.BlockStmt var26 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var26);
    var6.setBody(var26);
    var5.setFinallyBlock(var26);
    japa.parser.ast.stmt.BlockStmt var30 = var5.getFinallyBlock();
    var4.setBody(var30);
    var0.setTryBlock(var30);
    int var33 = var0.getEndColumn();
    java.util.List var34 = var0.getCatchs();
    java.util.List var35 = var0.getCatchs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test2() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    japa.parser.Token var37 = japa.parser.Token.newToken(var35);
    japa.parser.Token var38 = new japa.parser.Token(var35);
    java.lang.String var39 = var38.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test3() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    java.lang.String var21 = var17.getName();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var40 = var39.getExtends();
    japa.parser.ast.type.PrimitiveType var41 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.body.Parameter var49 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var41, var46);
    japa.parser.ast.type.ReferenceType var51 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var41, 0);
    japa.parser.Token var52 = new japa.parser.Token(0);
    var39.setModifiers(0);
    var17.setBeginLine(0);
    java.lang.String var55 = var17.getName();
    boolean var56 = var17.isInterface();
    java.util.List var57 = var17.getExtends();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);

  }

  public void test4() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.type.ClassOrInterfaceType var23 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var23, "");
    java.lang.String var87 = var86.getName();
    japa.parser.ast.type.ClassOrInterfaceType var88 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var89 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var91 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.MethodDeclaration var92 = new japa.parser.ast.body.MethodDeclaration(0, (japa.parser.ast.type.Type)var86, "hi!");
    java.util.List var93 = var92.getParameters();
    japa.parser.ast.type.Type var94 = var92.getType();
    japa.parser.ast.body.JavadocComment var95 = var92.getJavaDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);

  }

  public void test5() throws Throwable {

    japa.parser.ast.body.Parameter var0 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var1 = var0.getId();
    japa.parser.ast.ImportDeclaration var2 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var3 = new japa.parser.ast.ImportDeclaration();
    var3.setStatic(false);
    boolean var6 = var3.isStatic();
    var2.setStatic(var6);
    var0.setVarArgs(var6);
    japa.parser.ast.body.VariableDeclaratorId var9 = var0.getId();
    japa.parser.ast.body.VariableDeclaratorId var10 = var0.getId();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.Token var27 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var28 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var29 = var28.getExtends();
    java.util.List var30 = var28.getMembers();
    java.util.List var31 = var28.getMembers();
    japa.parser.Token var33 = japa.parser.Token.newToken((-1));
    var28.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    japa.parser.ast.type.ReferenceType var45 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var35, 0);
    int var46 = var45.getArrayCount();
    var28.setModifiers(var46);
    java.util.List var48 = var28.getExtends();
    japa.parser.ast.body.Parameter var49 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var50 = var49.getId();
    japa.parser.ast.ImportDeclaration var51 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var52 = new japa.parser.ast.ImportDeclaration();
    var52.setStatic(false);
    boolean var55 = var52.isStatic();
    var51.setStatic(var55);
    var49.setVarArgs(var55);
    var28.setInterface(var55);
    var0.setVarArgs(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test6() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    java.util.List var4 = var0.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var27 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var26);
    var0.setModifiers(0);
    japa.parser.ast.type.ReferenceType var29 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.Type var30 = var29.getType();
    var0.setType((japa.parser.ast.type.Type)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);

  }

  public void test7() throws Throwable {

    japa.parser.ast.body.VariableDeclarator var0 = new japa.parser.ast.body.VariableDeclarator();
    java.lang.Object var1 = var0.getData();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var10 = new japa.parser.Token((-1), "");
    java.lang.String var11 = var10.toString();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId(var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.Token var30 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var31 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var35 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var35.setExpression((japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    var35.setExpression((japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator(var12, (japa.parser.ast.expr.Expression)var43);
    int var47 = var12.getArrayCount();
    var0.setId(var12);
    java.lang.Object var49 = var12.getData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test8() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    var22.setExpression((japa.parser.ast.expr.Expression)var30);
    java.util.List var33 = var30.getAnnotations();
    java.util.List var34 = var30.getVars();
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    japa.parser.ast.type.Type var44 = var43.getType();
    japa.parser.ast.type.PrimitiveType var45 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.body.Parameter var53 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var45, var50);
    japa.parser.ast.type.ReferenceType var55 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var45, 0);
    var43.setModifiers(0);
    var30.setData((java.lang.Object)var43);
    java.util.List var58 = var30.getAnnotations();
    int var59 = var30.getModifiers();
    japa.parser.ast.type.PrimitiveType var60 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.Parameter var68 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var65);
    japa.parser.ast.type.ReferenceType var70 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var60, 0);
    int var71 = var60.getBeginLine();
    japa.parser.ast.type.PrimitiveType.Primitive var72 = var60.getType();
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var74 = var73.getName();
    japa.parser.ast.type.PrimitiveType var75 = new japa.parser.ast.type.PrimitiveType();
    int var76 = var75.getEndLine();
    var73.setArrayCount(var76);
    japa.parser.ast.body.VariableDeclaratorId var82 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var83 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var84 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var82, (japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.body.VariableDeclaratorId var90 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var91 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var92 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var90, (japa.parser.ast.expr.Expression)var91);
    japa.parser.Token var94 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var95 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    int var96 = var95.getModifiers();
    boolean var97 = var73.equals((java.lang.Object)var95);
    japa.parser.ast.body.Parameter var98 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var73);
    var30.setType((japa.parser.ast.type.Type)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test9() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    java.util.List var4 = var0.getThrows();
    japa.parser.ast.type.ClassOrInterfaceType var6 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.Token var14 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt();
    int var16 = var15.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var17 = new japa.parser.ast.stmt.ReturnStmt();
    int var18 = var17.getEndLine();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    var19.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var45 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    var45.setExpression((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.type.PrimitiveType var54 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.Parameter var62 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var54, var59);
    japa.parser.ast.type.Type var63 = var62.getType();
    var51.setType(var63);
    japa.parser.ast.stmt.ReturnStmt var65 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.stmt.ReturnStmt var66 = new japa.parser.ast.stmt.ReturnStmt(1, var16, var18, 0, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var68 = japa.parser.Token.newToken(var18, "");
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType(var6, "");
    java.lang.String var70 = var69.getName();
    japa.parser.ast.type.ClassOrInterfaceType var71 = var69.getScope();
    java.lang.String var72 = var69.getName();
    java.lang.String var73 = var69.getName();
    var0.setName(var73);
    japa.parser.ast.stmt.BlockStmt var75 = var0.getBody();
    java.lang.String var76 = var0.getName();
    japa.parser.ast.expr.NameExpr var77 = new japa.parser.ast.expr.NameExpr(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));

  }

  public void test10() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var5.setData((java.lang.Object)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    int var19 = var16.getEndColumn();
    japa.parser.ast.body.Parameter var20 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var16);
    int var21 = var16.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    int var29 = var27.getModifiers();
    japa.parser.ast.body.MethodDeclaration var30 = new japa.parser.ast.body.MethodDeclaration();
    int var31 = var30.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var49 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var50 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var54 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.Token var74 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var75 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var79 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.body.VariableDeclaratorId var81 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var82 = new japa.parser.ast.LineComment(var31, 0, 0, 1, "");
    var27.setModifiers(0);
    japa.parser.ast.body.VariableDeclarator var84 = new japa.parser.ast.body.VariableDeclarator(var16, (japa.parser.ast.expr.Expression)var27);
    int var85 = var16.getBeginLine();
    int var86 = var16.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);

  }

  public void test11() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    int var19 = var17.getModifiers();
    var17.setInterface(true);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var40 = var39.getExtends();
    boolean var41 = var39.isInterface();
    var17.setInterface(var41);
    java.util.List var43 = var17.getMembers();
    java.util.List var44 = var17.getTypeParameters();
    java.util.List var45 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);

  }

  public void test12() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.LineComment var2 = new japa.parser.ast.LineComment("hi!");
    java.lang.String var3 = var2.getContent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));

  }

  public void test13() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.stmt.ReturnStmt var31 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var39 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var40 = new japa.parser.ast.stmt.ReturnStmt();
    int var41 = var40.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var42 = new japa.parser.ast.stmt.ReturnStmt();
    int var43 = var42.getEndLine();
    japa.parser.ast.body.MethodDeclaration var44 = new japa.parser.ast.body.MethodDeclaration();
    int var45 = var44.getModifiers();
    var44.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.Token var65 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var66 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var70 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    var70.setExpression((japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.type.PrimitiveType var79 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var84 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var85 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var86 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var84, (japa.parser.ast.expr.Expression)var85);
    japa.parser.ast.body.Parameter var87 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var79, var84);
    japa.parser.ast.type.Type var88 = var87.getType();
    var76.setType(var88);
    japa.parser.ast.stmt.ReturnStmt var90 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.stmt.ReturnStmt var91 = new japa.parser.ast.stmt.ReturnStmt(1, var41, var43, 0, (japa.parser.ast.expr.Expression)var76);
    var28.setEndColumn(var43);
    japa.parser.Token var93 = japa.parser.Token.newToken(var43);
    java.lang.Object var94 = var93.getValue();
    java.lang.String var95 = var93.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);

  }

  public void test14() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.type.ClassOrInterfaceType var23 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var23, "");
    java.lang.String var87 = var86.getName();
    japa.parser.ast.type.ClassOrInterfaceType var88 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var89 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var91 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.MethodDeclaration var92 = new japa.parser.ast.body.MethodDeclaration(0, (japa.parser.ast.type.Type)var86, "hi!");
    int var93 = var92.getBeginLine();
    int var94 = var92.getModifiers();
    int var95 = var92.getArrayCount();
    java.util.List var96 = var92.getThrows();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);

  }

  public void test15() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    japa.parser.ast.expr.NameExpr var4 = new japa.parser.ast.expr.NameExpr();
    int var5 = var4.getBeginLine();
    japa.parser.Token var6 = japa.parser.Token.newToken(var5);
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var25 = var24.getMembers();
    int var26 = var24.getModifiers();
    var24.setInterface(true);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.Token var45 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var46 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var47 = var46.getExtends();
    boolean var48 = var46.isInterface();
    var24.setInterface(var48);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.Token var66 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var67 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var68 = var67.getExtends();
    java.util.List var69 = var67.getMembers();
    java.util.List var70 = var67.getTypeParameters();
    java.lang.String var71 = var67.getName();
    japa.parser.ast.body.ClassOrInterfaceDeclaration var72 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(var5, var48, var71);
    var0.setStatic(var48);
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.Token var82 = new japa.parser.Token((-1), "");
    japa.parser.ast.expr.NameExpr var83 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var84 = new japa.parser.ast.PackageDeclaration(var83);
    japa.parser.ast.expr.NameExpr var85 = var84.getName();
    java.lang.String var86 = var85.getName();
    var0.setName(var85);
    japa.parser.ast.stmt.ReturnStmt var88 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + ""+ "'", var86.equals(""));

  }

  public void test16() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    int var19 = var17.getModifiers();
    var17.setInterface(true);
    java.util.List var22 = var17.getImplements();
    japa.parser.ast.ImportDeclaration var23 = new japa.parser.ast.ImportDeclaration();
    var23.setStatic(false);
    japa.parser.ast.expr.NameExpr var26 = var23.getName();
    japa.parser.ast.expr.NameExpr var27 = var23.getName();
    japa.parser.ast.type.PrimitiveType var28 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.body.Parameter var36 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var28, var33);
    japa.parser.ast.type.Type var37 = var36.getType();
    japa.parser.ast.type.PrimitiveType var38 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.Parameter var46 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var38, var43);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    int var54 = var52.getModifiers();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator(var43, (japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.VariableDeclaratorId var56 = var55.getId();
    var36.setId(var56);
    japa.parser.ast.type.PrimitiveType var58 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.Parameter var66 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var58, var63);
    japa.parser.ast.type.ReferenceType var68 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var58, 0);
    int var69 = var68.getArrayCount();
    int var70 = var68.getArrayCount();
    japa.parser.Token var71 = japa.parser.Token.newToken(var70);
    var36.setModifiers(var70);
    japa.parser.ast.type.PrimitiveType var73 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.ast.body.Parameter var81 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var73, var78);
    japa.parser.ast.type.ReferenceType var83 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var73, 0);
    int var84 = var83.getArrayCount();
    int var85 = var83.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var86 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var87 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var83, var86);
    japa.parser.ast.type.Type var88 = var83.getType();
    var36.setType((japa.parser.ast.type.Type)var83);
    boolean var90 = var36.isVarArgs();
    var23.setAsterisk(var90);
    var17.setInterface(var90);
    java.util.List var93 = var17.getTypeParameters();
    java.util.List var94 = var17.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);

  }

  public void test17() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    java.lang.String var4 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.Token var13 = new japa.parser.Token((-1), "");
    java.lang.String var14 = var13.toString();
    japa.parser.ast.type.ClassOrInterfaceType var15 = new japa.parser.ast.type.ClassOrInterfaceType(var14);
    int var16 = var15.getEndColumn();
    var0.setArrayCount(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test18() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    java.util.List var36 = var17.getImplements();
    java.util.List var37 = var17.getImplements();
    java.util.List var38 = var17.getTypeParameters();
    java.util.List var39 = var17.getTypeParameters();
    java.util.List var40 = var17.getImplements();
    int var41 = var17.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test19() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    japa.parser.ast.type.Type var23 = var8.getType();
    boolean var24 = var8.isVarArgs();
    java.util.List var25 = var8.getAnnotations();
    int var26 = var8.getModifiers();
    int var27 = var8.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    java.lang.String var37 = var36.toString();
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId(var37);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var57 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var61 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var61.setExpression((japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var68, (japa.parser.ast.expr.Expression)var69);
    var61.setExpression((japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator(var38, (japa.parser.ast.expr.Expression)var69);
    int var73 = var38.getArrayCount();
    var8.setId(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test20() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var24 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var22, (japa.parser.ast.expr.Expression)var23);
    japa.parser.Token var26 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var27 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var31 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    var31.setExpression((japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.type.PrimitiveType var40 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.Parameter var48 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var40, var45);
    japa.parser.ast.type.Type var49 = var48.getType();
    var37.setType(var49);
    java.util.List var51 = var37.getAnnotations();
    japa.parser.ast.stmt.ReturnStmt var52 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var37);
    var5.setData((java.lang.Object)var52);
    japa.parser.ast.expr.Expression var54 = var52.getExpr();
    japa.parser.ast.expr.Expression var55 = var52.getExpr();
    japa.parser.ast.expr.Expression var56 = var52.getExpr();
    japa.parser.ast.expr.Expression var57 = var52.getExpr();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);

  }

  public void test21() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    java.util.List var4 = var0.getTypeParameters();
    var0.setName("hi!");
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var25 = var24.getExtends();
    java.util.List var26 = var24.getExtends();
    japa.parser.ast.stmt.ReturnStmt var27 = new japa.parser.ast.stmt.ReturnStmt();
    int var28 = var27.getEndLine();
    var24.setModifiers(var28);
    var0.setArrayCount(var28);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    var0.setModifiers((-1));
    int var39 = var0.getModifiers();
    int var40 = var0.getEndColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test22() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.ImportDeclaration var22 = new japa.parser.ast.ImportDeclaration();
    var22.setStatic(false);
    var8.setVarArgs(false);
    japa.parser.ast.type.PrimitiveType var26 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.Parameter var34 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var26, var31);
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    var34.setId(var40);
    var8.setId(var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = var8.getId();
    java.util.List var47 = var8.getAnnotations();
    java.util.List var48 = var8.getAnnotations();
    japa.parser.ast.body.MethodDeclaration var49 = new japa.parser.ast.body.MethodDeclaration();
    int var50 = var49.getModifiers();
    japa.parser.ast.type.PrimitiveType var51 = new japa.parser.ast.type.PrimitiveType();
    var49.setType((japa.parser.ast.type.Type)var51);
    int var53 = var49.getBeginColumn();
    int var54 = var49.getBeginColumn();
    var8.setBeginLine(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);

  }

  public void test23() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getExtends();
    java.util.List var20 = var17.getImplements();
    java.util.List var21 = var17.getExtends();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    var17.setModifiers(0);
    japa.parser.ast.body.JavadocComment var34 = var17.getJavaDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test24() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    var0.setBody(var6);
    japa.parser.ast.type.Type var9 = var0.getType();
    japa.parser.ast.type.Type var10 = var0.getType();
    japa.parser.ast.body.MethodDeclaration var11 = new japa.parser.ast.body.MethodDeclaration();
    int var12 = var11.getModifiers();
    japa.parser.ast.stmt.BlockStmt var13 = new japa.parser.ast.stmt.BlockStmt();
    var11.setBody(var13);
    japa.parser.ast.stmt.BlockStmt var15 = new japa.parser.ast.stmt.BlockStmt();
    var11.setBody(var15);
    java.util.List var17 = var15.getStmts();
    java.util.List var18 = var15.getStmts();
    var0.setBody(var15);
    japa.parser.ast.stmt.BlockStmt var20 = var0.getBody();
    japa.parser.ast.type.PrimitiveType var21 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.Parameter var29 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var21, var26);
    japa.parser.ast.type.ReferenceType var31 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var21, 0);
    int var32 = var31.getArrayCount();
    int var33 = var31.getArrayCount();
    var0.setArrayCount(var33);
    japa.parser.ast.type.Type var35 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test25() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    japa.parser.ast.type.PrimitiveType var13 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.Parameter var21 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var13, var18);
    japa.parser.ast.type.ReferenceType var23 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var13, 0);
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    var23.setType((japa.parser.ast.type.Type)var24);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.PrimitiveType var45 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var46 = var45.getType();
    var44.setType((japa.parser.ast.type.Type)var45);
    var23.setType((japa.parser.ast.type.Type)var45);
    japa.parser.ast.type.Type var49 = var23.getType();
    int var50 = var23.getArrayCount();
    var12.setType((japa.parser.ast.type.Type)var23);
    japa.parser.ast.stmt.TryStmt var52 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var53 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var54 = var53.getType();
    java.lang.String var55 = var53.getName();
    japa.parser.ast.type.PrimitiveType var56 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.body.Parameter var64 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var56, var61);
    japa.parser.ast.type.ReferenceType var66 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var56, 0);
    japa.parser.Token var67 = new japa.parser.Token(0);
    var53.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var69 = new japa.parser.ast.body.MethodDeclaration();
    int var70 = var69.getModifiers();
    japa.parser.ast.stmt.BlockStmt var71 = new japa.parser.ast.stmt.BlockStmt();
    var69.setBody(var71);
    japa.parser.ast.stmt.BlockStmt var73 = new japa.parser.ast.stmt.BlockStmt();
    var69.setBody(var73);
    var53.setBody(var73);
    var52.setFinallyBlock(var73);
    japa.parser.ast.stmt.BlockStmt var77 = var52.getTryBlock();
    japa.parser.ast.type.PrimitiveType var78 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var83, (japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.body.Parameter var86 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var78, var83);
    japa.parser.ast.body.MethodDeclaration var87 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var88 = var87.getType();
    java.lang.String var89 = var87.getName();
    int var90 = var87.getModifiers();
    japa.parser.ast.type.ReferenceType var91 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var78, var90);
    japa.parser.Token var92 = new japa.parser.Token(var90);
    var52.setEndLine(var90);
    var12.setArrayCount(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test26() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.Token var19 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var20 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var24 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    var24.setExpression((japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.type.PrimitiveType var33 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.Parameter var41 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var33, var38);
    japa.parser.ast.type.Type var42 = var41.getType();
    var30.setType(var42);
    japa.parser.ast.stmt.ReturnStmt var44 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.Token var62 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var63 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var67 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    var67.setExpression((japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.stmt.ReturnStmt var76 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.ImportDeclaration var77 = new japa.parser.ast.ImportDeclaration();
    var77.setStatic(false);
    boolean var80 = var77.isAsterisk();
    var77.setStatic(false);
    japa.parser.ast.expr.NameExpr var83 = new japa.parser.ast.expr.NameExpr();
    int var84 = var83.getBeginLine();
    var77.setName(var83);
    var76.setExpr((japa.parser.ast.expr.Expression)var83);
    var44.setExpr((japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.PackageDeclaration var88 = new japa.parser.ast.PackageDeclaration(var83);
    var0.setPackage(var88);
    java.util.List var90 = var0.getTypes();
    java.util.List var91 = var0.getTypes();
    java.util.List var92 = var0.getComments();
    java.util.List var93 = var0.getComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);

  }

  public void test27() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var3 = var2.getStmts();
    var0.setFinallyBlock(var2);
    java.util.List var5 = var0.getCatchs();
    java.util.List var6 = var0.getCatchs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test28() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var9 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    var14.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    var40.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.Type var58 = var57.getType();
    var46.setType(var58);
    japa.parser.ast.stmt.ReturnStmt var60 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt(1, var11, var13, 0, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var63 = japa.parser.Token.newToken(var13, "");
    japa.parser.ast.type.ClassOrInterfaceType var64 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "");
    java.lang.String var65 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var66 = var64.getScope();
    java.lang.String var67 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var68 = var64.getScope();
    japa.parser.ast.type.ReferenceType var69 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var68);
    java.lang.String var70 = var68.getName();
    japa.parser.ast.body.VariableDeclaratorId var71 = new japa.parser.ast.body.VariableDeclaratorId(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));

  }

  public void test29() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var1 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var2 = var1.getType();
    java.lang.String var3 = var1.getName();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.Token var15 = new japa.parser.Token(0);
    var1.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    japa.parser.ast.stmt.BlockStmt var19 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var19);
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var21);
    var1.setBody(var21);
    var0.setFinallyBlock(var21);
    japa.parser.ast.stmt.BlockStmt var25 = var0.getFinallyBlock();
    japa.parser.ast.body.MethodDeclaration var26 = new japa.parser.ast.body.MethodDeclaration();
    int var27 = var26.getModifiers();
    japa.parser.ast.stmt.BlockStmt var28 = new japa.parser.ast.stmt.BlockStmt();
    var26.setBody(var28);
    var0.setTryBlock(var28);
    japa.parser.ast.stmt.BlockStmt var31 = var0.getTryBlock();
    java.util.List var32 = var0.getCatchs();
    japa.parser.ast.stmt.TryStmt var33 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    japa.parser.ast.stmt.BlockStmt var36 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var36);
    japa.parser.ast.stmt.BlockStmt var38 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var38);
    java.util.List var40 = var38.getStmts();
    var33.setFinallyBlock(var38);
    var0.setTryBlock(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);

  }

  public void test30() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getBody();
    java.util.List var4 = var0.getThrows();
    japa.parser.ast.expr.NameExpr var5 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var6 = new japa.parser.ast.ImportDeclaration();
    var6.setStatic(false);
    var6.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.Token var27 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var28 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var29 = var28.getExtends();
    boolean var30 = var28.isInterface();
    japa.parser.ast.ImportDeclaration var31 = new japa.parser.ast.ImportDeclaration(var5, false, var30);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var34 = var33.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator(var33, (japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.body.MethodDeclaration var37 = new japa.parser.ast.body.MethodDeclaration();
    int var38 = var37.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var57 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var61 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var60);
    japa.parser.Token var63 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var69 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var71 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var69, (japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    japa.parser.Token var81 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var82 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var85 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var86 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var85);
    japa.parser.ast.body.VariableDeclaratorId var88 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var89 = new japa.parser.ast.LineComment(var38, 0, 0, 1, "");
    int var90 = var89.getEndColumn();
    var89.setContent("hi!");
    var33.setName("hi!");
    var5.setName("hi!");
    japa.parser.ast.LineComment var95 = new japa.parser.ast.LineComment("hi!");
    java.lang.String var96 = var95.getContent();
    var0.setName(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "hi!"+ "'", var96.equals("hi!"));

  }

  public void test31() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getMembers();
    java.util.List var33 = var30.getTypeParameters();
    int var34 = var30.getBeginColumn();
    var12.setArrayCount(var34);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36, 0);
    int var47 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter(var34, (japa.parser.ast.type.Type)var46, var52);
    japa.parser.ast.type.Type var56 = var46.getType();
    japa.parser.ast.type.ReferenceType var57 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46);
    int var58 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    int var66 = var63.getEndColumn();
    japa.parser.ast.body.Parameter var67 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var46, var63);
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.type.Type var75 = var73.getType();
    java.util.List var76 = var73.getAnnotations();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator(var63, (japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.type.Type var78 = var73.getType();
    japa.parser.ast.body.MethodDeclaration var79 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var80 = var79.getType();
    java.lang.String var81 = var79.getName();
    japa.parser.ast.type.Type var82 = var79.getType();
    japa.parser.ast.stmt.BlockStmt var83 = var79.getBody();
    int var84 = var79.getArrayCount();
    java.util.List var85 = var79.getThrows();
    int var86 = var79.getArrayCount();
    var73.setModifiers(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);

  }

  public void test32() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    var22.setExpression((japa.parser.ast.expr.Expression)var30);
    java.util.List var33 = var30.getAnnotations();
    japa.parser.ast.type.Type var34 = var30.getType();
    int var35 = var30.getModifiers();
    japa.parser.ast.type.Type var36 = var30.getType();
    java.util.List var37 = var30.getVars();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);

  }

  public void test33() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    japa.parser.ast.type.ClassOrInterfaceType var3 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.Token var11 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var14 = new japa.parser.ast.stmt.ReturnStmt();
    int var15 = var14.getEndLine();
    japa.parser.ast.body.MethodDeclaration var16 = new japa.parser.ast.body.MethodDeclaration();
    int var17 = var16.getModifiers();
    var16.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.Token var37 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var38 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var42 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    var42.setExpression((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.type.PrimitiveType var51 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.ast.body.Parameter var59 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var51, var56);
    japa.parser.ast.type.Type var60 = var59.getType();
    var48.setType(var60);
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.stmt.ReturnStmt var63 = new japa.parser.ast.stmt.ReturnStmt(1, var13, var15, 0, (japa.parser.ast.expr.Expression)var48);
    japa.parser.Token var65 = japa.parser.Token.newToken(var15, "");
    japa.parser.ast.type.ClassOrInterfaceType var66 = new japa.parser.ast.type.ClassOrInterfaceType(var3, "");
    java.lang.String var67 = var66.getName();
    var0.setName(var67);
    japa.parser.ast.stmt.BlockStmt var69 = var0.getBody();
    java.util.List var70 = var0.getParameters();
    int var71 = var0.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test34() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    java.util.List var4 = var0.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var27 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var26);
    var0.setModifiers(0);
    java.util.List var29 = var0.getThrows();
    int var30 = var0.getEndColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test35() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getMembers();
    java.util.List var33 = var30.getTypeParameters();
    int var34 = var30.getBeginColumn();
    var12.setArrayCount(var34);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36, 0);
    int var47 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter(var34, (japa.parser.ast.type.Type)var46, var52);
    japa.parser.ast.type.Type var56 = var46.getType();
    japa.parser.ast.type.ReferenceType var57 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46);
    int var58 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    int var66 = var63.getEndColumn();
    japa.parser.ast.body.Parameter var67 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var46, var63);
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.type.Type var75 = var73.getType();
    java.util.List var76 = var73.getAnnotations();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator(var63, (japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.type.Type var78 = var73.getType();
    int var79 = var73.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);

  }

  public void test36() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var45 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var45.setExpression((japa.parser.ast.expr.Expression)var46);
    int var48 = var45.getBeginLine();
    japa.parser.ast.expr.Expression var49 = var45.getExpression();
    var22.setExpression(var49);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.type.Type var58 = var56.getType();
    var22.setExpression((japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.type.PrimitiveType var60 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.Parameter var68 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var65);
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var70 = var69.getType();
    var68.setType((japa.parser.ast.type.Type)var69);
    boolean var72 = var68.isVarArgs();
    japa.parser.ast.ImportDeclaration var73 = new japa.parser.ast.ImportDeclaration();
    var73.setStatic(false);
    boolean var76 = var73.isAsterisk();
    var73.setStatic(false);
    japa.parser.ast.expr.NameExpr var79 = new japa.parser.ast.expr.NameExpr();
    int var80 = var79.getBeginLine();
    var73.setName(var79);
    boolean var82 = var73.isAsterisk();
    var68.setVarArgs(var82);
    japa.parser.ast.body.VariableDeclaratorId var84 = var68.getId();
    int var85 = var68.getBeginLine();
    var22.setBeginLine(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);

  }

  public void test37() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var10 = var8.getId();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator(var10);
    japa.parser.ast.type.PrimitiveType var12 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.Parameter var20 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var12, var17);
    java.util.List var21 = var20.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var22 = var20.getId();
    japa.parser.ast.body.Parameter var23 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    var23.setEndColumn((-1));
    var22.setEndColumn((-1));
    java.lang.String var33 = var22.getName();
    var11.setId(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);

  }

  public void test38() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getExtends();
    java.util.List var20 = var17.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var23 = var22.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator(var22, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.Token var34 = new japa.parser.Token((-1), "");
    java.lang.String var35 = var34.toString();
    var22.setName(var35);
    int var37 = var22.getEndColumn();
    var17.setModifiers(var37);
    java.util.List var39 = var17.getImplements();
    java.util.List var40 = var17.getImplements();
    java.util.List var41 = var17.getImplements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);

  }

  public void test39() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.body.MethodDeclaration var1 = new japa.parser.ast.body.MethodDeclaration();
    int var2 = var1.getModifiers();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    int var4 = var3.getModifiers();
    japa.parser.ast.stmt.BlockStmt var5 = new japa.parser.ast.stmt.BlockStmt();
    var3.setBody(var5);
    japa.parser.ast.stmt.BlockStmt var7 = new japa.parser.ast.stmt.BlockStmt();
    var3.setBody(var7);
    int var9 = var3.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var10 = var3.getBody();
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var33 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var32);
    var3.setArrayCount(1);
    japa.parser.ast.body.MethodDeclaration var35 = new japa.parser.ast.body.MethodDeclaration();
    int var36 = var35.getModifiers();
    var35.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.expr.NameExpr var46 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var47 = new japa.parser.ast.ImportDeclaration();
    var47.setStatic(false);
    boolean var50 = var47.isAsterisk();
    boolean var51 = var47.isStatic();
    japa.parser.ast.ImportDeclaration var52 = new japa.parser.ast.ImportDeclaration();
    var52.setStatic(false);
    boolean var55 = var52.isAsterisk();
    var52.setStatic(false);
    japa.parser.ast.expr.NameExpr var58 = new japa.parser.ast.expr.NameExpr();
    int var59 = var58.getBeginLine();
    var52.setName(var58);
    boolean var61 = var52.isAsterisk();
    japa.parser.ast.ImportDeclaration var62 = new japa.parser.ast.ImportDeclaration(var2, 1, 0, (-1), var46, var51, var61);
    japa.parser.ast.ImportDeclaration var63 = new japa.parser.ast.ImportDeclaration();
    var63.setStatic(false);
    boolean var66 = var63.isAsterisk();
    var63.setStatic(false);
    japa.parser.ast.expr.NameExpr var69 = new japa.parser.ast.expr.NameExpr();
    int var70 = var69.getBeginLine();
    var63.setName(var69);
    japa.parser.ast.stmt.ReturnStmt var72 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var69);
    java.lang.String var73 = var69.getName();
    var62.setName(var69);
    boolean var75 = var62.isStatic();
    var0.setAsterisk(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test40() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var5 = var4.getName();
    japa.parser.ast.type.PrimitiveType var6 = new japa.parser.ast.type.PrimitiveType();
    int var7 = var6.getEndLine();
    var4.setArrayCount(var7);
    var0.setArrayCount(var7);
    japa.parser.ast.type.Type var10 = var0.getType();
    java.util.List var11 = var0.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test41() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.Token var19 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var20 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var24 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var23);
    japa.parser.Token var26 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.Token var44 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var45 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var49 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var52 = new japa.parser.ast.LineComment(var1, 0, 0, 1, "");
    int var53 = var52.getEndColumn();
    var52.setContent("hi!");
    japa.parser.ast.body.MethodDeclaration var56 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var57 = var56.getType();
    java.lang.String var58 = var56.getName();
    japa.parser.ast.type.Type var59 = var56.getType();
    japa.parser.ast.stmt.BlockStmt var60 = var56.getBody();
    int var61 = var56.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var66 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var68 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var66, (japa.parser.ast.expr.Expression)var67);
    japa.parser.Token var70 = new japa.parser.Token((-1), "");
    java.lang.String var71 = var70.toString();
    japa.parser.Token var72 = new japa.parser.Token(var61, var71);
    var52.setContent(var71);
    japa.parser.ast.expr.NameExpr var74 = new japa.parser.ast.expr.NameExpr(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));

  }

  public void test42() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.Token var12 = new japa.parser.Token((-1), "");
    japa.parser.Token var13 = japa.parser.Token.newToken((-1));
    var0.setBeginLine((-1));
    japa.parser.ast.type.PrimitiveType var15 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.Parameter var23 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var15, var20);
    japa.parser.ast.type.ReferenceType var25 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var15, 0);
    int var26 = var15.getBeginLine();
    japa.parser.ast.type.ReferenceType var27 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var15);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.Token var44 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var45 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var46 = var45.getExtends();
    java.util.List var47 = var45.getMembers();
    java.util.List var48 = var45.getTypeParameters();
    int var49 = var45.getBeginColumn();
    var27.setArrayCount(var49);
    var0.setModifiers(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test43() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var1 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var2 = var1.getType();
    java.lang.String var3 = var1.getName();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.Token var15 = new japa.parser.Token(0);
    var1.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    japa.parser.ast.stmt.BlockStmt var19 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var19);
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var21);
    var1.setBody(var21);
    var0.setFinallyBlock(var21);
    japa.parser.ast.stmt.BlockStmt var25 = var0.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var26 = var0.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var27 = var0.getTryBlock();
    java.util.List var28 = var0.getCatchs();
    japa.parser.ast.stmt.TryStmt var29 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var30 = var29.getCatchs();
    japa.parser.ast.stmt.BlockStmt var31 = var29.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var32 = new japa.parser.ast.body.MethodDeclaration();
    int var33 = var32.getModifiers();
    japa.parser.ast.stmt.BlockStmt var34 = new japa.parser.ast.stmt.BlockStmt();
    var32.setBody(var34);
    japa.parser.ast.stmt.BlockStmt var36 = new japa.parser.ast.stmt.BlockStmt();
    var32.setBody(var36);
    int var38 = var32.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var39 = var32.getBody();
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    var32.setArrayCount(1);
    japa.parser.ast.stmt.BlockStmt var64 = var32.getBody();
    java.util.List var65 = var64.getStmts();
    var29.setTryBlock(var64);
    var0.setTryBlock(var64);
    java.util.List var68 = var64.getStmts();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);

  }

  public void test44() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    int var16 = var14.getModifiers();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator(var5, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var24 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var22, (japa.parser.ast.expr.Expression)var23);
    int var25 = var23.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var26 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var27 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var28 = var27.getType();
    var23.setData((java.lang.Object)var27);
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator(var5, (japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.ReferenceType var41 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var31, 0);
    int var42 = var41.getArrayCount();
    int var43 = var41.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var45 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var41, var44);
    int var46 = var45.getBeginColumn();
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    var45.setId(var52);
    japa.parser.ast.expr.NameExpr var57 = new japa.parser.ast.expr.NameExpr();
    int var58 = var57.getBeginLine();
    var52.setArrayCount(var58);
    var30.setId(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test45() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    japa.parser.ast.expr.NameExpr var35 = var2.getName();
    java.util.List var36 = var2.getAnnotations();
    japa.parser.ast.ImportDeclaration var37 = new japa.parser.ast.ImportDeclaration();
    var37.setStatic(false);
    boolean var40 = var37.isAsterisk();
    var37.setStatic(false);
    japa.parser.ast.expr.NameExpr var43 = new japa.parser.ast.expr.NameExpr();
    int var44 = var43.getBeginLine();
    var37.setName(var43);
    japa.parser.ast.ImportDeclaration var46 = new japa.parser.ast.ImportDeclaration();
    var46.setStatic(false);
    var46.setAsterisk(false);
    japa.parser.ast.ImportDeclaration var51 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var52 = new japa.parser.ast.ImportDeclaration();
    var52.setStatic(false);
    boolean var55 = var52.isStatic();
    var51.setStatic(var55);
    japa.parser.ast.ImportDeclaration var57 = new japa.parser.ast.ImportDeclaration(var43, false, var55);
    japa.parser.ast.PackageDeclaration var58 = new japa.parser.ast.PackageDeclaration(var43);
    var2.setName(var43);
    java.util.List var60 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var61 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);

  }

  public void test46() throws Throwable {

    japa.parser.ast.expr.NameExpr var0 = new japa.parser.ast.expr.NameExpr();
    int var1 = var0.getBeginLine();
    japa.parser.ast.stmt.ExpressionStmt var2 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var0);
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var12 = var11.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator(var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    int var21 = var19.getModifiers();
    japa.parser.ast.body.MethodDeclaration var22 = new japa.parser.ast.body.MethodDeclaration();
    int var23 = var22.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.Token var41 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var42 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var46 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var45);
    japa.parser.Token var48 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.Token var66 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var67 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var71 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var74 = new japa.parser.ast.LineComment(var23, 0, 0, 1, "");
    var19.setModifiers(0);
    var13.setInit((japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator(var7, (japa.parser.ast.expr.Expression)var19);
    var2.setExpression((japa.parser.ast.expr.Expression)var19);
    int var79 = var19.getModifiers();
    java.util.List var80 = var19.getVars();
    japa.parser.ast.type.Type var81 = var19.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == null);

  }

  public void test47() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var4);
    int var6 = var0.getArrayCount();
    japa.parser.ast.type.ClassOrInterfaceType var8 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var16 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var17 = new japa.parser.ast.stmt.ReturnStmt();
    int var18 = var17.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var19 = new japa.parser.ast.stmt.ReturnStmt();
    int var20 = var19.getEndLine();
    japa.parser.ast.body.MethodDeclaration var21 = new japa.parser.ast.body.MethodDeclaration();
    int var22 = var21.getModifiers();
    var21.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    var47.setExpression((japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.type.PrimitiveType var56 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.body.Parameter var64 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var56, var61);
    japa.parser.ast.type.Type var65 = var64.getType();
    var53.setType(var65);
    japa.parser.ast.stmt.ReturnStmt var67 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.stmt.ReturnStmt var68 = new japa.parser.ast.stmt.ReturnStmt(1, var18, var20, 0, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var70 = japa.parser.Token.newToken(var20, "");
    japa.parser.ast.type.ClassOrInterfaceType var71 = new japa.parser.ast.type.ClassOrInterfaceType(var8, "");
    java.lang.String var72 = var71.getName();
    japa.parser.ast.type.ClassOrInterfaceType var73 = var71.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var74 = var71.getScope();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter(var6, (japa.parser.ast.type.Type)var71, var76);
    java.lang.String var78 = var76.getName();
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var83, (japa.parser.ast.expr.Expression)var84);
    japa.parser.Token var87 = new japa.parser.Token((-1), "");
    japa.parser.ast.expr.NameExpr var88 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var89 = new japa.parser.ast.PackageDeclaration(var88);
    japa.parser.ast.expr.NameExpr var90 = var89.getName();
    java.lang.String var91 = var90.getName();
    japa.parser.ast.body.VariableDeclarator var92 = new japa.parser.ast.body.VariableDeclarator(var76, (japa.parser.ast.expr.Expression)var90);
    japa.parser.ast.body.VariableDeclaratorId var93 = var92.getId();
    japa.parser.ast.expr.Expression var94 = var92.getInit();
    java.lang.Object var95 = var92.getData();
    japa.parser.ast.body.VariableDeclaratorId var96 = var92.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);

  }

  public void test48() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    japa.parser.ast.expr.NameExpr var35 = var2.getName();
    japa.parser.ast.expr.NameExpr var36 = var2.getName();
    japa.parser.ast.expr.NameExpr var37 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);

  }

  public void test49() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var28 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var29 = new japa.parser.ast.stmt.ReturnStmt();
    int var30 = var29.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var31 = new japa.parser.ast.stmt.ReturnStmt();
    int var32 = var31.getEndLine();
    japa.parser.ast.body.MethodDeclaration var33 = new japa.parser.ast.body.MethodDeclaration();
    int var34 = var33.getModifiers();
    var33.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var54 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var55 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var59 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var58);
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    var59.setExpression((japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.type.PrimitiveType var68 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var74 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var75 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var73, (japa.parser.ast.expr.Expression)var74);
    japa.parser.ast.body.Parameter var76 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var68, var73);
    japa.parser.ast.type.Type var77 = var76.getType();
    var65.setType(var77);
    japa.parser.ast.stmt.ReturnStmt var79 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.stmt.ReturnStmt var80 = new japa.parser.ast.stmt.ReturnStmt(1, var30, var32, 0, (japa.parser.ast.expr.Expression)var65);
    var17.setModifiers(var30);
    japa.parser.ast.body.MethodDeclaration var82 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var83 = var82.getType();
    java.lang.String var84 = var82.getName();
    int var85 = var82.getModifiers();
    japa.parser.Token var87 = japa.parser.Token.newToken(var85, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var88 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.Token var89 = japa.parser.Token.newToken(var30, "hi!");
    japa.parser.Token var90 = new japa.parser.Token(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);

  }

  public void test50() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    java.util.List var23 = var8.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var24 = var8.getId();
    int var25 = var24.getArrayCount();
    java.lang.String var26 = var24.getName();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    var24.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);

  }

  public void test51() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    java.util.List var5 = var3.getAnnotations();
    int var6 = var3.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    int var14 = var12.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.type.PrimitiveType var16 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var17 = var16.getType();
    var12.setData((java.lang.Object)var16);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var23.getEndColumn();
    japa.parser.ast.body.Parameter var27 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var16, var23);
    japa.parser.ast.type.PrimitiveType.Primitive var28 = var16.getType();
    japa.parser.ast.type.ReferenceType var29 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var16);
    var3.setType((japa.parser.ast.type.Type)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);

  }

  public void test52() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator(var15, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var28 = var27.getId();
    var8.setId(var28);
    japa.parser.ast.type.PrimitiveType var30 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var30, var35);
    japa.parser.ast.type.ReferenceType var40 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var30, 0);
    int var41 = var40.getArrayCount();
    int var42 = var40.getArrayCount();
    japa.parser.Token var43 = japa.parser.Token.newToken(var42);
    var8.setModifiers(var42);
    japa.parser.ast.type.PrimitiveType var45 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.body.Parameter var53 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var45, var50);
    japa.parser.ast.type.ReferenceType var55 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var45, 0);
    int var56 = var55.getArrayCount();
    int var57 = var55.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var59 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var55, var58);
    japa.parser.ast.type.Type var60 = var55.getType();
    var8.setType((japa.parser.ast.type.Type)var55);
    japa.parser.ast.type.PrimitiveType var62 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.body.Parameter var70 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var62, var67);
    japa.parser.ast.type.ReferenceType var72 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var62, 0);
    int var73 = var72.getArrayCount();
    int var74 = var72.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var76 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var72, var75);
    var8.setType((japa.parser.ast.type.Type)var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);

  }

  public void test53() throws Throwable {

    japa.parser.ast.expr.NameExpr var0 = new japa.parser.ast.expr.NameExpr();
    int var1 = var0.getBeginLine();
    japa.parser.Token var2 = japa.parser.Token.newToken(var1);
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.Token var19 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var20 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var21 = var20.getMembers();
    int var22 = var20.getModifiers();
    var20.setInterface(true);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.Token var41 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var42 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var43 = var42.getExtends();
    boolean var44 = var42.isInterface();
    var20.setInterface(var44);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.Token var62 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var63 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var64 = var63.getExtends();
    java.util.List var65 = var63.getMembers();
    java.util.List var66 = var63.getTypeParameters();
    java.lang.String var67 = var63.getName();
    japa.parser.ast.body.ClassOrInterfaceDeclaration var68 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(var1, var44, var67);
    boolean var69 = var68.isInterface();
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var83, (japa.parser.ast.expr.Expression)var84);
    japa.parser.Token var87 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var88 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var91 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var92 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var91);
    var68.setBeginLine(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test54() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.ast.type.PrimitiveType var21 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.Parameter var29 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var21, var26);
    japa.parser.ast.type.ReferenceType var31 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var21, 0);
    japa.parser.ast.type.PrimitiveType var32 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.Parameter var40 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var32, var37);
    japa.parser.ast.type.ReferenceType var42 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var32, 0);
    var31.setType((japa.parser.ast.type.Type)var32);
    japa.parser.ast.type.PrimitiveType var44 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var51 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var49, (japa.parser.ast.expr.Expression)var50);
    japa.parser.ast.body.Parameter var52 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var44, var49);
    japa.parser.ast.type.PrimitiveType var53 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var54 = var53.getType();
    var52.setType((japa.parser.ast.type.Type)var53);
    var31.setType((japa.parser.ast.type.Type)var53);
    int var57 = var31.getArrayCount();
    var17.setModifiers(var57);
    japa.parser.ast.type.PrimitiveType var59 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.body.Parameter var67 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var59, var64);
    japa.parser.ast.type.Type var68 = var67.getType();
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var74);
    japa.parser.ast.type.ReferenceType var79 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var69, 0);
    var67.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var81 = var67.getId();
    java.util.List var82 = var67.getAnnotations();
    boolean var83 = var67.isVarArgs();
    var17.setInterface(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test55() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    var23.setEndColumn(0);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.ReferenceType var59 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var49, 0);
    japa.parser.ast.type.PrimitiveType var60 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.Parameter var68 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var65);
    japa.parser.ast.type.ReferenceType var70 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var60, 0);
    var59.setType((japa.parser.ast.type.Type)var60);
    japa.parser.ast.type.PrimitiveType var72 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.body.Parameter var80 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var72, var77);
    japa.parser.ast.type.PrimitiveType var81 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var82 = var81.getType();
    var80.setType((japa.parser.ast.type.Type)var81);
    var59.setType((japa.parser.ast.type.Type)var81);
    int var85 = var59.getArrayCount();
    int var86 = var59.getArrayCount();
    var23.setModifiers(var86);
    japa.parser.ast.stmt.ExpressionStmt var88 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.stmt.ExpressionStmt var89 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.Type var90 = var23.getType();
    japa.parser.ast.type.Type var91 = var23.getType();
    int var92 = var23.getEndLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test56() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getMembers();
    java.util.List var33 = var30.getTypeParameters();
    int var34 = var30.getBeginColumn();
    var12.setArrayCount(var34);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36, 0);
    int var47 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter(var34, (japa.parser.ast.type.Type)var46, var52);
    japa.parser.ast.type.Type var56 = var46.getType();
    japa.parser.ast.type.ReferenceType var57 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46);
    int var58 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    int var66 = var63.getEndColumn();
    japa.parser.ast.body.Parameter var67 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var46, var63);
    japa.parser.ast.type.Type var68 = var46.getType();
    japa.parser.ast.body.Parameter var69 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var70 = var69.getId();
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    int var78 = var75.getArrayCount();
    var69.setId(var75);
    java.lang.String var80 = var75.getName();
    int var81 = var75.getArrayCount();
    japa.parser.ast.type.ReferenceType var82 = new japa.parser.ast.type.ReferenceType(var68, var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);

  }

  public void test57() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var11 = var10.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator(var10, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.Token var58 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var59 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var63 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var66 = new japa.parser.ast.LineComment(var15, 0, 0, 1, "");
    int var67 = var66.getEndColumn();
    var66.setContent("hi!");
    var10.setName("hi!");
    japa.parser.Token var71 = new japa.parser.Token(1, "hi!");
    japa.parser.ast.expr.NameExpr var72 = new japa.parser.ast.expr.NameExpr("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var73 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "hi!");
    japa.parser.ast.expr.NameExpr var74 = new japa.parser.ast.expr.NameExpr("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);

  }

  public void test58() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    java.util.List var4 = var0.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.Token var12 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var13 = new japa.parser.ast.stmt.ReturnStmt();
    int var14 = var13.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt();
    int var16 = var15.getEndLine();
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    var17.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var43 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var43.setExpression((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.type.PrimitiveType var52 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var57 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var59 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var57, (japa.parser.ast.expr.Expression)var58);
    japa.parser.ast.body.Parameter var60 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var52, var57);
    japa.parser.ast.type.Type var61 = var60.getType();
    var49.setType(var61);
    japa.parser.ast.stmt.ReturnStmt var63 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.stmt.ReturnStmt var64 = new japa.parser.ast.stmt.ReturnStmt(1, var14, var16, 0, (japa.parser.ast.expr.Expression)var49);
    japa.parser.Token var65 = japa.parser.Token.newToken(0);
    var0.setBeginColumn(0);
    int var67 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var68 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var74 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var75 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var73, (japa.parser.ast.expr.Expression)var74);
    japa.parser.ast.body.Parameter var76 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var68, var73);
    japa.parser.ast.type.PrimitiveType var77 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var82 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var83 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var84 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var82, (japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.body.Parameter var85 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var77, var82);
    var76.setId(var82);
    japa.parser.ast.type.Type var87 = var76.getType();
    var0.setType(var87);
    java.util.List var89 = var0.getTypeParameters();
    japa.parser.ast.stmt.BlockStmt var90 = var0.getBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);

  }

  public void test59() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var8 = new japa.parser.Token((-1), "");
    java.lang.String var9 = var8.toString();
    japa.parser.ast.type.ClassOrInterfaceType var10 = new japa.parser.ast.type.ClassOrInterfaceType(var9);
    japa.parser.ast.type.PrimitiveType var11 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.Parameter var19 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var11, var16);
    java.util.List var20 = var19.getAnnotations();
    java.util.List var21 = var19.getAnnotations();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    int var33 = var22.getBeginLine();
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22);
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.Token var51 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var52 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var53 = var52.getExtends();
    java.util.List var54 = var52.getMembers();
    java.util.List var55 = var52.getTypeParameters();
    int var56 = var52.getBeginColumn();
    var34.setArrayCount(var56);
    japa.parser.ast.type.PrimitiveType var58 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.Parameter var66 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var58, var63);
    japa.parser.ast.type.ReferenceType var68 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var58, 0);
    int var69 = var68.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter(var56, (japa.parser.ast.type.Type)var68, var74);
    japa.parser.ast.type.ReferenceType var79 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var68, 1);
    japa.parser.ast.type.PrimitiveType var80 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var85 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var87 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var85, (japa.parser.ast.expr.Expression)var86);
    japa.parser.ast.body.Parameter var88 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var80, var85);
    japa.parser.ast.type.ReferenceType var90 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var80, 0);
    int var91 = var90.getArrayCount();
    int var92 = var90.getArrayCount();
    japa.parser.ast.type.ReferenceType var93 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var68, var92);
    var19.setType((japa.parser.ast.type.Type)var68);
    japa.parser.ast.body.MethodDeclaration var95 = new japa.parser.ast.body.MethodDeclaration();
    int var96 = var95.getModifiers();
    var19.setModifiers(var96);
    japa.parser.ast.type.ReferenceType var98 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, var96);
    int var99 = var98.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 0);

  }

  public void test60() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getExtends();
    japa.parser.ast.stmt.ReturnStmt var20 = new japa.parser.ast.stmt.ReturnStmt();
    int var21 = var20.getEndLine();
    var17.setModifiers(var21);
    java.util.List var23 = var17.getTypeParameters();
    int var24 = var17.getModifiers();
    java.lang.String var25 = var17.getName();
    java.util.List var26 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);

  }

  public void test61() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    java.util.List var2 = var1.getTypeArgs();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    int var4 = var3.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var27 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var47 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var48 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var52 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var55 = new japa.parser.ast.LineComment(var4, 0, 0, 1, "");
    japa.parser.ast.type.ClassOrInterfaceType var56 = new japa.parser.ast.type.ClassOrInterfaceType("");
    java.util.List var57 = var56.getTypeArgs();
    var1.setScope(var56);
    japa.parser.ast.type.ReferenceType var59 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var56);
    int var60 = var59.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test62() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var8.setType((japa.parser.ast.type.Type)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.Token var19 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var20 = new japa.parser.ast.stmt.ReturnStmt();
    int var21 = var20.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var22 = new japa.parser.ast.stmt.ReturnStmt();
    int var23 = var22.getEndLine();
    japa.parser.ast.body.MethodDeclaration var24 = new japa.parser.ast.body.MethodDeclaration();
    int var25 = var24.getModifiers();
    var24.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.Token var45 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var46 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var50 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    var50.setExpression((japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.type.PrimitiveType var59 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.body.Parameter var67 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var59, var64);
    japa.parser.ast.type.Type var68 = var67.getType();
    var56.setType(var68);
    japa.parser.ast.stmt.ReturnStmt var70 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.stmt.ReturnStmt var71 = new japa.parser.ast.stmt.ReturnStmt(1, var21, var23, 0, (japa.parser.ast.expr.Expression)var56);
    var8.setEndLine(1);
    japa.parser.ast.body.VariableDeclaratorId var73 = var8.getId();
    japa.parser.ast.body.VariableDeclaratorId var74 = var8.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);

  }

  public void test63() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.body.MethodDeclaration var9 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var10 = var9.getType();
    java.lang.String var11 = var9.getName();
    int var12 = var9.getModifiers();
    japa.parser.ast.type.ReferenceType var13 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, var12);
    japa.parser.ast.type.PrimitiveType var14 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.Parameter var22 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var14, var19);
    japa.parser.ast.type.ReferenceType var24 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var14, 0);
    int var25 = var24.getArrayCount();
    int var26 = var24.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var27);
    var27.setBeginColumn((-1));
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.ReferenceType var41 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var31, 0);
    int var42 = var31.getBeginLine();
    japa.parser.ast.type.ReferenceType var43 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var31);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var62 = var61.getExtends();
    java.util.List var63 = var61.getMembers();
    java.util.List var64 = var61.getTypeParameters();
    int var65 = var61.getBeginColumn();
    var43.setArrayCount(var65);
    japa.parser.ast.type.PrimitiveType var67 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.body.Parameter var75 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var67, var72);
    japa.parser.ast.type.ReferenceType var77 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var67, 0);
    int var78 = var77.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var83, (japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.body.Parameter var86 = new japa.parser.ast.body.Parameter(var65, (japa.parser.ast.type.Type)var77, var83);
    int var87 = var83.getEndLine();
    var27.setData((java.lang.Object)var87);
    java.lang.String var89 = var27.getName();
    japa.parser.ast.body.Parameter var90 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var27);
    boolean var91 = var90.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test64() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    java.util.List var4 = var0.getThrows();
    int var5 = var0.getArrayCount();
    japa.parser.ast.type.PrimitiveType var6 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var6, var11);
    japa.parser.ast.type.PrimitiveType var15 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var16 = var15.getType();
    var14.setType((japa.parser.ast.type.Type)var15);
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var24 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var22, (japa.parser.ast.expr.Expression)var23);
    japa.parser.Token var25 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var26 = new japa.parser.ast.stmt.ReturnStmt();
    int var27 = var26.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var28 = new japa.parser.ast.stmt.ReturnStmt();
    int var29 = var28.getEndLine();
    japa.parser.ast.body.MethodDeclaration var30 = new japa.parser.ast.body.MethodDeclaration();
    int var31 = var30.getModifiers();
    var30.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.Token var51 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var52 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var56 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    var56.setExpression((japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.type.PrimitiveType var65 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.Parameter var73 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var65, var70);
    japa.parser.ast.type.Type var74 = var73.getType();
    var62.setType(var74);
    japa.parser.ast.stmt.ReturnStmt var76 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.stmt.ReturnStmt var77 = new japa.parser.ast.stmt.ReturnStmt(1, var27, var29, 0, (japa.parser.ast.expr.Expression)var62);
    var14.setEndLine(1);
    var0.setArrayCount(1);
    japa.parser.ast.type.Type var80 = var0.getType();
    java.lang.String var81 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == null);

  }

  public void test65() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    japa.parser.ast.expr.NameExpr var4 = var0.getName();
    boolean var5 = var0.isAsterisk();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var28 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    var28.setExpression((japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.stmt.ReturnStmt var37 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.ImportDeclaration var38 = new japa.parser.ast.ImportDeclaration();
    var38.setStatic(false);
    boolean var41 = var38.isAsterisk();
    var38.setStatic(false);
    japa.parser.ast.expr.NameExpr var44 = new japa.parser.ast.expr.NameExpr();
    int var45 = var44.getBeginLine();
    var38.setName(var44);
    var37.setExpr((japa.parser.ast.expr.Expression)var44);
    var0.setName(var44);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.Token var65 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var66 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var67 = var66.getExtends();
    boolean var68 = var66.isInterface();
    boolean var69 = var66.isInterface();
    var0.setStatic(var69);
    japa.parser.ast.ImportDeclaration var71 = new japa.parser.ast.ImportDeclaration();
    var71.setStatic(false);
    boolean var74 = var71.isAsterisk();
    var71.setStatic(false);
    boolean var77 = var71.isStatic();
    boolean var78 = var71.isStatic();
    boolean var79 = var71.isAsterisk();
    boolean var80 = var71.isAsterisk();
    var0.setStatic(var80);
    japa.parser.ast.expr.NameExpr var82 = var0.getName();
    japa.parser.ast.body.MethodDeclaration var83 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var84 = var83.getType();
    java.lang.String var85 = var83.getName();
    japa.parser.ast.type.Type var86 = var83.getType();
    japa.parser.ast.stmt.BlockStmt var87 = var83.getBody();
    int var88 = var83.getArrayCount();
    int var89 = var83.getArrayCount();
    japa.parser.ast.body.JavadocComment var90 = var83.getJavaDoc();
    int var91 = var83.getModifiers();
    var82.setBeginLine(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);

  }

  public void test66() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var9 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    var14.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    var40.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.Type var58 = var57.getType();
    var46.setType(var58);
    japa.parser.ast.stmt.ReturnStmt var60 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt(1, var11, var13, 0, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var63 = japa.parser.Token.newToken(var13, "");
    japa.parser.ast.type.ClassOrInterfaceType var64 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "");
    japa.parser.ast.type.ClassOrInterfaceType var65 = var1.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var66 = var1.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test67() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    java.util.List var35 = var0.getImports();
    java.util.List var36 = var0.getImports();
    japa.parser.ast.PackageDeclaration var37 = var0.getPackage();
    japa.parser.ast.expr.NameExpr var38 = var37.getName();
    japa.parser.ast.expr.NameExpr var39 = var37.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);

  }

  public void test68() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var10.getArrayCount();
    int var12 = var10.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var13);
    var13.setBeginColumn((-1));
    int var17 = var13.getBeginLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test69() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var1 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var2 = var1.getType();
    java.lang.String var3 = var1.getName();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.Token var15 = new japa.parser.Token(0);
    var1.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    japa.parser.ast.stmt.BlockStmt var19 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var19);
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var21);
    var1.setBody(var21);
    var0.setFinallyBlock(var21);
    japa.parser.ast.stmt.BlockStmt var25 = var0.getTryBlock();
    japa.parser.ast.type.PrimitiveType var26 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.Parameter var34 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var26, var31);
    japa.parser.ast.body.MethodDeclaration var35 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var36 = var35.getType();
    java.lang.String var37 = var35.getName();
    int var38 = var35.getModifiers();
    japa.parser.ast.type.ReferenceType var39 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var26, var38);
    japa.parser.Token var40 = new japa.parser.Token(var38);
    var0.setEndLine(var38);
    japa.parser.ast.stmt.TryStmt var42 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var43 = new japa.parser.ast.body.MethodDeclaration();
    int var44 = var43.getModifiers();
    japa.parser.ast.stmt.BlockStmt var45 = new japa.parser.ast.stmt.BlockStmt();
    var43.setBody(var45);
    japa.parser.ast.stmt.BlockStmt var47 = new japa.parser.ast.stmt.BlockStmt();
    var43.setBody(var47);
    java.util.List var49 = var47.getStmts();
    var42.setFinallyBlock(var47);
    var0.setTryBlock(var47);
    japa.parser.ast.stmt.BlockStmt var52 = var0.getFinallyBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);

  }

  public void test70() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.body.MethodDeclaration var2 = new japa.parser.ast.body.MethodDeclaration();
    int var3 = var2.getModifiers();
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var4);
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var6);
    int var8 = var2.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var9 = var2.getBody();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.Token var27 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var28 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var32 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var31);
    var2.setArrayCount(1);
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    var34.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.expr.NameExpr var45 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var46 = new japa.parser.ast.ImportDeclaration();
    var46.setStatic(false);
    boolean var49 = var46.isAsterisk();
    boolean var50 = var46.isStatic();
    japa.parser.ast.ImportDeclaration var51 = new japa.parser.ast.ImportDeclaration();
    var51.setStatic(false);
    boolean var54 = var51.isAsterisk();
    var51.setStatic(false);
    japa.parser.ast.expr.NameExpr var57 = new japa.parser.ast.expr.NameExpr();
    int var58 = var57.getBeginLine();
    var51.setName(var57);
    boolean var60 = var51.isAsterisk();
    japa.parser.ast.ImportDeclaration var61 = new japa.parser.ast.ImportDeclaration(var1, 1, 0, (-1), var45, var50, var60);
    japa.parser.ast.ImportDeclaration var62 = new japa.parser.ast.ImportDeclaration();
    var62.setStatic(false);
    boolean var65 = var62.isAsterisk();
    var62.setStatic(false);
    japa.parser.ast.expr.NameExpr var68 = new japa.parser.ast.expr.NameExpr();
    int var69 = var68.getBeginLine();
    var62.setName(var68);
    japa.parser.ast.stmt.ReturnStmt var71 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    java.lang.String var72 = var68.getName();
    var61.setName(var68);
    boolean var74 = var61.isStatic();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.expr.NameExpr var77 = new japa.parser.ast.expr.NameExpr("");
    java.lang.String var78 = var77.getName();
    japa.parser.ast.PackageDeclaration var79 = new japa.parser.ast.PackageDeclaration(var77);
    var61.setName(var77);
    int var81 = var61.getEndLine();
    boolean var82 = var61.isStatic();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test71() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isStatic();
    japa.parser.ast.ImportDeclaration var4 = new japa.parser.ast.ImportDeclaration();
    var4.setStatic(false);
    boolean var7 = var4.isAsterisk();
    var4.setStatic(false);
    boolean var10 = var4.isStatic();
    var0.setAsterisk(var10);
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    japa.parser.ast.stmt.BlockStmt var16 = new japa.parser.ast.stmt.BlockStmt();
    var14.setBody(var16);
    japa.parser.ast.stmt.BlockStmt var18 = new japa.parser.ast.stmt.BlockStmt();
    var14.setBody(var18);
    int var20 = var14.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var21 = var14.getBody();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.Token var39 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var40 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var44 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var43);
    var14.setArrayCount(1);
    japa.parser.ast.body.MethodDeclaration var46 = new japa.parser.ast.body.MethodDeclaration();
    int var47 = var46.getModifiers();
    var46.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.expr.NameExpr var57 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var58 = new japa.parser.ast.ImportDeclaration();
    var58.setStatic(false);
    boolean var61 = var58.isAsterisk();
    boolean var62 = var58.isStatic();
    japa.parser.ast.ImportDeclaration var63 = new japa.parser.ast.ImportDeclaration();
    var63.setStatic(false);
    boolean var66 = var63.isAsterisk();
    var63.setStatic(false);
    japa.parser.ast.expr.NameExpr var69 = new japa.parser.ast.expr.NameExpr();
    int var70 = var69.getBeginLine();
    var63.setName(var69);
    boolean var72 = var63.isAsterisk();
    japa.parser.ast.ImportDeclaration var73 = new japa.parser.ast.ImportDeclaration(var13, 1, 0, (-1), var57, var62, var72);
    var0.setStatic(var72);
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.expr.NameExpr var77 = new japa.parser.ast.expr.NameExpr("");
    java.lang.String var78 = var77.getName();
    japa.parser.ast.PackageDeclaration var79 = new japa.parser.ast.PackageDeclaration(var77);
    japa.parser.ast.expr.NameExpr var80 = var79.getName();
    var0.setName(var80);
    japa.parser.ast.PackageDeclaration var82 = new japa.parser.ast.PackageDeclaration(var80);
    japa.parser.ast.stmt.ExpressionStmt var83 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);

  }

  public void test72() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var11 = var10.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator(var10, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.Token var58 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var59 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var63 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var66 = new japa.parser.ast.LineComment(var15, 0, 0, 1, "");
    int var67 = var66.getEndColumn();
    var66.setContent("hi!");
    var10.setName("hi!");
    japa.parser.Token var71 = new japa.parser.Token(1, "hi!");
    japa.parser.ast.expr.NameExpr var72 = new japa.parser.ast.expr.NameExpr("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var73 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var74 = var73.getScope();
    japa.parser.ast.body.MethodDeclaration var75 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var76 = var75.getType();
    java.lang.String var77 = var75.getName();
    int var78 = var75.getModifiers();
    japa.parser.Token var80 = japa.parser.Token.newToken(var78, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var81 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var82 = new japa.parser.ast.type.ClassOrInterfaceType(var74, "hi!");
    java.util.List var83 = var82.getTypeArgs();
    japa.parser.ast.type.ClassOrInterfaceType var84 = var82.getScope();
    java.util.List var85 = var82.getTypeArgs();
    japa.parser.ast.type.ClassOrInterfaceType var86 = var82.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var87 = var86.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);

  }

  public void test73() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    japa.parser.ast.body.VariableDeclaratorId var5 = var4.getId();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var28 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var28.setExpression((japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.Token var48 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var49 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var53 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var52);
    var29.setEndColumn(0);
    japa.parser.ast.type.PrimitiveType var55 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.Parameter var63 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var55, var60);
    japa.parser.ast.type.ReferenceType var65 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var55, 0);
    japa.parser.ast.type.PrimitiveType var66 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var71 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var72 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var73 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var71, (japa.parser.ast.expr.Expression)var72);
    japa.parser.ast.body.Parameter var74 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var66, var71);
    japa.parser.ast.type.ReferenceType var76 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var66, 0);
    var65.setType((japa.parser.ast.type.Type)var66);
    japa.parser.ast.type.PrimitiveType var78 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var83, (japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.body.Parameter var86 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var78, var83);
    japa.parser.ast.type.PrimitiveType var87 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var88 = var87.getType();
    var86.setType((japa.parser.ast.type.Type)var87);
    var65.setType((japa.parser.ast.type.Type)var87);
    int var91 = var65.getArrayCount();
    int var92 = var65.getArrayCount();
    var29.setModifiers(var92);
    japa.parser.ast.stmt.ExpressionStmt var94 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.expr.Expression var95 = var94.getExpression();
    japa.parser.ast.body.VariableDeclarator var96 = new japa.parser.ast.body.VariableDeclarator(var5, var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);

  }

  public void test74() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var3 = var2.getStmts();
    var0.setFinallyBlock(var2);
    japa.parser.ast.stmt.BlockStmt var5 = var0.getFinallyBlock();
    japa.parser.ast.body.MethodDeclaration var6 = new japa.parser.ast.body.MethodDeclaration();
    int var7 = var6.getModifiers();
    japa.parser.ast.stmt.BlockStmt var8 = new japa.parser.ast.stmt.BlockStmt();
    var6.setBody(var8);
    japa.parser.ast.stmt.BlockStmt var10 = new japa.parser.ast.stmt.BlockStmt();
    var6.setBody(var10);
    int var12 = var6.getArrayCount();
    java.lang.String var13 = var6.getName();
    java.util.List var14 = var6.getThrows();
    japa.parser.ast.body.MethodDeclaration var15 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var16 = var15.getType();
    java.lang.String var17 = var15.getName();
    int var18 = var15.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var20 = var19.getName();
    japa.parser.ast.type.PrimitiveType var21 = new japa.parser.ast.type.PrimitiveType();
    int var22 = var21.getEndLine();
    var19.setArrayCount(var22);
    var15.setArrayCount(var22);
    var6.setModifiers(var22);
    japa.parser.ast.stmt.TryStmt var26 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var27 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var28 = var27.getType();
    java.lang.String var29 = var27.getName();
    japa.parser.ast.type.PrimitiveType var30 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var30, var35);
    japa.parser.ast.type.ReferenceType var40 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var30, 0);
    japa.parser.Token var41 = new japa.parser.Token(0);
    var27.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var43 = new japa.parser.ast.body.MethodDeclaration();
    int var44 = var43.getModifiers();
    japa.parser.ast.stmt.BlockStmt var45 = new japa.parser.ast.stmt.BlockStmt();
    var43.setBody(var45);
    japa.parser.ast.stmt.BlockStmt var47 = new japa.parser.ast.stmt.BlockStmt();
    var43.setBody(var47);
    var27.setBody(var47);
    var26.setFinallyBlock(var47);
    var6.setBody(var47);
    var0.setFinallyBlock(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test75() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    int var5 = var0.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.Token var14 = new japa.parser.Token((-1), "");
    java.lang.String var15 = var14.toString();
    japa.parser.Token var16 = new japa.parser.Token(var5, var15);
    japa.parser.ast.type.ClassOrInterfaceType var17 = new japa.parser.ast.type.ClassOrInterfaceType(var15);
    japa.parser.ast.type.PrimitiveType var18 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.Parameter var26 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var18, var23);
    java.util.List var27 = var26.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var28 = var26.getId();
    int var29 = var26.getModifiers();
    japa.parser.ast.body.MethodDeclaration var30 = new japa.parser.ast.body.MethodDeclaration();
    int var31 = var30.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var49 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var50 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var54 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.Token var74 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var75 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var79 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.body.VariableDeclaratorId var81 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var82 = new japa.parser.ast.LineComment(var31, 0, 0, 1, "");
    japa.parser.ast.type.ClassOrInterfaceType var83 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.Token var84 = japa.parser.Token.newToken(var29, "");
    var17.setName("");
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.LineComment var87 = new japa.parser.ast.LineComment("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);

  }

  public void test76() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    japa.parser.Token var37 = japa.parser.Token.newToken(var35);
    japa.parser.Token var38 = new japa.parser.Token(var35);
    java.lang.Object var39 = var38.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test77() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    var8.setId(var14);
    int var19 = var14.getArrayCount();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var21 = var20.getType();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.Token var30 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.MethodDeclaration var31 = new japa.parser.ast.body.MethodDeclaration(var19, (japa.parser.ast.type.Type)var20, "");
    japa.parser.ast.body.JavadocComment var32 = var31.getJavaDoc();
    japa.parser.ast.type.ReferenceType var33 = new japa.parser.ast.type.ReferenceType();
    int var34 = var33.getArrayCount();
    int var35 = var33.getBeginColumn();
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36, 0);
    int var47 = var36.getBeginLine();
    japa.parser.ast.type.ReferenceType var48 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.Token var65 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var66 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var67 = var66.getExtends();
    java.util.List var68 = var66.getMembers();
    java.util.List var69 = var66.getTypeParameters();
    int var70 = var66.getBeginColumn();
    var48.setArrayCount(var70);
    japa.parser.ast.type.PrimitiveType var72 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.body.Parameter var80 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var72, var77);
    japa.parser.ast.type.ReferenceType var82 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var72, 0);
    int var83 = var82.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var88 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var89 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var90 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var88, (japa.parser.ast.expr.Expression)var89);
    japa.parser.ast.body.Parameter var91 = new japa.parser.ast.body.Parameter(var70, (japa.parser.ast.type.Type)var82, var88);
    int var92 = var88.getEndLine();
    var33.setArrayCount(var92);
    var31.setType((japa.parser.ast.type.Type)var33);
    java.lang.String var95 = var31.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + ""+ "'", var95.equals(""));

  }

  public void test78() throws Throwable {

    japa.parser.ast.LineComment var0 = new japa.parser.ast.LineComment();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    int var8 = var6.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var9 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    var6.setModifiers((-1));
    var0.setBeginColumn((-1));
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.stmt.BlockStmt var22 = var19.getBody();
    boolean var23 = var0.equals((java.lang.Object)var19);
    int var24 = var19.getArrayCount();
    japa.parser.ast.body.JavadocComment var25 = var19.getJavaDoc();
    int var26 = var19.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.Token var36 = japa.parser.Token.newToken(var26, "");
    japa.parser.ast.type.ClassOrInterfaceType var37 = new japa.parser.ast.type.ClassOrInterfaceType("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test79() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.body.MethodDeclaration var8 = new japa.parser.ast.body.MethodDeclaration();
    int var9 = var8.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.Token var27 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var28 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var32 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var31);
    japa.parser.Token var34 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.Token var52 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var53 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var57 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var60 = new japa.parser.ast.LineComment(var9, 0, 0, 1, "");
    var5.setModifiers(0);
    java.util.List var62 = var5.getAnnotations();
    japa.parser.ast.stmt.ExpressionStmt var63 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);

  }

  public void test80() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    java.lang.Object var13 = var0.getData();
    japa.parser.ast.type.PrimitiveType.Primitive var14 = var0.getType();
    japa.parser.ast.type.PrimitiveType var15 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.Parameter var23 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var15, var20);
    japa.parser.ast.type.Type var24 = var23.getType();
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    int var41 = var39.getModifiers();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator(var30, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var43 = var42.getId();
    var23.setId(var43);
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator(var43);
    japa.parser.ast.body.Parameter var46 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var43);
    japa.parser.ast.type.PrimitiveType.Primitive var47 = var0.getType();
    int var48 = var0.getBeginColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);

  }

  public void test81() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    var0.setStatic(false);
    boolean var6 = var0.isStatic();
    boolean var7 = var0.isStatic();
    boolean var8 = var0.isAsterisk();
    boolean var9 = var0.isAsterisk();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    int var21 = var20.getArrayCount();
    int var22 = var20.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var24 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var23);
    int var25 = var24.getBeginColumn();
    japa.parser.ast.CompilationUnit var26 = new japa.parser.ast.CompilationUnit();
    java.util.List var27 = var26.getComments();
    japa.parser.ast.PackageDeclaration var28 = new japa.parser.ast.PackageDeclaration();
    java.util.List var29 = var28.getAnnotations();
    japa.parser.ast.expr.NameExpr var30 = var28.getName();
    java.util.List var31 = var28.getAnnotations();
    japa.parser.ast.expr.NameExpr var32 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var33 = new japa.parser.ast.ImportDeclaration();
    var33.setStatic(false);
    var33.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var54 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var55 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var56 = var55.getExtends();
    boolean var57 = var55.isInterface();
    japa.parser.ast.ImportDeclaration var58 = new japa.parser.ast.ImportDeclaration(var32, false, var57);
    var28.setName(var32);
    var26.setPackage(var28);
    japa.parser.ast.expr.NameExpr var61 = var28.getName();
    japa.parser.ast.ImportDeclaration var62 = new japa.parser.ast.ImportDeclaration();
    var62.setStatic(false);
    boolean var65 = var62.isStatic();
    boolean var66 = var62.isAsterisk();
    japa.parser.ast.expr.NameExpr var67 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var68 = new japa.parser.ast.ImportDeclaration();
    var68.setStatic(false);
    var68.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.body.VariableDeclaratorId var85 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var87 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var85, (japa.parser.ast.expr.Expression)var86);
    japa.parser.Token var89 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var90 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var91 = var90.getExtends();
    boolean var92 = var90.isInterface();
    japa.parser.ast.ImportDeclaration var93 = new japa.parser.ast.ImportDeclaration(var67, false, var92);
    japa.parser.ast.ImportDeclaration var94 = new japa.parser.ast.ImportDeclaration(var61, var66, false);
    var24.setVarArgs(var66);
    var0.setStatic(var66);
    boolean var97 = var0.isStatic();
    boolean var98 = var0.isStatic();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test82() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    japa.parser.ast.expr.NameExpr var3 = var0.getName();
    japa.parser.ast.expr.NameExpr var4 = var0.getName();
    japa.parser.ast.expr.NameExpr var5 = var0.getName();
    japa.parser.ast.ImportDeclaration var6 = new japa.parser.ast.ImportDeclaration();
    var6.setStatic(false);
    var6.setAsterisk(false);
    boolean var11 = var6.isStatic();
    var0.setAsterisk(var11);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getExtends();
    japa.parser.ast.stmt.ReturnStmt var33 = new japa.parser.ast.stmt.ReturnStmt();
    int var34 = var33.getEndLine();
    var30.setModifiers(var34);
    japa.parser.ast.ImportDeclaration var36 = new japa.parser.ast.ImportDeclaration();
    var36.setStatic(false);
    boolean var39 = var36.isStatic();
    japa.parser.ast.ImportDeclaration var40 = new japa.parser.ast.ImportDeclaration();
    var40.setStatic(false);
    boolean var43 = var40.isAsterisk();
    var40.setStatic(false);
    boolean var46 = var40.isStatic();
    var36.setAsterisk(var46);
    var30.setInterface(var46);
    var0.setAsterisk(var46);
    japa.parser.ast.expr.NameExpr var50 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);

  }

  public void test83() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var1 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var2 = var1.getType();
    java.lang.String var3 = var1.getName();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.Token var15 = new japa.parser.Token(0);
    var1.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    japa.parser.ast.stmt.BlockStmt var19 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var19);
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var21);
    var1.setBody(var21);
    var0.setFinallyBlock(var21);
    japa.parser.ast.stmt.BlockStmt var25 = var0.getTryBlock();
    japa.parser.ast.type.PrimitiveType var26 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.Parameter var34 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var26, var31);
    japa.parser.ast.body.MethodDeclaration var35 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var36 = var35.getType();
    java.lang.String var37 = var35.getName();
    int var38 = var35.getModifiers();
    japa.parser.ast.type.ReferenceType var39 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var26, var38);
    japa.parser.Token var40 = new japa.parser.Token(var38);
    var0.setEndLine(var38);
    japa.parser.ast.stmt.TryStmt var42 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var43 = new japa.parser.ast.body.MethodDeclaration();
    int var44 = var43.getModifiers();
    japa.parser.ast.stmt.BlockStmt var45 = new japa.parser.ast.stmt.BlockStmt();
    var43.setBody(var45);
    japa.parser.ast.stmt.BlockStmt var47 = new japa.parser.ast.stmt.BlockStmt();
    var43.setBody(var47);
    java.util.List var49 = var47.getStmts();
    var42.setFinallyBlock(var47);
    var0.setTryBlock(var47);
    int var52 = var0.getEndColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);

  }

  public void test84() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var5.setData((java.lang.Object)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    int var19 = var16.getEndColumn();
    japa.parser.ast.body.Parameter var20 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var16);
    int var21 = var16.getArrayCount();
    japa.parser.ast.body.MethodDeclaration var22 = new japa.parser.ast.body.MethodDeclaration();
    int var23 = var22.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.Token var41 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var42 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var46 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var45);
    japa.parser.Token var48 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.Token var66 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var67 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var71 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var74 = new japa.parser.ast.LineComment(var23, 0, 0, 1, "");
    japa.parser.ast.type.ClassOrInterfaceType var75 = new japa.parser.ast.type.ClassOrInterfaceType("");
    var16.setName("");
    japa.parser.ast.LineComment var77 = new japa.parser.ast.LineComment("");
    java.lang.Object var78 = var77.getData();
    java.lang.String var79 = var77.getContent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));

  }

  public void test85() throws Throwable {

    japa.parser.ast.LineComment var0 = new japa.parser.ast.LineComment();
    java.lang.String var1 = var0.getContent();
    int var2 = var0.getEndLine();
    java.lang.String var3 = var0.getContent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test86() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var7 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt();
    int var9 = var8.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    var12.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    var38.setExpression((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.Type var56 = var55.getType();
    var44.setType(var56);
    japa.parser.ast.stmt.ReturnStmt var58 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.stmt.ReturnStmt var59 = new japa.parser.ast.stmt.ReturnStmt(1, var9, var11, 0, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var61 = japa.parser.Token.newToken(var11, "");
    japa.parser.ast.expr.NameExpr var62 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var63 = new japa.parser.ast.PackageDeclaration(var62);
    japa.parser.ast.PackageDeclaration var64 = new japa.parser.ast.PackageDeclaration(var62);
    japa.parser.ast.expr.NameExpr var65 = var64.getName();
    java.lang.Object var66 = var64.getData();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test87() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    japa.parser.ast.body.VariableDeclaratorId var5 = var4.getId();
    japa.parser.ast.expr.Expression var6 = var4.getInit();
    japa.parser.ast.expr.Expression var7 = var4.getInit();
    int var8 = var4.getEndColumn();
    japa.parser.ast.expr.Expression var9 = var4.getInit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);

  }

  public void test88() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    java.util.List var4 = var0.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var27 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var26);
    var0.setModifiers(0);
    japa.parser.ast.type.Type var29 = var0.getType();
    int var30 = var0.getArrayCount();
    java.util.List var31 = var0.getTypeParameters();
    japa.parser.ast.type.Type var32 = var0.getType();
    java.util.List var33 = var0.getThrows();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);

  }

  public void test89() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    japa.parser.Token var37 = japa.parser.Token.newToken(var35);
    java.lang.Object var38 = var37.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test90() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    int var29 = var26.getEndColumn();
    var8.setId(var26);
    int var31 = var26.getEndColumn();
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var34 = var33.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator(var33, (japa.parser.ast.expr.Expression)var35);
    java.util.List var37 = var35.getAnnotations();
    int var38 = var35.getModifiers();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator(var26, (japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.ImportDeclaration var40 = new japa.parser.ast.ImportDeclaration();
    var40.setStatic(false);
    boolean var43 = var40.isAsterisk();
    var40.setStatic(false);
    japa.parser.ast.expr.NameExpr var46 = new japa.parser.ast.expr.NameExpr();
    int var47 = var46.getBeginLine();
    var40.setName(var46);
    japa.parser.ast.stmt.ReturnStmt var49 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    java.lang.Object var50 = var49.getData();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token((-1), "");
    java.lang.String var60 = var59.toString();
    japa.parser.ast.type.ClassOrInterfaceType var61 = new japa.parser.ast.type.ClassOrInterfaceType(var60);
    japa.parser.ast.expr.NameExpr var62 = new japa.parser.ast.expr.NameExpr(var60);
    var49.setExpr((japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.expr.Expression var64 = var49.getExpr();
    var39.setInit(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);

  }

  public void test91() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    var0.setStatic(false);
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    int var7 = var6.getBeginLine();
    var0.setName(var6);
    japa.parser.ast.stmt.ReturnStmt var9 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var6);
    java.lang.String var10 = var6.getName();
    java.lang.String var11 = var6.getName();
    japa.parser.ast.PackageDeclaration var12 = new japa.parser.ast.PackageDeclaration(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test92() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.Token var29 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var30 = new japa.parser.ast.stmt.ReturnStmt();
    int var31 = var30.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    var34.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.Token var55 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var56 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var60 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    var60.setExpression((japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var74);
    japa.parser.ast.type.Type var78 = var77.getType();
    var66.setType(var78);
    japa.parser.ast.stmt.ReturnStmt var80 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.stmt.ReturnStmt var81 = new japa.parser.ast.stmt.ReturnStmt(1, var31, var33, 0, (japa.parser.ast.expr.Expression)var66);
    japa.parser.Token var83 = japa.parser.Token.newToken(var33, "");
    var19.setName("");
    japa.parser.ast.LineComment var85 = new japa.parser.ast.LineComment("");
    var17.setName("");
    java.util.List var87 = var17.getMembers();
    java.util.List var88 = var17.getTypeParameters();
    java.util.List var89 = var17.getExtends();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);

  }

  public void test93() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    java.util.List var5 = var0.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var28 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var27);
    var0.setArrayCount(0);
    java.util.List var30 = var0.getThrows();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);

  }

  public void test94() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    japa.parser.ast.type.Type var23 = var8.getType();
    java.util.List var24 = var8.getAnnotations();
    japa.parser.ast.body.MethodDeclaration var25 = new japa.parser.ast.body.MethodDeclaration();
    int var26 = var25.getModifiers();
    japa.parser.ast.stmt.BlockStmt var27 = new japa.parser.ast.stmt.BlockStmt();
    var25.setBody(var27);
    java.util.List var29 = var25.getTypeParameters();
    int var30 = var25.getModifiers();
    var8.setModifiers(var30);
    japa.parser.Token var32 = new japa.parser.Token(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test95() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    japa.parser.ast.expr.NameExpr var35 = var2.getName();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.Token var44 = new japa.parser.Token((-1), "");
    java.lang.String var45 = var44.toString();
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId(var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.Token var64 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var65 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var69 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var69.setExpression((japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    var69.setExpression((japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator(var46, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.type.PrimitiveType var81 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var86 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var87 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var88 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var86, (japa.parser.ast.expr.Expression)var87);
    japa.parser.ast.body.Parameter var89 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var81, var86);
    japa.parser.ast.type.ReferenceType var91 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var81, 0);
    int var92 = var91.getArrayCount();
    int var93 = var91.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var94 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var95 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var91, var94);
    java.lang.Object var96 = var94.getData();
    var80.setId(var94);
    int var98 = var80.getBeginLine();
    var35.setEndColumn(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 0);

  }

  public void test96() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var7 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt();
    int var9 = var8.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    var12.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    var38.setExpression((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.Type var56 = var55.getType();
    var44.setType(var56);
    japa.parser.ast.stmt.ReturnStmt var58 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.stmt.ReturnStmt var59 = new japa.parser.ast.stmt.ReturnStmt(1, var9, var11, 0, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var61 = japa.parser.Token.newToken(var11, "");
    java.lang.String var62 = var61.toString();
    java.lang.Object var63 = var61.getValue();
    java.lang.Object var64 = var61.getValue();
    java.lang.String var65 = var61.toString();
    japa.parser.ast.expr.NameExpr var66 = new japa.parser.ast.expr.NameExpr(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));

  }

  public void test97() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var9 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    var14.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    var40.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.Type var58 = var57.getType();
    var46.setType(var58);
    japa.parser.ast.stmt.ReturnStmt var60 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt(1, var11, var13, 0, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var63 = japa.parser.Token.newToken(var13, "");
    japa.parser.ast.type.ClassOrInterfaceType var64 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "");
    java.lang.String var65 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var66 = var64.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var67 = var64.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType("");
    var64.setName("");
    japa.parser.ast.body.MethodDeclaration var71 = new japa.parser.ast.body.MethodDeclaration();
    int var72 = var71.getModifiers();
    japa.parser.ast.stmt.BlockStmt var73 = new japa.parser.ast.stmt.BlockStmt();
    var71.setBody(var73);
    java.util.List var75 = var71.getTypeParameters();
    int var76 = var71.getModifiers();
    int var77 = var71.getEndColumn();
    japa.parser.ast.type.ReferenceType var78 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var64, var77);
    java.lang.String var79 = var64.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));

  }

  public void test98() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var18 = new japa.parser.ast.ImportDeclaration();
    var18.setStatic(false);
    boolean var21 = var18.isAsterisk();
    var17.setInterface(var21);
    int var23 = var17.getBeginColumn();
    int var24 = var17.getModifiers();
    java.util.List var25 = var17.getExtends();
    java.util.List var26 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);

  }

  public void test99() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    japa.parser.ast.stmt.BlockStmt var5 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var5);
    japa.parser.ast.stmt.BlockStmt var7 = var0.getBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test100() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    japa.parser.ast.stmt.TryStmt var2 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var4 = var3.getType();
    java.lang.String var5 = var3.getName();
    japa.parser.ast.type.PrimitiveType var6 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var6, var11);
    japa.parser.ast.type.ReferenceType var16 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var6, 0);
    japa.parser.Token var17 = new japa.parser.Token(0);
    var3.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var21);
    japa.parser.ast.stmt.BlockStmt var23 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var23);
    var3.setBody(var23);
    var2.setFinallyBlock(var23);
    japa.parser.ast.stmt.BlockStmt var27 = var2.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var28 = var2.getFinallyBlock();
    var0.setFinallyBlock(var28);
    japa.parser.ast.body.MethodDeclaration var30 = new japa.parser.ast.body.MethodDeclaration();
    int var31 = var30.getModifiers();
    japa.parser.ast.stmt.BlockStmt var32 = new japa.parser.ast.stmt.BlockStmt();
    var30.setBody(var32);
    java.util.List var34 = var30.getTypeParameters();
    int var35 = var30.getModifiers();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    japa.parser.ast.stmt.BlockStmt var38 = new japa.parser.ast.stmt.BlockStmt();
    var36.setBody(var38);
    var30.setBody(var38);
    var0.setFinallyBlock(var38);
    japa.parser.ast.stmt.BlockStmt var42 = var0.getTryBlock();
    java.util.List var43 = var0.getCatchs();
    japa.parser.ast.body.MethodDeclaration var44 = new japa.parser.ast.body.MethodDeclaration();
    int var45 = var44.getModifiers();
    japa.parser.ast.stmt.BlockStmt var46 = new japa.parser.ast.stmt.BlockStmt();
    var44.setBody(var46);
    japa.parser.ast.stmt.BlockStmt var48 = new japa.parser.ast.stmt.BlockStmt();
    var44.setBody(var48);
    java.util.List var50 = var48.getStmts();
    java.util.List var51 = var48.getStmts();
    var0.setFinallyBlock(var48);
    java.util.List var53 = var48.getStmts();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);

  }

  public void test101() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.Type var19 = var18.getType();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.ReferenceType var30 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var20, 0);
    var18.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var32 = var18.getId();
    var8.setId(var32);
    japa.parser.ast.type.Type var34 = var8.getType();
    japa.parser.ast.LineComment var35 = new japa.parser.ast.LineComment();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    int var43 = var41.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var44 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var51 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var49, (japa.parser.ast.expr.Expression)var50);
    var41.setModifiers((-1));
    var35.setBeginColumn((-1));
    japa.parser.ast.body.MethodDeclaration var54 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var55 = var54.getType();
    java.lang.String var56 = var54.getName();
    japa.parser.ast.stmt.BlockStmt var57 = var54.getBody();
    boolean var58 = var35.equals((java.lang.Object)var54);
    int var59 = var54.getArrayCount();
    japa.parser.ast.body.JavadocComment var60 = var54.getJavaDoc();
    int var61 = var54.getArrayCount();
    var34.setBeginColumn(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);

  }

  public void test102() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    japa.parser.ast.ImportDeclaration var35 = new japa.parser.ast.ImportDeclaration();
    var35.setStatic(false);
    var35.setAsterisk(false);
    japa.parser.ast.expr.NameExpr var40 = new japa.parser.ast.expr.NameExpr();
    var35.setName(var40);
    japa.parser.ast.PackageDeclaration var42 = new japa.parser.ast.PackageDeclaration(var40);
    var0.setPackage(var42);
    japa.parser.ast.PackageDeclaration var44 = var0.getPackage();
    java.util.List var45 = var0.getImports();
    int var46 = var0.getBeginLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);

  }

  public void test103() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    japa.parser.ast.type.ClassOrInterfaceType var12 = new japa.parser.ast.type.ClassOrInterfaceType("");
    var10.setType((japa.parser.ast.type.Type)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var31 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var32 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var36 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var37 = japa.parser.Token.newToken(0);
    var10.setArrayCount(0);
    japa.parser.ast.type.PrimitiveType var39 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.Parameter var47 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var39, var44);
    japa.parser.ast.type.PrimitiveType var48 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var49 = var48.getType();
    var47.setType((japa.parser.ast.type.Type)var48);
    boolean var51 = var47.isVarArgs();
    japa.parser.ast.ImportDeclaration var52 = new japa.parser.ast.ImportDeclaration();
    var52.setStatic(false);
    boolean var55 = var52.isAsterisk();
    var52.setStatic(false);
    japa.parser.ast.expr.NameExpr var58 = new japa.parser.ast.expr.NameExpr();
    int var59 = var58.getBeginLine();
    var52.setName(var58);
    boolean var61 = var52.isAsterisk();
    var47.setVarArgs(var61);
    japa.parser.ast.body.VariableDeclaratorId var63 = var47.getId();
    japa.parser.ast.body.Parameter var64 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var63);
    japa.parser.ast.body.VariableDeclaratorId var65 = var64.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);

  }

  public void test104() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var1 = new japa.parser.ast.ImportDeclaration();
    var1.setStatic(false);
    boolean var4 = var1.isStatic();
    var0.setStatic(var4);
    boolean var6 = var0.isAsterisk();
    boolean var7 = var0.isStatic();
    japa.parser.ast.type.PrimitiveType var8 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.Parameter var16 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var8, var13);
    japa.parser.ast.type.PrimitiveType var17 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var18 = var17.getType();
    var16.setType((japa.parser.ast.type.Type)var17);
    boolean var20 = var16.isVarArgs();
    japa.parser.ast.ImportDeclaration var21 = new japa.parser.ast.ImportDeclaration();
    var21.setStatic(false);
    boolean var24 = var21.isAsterisk();
    var21.setStatic(false);
    japa.parser.ast.expr.NameExpr var27 = new japa.parser.ast.expr.NameExpr();
    int var28 = var27.getBeginLine();
    var21.setName(var27);
    boolean var30 = var21.isAsterisk();
    var16.setVarArgs(var30);
    japa.parser.ast.body.VariableDeclaratorId var32 = var16.getId();
    java.util.List var33 = var16.getAnnotations();
    boolean var34 = var16.isVarArgs();
    var0.setAsterisk(var34);
    boolean var36 = var0.isStatic();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test105() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var2 = new japa.parser.ast.body.MethodDeclaration();
    int var3 = var2.getModifiers();
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var4);
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var6);
    java.util.List var8 = var6.getStmts();
    var0.setTryBlock(var6);
    japa.parser.ast.stmt.BlockStmt var10 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var11 = var0.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var12 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var13 = new japa.parser.ast.body.MethodDeclaration();
    int var14 = var13.getModifiers();
    japa.parser.ast.stmt.BlockStmt var15 = new japa.parser.ast.stmt.BlockStmt();
    var13.setBody(var15);
    japa.parser.ast.stmt.BlockStmt var17 = new japa.parser.ast.stmt.BlockStmt();
    var13.setBody(var17);
    int var19 = var13.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var20 = var13.getBody();
    var0.setTryBlock(var20);
    java.util.List var22 = var0.getCatchs();
    japa.parser.ast.body.MethodDeclaration var23 = new japa.parser.ast.body.MethodDeclaration();
    int var24 = var23.getModifiers();
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    var23.setType((japa.parser.ast.type.Type)var25);
    java.util.List var27 = var23.getThrows();
    java.util.List var28 = var23.getAnnotations();
    int var29 = var23.getArrayCount();
    var0.setBeginColumn(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test106() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.type.PrimitiveType var23 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.Parameter var31 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var23, var28);
    japa.parser.ast.type.ReferenceType var33 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var23, 0);
    int var34 = var33.getArrayCount();
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    japa.parser.ast.type.PrimitiveType var44 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var51 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var49, (japa.parser.ast.expr.Expression)var50);
    japa.parser.ast.body.Parameter var52 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var44, var49);
    var43.setId(var49);
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    int var61 = var59.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.type.PrimitiveType var63 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var64 = var63.getType();
    var59.setData((java.lang.Object)var63);
    japa.parser.ast.type.PrimitiveType var66 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var71 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var72 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var73 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var71, (japa.parser.ast.expr.Expression)var72);
    japa.parser.ast.body.Parameter var74 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var66, var71);
    var59.setType((japa.parser.ast.type.Type)var66);
    var43.setType((japa.parser.ast.type.Type)var66);
    japa.parser.ast.type.Type var77 = var43.getType();
    var33.setType(var77);
    var21.setType((japa.parser.ast.type.Type)var33);
    japa.parser.ast.body.VariableDeclaratorId var84 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var85 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var86 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var84, (japa.parser.ast.expr.Expression)var85);
    japa.parser.ast.body.VariableDeclaratorId var87 = new japa.parser.ast.body.VariableDeclaratorId();
    int var88 = var87.getArrayCount();
    var86.setBeginColumn(var88);
    var33.setArrayCount(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test107() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    int var1 = var0.getArrayCount();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.Parameter var10 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var2, var7);
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var2, 0);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.Token var30 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var31 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var35 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var34);
    var12.setArrayCount(0);
    int var37 = var12.getArrayCount();
    japa.parser.ast.type.Type var38 = var12.getType();
    japa.parser.ast.type.PrimitiveType var39 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.Parameter var47 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var39, var44);
    japa.parser.ast.type.Type var48 = var47.getType();
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.ReferenceType var59 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var49, 0);
    var47.setModifiers(0);
    japa.parser.ast.ImportDeclaration var61 = new japa.parser.ast.ImportDeclaration();
    var61.setStatic(false);
    var47.setVarArgs(false);
    japa.parser.ast.type.PrimitiveType var65 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.Parameter var73 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var65, var70);
    japa.parser.ast.type.PrimitiveType var74 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.Parameter var82 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var74, var79);
    var73.setId(var79);
    var47.setId(var79);
    japa.parser.ast.body.VariableDeclaratorId var85 = var47.getId();
    int var86 = var85.getArrayCount();
    japa.parser.ast.body.Parameter var87 = new japa.parser.ast.body.Parameter(var1, var38, var85);
    boolean var88 = var87.isVarArgs();
    java.util.List var89 = var87.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var90 = var87.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);

  }

  public void test108() throws Throwable {

    japa.parser.ast.LineComment var0 = new japa.parser.ast.LineComment();
    java.lang.String var1 = var0.getContent();
    int var2 = var0.getEndColumn();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var4 = var3.getType();
    java.lang.String var5 = var3.getName();
    japa.parser.ast.type.Type var6 = var3.getType();
    japa.parser.ast.stmt.BlockStmt var7 = var3.getBody();
    int var8 = var3.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    java.lang.String var18 = var17.toString();
    japa.parser.Token var19 = new japa.parser.Token(var8, var18);
    japa.parser.ast.type.ClassOrInterfaceType var20 = new japa.parser.ast.type.ClassOrInterfaceType(var18);
    japa.parser.ast.type.ClassOrInterfaceType var22 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var30 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var31 = new japa.parser.ast.stmt.ReturnStmt();
    int var32 = var31.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var33 = new japa.parser.ast.stmt.ReturnStmt();
    int var34 = var33.getEndLine();
    japa.parser.ast.body.MethodDeclaration var35 = new japa.parser.ast.body.MethodDeclaration();
    int var36 = var35.getModifiers();
    var35.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var57 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var61 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.VariableDeclaratorId var66 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var68 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var66, (japa.parser.ast.expr.Expression)var67);
    var61.setExpression((japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.type.PrimitiveType var70 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.body.Parameter var78 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var70, var75);
    japa.parser.ast.type.Type var79 = var78.getType();
    var67.setType(var79);
    japa.parser.ast.stmt.ReturnStmt var81 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt(1, var32, var34, 0, (japa.parser.ast.expr.Expression)var67);
    japa.parser.Token var84 = japa.parser.Token.newToken(var34, "");
    japa.parser.ast.type.ClassOrInterfaceType var85 = new japa.parser.ast.type.ClassOrInterfaceType(var22, "");
    java.util.List var86 = var22.getTypeArgs();
    var20.setScope(var22);
    java.lang.String var88 = var20.getName();
    var0.setContent(var88);
    java.lang.String var90 = var0.getContent();
    japa.parser.ast.type.ClassOrInterfaceType var91 = new japa.parser.ast.type.ClassOrInterfaceType(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + ""+ "'", var90.equals(""));

  }

  public void test109() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    int var37 = var17.getModifiers();
    java.util.List var38 = var17.getMembers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test110() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    java.util.List var5 = var3.getAnnotations();
    java.util.List var6 = var3.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test111() throws Throwable {

    japa.parser.ast.stmt.ExpressionStmt var0 = new japa.parser.ast.stmt.ExpressionStmt();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    int var8 = var6.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var9 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    var6.setModifiers((-1));
    japa.parser.ast.type.Type var18 = var6.getType();
    var0.setExpression((japa.parser.ast.expr.Expression)var6);
    int var20 = var6.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    java.lang.String var30 = var29.toString();
    japa.parser.ast.type.ClassOrInterfaceType var31 = new japa.parser.ast.type.ClassOrInterfaceType(var30);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId(var30);
    japa.parser.Token var33 = japa.parser.Token.newToken(var20, var30);
    java.lang.Object var34 = var33.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test112() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    java.util.List var8 = var5.getVars();
    java.util.List var9 = var5.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);

  }

  public void test113() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isStatic();
    boolean var4 = var0.isAsterisk();
    boolean var5 = var0.isAsterisk();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test114() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var10.getArrayCount();
    int var12 = var10.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var13);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var31 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var32 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var33 = var32.getMembers();
    int var34 = var32.getModifiers();
    java.util.List var35 = var32.getImplements();
    boolean var36 = var32.isInterface();
    var14.setVarArgs(var36);
    japa.parser.ast.type.PrimitiveType var38 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.Parameter var46 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var38, var43);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    var46.setId(var52);
    japa.parser.ast.type.Type var57 = var46.getType();
    japa.parser.ast.type.Type var58 = var46.getType();
    japa.parser.ast.body.VariableDeclaratorId var59 = var46.getId();
    var14.setId(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);

  }

  public void test115() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getExtends();
    java.util.List var20 = var17.getTypeParameters();
    int var21 = var17.getModifiers();
    int var22 = var17.getModifiers();
    japa.parser.ast.body.JavadocComment var23 = var17.getJavaDoc();
    boolean var24 = var17.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test116() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var7 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt();
    int var9 = var8.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    var12.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    var38.setExpression((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.Type var56 = var55.getType();
    var44.setType(var56);
    japa.parser.ast.stmt.ReturnStmt var58 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.stmt.ReturnStmt var59 = new japa.parser.ast.stmt.ReturnStmt(1, var9, var11, 0, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var61 = japa.parser.Token.newToken(var11, "");
    japa.parser.ast.expr.NameExpr var62 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var63 = new japa.parser.ast.PackageDeclaration(var62);
    japa.parser.ast.PackageDeclaration var64 = new japa.parser.ast.PackageDeclaration(var62);
    int var65 = var62.getBeginLine();
    japa.parser.ast.stmt.ExpressionStmt var66 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var62);
    java.lang.String var67 = var62.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));

  }

  public void test117() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    int var9 = var8.getEndLine();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var12 = var11.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    int var27 = var24.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var47 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var48 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var52 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var52.setExpression((japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    var52.setExpression((japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.type.Type var63 = var60.getType();
    japa.parser.ast.stmt.ExpressionStmt var64 = new japa.parser.ast.stmt.ExpressionStmt((-1), var27, 100, 1, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator(var11, (japa.parser.ast.expr.Expression)var60);
    var8.setId(var11);
    int var67 = var11.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var68 = new japa.parser.ast.body.VariableDeclarator(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test118() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    java.util.List var5 = var0.getAnnotations();
    java.lang.String var6 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test119() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    japa.parser.ast.body.MethodDeclaration var5 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var6 = var5.getType();
    java.lang.String var7 = var5.getName();
    japa.parser.ast.type.PrimitiveType var8 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.Parameter var16 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var8, var13);
    japa.parser.ast.type.ReferenceType var18 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var8, 0);
    japa.parser.Token var19 = new japa.parser.Token(0);
    var5.setArrayCount(0);
    japa.parser.Token var21 = japa.parser.Token.newToken(0);
    var0.setModifiers(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);

  }

  public void test120() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    int var1 = var0.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.Token var18 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var19 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var20 = var19.getMembers();
    japa.parser.ast.body.MethodDeclaration var21 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var22 = var21.getType();
    java.lang.String var23 = var21.getName();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    var21.setName("");
    japa.parser.ast.LineComment var87 = new japa.parser.ast.LineComment("");
    var19.setName("");
    var0.setName("");
    japa.parser.ast.type.ClassOrInterfaceType var90 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.type.ClassOrInterfaceType var91 = var90.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);

  }

  public void test121() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var2 = new japa.parser.ast.body.MethodDeclaration();
    int var3 = var2.getModifiers();
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var4);
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var6);
    java.util.List var8 = var6.getStmts();
    var0.setTryBlock(var6);
    java.util.List var10 = var0.getCatchs();
    java.lang.Object var11 = var0.getData();
    japa.parser.ast.stmt.BlockStmt var12 = var0.getFinallyBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test122() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    java.util.List var10 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var11 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.Parameter var19 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var11, var16);
    japa.parser.ast.type.ReferenceType var21 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var11, 0);
    int var22 = var11.getBeginLine();
    japa.parser.ast.type.ReferenceType var23 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var11);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var42 = var41.getExtends();
    java.util.List var43 = var41.getMembers();
    java.util.List var44 = var41.getTypeParameters();
    int var45 = var41.getBeginColumn();
    var23.setArrayCount(var45);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.ReferenceType var57 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var47, 0);
    int var58 = var57.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.Parameter var66 = new japa.parser.ast.body.Parameter(var45, (japa.parser.ast.type.Type)var57, var63);
    japa.parser.ast.type.ReferenceType var68 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var57, 1);
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var74);
    japa.parser.ast.type.ReferenceType var79 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var69, 0);
    int var80 = var79.getArrayCount();
    int var81 = var79.getArrayCount();
    japa.parser.ast.type.ReferenceType var82 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var57, var81);
    var8.setType((japa.parser.ast.type.Type)var57);
    japa.parser.ast.body.VariableDeclaratorId var84 = var8.getId();
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);

  }

  public void test123() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var1 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var2 = var1.getType();
    java.lang.String var3 = var1.getName();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.Token var15 = new japa.parser.Token(0);
    var1.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    japa.parser.ast.stmt.BlockStmt var19 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var19);
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var21);
    var1.setBody(var21);
    var0.setFinallyBlock(var21);
    japa.parser.ast.body.MethodDeclaration var25 = new japa.parser.ast.body.MethodDeclaration();
    int var26 = var25.getModifiers();
    japa.parser.ast.stmt.BlockStmt var27 = new japa.parser.ast.stmt.BlockStmt();
    var25.setBody(var27);
    japa.parser.ast.stmt.BlockStmt var29 = new japa.parser.ast.stmt.BlockStmt();
    var25.setBody(var29);
    java.util.List var31 = var29.getStmts();
    var0.setTryBlock(var29);
    japa.parser.ast.stmt.TryStmt var33 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var35 = var34.getType();
    java.lang.String var36 = var34.getName();
    japa.parser.ast.type.PrimitiveType var37 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.Parameter var45 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var37, var42);
    japa.parser.ast.type.ReferenceType var47 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var37, 0);
    japa.parser.Token var48 = new japa.parser.Token(0);
    var34.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var50 = new japa.parser.ast.body.MethodDeclaration();
    int var51 = var50.getModifiers();
    japa.parser.ast.stmt.BlockStmt var52 = new japa.parser.ast.stmt.BlockStmt();
    var50.setBody(var52);
    japa.parser.ast.stmt.BlockStmt var54 = new japa.parser.ast.stmt.BlockStmt();
    var50.setBody(var54);
    var34.setBody(var54);
    var33.setFinallyBlock(var54);
    var0.setFinallyBlock(var54);
    japa.parser.ast.stmt.BlockStmt var59 = var0.getFinallyBlock();
    japa.parser.ast.stmt.TryStmt var60 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var61 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var62 = var61.getType();
    java.lang.String var63 = var61.getName();
    japa.parser.ast.type.PrimitiveType var64 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var69 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var71 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var69, (japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.body.Parameter var72 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var64, var69);
    japa.parser.ast.type.ReferenceType var74 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var64, 0);
    japa.parser.Token var75 = new japa.parser.Token(0);
    var61.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var77 = new japa.parser.ast.body.MethodDeclaration();
    int var78 = var77.getModifiers();
    japa.parser.ast.stmt.BlockStmt var79 = new japa.parser.ast.stmt.BlockStmt();
    var77.setBody(var79);
    japa.parser.ast.stmt.BlockStmt var81 = new japa.parser.ast.stmt.BlockStmt();
    var77.setBody(var81);
    var61.setBody(var81);
    var60.setFinallyBlock(var81);
    japa.parser.ast.stmt.BlockStmt var85 = var60.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var86 = var60.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var87 = var60.getTryBlock();
    java.util.List var88 = var60.getCatchs();
    japa.parser.ast.stmt.BlockStmt var89 = var60.getFinallyBlock();
    var0.setTryBlock(var89);
    int var91 = var0.getEndLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);

  }

  public void test124() throws Throwable {

    japa.parser.ast.body.VariableDeclarator var0 = new japa.parser.ast.body.VariableDeclarator();
    japa.parser.ast.expr.Expression var1 = var0.getInit();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.Token var19 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var20 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var24 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    var24.setExpression((japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    int var40 = var38.getModifiers();
    var24.setExpression((japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.expr.Expression var42 = var24.getExpression();
    var0.setInit(var42);
    japa.parser.ast.type.PrimitiveType var44 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var51 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var49, (japa.parser.ast.expr.Expression)var50);
    japa.parser.ast.body.Parameter var52 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var44, var49);
    japa.parser.ast.body.VariableDeclaratorId var57 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var59 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var57, (japa.parser.ast.expr.Expression)var58);
    int var60 = var58.getModifiers();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator(var49, (japa.parser.ast.expr.Expression)var58);
    japa.parser.ast.body.VariableDeclaratorId var62 = var61.getId();
    japa.parser.ast.body.VariableDeclaratorId var63 = var61.getId();
    japa.parser.ast.body.VariableDeclaratorId var64 = var61.getId();
    japa.parser.ast.expr.Expression var65 = var61.getInit();
    japa.parser.ast.expr.Expression var66 = var61.getInit();
    var0.setInit(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);

  }

  public void test125() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    java.util.List var2 = var1.getTypeArgs();
    japa.parser.ast.expr.NameExpr var3 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var4 = new japa.parser.ast.ImportDeclaration();
    var4.setStatic(false);
    var4.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.Token var25 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var26 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var27 = var26.getExtends();
    boolean var28 = var26.isInterface();
    japa.parser.ast.ImportDeclaration var29 = new japa.parser.ast.ImportDeclaration(var3, false, var28);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var32 = var31.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator(var31, (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.MethodDeclaration var35 = new japa.parser.ast.body.MethodDeclaration();
    int var36 = var35.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var54 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var55 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var59 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var58);
    japa.parser.Token var61 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    japa.parser.Token var79 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var80 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var83 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var84 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.body.VariableDeclaratorId var86 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var87 = new japa.parser.ast.LineComment(var36, 0, 0, 1, "");
    int var88 = var87.getEndColumn();
    var87.setContent("hi!");
    var31.setName("hi!");
    var3.setName("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var93 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    java.lang.String var94 = var93.getName();
    var1.setScope(var93);
    japa.parser.ast.type.ReferenceType var97 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var1, 10);
    java.lang.String var98 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi!"+ "'", var94.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + ""+ "'", var98.equals(""));

  }

  public void test126() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    java.util.List var4 = var0.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.Token var21 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var22 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var23 = var22.getExtends();
    java.util.List var24 = var22.getExtends();
    japa.parser.ast.stmt.ReturnStmt var25 = new japa.parser.ast.stmt.ReturnStmt();
    int var26 = var25.getEndLine();
    var22.setModifiers(var26);
    java.util.List var28 = var22.getTypeParameters();
    int var29 = var22.getModifiers();
    java.util.List var30 = var22.getMembers();
    java.util.List var31 = var22.getMembers();
    int var32 = var22.getEndLine();
    var0.setModifiers(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test127() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    int var22 = var8.getModifiers();
    japa.parser.ast.type.PrimitiveType var23 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.Parameter var31 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var23, var28);
    japa.parser.ast.type.PrimitiveType var32 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var33 = var32.getType();
    var31.setType((japa.parser.ast.type.Type)var32);
    boolean var35 = var31.isVarArgs();
    var8.setVarArgs(var35);
    java.util.List var37 = var8.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);

  }

  public void test128() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    int var21 = var17.getBeginColumn();
    java.util.List var22 = var17.getExtends();
    boolean var23 = var17.isInterface();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.Token var41 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var42 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var46 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    var46.setExpression((japa.parser.ast.expr.Expression)var52);
    int var55 = var46.getEndColumn();
    japa.parser.ast.type.ReferenceType var56 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.Type var57 = var56.getType();
    japa.parser.ast.type.Type var58 = var56.getType();
    japa.parser.ast.type.Type var59 = var56.getType();
    int var60 = var56.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var74 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var75 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var73, (japa.parser.ast.expr.Expression)var74);
    japa.parser.Token var77 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var78 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var79 = var78.getExtends();
    java.util.List var80 = var78.getAnnotations();
    java.util.List var81 = var78.getImplements();
    java.lang.String var82 = var78.getName();
    japa.parser.ast.body.MethodDeclaration var83 = new japa.parser.ast.body.MethodDeclaration(var55, (japa.parser.ast.type.Type)var56, var82);
    var17.setName(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ""+ "'", var82.equals(""));

  }

  public void test129() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getBody();
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.Token var20 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var21 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var22 = new japa.parser.ast.ImportDeclaration();
    var22.setStatic(false);
    boolean var25 = var22.isAsterisk();
    var21.setInterface(var25);
    int var27 = var21.getBeginColumn();
    var0.setEndColumn(var27);
    japa.parser.ast.type.ReferenceType var29 = new japa.parser.ast.type.ReferenceType();
    int var30 = var29.getEndColumn();
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    int var47 = var45.getModifiers();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator(var36, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var49 = var48.getId();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.Token var66 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var67 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var68 = var67.getExtends();
    java.util.List var69 = var67.getMembers();
    java.util.List var70 = var67.getMembers();
    japa.parser.Token var72 = japa.parser.Token.newToken((-1));
    var67.setModifiers((-1));
    var48.setEndColumn((-1));
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.VariableDeclaratorId var87 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var88 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var89 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var87, (japa.parser.ast.expr.Expression)var88);
    japa.parser.Token var91 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var92 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var93 = var92.getExtends();
    java.util.List var94 = var92.getMembers();
    java.util.List var95 = var92.getTypeParameters();
    java.lang.String var96 = var92.getName();
    japa.parser.Token var97 = new japa.parser.Token((-1), var96);
    japa.parser.ast.body.MethodDeclaration var98 = new japa.parser.ast.body.MethodDeclaration(var27, (japa.parser.ast.type.Type)var29, var96);
    java.lang.String var99 = var98.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + ""+ "'", var96.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + ""+ "'", var99.equals(""));

  }

  public void test130() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.type.ClassOrInterfaceType var23 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var23, "");
    java.lang.String var87 = var86.getName();
    japa.parser.ast.type.ClassOrInterfaceType var88 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var89 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var91 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.MethodDeclaration var92 = new japa.parser.ast.body.MethodDeclaration(0, (japa.parser.ast.type.Type)var86, "hi!");
    japa.parser.ast.LineComment var93 = new japa.parser.ast.LineComment("hi!");
    java.lang.String var94 = var93.getContent();
    java.lang.String var95 = var93.getContent();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi!"+ "'", var94.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "hi!"+ "'", var95.equals("hi!"));

  }

  public void test131() throws Throwable {

    japa.parser.ast.type.ReferenceType var0 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.Type var1 = var0.getType();
    int var2 = var0.getArrayCount();
    int var3 = var0.getArrayCount();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.Type var13 = var12.getType();
    japa.parser.ast.type.PrimitiveType var14 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.Parameter var22 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var14, var19);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    int var30 = var28.getModifiers();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator(var19, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var32 = var31.getId();
    var12.setId(var32);
    java.lang.String var34 = var32.getName();
    japa.parser.ast.body.Parameter var35 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var32);
    int var36 = var35.getBeginColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test132() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var8 = new japa.parser.Token((-1), "");
    java.lang.String var9 = var8.toString();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId(var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var33 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var33.setExpression((japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    var33.setExpression((japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator(var10, (japa.parser.ast.expr.Expression)var41);
    int var45 = var10.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.Token var63 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var64 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var68 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var68.setExpression((japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.ImportDeclaration var71 = new japa.parser.ast.ImportDeclaration();
    var71.setStatic(false);
    boolean var74 = var71.isAsterisk();
    boolean var75 = var71.isStatic();
    int var76 = var71.getEndColumn();
    var69.setModifiers(var76);
    japa.parser.Token var78 = japa.parser.Token.newToken(var76);
    var10.setEndLine(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);

  }

  public void test133() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    japa.parser.ast.type.PrimitiveType var11 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.Parameter var19 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var11, var16);
    japa.parser.ast.type.ReferenceType var21 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var11, 0);
    var10.setType((japa.parser.ast.type.Type)var11);
    japa.parser.ast.type.PrimitiveType var23 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.Parameter var31 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var23, var28);
    japa.parser.ast.type.PrimitiveType var32 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var33 = var32.getType();
    var31.setType((japa.parser.ast.type.Type)var32);
    var10.setType((japa.parser.ast.type.Type)var32);
    int var36 = var10.getArrayCount();
    japa.parser.ast.type.PrimitiveType var37 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.Parameter var45 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var37, var42);
    japa.parser.ast.type.ReferenceType var47 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var37, 0);
    int var48 = var37.getBeginLine();
    japa.parser.ast.type.ReferenceType var49 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var37);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.Token var66 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var67 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var68 = var67.getExtends();
    java.util.List var69 = var67.getMembers();
    java.util.List var70 = var67.getTypeParameters();
    int var71 = var67.getBeginColumn();
    var49.setArrayCount(var71);
    japa.parser.ast.type.PrimitiveType var73 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.ast.body.Parameter var81 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var73, var78);
    japa.parser.ast.type.ReferenceType var83 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var73, 0);
    int var84 = var83.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var89 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var90 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var91 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var89, (japa.parser.ast.expr.Expression)var90);
    japa.parser.ast.body.Parameter var92 = new japa.parser.ast.body.Parameter(var71, (japa.parser.ast.type.Type)var83, var89);
    japa.parser.ast.type.ReferenceType var93 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, var71);
    japa.parser.ast.type.Type var94 = var93.getType();
    int var95 = var93.getArrayCount();
    int var96 = var93.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test134() throws Throwable {

    japa.parser.ast.body.Parameter var0 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var1 = var0.getId();
    japa.parser.ast.type.Type var2 = var0.getType();
    japa.parser.ast.type.Type var3 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test135() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.Token var13 = new japa.parser.Token((-1), "");
    java.lang.String var14 = var13.toString();
    var1.setName(var14);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId(var14);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var18 = var17.getType();
    java.lang.String var19 = var17.getName();
    int var20 = var17.getModifiers();
    japa.parser.ast.type.PrimitiveType var21 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.Parameter var29 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var21, var26);
    japa.parser.ast.type.ReferenceType var31 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var21, 0);
    japa.parser.ast.type.PrimitiveType var32 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.Parameter var40 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var32, var37);
    japa.parser.ast.type.ReferenceType var42 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var32, 0);
    var31.setType((japa.parser.ast.type.Type)var32);
    japa.parser.ast.type.PrimitiveType var44 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var51 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var49, (japa.parser.ast.expr.Expression)var50);
    japa.parser.ast.body.Parameter var52 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var44, var49);
    japa.parser.ast.type.PrimitiveType var53 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var54 = var53.getType();
    var52.setType((japa.parser.ast.type.Type)var53);
    var31.setType((japa.parser.ast.type.Type)var53);
    japa.parser.ast.type.Type var57 = var31.getType();
    var17.setType(var57);
    int var59 = var17.getModifiers();
    int var60 = var17.getEndColumn();
    int var61 = var17.getModifiers();
    var16.setArrayCount(var61);
    int var63 = var16.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test136() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var1 = new japa.parser.ast.ImportDeclaration();
    var1.setStatic(false);
    boolean var4 = var1.isStatic();
    var0.setStatic(var4);
    japa.parser.ast.expr.NameExpr var6 = var0.getName();
    japa.parser.ast.expr.NameExpr var7 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test137() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    java.util.List var36 = var17.getExtends();
    java.util.List var37 = var17.getImplements();
    japa.parser.ast.type.PrimitiveType var38 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.Parameter var46 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var38, var43);
    japa.parser.ast.type.Type var47 = var46.getType();
    japa.parser.ast.type.PrimitiveType var48 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.Parameter var56 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var48, var53);
    japa.parser.ast.type.ReferenceType var58 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var48, 0);
    var46.setModifiers(0);
    boolean var60 = var46.isVarArgs();
    japa.parser.ast.type.Type var61 = var46.getType();
    boolean var62 = var46.isVarArgs();
    var17.setInterface(var62);
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var68, (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.Token var80 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var81 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var82 = var81.getExtends();
    java.util.List var83 = var81.getMembers();
    java.lang.String var84 = var81.getName();
    japa.parser.ast.body.VariableDeclaratorId var89 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var90 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var91 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var89, (japa.parser.ast.expr.Expression)var90);
    japa.parser.Token var93 = new japa.parser.Token((-1), "");
    var81.setName("");
    java.util.List var95 = var81.getImplements();
    java.util.List var96 = var81.getImplements();
    boolean var97 = var81.isInterface();
    var17.setInterface(var97);
    boolean var99 = var17.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test138() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var9 = var8.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator(var8, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var31 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var32 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var36 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var57 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var61 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var64 = new japa.parser.ast.LineComment(var13, 0, 0, 1, "");
    int var65 = var64.getEndColumn();
    var64.setContent("hi!");
    var8.setName("hi!");
    japa.parser.Token var69 = new japa.parser.Token(1, "hi!");
    java.lang.String var70 = var69.toString();
    japa.parser.ast.body.VariableDeclaratorId var71 = new japa.parser.ast.body.VariableDeclaratorId(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));

  }

  public void test139() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    japa.parser.Token var37 = japa.parser.Token.newToken(var35);
    japa.parser.Token var38 = japa.parser.Token.newToken(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);

  }

  public void test140() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator(var15, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var28 = var27.getId();
    var8.setId(var28);
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator(var28);
    japa.parser.ast.expr.Expression var31 = var30.getInit();
    japa.parser.ast.body.VariableDeclaratorId var32 = var30.getId();
    java.lang.String var33 = var32.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);

  }

  public void test141() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.Token var19 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var20 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var24 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    var24.setExpression((japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.type.PrimitiveType var33 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.Parameter var41 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var33, var38);
    japa.parser.ast.type.Type var42 = var41.getType();
    var30.setType(var42);
    japa.parser.ast.stmt.ReturnStmt var44 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.Token var62 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var63 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var67 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    var67.setExpression((japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.stmt.ReturnStmt var76 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.ImportDeclaration var77 = new japa.parser.ast.ImportDeclaration();
    var77.setStatic(false);
    boolean var80 = var77.isAsterisk();
    var77.setStatic(false);
    japa.parser.ast.expr.NameExpr var83 = new japa.parser.ast.expr.NameExpr();
    int var84 = var83.getBeginLine();
    var77.setName(var83);
    var76.setExpr((japa.parser.ast.expr.Expression)var83);
    var44.setExpr((japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.PackageDeclaration var88 = new japa.parser.ast.PackageDeclaration(var83);
    var0.setPackage(var88);
    japa.parser.ast.expr.NameExpr var90 = var88.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);

  }

  public void test142() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.Type var19 = var18.getType();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.ReferenceType var30 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var20, 0);
    var18.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var32 = var18.getId();
    var8.setId(var32);
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    japa.parser.ast.stmt.BlockStmt var36 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var36);
    java.util.List var38 = var34.getAnnotations();
    int var39 = var34.getBeginColumn();
    var8.setBeginColumn(var39);
    japa.parser.ast.body.VariableDeclaratorId var41 = var8.getId();
    int var42 = var41.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator(var41);
    java.lang.String var44 = var41.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);

  }

  public void test143() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    java.util.List var4 = var0.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var27 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var26);
    var0.setModifiers(0);
    japa.parser.ast.type.Type var29 = var0.getType();
    int var30 = var0.getModifiers();
    java.lang.String var31 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);

  }

  public void test144() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    int var9 = var8.getEndLine();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var12 = var11.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    int var27 = var24.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var47 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var48 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var52 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var52.setExpression((japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    var52.setExpression((japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.type.Type var63 = var60.getType();
    japa.parser.ast.stmt.ExpressionStmt var64 = new japa.parser.ast.stmt.ExpressionStmt((-1), var27, 100, 1, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator(var11, (japa.parser.ast.expr.Expression)var60);
    var8.setId(var11);
    int var67 = var8.getEndLine();
    boolean var68 = var8.isVarArgs();
    japa.parser.ast.type.Type var69 = var8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);

  }

  public void test145() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.Type var40 = var39.getType();
    var28.setType(var40);
    japa.parser.ast.stmt.ReturnStmt var42 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var65 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    var65.setExpression((japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.stmt.ReturnStmt var74 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.ImportDeclaration var75 = new japa.parser.ast.ImportDeclaration();
    var75.setStatic(false);
    boolean var78 = var75.isAsterisk();
    var75.setStatic(false);
    japa.parser.ast.expr.NameExpr var81 = new japa.parser.ast.expr.NameExpr();
    int var82 = var81.getBeginLine();
    var75.setName(var81);
    var74.setExpr((japa.parser.ast.expr.Expression)var81);
    var42.setExpr((japa.parser.ast.expr.Expression)var81);
    japa.parser.ast.PackageDeclaration var86 = new japa.parser.ast.PackageDeclaration(var81);
    java.lang.String var87 = var81.getName();
    int var88 = var81.getBeginColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test146() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    var23.setEndColumn(0);
    japa.parser.ast.stmt.ExpressionStmt var49 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.Token var67 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var68 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var72 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var72.setExpression((japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.ImportDeclaration var75 = new japa.parser.ast.ImportDeclaration();
    var75.setStatic(false);
    boolean var78 = var75.isAsterisk();
    boolean var79 = var75.isStatic();
    int var80 = var75.getEndColumn();
    var73.setModifiers(var80);
    java.lang.Object var82 = var73.getData();
    var49.setExpression((japa.parser.ast.expr.Expression)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);

  }

  public void test147() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    java.util.List var36 = var17.getImplements();
    japa.parser.ast.type.PrimitiveType var37 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.Parameter var45 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var37, var42);
    japa.parser.ast.type.ReferenceType var47 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var37, 0);
    int var48 = var37.getBeginLine();
    japa.parser.ast.type.ReferenceType var49 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var37);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.Token var66 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var67 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var68 = var67.getExtends();
    java.util.List var69 = var67.getMembers();
    java.util.List var70 = var67.getTypeParameters();
    int var71 = var67.getBeginColumn();
    var49.setArrayCount(var71);
    japa.parser.ast.type.PrimitiveType var73 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.ast.body.Parameter var81 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var73, var78);
    japa.parser.ast.type.ReferenceType var83 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var73, 0);
    int var84 = var83.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var89 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var90 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var91 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var89, (japa.parser.ast.expr.Expression)var90);
    japa.parser.ast.body.Parameter var92 = new japa.parser.ast.body.Parameter(var71, (japa.parser.ast.type.Type)var83, var89);
    int var93 = var83.getArrayCount();
    var17.setBeginLine(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);

  }

  public void test148() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    japa.parser.ast.expr.NameExpr var3 = var0.getName();
    japa.parser.ast.expr.NameExpr var4 = var0.getName();
    japa.parser.ast.expr.NameExpr var5 = var0.getName();
    japa.parser.ast.ImportDeclaration var6 = new japa.parser.ast.ImportDeclaration();
    var6.setStatic(false);
    var6.setAsterisk(false);
    boolean var11 = var6.isStatic();
    var0.setAsterisk(var11);
    boolean var13 = var0.isStatic();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test149() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getModifiers();
    japa.parser.Token var5 = japa.parser.Token.newToken(var3, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var6 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    java.util.List var7 = var6.getTypeArgs();
    java.lang.String var8 = var6.getName();
    japa.parser.ast.type.ClassOrInterfaceType var9 = new japa.parser.ast.type.ClassOrInterfaceType(var8);
    java.util.List var10 = var9.getTypeArgs();
    japa.parser.ast.type.ReferenceType var11 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.Type var12 = var11.getType();
    int var13 = var11.getArrayCount();
    japa.parser.ast.type.PrimitiveType var14 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.Parameter var22 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var14, var19);
    japa.parser.ast.type.ReferenceType var24 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var14, 0);
    japa.parser.ast.type.Type var25 = var24.getType();
    var11.setType((japa.parser.ast.type.Type)var24);
    int var27 = var11.getEndLine();
    japa.parser.ast.type.ReferenceType var28 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var9, var27);
    japa.parser.ast.type.ClassOrInterfaceType var29 = var9.getScope();
    japa.parser.Token var31 = japa.parser.Token.newToken((-1));
    japa.parser.ast.body.MethodDeclaration var32 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var33 = var32.getType();
    java.lang.String var34 = var32.getName();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.Token var42 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var43 = new japa.parser.ast.stmt.ReturnStmt();
    int var44 = var43.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var45 = new japa.parser.ast.stmt.ReturnStmt();
    int var46 = var45.getEndLine();
    japa.parser.ast.body.MethodDeclaration var47 = new japa.parser.ast.body.MethodDeclaration();
    int var48 = var47.getModifiers();
    var47.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.Token var68 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var69 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var72 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var73 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var72);
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    var73.setExpression((japa.parser.ast.expr.Expression)var79);
    japa.parser.ast.type.PrimitiveType var82 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var87 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var88 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var89 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var87, (japa.parser.ast.expr.Expression)var88);
    japa.parser.ast.body.Parameter var90 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var82, var87);
    japa.parser.ast.type.Type var91 = var90.getType();
    var79.setType(var91);
    japa.parser.ast.stmt.ReturnStmt var93 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var79);
    japa.parser.ast.stmt.ReturnStmt var94 = new japa.parser.ast.stmt.ReturnStmt(1, var44, var46, 0, (japa.parser.ast.expr.Expression)var79);
    japa.parser.Token var96 = japa.parser.Token.newToken(var46, "");
    var32.setName("");
    japa.parser.Token var98 = japa.parser.Token.newToken((-1), "");
    japa.parser.ast.type.ClassOrInterfaceType var99 = new japa.parser.ast.type.ClassOrInterfaceType(var9, "");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var98 == null);

  }

  public void test150() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var8.setType((japa.parser.ast.type.Type)var9);
    boolean var12 = var8.isVarArgs();
    int var13 = var8.getModifiers();
    japa.parser.ast.type.Type var14 = var8.getType();
    japa.parser.ast.body.VariableDeclaratorId var15 = var8.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);

  }

  public void test151() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var8.setType((japa.parser.ast.type.Type)var9);
    boolean var12 = var8.isVarArgs();
    japa.parser.ast.ImportDeclaration var13 = new japa.parser.ast.ImportDeclaration();
    var13.setStatic(false);
    boolean var16 = var13.isAsterisk();
    var13.setStatic(false);
    japa.parser.ast.expr.NameExpr var19 = new japa.parser.ast.expr.NameExpr();
    int var20 = var19.getBeginLine();
    var13.setName(var19);
    boolean var22 = var13.isAsterisk();
    var8.setVarArgs(var22);
    japa.parser.ast.body.VariableDeclaratorId var24 = var8.getId();
    java.util.List var25 = var8.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var26 = var8.getId();
    japa.parser.ast.PackageDeclaration var27 = new japa.parser.ast.PackageDeclaration();
    java.util.List var28 = var27.getAnnotations();
    japa.parser.ast.expr.NameExpr var29 = var27.getName();
    java.util.List var30 = var27.getAnnotations();
    japa.parser.ast.expr.NameExpr var31 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration();
    var32.setStatic(false);
    var32.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var51 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var49, (japa.parser.ast.expr.Expression)var50);
    japa.parser.Token var53 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var54 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var55 = var54.getExtends();
    boolean var56 = var54.isInterface();
    japa.parser.ast.ImportDeclaration var57 = new japa.parser.ast.ImportDeclaration(var31, false, var56);
    var27.setName(var31);
    japa.parser.ast.PackageDeclaration var59 = new japa.parser.ast.PackageDeclaration(var31);
    int var60 = var31.getEndLine();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator(var26, (japa.parser.ast.expr.Expression)var31);
    int var62 = var61.getEndLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);

  }

  public void test152() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.Token var10 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var11 = new japa.parser.ast.stmt.ReturnStmt();
    int var12 = var11.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var13 = new japa.parser.ast.stmt.ReturnStmt();
    int var14 = var13.getEndLine();
    japa.parser.ast.body.MethodDeclaration var15 = new japa.parser.ast.body.MethodDeclaration();
    int var16 = var15.getModifiers();
    var15.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    var41.setExpression((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.type.PrimitiveType var50 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.Parameter var58 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var50, var55);
    japa.parser.ast.type.Type var59 = var58.getType();
    var47.setType(var59);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt(1, var12, var14, 0, (japa.parser.ast.expr.Expression)var47);
    japa.parser.Token var64 = japa.parser.Token.newToken(var14, "");
    var0.setName("");
    japa.parser.ast.LineComment var66 = new japa.parser.ast.LineComment("");
    japa.parser.ast.LineComment var67 = new japa.parser.ast.LineComment("");
    japa.parser.ast.expr.NameExpr var68 = new japa.parser.ast.expr.NameExpr("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);

  }

  public void test153() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    int var19 = var17.getModifiers();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.Type var29 = var28.getType();
    japa.parser.ast.type.PrimitiveType var30 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var30, var35);
    japa.parser.ast.type.ReferenceType var40 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var30, 0);
    var28.setModifiers(0);
    boolean var42 = var28.isVarArgs();
    var17.setInterface(var42);
    japa.parser.ast.type.ReferenceType var44 = new japa.parser.ast.type.ReferenceType();
    int var45 = var44.getArrayCount();
    int var46 = var44.getBeginColumn();
    var17.setModifiers(var46);
    java.util.List var48 = var17.getTypeParameters();
    java.util.List var49 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test154() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    java.util.List var23 = var8.getAnnotations();
    java.util.List var24 = var8.getAnnotations();
    java.util.List var25 = var8.getAnnotations();
    int var26 = var8.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);

  }

  public void test155() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getBody();
    java.util.List var4 = var0.getAnnotations();
    java.util.List var5 = var0.getAnnotations();
    int var6 = var0.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test156() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    japa.parser.ast.stmt.BlockStmt var5 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var5);
    japa.parser.ast.type.ClassOrInterfaceType var8 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var18 = var17.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator(var17, (japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.MethodDeclaration var21 = new japa.parser.ast.body.MethodDeclaration();
    int var22 = var21.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var45 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var47 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.Token var65 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var66 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var70 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var73 = new japa.parser.ast.LineComment(var22, 0, 0, 1, "");
    int var74 = var73.getEndColumn();
    var73.setContent("hi!");
    var17.setName("hi!");
    japa.parser.Token var78 = new japa.parser.Token(1, "hi!");
    japa.parser.ast.expr.NameExpr var79 = new japa.parser.ast.expr.NameExpr("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var80 = new japa.parser.ast.type.ClassOrInterfaceType(var8, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var81 = var80.getScope();
    japa.parser.ast.body.MethodDeclaration var82 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var83 = var82.getType();
    java.lang.String var84 = var82.getName();
    int var85 = var82.getModifiers();
    japa.parser.Token var87 = japa.parser.Token.newToken(var85, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var88 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var89 = new japa.parser.ast.type.ClassOrInterfaceType(var81, "hi!");
    java.lang.String var90 = var89.getName();
    var0.setName(var90);
    int var92 = var0.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test157() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    java.util.List var4 = var0.getThrows();
    japa.parser.ast.type.ClassOrInterfaceType var6 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.Token var14 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt();
    int var16 = var15.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var17 = new japa.parser.ast.stmt.ReturnStmt();
    int var18 = var17.getEndLine();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    var19.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var45 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    var45.setExpression((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.type.PrimitiveType var54 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.Parameter var62 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var54, var59);
    japa.parser.ast.type.Type var63 = var62.getType();
    var51.setType(var63);
    japa.parser.ast.stmt.ReturnStmt var65 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.stmt.ReturnStmt var66 = new japa.parser.ast.stmt.ReturnStmt(1, var16, var18, 0, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var68 = japa.parser.Token.newToken(var18, "");
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType(var6, "");
    java.lang.String var70 = var69.getName();
    japa.parser.ast.type.ClassOrInterfaceType var71 = var69.getScope();
    java.lang.String var72 = var69.getName();
    java.lang.String var73 = var69.getName();
    var0.setName(var73);
    java.util.List var75 = var0.getThrows();
    int var76 = var0.getModifiers();
    int var77 = var0.getArrayCount();
    java.lang.String var78 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));

  }

  public void test158() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    java.util.List var31 = var28.getAnnotations();
    int var32 = var28.getEndColumn();
    japa.parser.ast.stmt.ReturnStmt var33 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test159() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    int var1 = var0.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var2 = new japa.parser.ast.body.VariableDeclarator(var0);
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.Token var20 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var21 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var25 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    var25.setExpression((japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    int var41 = var39.getModifiers();
    var25.setExpression((japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var60 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var61 = var60.getExtends();
    java.util.List var62 = var60.getMembers();
    java.util.List var63 = var60.getMembers();
    japa.parser.Token var65 = japa.parser.Token.newToken((-1));
    var60.setModifiers((-1));
    var25.setBeginLine((-1));
    japa.parser.ast.expr.Expression var68 = var25.getExpression();
    japa.parser.ast.expr.Expression var69 = var25.getExpression();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator(var0, var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);

  }

  public void test160() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var2 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.Token var10 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var11 = new japa.parser.ast.stmt.ReturnStmt();
    int var12 = var11.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var13 = new japa.parser.ast.stmt.ReturnStmt();
    int var14 = var13.getEndLine();
    japa.parser.ast.body.MethodDeclaration var15 = new japa.parser.ast.body.MethodDeclaration();
    int var16 = var15.getModifiers();
    var15.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    var41.setExpression((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.type.PrimitiveType var50 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.Parameter var58 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var50, var55);
    japa.parser.ast.type.Type var59 = var58.getType();
    var47.setType(var59);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt(1, var12, var14, 0, (japa.parser.ast.expr.Expression)var47);
    japa.parser.Token var64 = japa.parser.Token.newToken(var14, "");
    japa.parser.ast.type.ClassOrInterfaceType var65 = new japa.parser.ast.type.ClassOrInterfaceType(var2, "");
    java.lang.String var66 = var65.getName();
    japa.parser.Token var67 = japa.parser.Token.newToken((-1), var66);
    java.lang.String var68 = var67.toString();
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType(var68);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));

  }

  public void test161() throws Throwable {

    japa.parser.ast.type.ReferenceType var0 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.PrimitiveType var1 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.Parameter var9 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var1, var6);
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var11 = var10.getType();
    var9.setType((japa.parser.ast.type.Type)var10);
    boolean var13 = var9.isVarArgs();
    japa.parser.ast.ImportDeclaration var14 = new japa.parser.ast.ImportDeclaration();
    var14.setStatic(false);
    boolean var17 = var14.isAsterisk();
    var14.setStatic(false);
    japa.parser.ast.expr.NameExpr var20 = new japa.parser.ast.expr.NameExpr();
    int var21 = var20.getBeginLine();
    var14.setName(var20);
    boolean var23 = var14.isAsterisk();
    var9.setVarArgs(var23);
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    int var41 = var39.getModifiers();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator(var30, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var43 = var42.getId();
    japa.parser.ast.body.VariableDeclaratorId var44 = var42.getId();
    var9.setId(var44);
    japa.parser.ast.body.Parameter var46 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var44);
    japa.parser.ast.body.MethodDeclaration var47 = new japa.parser.ast.body.MethodDeclaration();
    int var48 = var47.getModifiers();
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    var47.setType((japa.parser.ast.type.Type)var49);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token((-1), "");
    japa.parser.Token var60 = japa.parser.Token.newToken((-1));
    var47.setBeginLine((-1));
    var0.setBeginLine((-1));
    japa.parser.ast.type.PrimitiveType var63 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var68, (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.Parameter var71 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var63, var68);
    japa.parser.ast.type.PrimitiveType var72 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.body.Parameter var80 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var72, var77);
    var71.setId(var77);
    japa.parser.ast.type.Type var82 = var71.getType();
    japa.parser.ast.body.VariableDeclaratorId var84 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var85 = var84.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var87 = new japa.parser.ast.body.VariableDeclarator(var84, (japa.parser.ast.expr.Expression)var86);
    japa.parser.ast.body.VariableDeclaratorId var88 = var87.getId();
    int var89 = var88.getArrayCount();
    var71.setModifiers(var89);
    var0.setArrayCount(var89);
    japa.parser.ast.type.Type var92 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);

  }

  public void test162() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.stmt.ReturnStmt var31 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.Type var32 = var28.getType();
    java.util.List var33 = var28.getVars();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.Token var52 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var53 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var57 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    var57.setExpression((japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.stmt.ReturnStmt var66 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.expr.Expression var67 = var66.getExpr();
    japa.parser.ast.expr.Expression var68 = var66.getExpr();
    japa.parser.ast.stmt.ExpressionStmt var69 = new japa.parser.ast.stmt.ExpressionStmt(var68);
    var34.setExpr(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);

  }

  public void test163() throws Throwable {

    japa.parser.ast.body.ClassOrInterfaceDeclaration var0 = new japa.parser.ast.body.ClassOrInterfaceDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.ImportDeclaration var2 = new japa.parser.ast.ImportDeclaration();
    var2.setStatic(false);
    boolean var5 = var2.isStatic();
    boolean var6 = var2.isAsterisk();
    var0.setInterface(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test164() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getExtends();
    japa.parser.ast.type.ClassOrInterfaceType var21 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.Token var29 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var30 = new japa.parser.ast.stmt.ReturnStmt();
    int var31 = var30.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    var34.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.Token var55 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var56 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var60 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    var60.setExpression((japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var74);
    japa.parser.ast.type.Type var78 = var77.getType();
    var66.setType(var78);
    japa.parser.ast.stmt.ReturnStmt var80 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.stmt.ReturnStmt var81 = new japa.parser.ast.stmt.ReturnStmt(1, var31, var33, 0, (japa.parser.ast.expr.Expression)var66);
    japa.parser.Token var83 = japa.parser.Token.newToken(var33, "");
    japa.parser.ast.type.ClassOrInterfaceType var84 = new japa.parser.ast.type.ClassOrInterfaceType(var21, "");
    java.lang.String var85 = var84.getName();
    japa.parser.ast.type.ClassOrInterfaceType var86 = var84.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var87 = var84.getScope();
    japa.parser.ast.type.ReferenceType var88 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var84);
    java.lang.String var89 = var84.getName();
    var17.setName(var89);
    java.lang.String var91 = var17.getName();
    int var92 = var17.getBeginColumn();
    japa.parser.Token var93 = japa.parser.Token.newToken(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);

  }

  public void test165() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getBody();
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var13 = var12.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator(var12, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.MethodDeclaration var16 = new japa.parser.ast.body.MethodDeclaration();
    int var17 = var16.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var65 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var68 = new japa.parser.ast.LineComment(var17, 0, 0, 1, "");
    int var69 = var68.getEndColumn();
    var68.setContent("hi!");
    var12.setName("hi!");
    japa.parser.Token var73 = new japa.parser.Token(1, "hi!");
    var0.setName("hi!");
    japa.parser.ast.body.MethodDeclaration var75 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var76 = var75.getType();
    japa.parser.ast.stmt.BlockStmt var77 = var75.getBody();
    japa.parser.ast.stmt.TryStmt var78 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var79 = new japa.parser.ast.body.MethodDeclaration();
    int var80 = var79.getModifiers();
    japa.parser.ast.stmt.BlockStmt var81 = new japa.parser.ast.stmt.BlockStmt();
    var79.setBody(var81);
    japa.parser.ast.stmt.BlockStmt var83 = new japa.parser.ast.stmt.BlockStmt();
    var79.setBody(var83);
    java.util.List var85 = var83.getStmts();
    var78.setFinallyBlock(var83);
    var75.setBody(var83);
    int var88 = var75.getBeginLine();
    var0.setArrayCount(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test166() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    java.util.List var5 = var3.getAnnotations();
    int var6 = var3.getModifiers();
    java.util.List var7 = var3.getAnnotations();
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test167() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    japa.parser.ast.expr.NameExpr var4 = var0.getName();
    boolean var5 = var0.isAsterisk();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var28 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    var28.setExpression((japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.stmt.ReturnStmt var37 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.ImportDeclaration var38 = new japa.parser.ast.ImportDeclaration();
    var38.setStatic(false);
    boolean var41 = var38.isAsterisk();
    var38.setStatic(false);
    japa.parser.ast.expr.NameExpr var44 = new japa.parser.ast.expr.NameExpr();
    int var45 = var44.getBeginLine();
    var38.setName(var44);
    var37.setExpr((japa.parser.ast.expr.Expression)var44);
    var0.setName(var44);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.Token var65 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var66 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var67 = var66.getExtends();
    boolean var68 = var66.isInterface();
    boolean var69 = var66.isInterface();
    var0.setStatic(var69);
    japa.parser.ast.ImportDeclaration var71 = new japa.parser.ast.ImportDeclaration();
    var71.setStatic(false);
    boolean var74 = var71.isAsterisk();
    var71.setStatic(false);
    boolean var77 = var71.isStatic();
    boolean var78 = var71.isStatic();
    boolean var79 = var71.isAsterisk();
    boolean var80 = var71.isAsterisk();
    var0.setStatic(var80);
    japa.parser.ast.expr.NameExpr var82 = var0.getName();
    int var83 = var0.getBeginLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);

  }

  public void test168() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    java.util.List var2 = var1.getTypeArgs();
    japa.parser.ast.expr.NameExpr var3 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var4 = new japa.parser.ast.ImportDeclaration();
    var4.setStatic(false);
    var4.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.Token var25 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var26 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var27 = var26.getExtends();
    boolean var28 = var26.isInterface();
    japa.parser.ast.ImportDeclaration var29 = new japa.parser.ast.ImportDeclaration(var3, false, var28);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var32 = var31.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator(var31, (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.MethodDeclaration var35 = new japa.parser.ast.body.MethodDeclaration();
    int var36 = var35.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var54 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var55 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var59 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var58);
    japa.parser.Token var61 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    japa.parser.Token var79 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var80 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var83 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var84 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.body.VariableDeclaratorId var86 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var87 = new japa.parser.ast.LineComment(var36, 0, 0, 1, "");
    int var88 = var87.getEndColumn();
    var87.setContent("hi!");
    var31.setName("hi!");
    var3.setName("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var93 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    java.lang.String var94 = var93.getName();
    var1.setScope(var93);
    japa.parser.ast.type.ClassOrInterfaceType var96 = var93.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi!"+ "'", var94.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);

  }

  public void test169() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    japa.parser.ast.stmt.TryStmt var2 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var4 = var3.getType();
    java.lang.String var5 = var3.getName();
    japa.parser.ast.type.PrimitiveType var6 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var6, var11);
    japa.parser.ast.type.ReferenceType var16 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var6, 0);
    japa.parser.Token var17 = new japa.parser.Token(0);
    var3.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var21);
    japa.parser.ast.stmt.BlockStmt var23 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var23);
    var3.setBody(var23);
    var2.setFinallyBlock(var23);
    japa.parser.ast.stmt.BlockStmt var27 = var2.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var28 = var2.getFinallyBlock();
    var0.setFinallyBlock(var28);
    japa.parser.ast.stmt.TryStmt var30 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var31 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var32 = var31.getType();
    java.lang.String var33 = var31.getName();
    japa.parser.ast.type.PrimitiveType var34 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.Parameter var42 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var34, var39);
    japa.parser.ast.type.ReferenceType var44 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var34, 0);
    japa.parser.Token var45 = new japa.parser.Token(0);
    var31.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var47 = new japa.parser.ast.body.MethodDeclaration();
    int var48 = var47.getModifiers();
    japa.parser.ast.stmt.BlockStmt var49 = new japa.parser.ast.stmt.BlockStmt();
    var47.setBody(var49);
    japa.parser.ast.stmt.BlockStmt var51 = new japa.parser.ast.stmt.BlockStmt();
    var47.setBody(var51);
    var31.setBody(var51);
    var30.setFinallyBlock(var51);
    japa.parser.ast.body.MethodDeclaration var55 = new japa.parser.ast.body.MethodDeclaration();
    int var56 = var55.getModifiers();
    japa.parser.ast.stmt.BlockStmt var57 = new japa.parser.ast.stmt.BlockStmt();
    var55.setBody(var57);
    japa.parser.ast.stmt.BlockStmt var59 = new japa.parser.ast.stmt.BlockStmt();
    var55.setBody(var59);
    java.util.List var61 = var59.getStmts();
    var30.setTryBlock(var59);
    java.util.List var63 = var59.getStmts();
    var0.setTryBlock(var59);
    japa.parser.ast.stmt.BlockStmt var65 = var0.getFinallyBlock();
    java.util.List var66 = var0.getCatchs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test170() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    japa.parser.ast.type.ClassOrInterfaceType var12 = new japa.parser.ast.type.ClassOrInterfaceType("");
    var10.setType((japa.parser.ast.type.Type)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var31 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var32 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var36 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var37 = japa.parser.Token.newToken(0);
    var10.setArrayCount(0);
    japa.parser.ast.type.PrimitiveType var39 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.Parameter var47 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var39, var44);
    japa.parser.ast.type.PrimitiveType var48 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var49 = var48.getType();
    var47.setType((japa.parser.ast.type.Type)var48);
    boolean var51 = var47.isVarArgs();
    japa.parser.ast.ImportDeclaration var52 = new japa.parser.ast.ImportDeclaration();
    var52.setStatic(false);
    boolean var55 = var52.isAsterisk();
    var52.setStatic(false);
    japa.parser.ast.expr.NameExpr var58 = new japa.parser.ast.expr.NameExpr();
    int var59 = var58.getBeginLine();
    var52.setName(var58);
    boolean var61 = var52.isAsterisk();
    var47.setVarArgs(var61);
    japa.parser.ast.body.VariableDeclaratorId var63 = var47.getId();
    japa.parser.ast.body.Parameter var64 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var63);
    int var65 = var10.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test171() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getExtends();
    java.util.List var20 = var17.getImplements();
    java.util.List var21 = var17.getMembers();
    japa.parser.ast.type.ReferenceType var22 = new japa.parser.ast.type.ReferenceType();
    int var23 = var22.getArrayCount();
    int var24 = var22.getBeginColumn();
    var17.setModifiers(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test172() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var5 = var4.getName();
    japa.parser.ast.type.PrimitiveType var6 = new japa.parser.ast.type.PrimitiveType();
    int var7 = var6.getEndLine();
    var4.setArrayCount(var7);
    var0.setArrayCount(var7);
    japa.parser.ast.type.Type var10 = var0.getType();
    java.util.List var11 = var0.getThrows();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test173() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    int var38 = var36.getModifiers();
    var22.setExpression((japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var57 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var58 = var57.getExtends();
    java.util.List var59 = var57.getMembers();
    java.util.List var60 = var57.getMembers();
    japa.parser.Token var62 = japa.parser.Token.newToken((-1));
    var57.setModifiers((-1));
    var22.setBeginLine((-1));
    japa.parser.ast.expr.Expression var65 = var22.getExpression();
    japa.parser.ast.stmt.ExpressionStmt var66 = new japa.parser.ast.stmt.ExpressionStmt(var65);
    japa.parser.ast.expr.NameExpr var67 = new japa.parser.ast.expr.NameExpr();
    int var68 = var67.getBeginLine();
    java.lang.String var69 = var67.getName();
    japa.parser.ast.body.VariableDeclaratorId var71 = new japa.parser.ast.body.VariableDeclaratorId("");
    var67.setName("");
    var66.setExpression((japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.expr.Expression var74 = var66.getExpression();
    japa.parser.ast.stmt.ReturnStmt var75 = new japa.parser.ast.stmt.ReturnStmt(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);

  }

  public void test174() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    java.util.List var4 = var0.getAnnotations();
    int var5 = var0.getBeginColumn();
    japa.parser.ast.body.MethodDeclaration var6 = new japa.parser.ast.body.MethodDeclaration();
    int var7 = var6.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.Token var25 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var26 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var30 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var32 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    japa.parser.Token var50 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var51 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var55 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.VariableDeclaratorId var57 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var58 = new japa.parser.ast.LineComment(var7, 0, 0, 1, "");
    var0.setArrayCount(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test175() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    int var16 = var14.getModifiers();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator(var5, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var24 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var22, (japa.parser.ast.expr.Expression)var23);
    int var25 = var23.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var26 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var27 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var28 = var27.getType();
    var23.setData((java.lang.Object)var27);
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator(var5, (japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.Type var40 = var39.getType();
    japa.parser.ast.type.PrimitiveType var41 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.body.Parameter var49 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var41, var46);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    int var57 = var55.getModifiers();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator(var46, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclaratorId var59 = var58.getId();
    var39.setId(var59);
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator(var59);
    japa.parser.ast.type.PrimitiveType var62 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.body.Parameter var70 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var62, var67);
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    int var78 = var76.getModifiers();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator(var67, (japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.body.VariableDeclaratorId var80 = var79.getId();
    japa.parser.ast.body.VariableDeclaratorId var85 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var87 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var85, (japa.parser.ast.expr.Expression)var86);
    int var88 = var86.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var89 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var86);
    japa.parser.ast.type.PrimitiveType var90 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var91 = var90.getType();
    var86.setData((java.lang.Object)var90);
    japa.parser.ast.stmt.ExpressionStmt var93 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var86);
    japa.parser.ast.body.VariableDeclarator var94 = new japa.parser.ast.body.VariableDeclarator(var80, (japa.parser.ast.expr.Expression)var86);
    japa.parser.ast.body.VariableDeclarator var95 = new japa.parser.ast.body.VariableDeclarator(var59, (japa.parser.ast.expr.Expression)var86);
    japa.parser.ast.expr.Expression var96 = var95.getInit();
    var30.setInit(var96);
    japa.parser.ast.body.VariableDeclaratorId var98 = var30.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var98 == null);

  }

  public void test176() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.ImportDeclaration var22 = new japa.parser.ast.ImportDeclaration();
    var22.setStatic(false);
    var8.setVarArgs(false);
    japa.parser.ast.type.PrimitiveType var26 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.Parameter var34 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var26, var31);
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    var34.setId(var40);
    var8.setId(var40);
    java.lang.Object var46 = var40.getData();
    int var47 = var40.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var49 = var48.getName();
    japa.parser.ast.type.PrimitiveType var50 = new japa.parser.ast.type.PrimitiveType();
    int var51 = var50.getEndLine();
    var48.setArrayCount(var51);
    japa.parser.ast.type.PrimitiveType var53 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.Parameter var61 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var53, var58);
    japa.parser.ast.type.ReferenceType var63 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var53, 0);
    int var64 = var53.getBeginLine();
    var48.setArrayCount(var64);
    var40.setArrayCount(var64);
    java.lang.String var67 = var40.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);

  }

  public void test177() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getModifiers();
    japa.parser.Token var5 = japa.parser.Token.newToken(var3, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var6 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    java.util.List var7 = var6.getTypeArgs();
    java.lang.String var8 = var6.getName();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var16 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var17 = new japa.parser.ast.stmt.ReturnStmt();
    int var18 = var17.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var19 = new japa.parser.ast.stmt.ReturnStmt();
    int var20 = var19.getEndLine();
    japa.parser.ast.body.MethodDeclaration var21 = new japa.parser.ast.body.MethodDeclaration();
    int var22 = var21.getModifiers();
    var21.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    var47.setExpression((japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.type.PrimitiveType var56 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.body.Parameter var64 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var56, var61);
    japa.parser.ast.type.Type var65 = var64.getType();
    var53.setType(var65);
    japa.parser.ast.stmt.ReturnStmt var67 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.stmt.ReturnStmt var68 = new japa.parser.ast.stmt.ReturnStmt(1, var18, var20, 0, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var70 = japa.parser.Token.newToken(var20, "");
    japa.parser.ast.type.ClassOrInterfaceType var71 = new japa.parser.ast.type.ClassOrInterfaceType(var6, "");
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId("");
    java.lang.String var73 = var72.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));

  }

  public void test178() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    var23.setEndColumn(0);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.ReferenceType var59 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var49, 0);
    japa.parser.ast.type.PrimitiveType var60 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.Parameter var68 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var65);
    japa.parser.ast.type.ReferenceType var70 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var60, 0);
    var59.setType((japa.parser.ast.type.Type)var60);
    japa.parser.ast.type.PrimitiveType var72 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.body.Parameter var80 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var72, var77);
    japa.parser.ast.type.PrimitiveType var81 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var82 = var81.getType();
    var80.setType((japa.parser.ast.type.Type)var81);
    var59.setType((japa.parser.ast.type.Type)var81);
    int var85 = var59.getArrayCount();
    int var86 = var59.getArrayCount();
    var23.setModifiers(var86);
    japa.parser.ast.stmt.ExpressionStmt var88 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.stmt.ExpressionStmt var89 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var23);
    int var90 = var89.getEndLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test179() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    var0.setBody(var6);
    java.util.List var9 = var0.getThrows();
    int var10 = var0.getBeginLine();
    java.util.List var11 = var0.getThrows();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test180() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    japa.parser.ast.type.PrimitiveType var23 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.Parameter var31 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var23, var28);
    japa.parser.ast.type.PrimitiveType var32 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.Parameter var40 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var32, var37);
    var31.setId(var37);
    var8.setId(var37);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var60 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var61 = var60.getExtends();
    japa.parser.ast.body.MethodDeclaration var62 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var63 = var62.getType();
    java.lang.String var64 = var62.getName();
    japa.parser.ast.type.PrimitiveType var65 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.Parameter var73 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var65, var70);
    japa.parser.ast.type.ReferenceType var75 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var65, 0);
    japa.parser.Token var76 = new japa.parser.Token(0);
    var62.setArrayCount(0);
    var60.setModifiers(0);
    java.lang.String var79 = var60.getName();
    japa.parser.ast.expr.NameExpr var80 = new japa.parser.ast.expr.NameExpr(var79);
    var37.setName(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));

  }

  public void test181() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.ImportDeclaration var22 = new japa.parser.ast.ImportDeclaration();
    var22.setStatic(false);
    var8.setVarArgs(false);
    japa.parser.ast.type.PrimitiveType var26 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.Parameter var34 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var26, var31);
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    var34.setId(var40);
    var8.setId(var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = var8.getId();
    java.util.List var47 = var8.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var50 = var49.getArrayCount();
    var8.setModifiers(var50);
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator();
    java.lang.Object var53 = var52.getData();
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    var52.setInit((japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.MethodDeclaration var62 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var63 = var62.getType();
    java.lang.String var64 = var62.getName();
    int var65 = var62.getModifiers();
    japa.parser.Token var67 = japa.parser.Token.newToken(var65, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var68 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    var59.setType((japa.parser.ast.type.Type)var68);
    java.lang.Object var70 = var68.getData();
    japa.parser.ast.type.ReferenceType var71 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var68);
    japa.parser.ast.body.MethodDeclaration var72 = new japa.parser.ast.body.MethodDeclaration();
    int var73 = var72.getModifiers();
    java.util.List var74 = var72.getThrows();
    int var75 = var72.getModifiers();
    var71.setEndColumn(var75);
    var8.setType((japa.parser.ast.type.Type)var71);
    int var78 = var8.getModifiers();
    boolean var79 = var8.isVarArgs();
    japa.parser.ast.type.Type var80 = var8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);

  }

  public void test182() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    int var15 = var12.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var40.setExpression((japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    var40.setExpression((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.type.Type var51 = var48.getType();
    japa.parser.ast.stmt.ExpressionStmt var52 = new japa.parser.ast.stmt.ExpressionStmt((-1), var15, 100, 1, (japa.parser.ast.expr.Expression)var48);
    var0.setModifiers(1);
    java.util.List var54 = var0.getParameters();
    java.lang.String var55 = var0.getName();
    java.util.List var56 = var0.getParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);

  }

  public void test183() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    java.util.List var36 = var17.getImplements();
    java.util.List var37 = var17.getImplements();
    java.util.List var38 = var17.getTypeParameters();
    java.util.List var39 = var17.getTypeParameters();
    java.lang.String var40 = var17.getName();
    java.util.List var41 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);

  }

  public void test184() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    java.util.List var2 = var0.getComments();
    java.util.List var3 = var0.getTypes();
    java.util.List var4 = var0.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test185() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var9 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    var14.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    var40.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.Type var58 = var57.getType();
    var46.setType(var58);
    japa.parser.ast.stmt.ReturnStmt var60 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt(1, var11, var13, 0, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var63 = japa.parser.Token.newToken(var13, "");
    japa.parser.ast.type.ClassOrInterfaceType var64 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "");
    java.lang.String var65 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var66 = var64.getScope();
    java.lang.String var67 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var68 = var64.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var69 = var64.getScope();
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    int var71 = var70.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator(var70);
    japa.parser.ast.body.Parameter var73 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test186() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    var8.setId(var14);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var27 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.type.PrimitiveType var28 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var29 = var28.getType();
    var24.setData((java.lang.Object)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    var24.setType((japa.parser.ast.type.Type)var31);
    var8.setType((japa.parser.ast.type.Type)var31);
    japa.parser.ast.type.PrimitiveType var42 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.Parameter var50 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var42, var47);
    japa.parser.ast.type.ReferenceType var52 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var42, 0);
    int var53 = var52.getArrayCount();
    int var54 = var52.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var56 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var52, var55);
    int var57 = var56.getBeginColumn();
    japa.parser.ast.type.PrimitiveType var58 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.Parameter var66 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var58, var63);
    var56.setId(var63);
    var8.setId(var63);
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator(var63);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var71 = var70.getName();
    japa.parser.ast.type.PrimitiveType var72 = new japa.parser.ast.type.PrimitiveType();
    int var73 = var72.getEndLine();
    var70.setArrayCount(var73);
    int var75 = var70.getArrayCount();
    var69.setId(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);

  }

  public void test187() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.Type var40 = var39.getType();
    var28.setType(var40);
    java.util.List var42 = var28.getAnnotations();
    japa.parser.ast.stmt.ReturnStmt var43 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.Type var44 = var28.getType();
    japa.parser.ast.stmt.ReturnStmt var45 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.expr.Expression var46 = var45.getExpr();
    japa.parser.ast.expr.Expression var47 = var45.getExpr();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);

  }

  public void test188() throws Throwable {

    japa.parser.ast.PackageDeclaration var0 = new japa.parser.ast.PackageDeclaration();
    java.util.List var1 = var0.getAnnotations();
    japa.parser.ast.expr.NameExpr var2 = var0.getName();
    japa.parser.ast.expr.NameExpr var3 = var0.getName();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.body.MethodDeclaration var13 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var14 = var13.getType();
    java.lang.String var15 = var13.getName();
    int var16 = var13.getModifiers();
    japa.parser.ast.type.ReferenceType var17 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, var16);
    var0.setBeginLine(var16);
    japa.parser.ast.expr.NameExpr var19 = var0.getName();
    japa.parser.ast.ImportDeclaration var20 = new japa.parser.ast.ImportDeclaration();
    var20.setStatic(false);
    var20.setAsterisk(false);
    japa.parser.ast.expr.NameExpr var25 = new japa.parser.ast.expr.NameExpr();
    var20.setName(var25);
    japa.parser.ast.PackageDeclaration var27 = new japa.parser.ast.PackageDeclaration(var25);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var30 = var29.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator(var29, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.MethodDeclaration var33 = new japa.parser.ast.body.MethodDeclaration();
    int var34 = var33.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.Token var52 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var53 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var57 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var74 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var75 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var73, (japa.parser.ast.expr.Expression)var74);
    japa.parser.Token var77 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var78 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var81 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var82 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var81);
    japa.parser.ast.body.VariableDeclaratorId var84 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var85 = new japa.parser.ast.LineComment(var34, 0, 0, 1, "");
    int var86 = var85.getEndColumn();
    var85.setContent("hi!");
    var29.setName("hi!");
    japa.parser.ast.body.VariableDeclaratorId var90 = new japa.parser.ast.body.VariableDeclaratorId("hi!");
    var25.setName("hi!");
    var0.setName(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);

  }

  public void test189() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator(var15, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var28 = var27.getId();
    var8.setId(var28);
    int var30 = var8.getModifiers();
    japa.parser.ast.type.Type var31 = var8.getType();
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var34 = var33.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator(var33, (japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.body.VariableDeclaratorId var37 = var36.getId();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    int var45 = var43.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var46 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var48 = var47.getType();
    var43.setData((java.lang.Object)var47);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    int var57 = var54.getEndColumn();
    japa.parser.ast.body.Parameter var58 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var54);
    int var59 = var54.getArrayCount();
    var37.setArrayCount(var59);
    var8.setId(var37);
    java.util.List var62 = var8.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var68, (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.Token var80 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var81 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var85 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var85.setExpression((japa.parser.ast.expr.Expression)var86);
    japa.parser.ast.ImportDeclaration var88 = new japa.parser.ast.ImportDeclaration();
    var88.setStatic(false);
    boolean var91 = var88.isAsterisk();
    boolean var92 = var88.isStatic();
    int var93 = var88.getEndColumn();
    var86.setModifiers(var93);
    japa.parser.Token var95 = japa.parser.Token.newToken(var93);
    var8.setModifiers(var93);
    japa.parser.Token var97 = new japa.parser.Token(var93);
    java.lang.String var98 = var97.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == null);

  }

  public void test190() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var7 = var6.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator(var6, (japa.parser.ast.expr.Expression)var8);
    var4.setInit((japa.parser.ast.expr.Expression)var8);
    java.util.List var11 = var8.getVars();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    japa.parser.ast.stmt.BlockStmt var14 = new japa.parser.ast.stmt.BlockStmt();
    var12.setBody(var14);
    java.util.List var16 = var12.getAnnotations();
    japa.parser.ast.type.Type var17 = var12.getType();
    int var18 = var12.getArrayCount();
    int var19 = var12.getArrayCount();
    var8.setModifiers(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test191() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var2 = var0.getBody();
    japa.parser.ast.stmt.TryStmt var3 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    japa.parser.ast.stmt.BlockStmt var8 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var8);
    java.util.List var10 = var8.getStmts();
    var3.setFinallyBlock(var8);
    var0.setBody(var8);
    int var13 = var0.getBeginLine();
    japa.parser.ast.type.Type var14 = var0.getType();
    int var15 = var0.getEndLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test192() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var2 = var0.getBody();
    japa.parser.ast.stmt.TryStmt var3 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    japa.parser.ast.stmt.BlockStmt var8 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var8);
    java.util.List var10 = var8.getStmts();
    var3.setFinallyBlock(var8);
    var0.setBody(var8);
    int var13 = var0.getBeginLine();
    java.lang.String var14 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);

  }

  public void test193() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    java.util.List var2 = var0.getCatchs();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.stmt.TryStmt var5 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var6 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var7 = var6.getType();
    java.lang.String var8 = var6.getName();
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    japa.parser.ast.type.ReferenceType var19 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var9, 0);
    japa.parser.Token var20 = new japa.parser.Token(0);
    var6.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var22 = new japa.parser.ast.body.MethodDeclaration();
    int var23 = var22.getModifiers();
    japa.parser.ast.stmt.BlockStmt var24 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var24);
    japa.parser.ast.stmt.BlockStmt var26 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var26);
    var6.setBody(var26);
    var5.setFinallyBlock(var26);
    japa.parser.ast.stmt.BlockStmt var30 = var5.getFinallyBlock();
    var4.setBody(var30);
    var0.setTryBlock(var30);
    int var33 = var0.getEndColumn();
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    japa.parser.ast.stmt.BlockStmt var36 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var36);
    java.util.List var38 = var36.getStmts();
    java.util.List var39 = var36.getStmts();
    var0.setFinallyBlock(var36);
    japa.parser.ast.stmt.TryStmt var41 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var42 = var41.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var43 = new japa.parser.ast.body.MethodDeclaration();
    int var44 = var43.getModifiers();
    japa.parser.ast.stmt.BlockStmt var45 = new japa.parser.ast.stmt.BlockStmt();
    var43.setBody(var45);
    japa.parser.ast.stmt.BlockStmt var47 = new japa.parser.ast.stmt.BlockStmt();
    var43.setBody(var47);
    java.util.List var49 = var47.getStmts();
    var41.setTryBlock(var47);
    japa.parser.ast.stmt.BlockStmt var51 = var41.getTryBlock();
    var0.setFinallyBlock(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);

  }

  public void test194() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    java.util.List var23 = var8.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var24 = var8.getId();
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.type.Type var34 = var33.getType();
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    int var51 = var49.getModifiers();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator(var40, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var53 = var52.getId();
    var33.setId(var53);
    int var55 = var33.getModifiers();
    japa.parser.ast.type.Type var56 = var33.getType();
    int var57 = var33.getModifiers();
    var8.setModifiers(var57);
    boolean var59 = var8.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test195() throws Throwable {

    japa.parser.ast.body.VariableDeclarator var0 = new japa.parser.ast.body.VariableDeclarator();
    java.lang.Object var1 = var0.getData();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var10 = new japa.parser.Token((-1), "");
    java.lang.String var11 = var10.toString();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId(var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.Token var30 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var31 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var35 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var35.setExpression((japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    var35.setExpression((japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator(var12, (japa.parser.ast.expr.Expression)var43);
    int var47 = var12.getArrayCount();
    var0.setId(var12);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.PrimitiveType var58 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.Parameter var66 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var58, var63);
    var57.setId(var63);
    japa.parser.ast.type.Type var68 = var57.getType();
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var71 = var70.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var72 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var73 = new japa.parser.ast.body.VariableDeclarator(var70, (japa.parser.ast.expr.Expression)var72);
    japa.parser.ast.body.VariableDeclaratorId var74 = var73.getId();
    int var75 = var74.getArrayCount();
    var57.setModifiers(var75);
    int var77 = var57.getModifiers();
    var0.setEndColumn(var77);
    int var79 = var0.getBeginLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);

  }

  public void test196() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.ReferenceType var41 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var31, 0);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var60 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var64 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var63);
    var41.setArrayCount(0);
    var28.setType((japa.parser.ast.type.Type)var41);
    int var67 = var28.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test197() throws Throwable {

    japa.parser.Token var1 = japa.parser.Token.newToken((-1));
    japa.parser.ast.body.MethodDeclaration var2 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var3 = var2.getType();
    java.lang.String var4 = var2.getName();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.Token var12 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var13 = new japa.parser.ast.stmt.ReturnStmt();
    int var14 = var13.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt();
    int var16 = var15.getEndLine();
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    var17.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var43 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var43.setExpression((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.type.PrimitiveType var52 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var57 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var59 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var57, (japa.parser.ast.expr.Expression)var58);
    japa.parser.ast.body.Parameter var60 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var52, var57);
    japa.parser.ast.type.Type var61 = var60.getType();
    var49.setType(var61);
    japa.parser.ast.stmt.ReturnStmt var63 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.stmt.ReturnStmt var64 = new japa.parser.ast.stmt.ReturnStmt(1, var14, var16, 0, (japa.parser.ast.expr.Expression)var49);
    japa.parser.Token var66 = japa.parser.Token.newToken(var16, "");
    var2.setName("");
    japa.parser.Token var68 = japa.parser.Token.newToken((-1), "");
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType("");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);

  }

  public void test198() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getAnnotations();
    java.util.List var20 = var17.getImplements();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.Token var37 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var38 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var39 = var38.getMembers();
    int var40 = var38.getModifiers();
    var38.setInterface(true);
    var17.setInterface(true);
    japa.parser.ast.ImportDeclaration var44 = new japa.parser.ast.ImportDeclaration();
    var44.setStatic(false);
    boolean var47 = var44.isAsterisk();
    var44.setStatic(false);
    boolean var50 = var44.isStatic();
    japa.parser.ast.ImportDeclaration var51 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var52 = new japa.parser.ast.ImportDeclaration();
    var52.setStatic(false);
    boolean var55 = var52.isStatic();
    var51.setStatic(var55);
    boolean var57 = var51.isAsterisk();
    var44.setAsterisk(var57);
    var17.setInterface(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test199() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    var0.setAsterisk(false);
    boolean var5 = var0.isStatic();
    boolean var6 = var0.isStatic();
    japa.parser.ast.type.PrimitiveType var7 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.ast.body.Parameter var15 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var7, var12);
    japa.parser.ast.type.Type var16 = var15.getType();
    japa.parser.ast.type.PrimitiveType var17 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var24 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var22, (japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.Parameter var25 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var17, var22);
    japa.parser.ast.type.ReferenceType var27 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var17, 0);
    var15.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var30 = var29.getName();
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    int var32 = var31.getEndLine();
    var29.setArrayCount(var32);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    japa.parser.Token var50 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var51 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    int var52 = var51.getModifiers();
    boolean var53 = var29.equals((java.lang.Object)var51);
    var15.setVarArgs(var53);
    var0.setAsterisk(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test200() throws Throwable {

    japa.parser.ast.PackageDeclaration var0 = new japa.parser.ast.PackageDeclaration();
    java.util.List var1 = var0.getAnnotations();
    java.util.List var2 = var0.getAnnotations();
    japa.parser.ast.expr.NameExpr var3 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.Token var21 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var22 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var26 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    var26.setExpression((japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    japa.parser.ast.type.Type var44 = var43.getType();
    var32.setType(var44);
    japa.parser.ast.stmt.ReturnStmt var46 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.Token var64 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var65 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var69 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    var69.setExpression((japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.stmt.ReturnStmt var78 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.ImportDeclaration var79 = new japa.parser.ast.ImportDeclaration();
    var79.setStatic(false);
    boolean var82 = var79.isAsterisk();
    var79.setStatic(false);
    japa.parser.ast.expr.NameExpr var85 = new japa.parser.ast.expr.NameExpr();
    int var86 = var85.getBeginLine();
    var79.setName(var85);
    var78.setExpr((japa.parser.ast.expr.Expression)var85);
    var46.setExpr((japa.parser.ast.expr.Expression)var85);
    var0.setName(var85);
    java.util.List var91 = var0.getAnnotations();
    java.util.List var92 = var0.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);

  }

  public void test201() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var4.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    var4.setArrayCount((-1));
    int var16 = var4.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));

  }

  public void test202() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var33 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var32);
    var10.setArrayCount(0);
    int var35 = var10.getArrayCount();
    japa.parser.ast.type.ReferenceType var36 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10);
    int var37 = var10.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test203() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var2 = new japa.parser.ast.body.MethodDeclaration();
    int var3 = var2.getModifiers();
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var4);
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var6);
    java.util.List var8 = var6.getStmts();
    var0.setTryBlock(var6);
    java.util.List var10 = var0.getCatchs();
    java.lang.Object var11 = var0.getData();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    japa.parser.ast.stmt.BlockStmt var14 = new japa.parser.ast.stmt.BlockStmt();
    var12.setBody(var14);
    japa.parser.ast.stmt.BlockStmt var16 = new japa.parser.ast.stmt.BlockStmt();
    var12.setBody(var16);
    int var18 = var12.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var19 = var12.getBody();
    java.util.List var20 = var19.getStmts();
    var0.setFinallyBlock(var19);
    japa.parser.ast.stmt.BlockStmt var22 = var0.getFinallyBlock();
    java.util.List var23 = var0.getCatchs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);

  }

  public void test204() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var10.getArrayCount();
    int var12 = var10.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var13);
    int var15 = var14.getBeginColumn();
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    int var23 = var21.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var24 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var26 = var25.getType();
    var21.setData((java.lang.Object)var25);
    var14.setType((japa.parser.ast.type.Type)var25);
    japa.parser.ast.body.MethodDeclaration var29 = new japa.parser.ast.body.MethodDeclaration();
    int var30 = var29.getModifiers();
    var29.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var33 = new japa.parser.ast.body.MethodDeclaration();
    int var34 = var33.getModifiers();
    japa.parser.ast.stmt.BlockStmt var35 = new japa.parser.ast.stmt.BlockStmt();
    var33.setBody(var35);
    var29.setBody(var35);
    java.util.List var38 = var29.getThrows();
    int var39 = var29.getBeginLine();
    int var40 = var29.getBeginColumn();
    var14.setEndColumn(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test205() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    int var38 = var36.getModifiers();
    var22.setExpression((japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var57 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var58 = var57.getExtends();
    java.util.List var59 = var57.getMembers();
    java.util.List var60 = var57.getMembers();
    japa.parser.Token var62 = japa.parser.Token.newToken((-1));
    var57.setModifiers((-1));
    var22.setBeginLine((-1));
    japa.parser.ast.expr.Expression var65 = var22.getExpression();
    japa.parser.ast.stmt.ExpressionStmt var66 = new japa.parser.ast.stmt.ExpressionStmt(var65);
    japa.parser.ast.expr.Expression var67 = var66.getExpression();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);

  }

  public void test206() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    java.util.List var10 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var11 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.Parameter var19 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var11, var16);
    japa.parser.ast.type.ReferenceType var21 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var11, 0);
    int var22 = var11.getBeginLine();
    japa.parser.ast.type.ReferenceType var23 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var11);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var42 = var41.getExtends();
    java.util.List var43 = var41.getMembers();
    java.util.List var44 = var41.getTypeParameters();
    int var45 = var41.getBeginColumn();
    var23.setArrayCount(var45);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.ReferenceType var57 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var47, 0);
    int var58 = var57.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.Parameter var66 = new japa.parser.ast.body.Parameter(var45, (japa.parser.ast.type.Type)var57, var63);
    japa.parser.ast.type.ReferenceType var68 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var57, 1);
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var74);
    japa.parser.ast.type.ReferenceType var79 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var69, 0);
    int var80 = var79.getArrayCount();
    int var81 = var79.getArrayCount();
    japa.parser.ast.type.ReferenceType var82 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var57, var81);
    var8.setType((japa.parser.ast.type.Type)var57);
    japa.parser.ast.body.VariableDeclaratorId var84 = var8.getId();
    japa.parser.ast.body.MethodDeclaration var85 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var86 = var85.getType();
    int var87 = var85.getArrayCount();
    var8.setModifiers(var87);
    japa.parser.ast.body.VariableDeclaratorId var89 = var8.getId();
    java.util.List var90 = var8.getAnnotations();
    java.util.List var91 = var8.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);

  }

  public void test207() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    japa.parser.ast.body.VariableDeclaratorId var5 = var4.getId();
    japa.parser.ast.body.VariableDeclaratorId var6 = var4.getId();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.Token var24 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var25 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var29 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var29.setExpression((japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.expr.Expression var32 = var29.getExpression();
    japa.parser.ast.expr.NameExpr var33 = new japa.parser.ast.expr.NameExpr();
    int var34 = var33.getBeginLine();
    java.lang.String var35 = var33.getName();
    var29.setExpression((japa.parser.ast.expr.Expression)var33);
    var4.setInit((japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.ImportDeclaration var38 = new japa.parser.ast.ImportDeclaration();
    var38.setStatic(false);
    boolean var41 = var38.isAsterisk();
    var38.setStatic(false);
    boolean var44 = var38.isStatic();
    boolean var45 = var38.isStatic();
    boolean var46 = var38.isAsterisk();
    boolean var47 = var38.isAsterisk();
    japa.parser.ast.ImportDeclaration var48 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var49 = new japa.parser.ast.ImportDeclaration();
    var49.setStatic(false);
    boolean var52 = var49.isStatic();
    var48.setStatic(var52);
    japa.parser.ast.ImportDeclaration var54 = new japa.parser.ast.ImportDeclaration(var33, var47, var52);
    java.lang.String var55 = var54.toString();
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var68, (japa.parser.ast.expr.Expression)var69);
    japa.parser.Token var72 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var73 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var74 = var73.getExtends();
    java.util.List var75 = var73.getExtends();
    japa.parser.ast.stmt.ReturnStmt var76 = new japa.parser.ast.stmt.ReturnStmt();
    int var77 = var76.getEndLine();
    var73.setModifiers(var77);
    java.util.List var79 = var73.getTypeParameters();
    japa.parser.ast.ImportDeclaration var80 = new japa.parser.ast.ImportDeclaration();
    var80.setStatic(false);
    boolean var83 = var80.isStatic();
    japa.parser.ast.ImportDeclaration var84 = new japa.parser.ast.ImportDeclaration();
    var84.setStatic(false);
    boolean var87 = var84.isAsterisk();
    var84.setStatic(false);
    boolean var90 = var84.isStatic();
    var80.setAsterisk(var90);
    var73.setInterface(var90);
    var54.setAsterisk(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "import null;\n"+ "'", var55.equals("import null;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test208() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    java.util.List var31 = var28.getAnnotations();
    int var32 = var28.getEndColumn();
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    var33.setEndColumn((-1));
    var28.setEndColumn((-1));
    japa.parser.Token var44 = new japa.parser.Token((-1), "hi!");
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test209() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.Type var40 = var39.getType();
    var28.setType(var40);
    japa.parser.ast.stmt.ReturnStmt var42 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var65 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    var65.setExpression((japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.stmt.ReturnStmt var74 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.ImportDeclaration var75 = new japa.parser.ast.ImportDeclaration();
    var75.setStatic(false);
    boolean var78 = var75.isAsterisk();
    var75.setStatic(false);
    japa.parser.ast.expr.NameExpr var81 = new japa.parser.ast.expr.NameExpr();
    int var82 = var81.getBeginLine();
    var75.setName(var81);
    var74.setExpr((japa.parser.ast.expr.Expression)var81);
    var42.setExpr((japa.parser.ast.expr.Expression)var81);
    japa.parser.ast.PackageDeclaration var86 = new japa.parser.ast.PackageDeclaration(var81);
    java.util.List var87 = var86.getAnnotations();
    java.util.List var88 = var86.getAnnotations();
    java.util.List var89 = var86.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);

  }

  public void test210() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.type.PrimitiveType var19 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.Parameter var27 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var19, var24);
    japa.parser.ast.type.ReferenceType var29 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var19, 0);
    japa.parser.Token var30 = new japa.parser.Token(0);
    var17.setModifiers(0);
    japa.parser.ast.body.JavadocComment var32 = var17.getJavaDoc();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var49 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var50 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var51 = var50.getExtends();
    japa.parser.ast.body.MethodDeclaration var52 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var53 = var52.getType();
    java.lang.String var54 = var52.getName();
    japa.parser.ast.type.PrimitiveType var55 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.Parameter var63 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var55, var60);
    japa.parser.ast.type.ReferenceType var65 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var55, 0);
    japa.parser.Token var66 = new japa.parser.Token(0);
    var52.setArrayCount(0);
    var50.setModifiers(0);
    java.util.List var69 = var50.getExtends();
    java.util.List var70 = var50.getImplements();
    japa.parser.ast.LineComment var71 = new japa.parser.ast.LineComment();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    int var79 = var77.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var80 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.VariableDeclaratorId var85 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var87 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var85, (japa.parser.ast.expr.Expression)var86);
    var77.setModifiers((-1));
    var71.setBeginColumn((-1));
    japa.parser.ast.body.MethodDeclaration var90 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var91 = var90.getType();
    java.lang.String var92 = var90.getName();
    japa.parser.ast.stmt.BlockStmt var93 = var90.getBody();
    boolean var94 = var71.equals((java.lang.Object)var90);
    var50.setInterface(var94);
    var17.setInterface(var94);
    boolean var97 = var17.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test211() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    var0.setStatic(false);
    boolean var6 = var0.isStatic();
    japa.parser.ast.CompilationUnit var7 = new japa.parser.ast.CompilationUnit();
    java.util.List var8 = var7.getComments();
    japa.parser.ast.PackageDeclaration var9 = new japa.parser.ast.PackageDeclaration();
    java.util.List var10 = var9.getAnnotations();
    japa.parser.ast.expr.NameExpr var11 = var9.getName();
    java.util.List var12 = var9.getAnnotations();
    japa.parser.ast.expr.NameExpr var13 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var14 = new japa.parser.ast.ImportDeclaration();
    var14.setStatic(false);
    var14.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var37 = var36.getExtends();
    boolean var38 = var36.isInterface();
    japa.parser.ast.ImportDeclaration var39 = new japa.parser.ast.ImportDeclaration(var13, false, var38);
    var9.setName(var13);
    var7.setPackage(var9);
    japa.parser.ast.expr.NameExpr var42 = var9.getName();
    japa.parser.ast.ImportDeclaration var43 = new japa.parser.ast.ImportDeclaration();
    var43.setStatic(false);
    boolean var46 = var43.isStatic();
    boolean var47 = var43.isAsterisk();
    japa.parser.ast.expr.NameExpr var48 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var49 = new japa.parser.ast.ImportDeclaration();
    var49.setStatic(false);
    var49.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.VariableDeclaratorId var66 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var68 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var66, (japa.parser.ast.expr.Expression)var67);
    japa.parser.Token var70 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var71 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var72 = var71.getExtends();
    boolean var73 = var71.isInterface();
    japa.parser.ast.ImportDeclaration var74 = new japa.parser.ast.ImportDeclaration(var48, false, var73);
    japa.parser.ast.ImportDeclaration var75 = new japa.parser.ast.ImportDeclaration(var42, var47, false);
    var0.setAsterisk(var47);
    japa.parser.ast.ImportDeclaration var77 = new japa.parser.ast.ImportDeclaration();
    var77.setStatic(false);
    boolean var80 = var77.isAsterisk();
    var77.setStatic(false);
    japa.parser.ast.expr.NameExpr var83 = new japa.parser.ast.expr.NameExpr();
    int var84 = var83.getBeginLine();
    var77.setName(var83);
    japa.parser.ast.stmt.ReturnStmt var86 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.ImportDeclaration var87 = new japa.parser.ast.ImportDeclaration();
    var87.setStatic(false);
    boolean var90 = var87.isAsterisk();
    var87.setStatic(false);
    boolean var93 = var87.isStatic();
    boolean var94 = var87.isStatic();
    boolean var95 = var87.isAsterisk();
    boolean var96 = var87.isAsterisk();
    var83.setData((java.lang.Object)var96);
    var0.setAsterisk(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test212() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getExtends();
    java.util.List var20 = var17.getImplements();
    int var21 = var17.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test213() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.ast.type.PrimitiveType var15 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.Parameter var23 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var15, var20);
    japa.parser.ast.type.ReferenceType var25 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var15, 0);
    var14.setType((japa.parser.ast.type.Type)var15);
    japa.parser.ast.type.PrimitiveType var27 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.Parameter var35 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var27, var32);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var37 = var36.getType();
    var35.setType((japa.parser.ast.type.Type)var36);
    var14.setType((japa.parser.ast.type.Type)var36);
    japa.parser.ast.type.Type var40 = var14.getType();
    var0.setType(var40);
    int var42 = var0.getModifiers();
    int var43 = var0.getEndColumn();
    japa.parser.ast.body.MethodDeclaration var44 = new japa.parser.ast.body.MethodDeclaration();
    int var45 = var44.getModifiers();
    japa.parser.ast.stmt.BlockStmt var46 = new japa.parser.ast.stmt.BlockStmt();
    var44.setBody(var46);
    japa.parser.ast.stmt.BlockStmt var48 = new japa.parser.ast.stmt.BlockStmt();
    var44.setBody(var48);
    int var50 = var44.getArrayCount();
    int var51 = var44.getEndColumn();
    var0.setModifiers(var51);
    java.util.List var53 = var0.getParameters();
    int var54 = var0.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);

  }

  public void test214() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getImports();
    java.util.List var2 = var0.getComments();
    java.util.List var3 = var0.getImports();
    japa.parser.ast.CompilationUnit var4 = new japa.parser.ast.CompilationUnit();
    java.util.List var5 = var4.getComments();
    japa.parser.ast.PackageDeclaration var6 = new japa.parser.ast.PackageDeclaration();
    java.util.List var7 = var6.getAnnotations();
    japa.parser.ast.expr.NameExpr var8 = var6.getName();
    java.util.List var9 = var6.getAnnotations();
    japa.parser.ast.expr.NameExpr var10 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var11 = new japa.parser.ast.ImportDeclaration();
    var11.setStatic(false);
    var11.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var32 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var33 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var34 = var33.getExtends();
    boolean var35 = var33.isInterface();
    japa.parser.ast.ImportDeclaration var36 = new japa.parser.ast.ImportDeclaration(var10, false, var35);
    var6.setName(var10);
    var4.setPackage(var6);
    japa.parser.ast.PackageDeclaration var39 = new japa.parser.ast.PackageDeclaration();
    java.util.List var40 = var39.getAnnotations();
    java.util.List var41 = var39.getAnnotations();
    var4.setPackage(var39);
    var0.setPackage(var39);
    java.util.List var44 = var0.getComments();
    int var45 = var0.getEndColumn();
    java.util.List var46 = var0.getImports();
    java.util.List var47 = var0.getImports();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);

  }

  public void test215() throws Throwable {

    japa.parser.ast.expr.NameExpr var0 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var1 = new japa.parser.ast.ImportDeclaration();
    var1.setStatic(false);
    var1.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var24 = var23.getExtends();
    boolean var25 = var23.isInterface();
    japa.parser.ast.ImportDeclaration var26 = new japa.parser.ast.ImportDeclaration(var0, false, var25);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var29 = var28.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator(var28, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.MethodDeclaration var32 = new japa.parser.ast.body.MethodDeclaration();
    int var33 = var32.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.Token var51 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var52 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var56 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var55);
    japa.parser.Token var58 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    japa.parser.Token var76 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var77 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var81 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var84 = new japa.parser.ast.LineComment(var33, 0, 0, 1, "");
    int var85 = var84.getEndColumn();
    var84.setContent("hi!");
    var28.setName("hi!");
    var0.setName("hi!");
    japa.parser.ast.PackageDeclaration var90 = new japa.parser.ast.PackageDeclaration(var0);
    japa.parser.ast.expr.NameExpr var91 = var90.getName();
    java.util.List var92 = var90.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);

  }

  public void test216() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var1 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    int var16 = var13.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var41.setExpression((japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var41.setExpression((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.type.Type var52 = var49.getType();
    japa.parser.ast.stmt.ExpressionStmt var53 = new japa.parser.ast.stmt.ExpressionStmt((-1), var16, 100, 1, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator(var0, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var71 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var72 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var73 = var72.getExtends();
    japa.parser.ast.body.MethodDeclaration var74 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var75 = var74.getType();
    java.lang.String var76 = var74.getName();
    japa.parser.ast.type.PrimitiveType var77 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var82 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var83 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var84 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var82, (japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.body.Parameter var85 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var77, var82);
    japa.parser.ast.type.ReferenceType var87 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var77, 0);
    japa.parser.Token var88 = new japa.parser.Token(0);
    var74.setArrayCount(0);
    var72.setModifiers(0);
    var0.setArrayCount(0);
    int var92 = var0.getArrayCount();
    japa.parser.Token var93 = new japa.parser.Token(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test217() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    java.util.List var4 = var0.getAnnotations();
    int var5 = var0.getModifiers();
    int var6 = var0.getBeginLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test218() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    var0.setStatic(false);
    boolean var6 = var0.isStatic();
    japa.parser.ast.CompilationUnit var7 = new japa.parser.ast.CompilationUnit();
    java.util.List var8 = var7.getComments();
    japa.parser.ast.PackageDeclaration var9 = new japa.parser.ast.PackageDeclaration();
    java.util.List var10 = var9.getAnnotations();
    japa.parser.ast.expr.NameExpr var11 = var9.getName();
    java.util.List var12 = var9.getAnnotations();
    japa.parser.ast.expr.NameExpr var13 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var14 = new japa.parser.ast.ImportDeclaration();
    var14.setStatic(false);
    var14.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var37 = var36.getExtends();
    boolean var38 = var36.isInterface();
    japa.parser.ast.ImportDeclaration var39 = new japa.parser.ast.ImportDeclaration(var13, false, var38);
    var9.setName(var13);
    var7.setPackage(var9);
    japa.parser.ast.expr.NameExpr var42 = var9.getName();
    japa.parser.ast.ImportDeclaration var43 = new japa.parser.ast.ImportDeclaration();
    var43.setStatic(false);
    boolean var46 = var43.isStatic();
    boolean var47 = var43.isAsterisk();
    japa.parser.ast.expr.NameExpr var48 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var49 = new japa.parser.ast.ImportDeclaration();
    var49.setStatic(false);
    var49.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.VariableDeclaratorId var66 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var68 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var66, (japa.parser.ast.expr.Expression)var67);
    japa.parser.Token var70 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var71 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var72 = var71.getExtends();
    boolean var73 = var71.isInterface();
    japa.parser.ast.ImportDeclaration var74 = new japa.parser.ast.ImportDeclaration(var48, false, var73);
    japa.parser.ast.ImportDeclaration var75 = new japa.parser.ast.ImportDeclaration(var42, var47, false);
    var0.setAsterisk(var47);
    boolean var77 = var0.isStatic();
    japa.parser.ast.expr.NameExpr var78 = var0.getName();
    boolean var79 = var0.isAsterisk();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test219() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var27 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var26);
    var0.setBeginColumn(0);
    japa.parser.Token var29 = new japa.parser.Token(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test220() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    var0.setStatic(false);
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    int var7 = var6.getBeginLine();
    var0.setName(var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.Token var25 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var26 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var27 = var26.getMembers();
    int var28 = var26.getModifiers();
    java.util.List var29 = var26.getImplements();
    boolean var30 = var26.isInterface();
    var0.setStatic(var30);
    japa.parser.ast.expr.NameExpr var32 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);

  }

  public void test221() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var7 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt();
    int var9 = var8.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    var12.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    var38.setExpression((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.Type var56 = var55.getType();
    var44.setType(var56);
    japa.parser.ast.stmt.ReturnStmt var58 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.stmt.ReturnStmt var59 = new japa.parser.ast.stmt.ReturnStmt(1, var9, var11, 0, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var61 = japa.parser.Token.newToken(var11, "");
    japa.parser.ast.expr.NameExpr var62 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.body.VariableDeclaratorId var69 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var71 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var69, (japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    japa.parser.Token var81 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var82 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var85 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var86 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var85);
    japa.parser.ast.expr.VariableDeclarationExpr var87 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var86.setExpression((japa.parser.ast.expr.Expression)var87);
    int var89 = var86.getBeginLine();
    japa.parser.ast.expr.Expression var90 = var86.getExpression();
    japa.parser.ast.body.VariableDeclarator var91 = new japa.parser.ast.body.VariableDeclarator(var63, var90);
    java.lang.Object var92 = var91.getData();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);

  }

  public void test222() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    int var5 = var0.getArrayCount();
    int var6 = var0.getArrayCount();
    japa.parser.ast.body.JavadocComment var7 = var0.getJavaDoc();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.expr.NameExpr var17 = new japa.parser.ast.expr.NameExpr("");
    var0.setName("");
    japa.parser.ast.type.ClassOrInterfaceType var19 = new japa.parser.ast.type.ClassOrInterfaceType("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test223() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    java.util.List var35 = var0.getImports();
    java.util.List var36 = var0.getImports();
    java.util.List var37 = var0.getComments();
    java.util.List var38 = var0.getTypes();
    java.util.List var39 = var0.getTypes();
    japa.parser.ast.PackageDeclaration var40 = var0.getPackage();
    java.util.List var41 = var0.getImports();
    japa.parser.ast.PackageDeclaration var42 = var0.getPackage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);

  }

  public void test224() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var9 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    var14.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    var40.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.Type var58 = var57.getType();
    var46.setType(var58);
    japa.parser.ast.stmt.ReturnStmt var60 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt(1, var11, var13, 0, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var63 = japa.parser.Token.newToken(var13, "");
    japa.parser.ast.type.ClassOrInterfaceType var64 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "");
    java.lang.String var65 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var66 = var64.getScope();
    java.lang.String var67 = var64.getName();
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.body.VariableDeclaratorId var80 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var81 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var82 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var80, (japa.parser.ast.expr.Expression)var81);
    japa.parser.Token var84 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var85 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var64, "");
    japa.parser.ast.expr.NameExpr var87 = new japa.parser.ast.expr.NameExpr("");
    java.lang.String var88 = var87.getName();
    java.lang.String var89 = var87.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));

  }

  public void test225() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var8 = new japa.parser.Token((-1), "");
    japa.parser.ast.expr.NameExpr var9 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var10 = new japa.parser.ast.PackageDeclaration(var9);
    java.util.List var11 = var10.getAnnotations();
    java.util.List var12 = var10.getAnnotations();
    japa.parser.ast.expr.NameExpr var13 = var10.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test226() throws Throwable {

    japa.parser.ast.expr.NameExpr var0 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var1 = new japa.parser.ast.ImportDeclaration();
    var1.setStatic(false);
    var1.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var24 = var23.getExtends();
    boolean var25 = var23.isInterface();
    japa.parser.ast.ImportDeclaration var26 = new japa.parser.ast.ImportDeclaration(var0, false, var25);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var29 = var28.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator(var28, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.MethodDeclaration var32 = new japa.parser.ast.body.MethodDeclaration();
    int var33 = var32.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.Token var51 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var52 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var56 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var55);
    japa.parser.Token var58 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    japa.parser.Token var76 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var77 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var81 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var84 = new japa.parser.ast.LineComment(var33, 0, 0, 1, "");
    int var85 = var84.getEndColumn();
    var84.setContent("hi!");
    var28.setName("hi!");
    var0.setName("hi!");
    japa.parser.ast.LineComment var90 = new japa.parser.ast.LineComment("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var91 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);

  }

  public void test227() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getImports();
    java.util.List var2 = var0.getImports();
    japa.parser.ast.type.PrimitiveType var3 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.Parameter var11 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var3, var8);
    japa.parser.ast.type.ReferenceType var13 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var3, 0);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var31 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var32 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var36 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var35);
    var13.setArrayCount(0);
    var0.setEndColumn(0);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.Token var55 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var56 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var57 = var56.getExtends();
    japa.parser.ast.body.MethodDeclaration var58 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var59 = var58.getType();
    java.lang.String var60 = var58.getName();
    japa.parser.ast.type.PrimitiveType var61 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var66 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var68 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var66, (japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.body.Parameter var69 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var61, var66);
    japa.parser.ast.type.ReferenceType var71 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var61, 0);
    japa.parser.Token var72 = new japa.parser.Token(0);
    var58.setArrayCount(0);
    var56.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    japa.parser.Token var83 = new japa.parser.Token((-1), "");
    java.lang.String var84 = var83.toString();
    var56.setName(var84);
    japa.parser.Token var86 = japa.parser.Token.newToken(0, var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);

  }

  public void test228() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var8.setType((japa.parser.ast.type.Type)var9);
    boolean var12 = var8.isVarArgs();
    japa.parser.ast.ImportDeclaration var13 = new japa.parser.ast.ImportDeclaration();
    var13.setStatic(false);
    boolean var16 = var13.isAsterisk();
    var13.setStatic(false);
    japa.parser.ast.expr.NameExpr var19 = new japa.parser.ast.expr.NameExpr();
    int var20 = var19.getBeginLine();
    var13.setName(var19);
    boolean var22 = var13.isAsterisk();
    var8.setVarArgs(var22);
    japa.parser.ast.body.VariableDeclaratorId var24 = var8.getId();
    japa.parser.ast.type.ClassOrInterfaceType var26 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var34 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var35 = new japa.parser.ast.stmt.ReturnStmt();
    int var36 = var35.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var37 = new japa.parser.ast.stmt.ReturnStmt();
    int var38 = var37.getEndLine();
    japa.parser.ast.body.MethodDeclaration var39 = new japa.parser.ast.body.MethodDeclaration();
    int var40 = var39.getModifiers();
    var39.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var65 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    var65.setExpression((japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.type.PrimitiveType var74 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.Parameter var82 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var74, var79);
    japa.parser.ast.type.Type var83 = var82.getType();
    var71.setType(var83);
    japa.parser.ast.stmt.ReturnStmt var85 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.stmt.ReturnStmt var86 = new japa.parser.ast.stmt.ReturnStmt(1, var36, var38, 0, (japa.parser.ast.expr.Expression)var71);
    japa.parser.Token var88 = japa.parser.Token.newToken(var38, "");
    japa.parser.ast.type.ClassOrInterfaceType var89 = new japa.parser.ast.type.ClassOrInterfaceType(var26, "");
    java.lang.String var90 = var89.getName();
    japa.parser.ast.type.ClassOrInterfaceType var91 = var89.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var92 = var89.getScope();
    java.util.List var93 = var89.getTypeArgs();
    var8.setType((japa.parser.ast.type.Type)var89);
    japa.parser.ast.type.ReferenceType var95 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + ""+ "'", var90.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);

  }

  public void test229() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var2 = new japa.parser.ast.body.MethodDeclaration();
    int var3 = var2.getModifiers();
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var4);
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var6);
    java.util.List var8 = var6.getStmts();
    var0.setTryBlock(var6);
    japa.parser.ast.stmt.BlockStmt var10 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var11 = var0.getFinallyBlock();
    japa.parser.ast.stmt.TryStmt var12 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var13 = var12.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var14 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var15 = var14.getStmts();
    var12.setFinallyBlock(var14);
    japa.parser.ast.stmt.BlockStmt var17 = var12.getFinallyBlock();
    java.util.List var18 = var12.getCatchs();
    japa.parser.ast.stmt.TryStmt var19 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var20 = var19.getCatchs();
    java.util.List var21 = var19.getCatchs();
    japa.parser.ast.stmt.BlockStmt var22 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var23 = var22.getStmts();
    var19.setFinallyBlock(var22);
    var12.setFinallyBlock(var22);
    int var26 = var22.getEndLine();
    var0.setTryBlock(var22);
    japa.parser.ast.stmt.BlockStmt var28 = var0.getFinallyBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);

  }

  public void test230() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getExtends();
    java.util.List var20 = var17.getImplements();
    java.util.List var21 = var17.getImplements();
    java.lang.String var22 = var17.getName();
    java.lang.Object var23 = var17.getData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);

  }

  public void test231() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.Token var44 = new japa.parser.Token((-1), "");
    java.lang.String var45 = var44.toString();
    var17.setName(var45);
    japa.parser.ast.expr.NameExpr var47 = new japa.parser.ast.expr.NameExpr(var45);
    japa.parser.ast.stmt.ReturnStmt var48 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.expr.Expression var49 = var48.getExpr();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);

  }

  public void test232() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    int var5 = var0.getArrayCount();
    java.lang.String var6 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    int var25 = var24.getModifiers();
    var0.setEndLine(var25);
    java.lang.Object var27 = var0.getData();
    japa.parser.ast.body.MethodDeclaration var28 = new japa.parser.ast.body.MethodDeclaration();
    int var29 = var28.getModifiers();
    japa.parser.ast.type.PrimitiveType var30 = new japa.parser.ast.type.PrimitiveType();
    var28.setType((japa.parser.ast.type.Type)var30);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.Token var48 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var49 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    var28.setName("");
    japa.parser.ast.type.ClassOrInterfaceType var51 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.MethodDeclaration var52 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var53 = var52.getType();
    java.lang.String var54 = var52.getName();
    int var55 = var52.getModifiers();
    japa.parser.Token var57 = japa.parser.Token.newToken(var55, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var58 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    java.util.List var59 = var58.getTypeArgs();
    java.lang.String var60 = var58.getName();
    japa.parser.ast.type.ClassOrInterfaceType var61 = new japa.parser.ast.type.ClassOrInterfaceType(var51, var60);
    japa.parser.ast.type.ClassOrInterfaceType var62 = var51.getScope();
    var0.setType((japa.parser.ast.type.Type)var51);
    japa.parser.ast.stmt.BlockStmt var64 = var0.getBody();
    int var65 = var0.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test233() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var8.setType((japa.parser.ast.type.Type)var9);
    boolean var12 = var8.isVarArgs();
    japa.parser.ast.body.VariableDeclaratorId var13 = var8.getId();
    japa.parser.ast.body.VariableDeclaratorId var14 = var8.getId();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test234() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    japa.parser.ast.type.ClassOrInterfaceType var3 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var13 = var12.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator(var12, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.MethodDeclaration var16 = new japa.parser.ast.body.MethodDeclaration();
    int var17 = var16.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var65 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var68 = new japa.parser.ast.LineComment(var17, 0, 0, 1, "");
    int var69 = var68.getEndColumn();
    var68.setContent("hi!");
    var12.setName("hi!");
    japa.parser.Token var73 = new japa.parser.Token(1, "hi!");
    japa.parser.ast.expr.NameExpr var74 = new japa.parser.ast.expr.NameExpr("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var75 = new japa.parser.ast.type.ClassOrInterfaceType(var3, "hi!");
    var0.setType((japa.parser.ast.type.Type)var75);
    japa.parser.ast.body.MethodDeclaration var77 = new japa.parser.ast.body.MethodDeclaration();
    int var78 = var77.getModifiers();
    japa.parser.ast.stmt.BlockStmt var79 = new japa.parser.ast.stmt.BlockStmt();
    var77.setBody(var79);
    japa.parser.ast.stmt.BlockStmt var81 = new japa.parser.ast.stmt.BlockStmt();
    var77.setBody(var81);
    int var83 = var77.getArrayCount();
    java.lang.String var84 = var77.getName();
    japa.parser.ast.stmt.BlockStmt var85 = var77.getBody();
    japa.parser.ast.stmt.BlockStmt var86 = var77.getBody();
    var0.setBody(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);

  }

  public void test235() throws Throwable {

    japa.parser.ast.type.ReferenceType var0 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.Type var1 = var0.getType();
    int var2 = var0.getArrayCount();
    japa.parser.Token var3 = japa.parser.Token.newToken(var2);
    japa.parser.Token var4 = japa.parser.Token.newToken(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test236() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getExtends();
    java.util.List var20 = var17.getImplements();
    java.util.List var21 = var17.getImplements();
    japa.parser.ast.ImportDeclaration var22 = new japa.parser.ast.ImportDeclaration();
    var22.setStatic(false);
    boolean var25 = var22.isAsterisk();
    var17.setInterface(var25);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var29 = var28.getArrayCount();
    japa.parser.Token var30 = new japa.parser.Token(var29);
    var17.setModifiers(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test237() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    japa.parser.ast.stmt.BlockStmt var2 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    int var4 = var3.getModifiers();
    japa.parser.ast.stmt.BlockStmt var5 = new japa.parser.ast.stmt.BlockStmt();
    var3.setBody(var5);
    japa.parser.ast.stmt.BlockStmt var7 = new japa.parser.ast.stmt.BlockStmt();
    var3.setBody(var7);
    int var9 = var3.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var10 = var3.getBody();
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var33 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var32);
    var3.setArrayCount(1);
    japa.parser.ast.stmt.BlockStmt var35 = var3.getBody();
    java.util.List var36 = var35.getStmts();
    var0.setTryBlock(var35);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var54 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var55 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var56 = var55.getMembers();
    int var57 = var55.getModifiers();
    java.util.List var58 = var55.getExtends();
    java.util.List var59 = var55.getImplements();
    japa.parser.ast.body.MethodDeclaration var60 = new japa.parser.ast.body.MethodDeclaration();
    int var61 = var60.getModifiers();
    var60.setEndLine(0);
    java.util.List var64 = var60.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.Token var82 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var83 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var87 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var86);
    var60.setModifiers(0);
    japa.parser.ast.type.Type var89 = var60.getType();
    int var90 = var60.getModifiers();
    var55.setModifiers(var90);
    var0.setBeginColumn(var90);
    japa.parser.Token var93 = new japa.parser.Token(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test238() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var5.setData((java.lang.Object)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    int var19 = var17.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var20 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    var17.setModifiers((-1));
    var5.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var30 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var30, var35);
    japa.parser.ast.type.ReferenceType var40 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var30, 0);
    int var41 = var30.getBeginLine();
    japa.parser.ast.type.ReferenceType var42 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var30);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var60 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var61 = var60.getExtends();
    java.util.List var62 = var60.getMembers();
    java.util.List var63 = var60.getTypeParameters();
    int var64 = var60.getBeginColumn();
    var42.setArrayCount(var64);
    var5.setType((japa.parser.ast.type.Type)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);

  }

  public void test239() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    int var21 = var17.getBeginColumn();
    java.util.List var22 = var17.getExtends();
    java.util.List var23 = var17.getImplements();
    int var24 = var17.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);

  }

  public void test240() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.type.Type var4 = var0.getType();
    japa.parser.ast.body.MethodDeclaration var5 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var6 = var5.getType();
    java.lang.String var7 = var5.getName();
    japa.parser.ast.type.PrimitiveType var8 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.Parameter var16 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var8, var13);
    japa.parser.ast.type.ReferenceType var18 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var8, 0);
    japa.parser.Token var19 = new japa.parser.Token(0);
    var5.setArrayCount(0);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var43 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var43.setExpression((japa.parser.ast.expr.Expression)var49);
    java.util.List var52 = var49.getAnnotations();
    int var53 = var49.getEndColumn();
    var5.setArrayCount(var53);
    var0.setArrayCount(var53);
    java.util.List var56 = var0.getThrows();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var57 = var0.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test241() throws Throwable {

    japa.parser.ast.type.ReferenceType var0 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.PrimitiveType var1 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.Parameter var9 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var1, var6);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    int var17 = var15.getModifiers();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator(var6, (japa.parser.ast.expr.Expression)var15);
    java.lang.String var19 = var6.getName();
    japa.parser.ast.body.Parameter var20 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var6);
    int var21 = var20.getEndColumn();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var40 = new japa.parser.ast.ImportDeclaration();
    var40.setStatic(false);
    boolean var43 = var40.isAsterisk();
    var39.setInterface(var43);
    int var45 = var39.getBeginColumn();
    int var46 = var39.getModifiers();
    java.lang.String var47 = var39.getName();
    japa.parser.ast.type.ClassOrInterfaceType var48 = new japa.parser.ast.type.ClassOrInterfaceType(var47);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.expr.NameExpr var51 = new japa.parser.ast.expr.NameExpr("");
    java.lang.String var52 = var51.getName();
    japa.parser.ast.PackageDeclaration var53 = new japa.parser.ast.PackageDeclaration(var51);
    java.lang.String var54 = var51.getName();
    japa.parser.ast.body.MethodDeclaration var55 = new japa.parser.ast.body.MethodDeclaration(var21, (japa.parser.ast.type.Type)var48, var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));

  }

  public void test242() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.ast.type.PrimitiveType var15 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.Parameter var23 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var15, var20);
    japa.parser.ast.type.ReferenceType var25 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var15, 0);
    var14.setType((japa.parser.ast.type.Type)var15);
    japa.parser.ast.type.PrimitiveType var27 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.Parameter var35 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var27, var32);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var37 = var36.getType();
    var35.setType((japa.parser.ast.type.Type)var36);
    var14.setType((japa.parser.ast.type.Type)var36);
    japa.parser.ast.type.Type var40 = var14.getType();
    var0.setType(var40);
    int var42 = var0.getModifiers();
    int var43 = var0.getEndColumn();
    int var44 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var45 = var0.getBody();
    java.util.List var46 = var0.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test243() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    int var37 = var17.getModifiers();
    japa.parser.ast.type.PrimitiveType var38 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.Parameter var46 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var38, var43);
    japa.parser.ast.type.ReferenceType var48 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var38, 0);
    int var49 = var48.getArrayCount();
    int var50 = var48.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var52 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var48, var51);
    japa.parser.ast.type.ReferenceType var53 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var48);
    int var54 = var53.getArrayCount();
    var17.setEndLine(var54);
    java.util.List var56 = var17.getExtends();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);

  }

  public void test244() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    java.util.List var37 = var17.getExtends();
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.Token var55 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var56 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var60 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var60.setExpression((japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var60.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.Type var71 = var68.getType();
    int var72 = var68.getModifiers();
    var17.setModifiers(var72);
    int var74 = var17.getBeginLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);

  }

  public void test245() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getMembers();
    java.util.List var33 = var30.getTypeParameters();
    int var34 = var30.getBeginColumn();
    var12.setArrayCount(var34);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36, 0);
    int var47 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter(var34, (japa.parser.ast.type.Type)var46, var52);
    japa.parser.ast.type.Type var56 = var46.getType();
    japa.parser.ast.type.ReferenceType var57 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46);
    int var58 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    int var66 = var63.getEndColumn();
    japa.parser.ast.body.Parameter var67 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var46, var63);
    japa.parser.ast.type.ReferenceType var68 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46);
    japa.parser.ast.type.ReferenceType var69 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test246() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    java.util.List var2 = var0.getComments();
    java.util.List var3 = var0.getComments();
    java.util.List var4 = var0.getComments();
    java.util.List var5 = var0.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test247() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getAnnotations();
    japa.parser.ast.ImportDeclaration var20 = new japa.parser.ast.ImportDeclaration();
    var20.setStatic(false);
    boolean var23 = var20.isAsterisk();
    boolean var24 = var20.isStatic();
    int var25 = var20.getEndColumn();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var44 = var43.getMembers();
    int var45 = var43.getModifiers();
    var43.setInterface(true);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.Token var64 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var65 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var66 = var65.getExtends();
    boolean var67 = var65.isInterface();
    var43.setInterface(var67);
    var20.setAsterisk(var67);
    japa.parser.ast.expr.NameExpr var70 = var20.getName();
    japa.parser.ast.ImportDeclaration var71 = new japa.parser.ast.ImportDeclaration();
    var71.setStatic(false);
    var71.setAsterisk(false);
    boolean var76 = var71.isStatic();
    var20.setStatic(var76);
    japa.parser.ast.ImportDeclaration var78 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var79 = new japa.parser.ast.ImportDeclaration();
    var79.setStatic(false);
    boolean var82 = var79.isStatic();
    var78.setStatic(var82);
    japa.parser.ast.expr.NameExpr var84 = var78.getName();
    boolean var85 = var78.isAsterisk();
    var20.setStatic(var85);
    var17.setInterface(var85);
    java.lang.String var88 = var17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));

  }

  public void test248() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var8.setType((japa.parser.ast.type.Type)var9);
    boolean var12 = var8.isVarArgs();
    japa.parser.ast.ImportDeclaration var13 = new japa.parser.ast.ImportDeclaration();
    var13.setStatic(false);
    boolean var16 = var13.isAsterisk();
    var13.setStatic(false);
    japa.parser.ast.expr.NameExpr var19 = new japa.parser.ast.expr.NameExpr();
    int var20 = var19.getBeginLine();
    var13.setName(var19);
    boolean var22 = var13.isAsterisk();
    var8.setVarArgs(var22);
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    int var40 = var38.getModifiers();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator(var29, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.VariableDeclaratorId var42 = var41.getId();
    japa.parser.ast.body.VariableDeclaratorId var43 = var41.getId();
    var8.setId(var43);
    boolean var45 = var8.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test249() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var1 = var0.getName();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    int var3 = var2.getEndLine();
    var0.setArrayCount(var3);
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.Token var21 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var22 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    int var23 = var22.getModifiers();
    boolean var24 = var0.equals((java.lang.Object)var22);
    java.lang.String var25 = var22.getName();
    java.util.List var26 = var22.getImplements();
    java.util.List var27 = var22.getMembers();
    boolean var28 = var22.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test250() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var4);
    int var6 = var0.getArrayCount();
    java.lang.String var7 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var10 = var9.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator(var9, (japa.parser.ast.expr.Expression)var11);
    java.util.List var13 = var11.getAnnotations();
    int var14 = var11.getModifiers();
    var0.setModifiers(var14);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    var38.setExpression((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.stmt.ReturnStmt var47 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.expr.Expression var48 = var47.getExpr();
    japa.parser.ast.expr.Expression var49 = var47.getExpr();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.Token var67 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var68 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var72 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    var72.setExpression((japa.parser.ast.expr.Expression)var78);
    java.util.List var81 = var78.getAnnotations();
    java.util.List var82 = var78.getVars();
    var47.setExpr((japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.type.Type var84 = var78.getType();
    var0.setData((java.lang.Object)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);

  }

  public void test251() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    var0.setBody(var6);
    java.util.List var9 = var0.getThrows();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    int var17 = var15.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var18 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    var41.setExpression((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.type.PrimitiveType var50 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.Parameter var58 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var50, var55);
    japa.parser.ast.type.Type var59 = var58.getType();
    var47.setType(var59);
    java.util.List var61 = var47.getAnnotations();
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var47);
    var15.setData((java.lang.Object)var62);
    boolean var64 = var0.equals((java.lang.Object)var62);
    japa.parser.ast.stmt.BlockStmt var65 = var0.getBody();
    java.lang.String var66 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test252() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    var0.setBody(var6);
    japa.parser.ast.type.Type var9 = var0.getType();
    japa.parser.ast.type.Type var10 = var0.getType();
    japa.parser.ast.body.MethodDeclaration var11 = new japa.parser.ast.body.MethodDeclaration();
    int var12 = var11.getModifiers();
    japa.parser.ast.stmt.BlockStmt var13 = new japa.parser.ast.stmt.BlockStmt();
    var11.setBody(var13);
    japa.parser.ast.stmt.BlockStmt var15 = new japa.parser.ast.stmt.BlockStmt();
    var11.setBody(var15);
    java.util.List var17 = var15.getStmts();
    java.util.List var18 = var15.getStmts();
    var0.setBody(var15);
    japa.parser.ast.stmt.BlockStmt var20 = var0.getBody();
    japa.parser.ast.type.Type var21 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);

  }

  public void test253() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var9 = var8.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator(var8);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    int var18 = var16.getModifiers();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var43 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var42);
    japa.parser.Token var45 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.Token var63 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var64 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var68 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var71 = new japa.parser.ast.LineComment(var20, 0, 0, 1, "");
    var16.setModifiers(0);
    var10.setInit((japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator(var4, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    japa.parser.Token var83 = new japa.parser.Token((-1), "");
    java.lang.String var84 = var83.toString();
    var4.setName(var84);
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var84);
    java.lang.String var87 = var86.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));

  }

  public void test254() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.Type var19 = var18.getType();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.ReferenceType var30 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var20, 0);
    var18.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var32 = var18.getId();
    var8.setId(var32);
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    japa.parser.ast.stmt.BlockStmt var36 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var36);
    java.util.List var38 = var34.getAnnotations();
    int var39 = var34.getBeginColumn();
    var8.setBeginColumn(var39);
    japa.parser.ast.body.VariableDeclaratorId var41 = var8.getId();
    java.util.List var42 = var8.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);

  }

  public void test255() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getModifiers();
    japa.parser.Token var5 = japa.parser.Token.newToken(var3, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var6 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    java.util.List var7 = var6.getTypeArgs();
    java.lang.String var8 = var6.getName();
    java.lang.String var9 = var6.getName();
    java.lang.Object var10 = var6.getData();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.Token var27 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var28 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var29 = var28.getExtends();
    java.util.List var30 = var28.getMembers();
    java.util.List var31 = var28.getTypeParameters();
    java.lang.String var32 = var28.getName();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var49 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var50 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var51 = var50.getExtends();
    japa.parser.ast.type.PrimitiveType var52 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var57 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var59 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var57, (japa.parser.ast.expr.Expression)var58);
    japa.parser.ast.body.Parameter var60 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var52, var57);
    japa.parser.ast.type.ReferenceType var62 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var52, 0);
    japa.parser.Token var63 = new japa.parser.Token(0);
    var50.setModifiers(0);
    var28.setBeginLine(0);
    java.lang.String var66 = var28.getName();
    japa.parser.ast.type.ClassOrInterfaceType var67 = new japa.parser.ast.type.ClassOrInterfaceType(var6, var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));

  }

  public void test256() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getAnnotations();
    java.util.List var20 = var17.getImplements();
    java.util.List var21 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);

  }

  public void test257() throws Throwable {

    japa.parser.ast.PackageDeclaration var0 = new japa.parser.ast.PackageDeclaration();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.Token var18 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var19 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var23 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    int var38 = var35.getArrayCount();
    japa.parser.ast.type.PrimitiveType var39 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.Parameter var47 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var39, var44);
    japa.parser.ast.type.Type var48 = var47.getType();
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.ReferenceType var59 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var49, 0);
    var47.setModifiers(0);
    japa.parser.ast.expr.NameExpr var62 = new japa.parser.ast.expr.NameExpr((-1), 1, var38, 0, "");
    var0.setName(var62);
    java.util.List var64 = var0.getAnnotations();
    japa.parser.ast.PackageDeclaration var65 = new japa.parser.ast.PackageDeclaration();
    java.util.List var66 = var65.getAnnotations();
    japa.parser.ast.expr.NameExpr var67 = var65.getName();
    java.util.List var68 = var65.getAnnotations();
    japa.parser.ast.expr.NameExpr var69 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var70 = new japa.parser.ast.ImportDeclaration();
    var70.setStatic(false);
    var70.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.VariableDeclaratorId var87 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var88 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var89 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var87, (japa.parser.ast.expr.Expression)var88);
    japa.parser.Token var91 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var92 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var93 = var92.getExtends();
    boolean var94 = var92.isInterface();
    japa.parser.ast.ImportDeclaration var95 = new japa.parser.ast.ImportDeclaration(var69, false, var94);
    var65.setName(var69);
    var0.setName(var69);
    japa.parser.ast.stmt.ReturnStmt var98 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.expr.Expression var99 = var98.getExpr();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var99 == null);

  }

  public void test258() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    java.lang.Object var13 = var0.getData();
    japa.parser.ast.type.PrimitiveType.Primitive var14 = var0.getType();
    japa.parser.ast.type.PrimitiveType var15 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.Parameter var23 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var15, var20);
    japa.parser.ast.type.Type var24 = var23.getType();
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    int var41 = var39.getModifiers();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator(var30, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var43 = var42.getId();
    var23.setId(var43);
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator(var43);
    japa.parser.ast.body.Parameter var46 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var43);
    int var47 = var43.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);

  }

  public void test259() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    java.util.List var37 = var17.getExtends();
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var39 = var38.getId();
    japa.parser.ast.ImportDeclaration var40 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var41 = new japa.parser.ast.ImportDeclaration();
    var41.setStatic(false);
    boolean var44 = var41.isStatic();
    var40.setStatic(var44);
    var38.setVarArgs(var44);
    var17.setInterface(var44);
    boolean var48 = var17.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test260() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.ImportDeclaration var25 = new japa.parser.ast.ImportDeclaration();
    var25.setStatic(false);
    boolean var28 = var25.isAsterisk();
    boolean var29 = var25.isStatic();
    int var30 = var25.getEndColumn();
    var23.setModifiers(var30);
    japa.parser.Token var32 = japa.parser.Token.newToken(var30);
    java.lang.String var33 = var32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);

  }

  public void test261() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    java.util.List var37 = var17.getExtends();
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var39 = var38.getId();
    japa.parser.ast.ImportDeclaration var40 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var41 = new japa.parser.ast.ImportDeclaration();
    var41.setStatic(false);
    boolean var44 = var41.isStatic();
    var40.setStatic(var44);
    var38.setVarArgs(var44);
    var17.setInterface(var44);
    java.util.List var48 = var17.getAnnotations();
    java.util.List var49 = var17.getImplements();
    java.util.List var50 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);

  }

  public void test262() throws Throwable {

    japa.parser.ast.type.ReferenceType var0 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.Type var1 = var0.getType();
    int var2 = var0.getArrayCount();
    japa.parser.ast.type.PrimitiveType var3 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.Parameter var11 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var3, var8);
    japa.parser.ast.type.ReferenceType var13 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var3, 0);
    japa.parser.ast.type.Type var14 = var13.getType();
    var0.setType((japa.parser.ast.type.Type)var13);
    japa.parser.ast.type.ReferenceType var16 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var13);
    japa.parser.ast.type.ReferenceType var17 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var13);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.Token var58 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var59 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var63 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var63.setExpression((japa.parser.ast.expr.Expression)var64);
    int var66 = var63.getBeginLine();
    japa.parser.ast.expr.Expression var67 = var63.getExpression();
    var40.setExpression(var67);
    int var69 = var67.getEndLine();
    var17.setArrayCount(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);

  }

  public void test263() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    var0.setStatic(false);
    boolean var6 = var0.isStatic();
    boolean var7 = var0.isStatic();
    boolean var8 = var0.isAsterisk();
    boolean var9 = var0.isStatic();
    japa.parser.ast.ImportDeclaration var10 = new japa.parser.ast.ImportDeclaration();
    var10.setStatic(false);
    boolean var13 = var10.isAsterisk();
    var10.setStatic(false);
    var0.setAsterisk(false);
    boolean var17 = var0.isStatic();
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var24 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var22, (japa.parser.ast.expr.Expression)var23);
    japa.parser.Token var26 = new japa.parser.Token((-1), "");
    java.lang.String var27 = var26.toString();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId(var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.Token var46 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var47 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var51 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var50);
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var51.setExpression((japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    var51.setExpression((japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator(var28, (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.type.PrimitiveType var63 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var68, (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.Parameter var71 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var63, var68);
    japa.parser.ast.type.ReferenceType var73 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var63, 0);
    int var74 = var73.getArrayCount();
    int var75 = var73.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var73, var76);
    java.lang.Object var78 = var76.getData();
    var62.setId(var76);
    int var80 = var62.getBeginLine();
    var0.setBeginLine(var80);
    japa.parser.Token var82 = japa.parser.Token.newToken(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);

  }

  public void test264() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    int var16 = var14.getModifiers();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator(var5, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var24 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var22, (japa.parser.ast.expr.Expression)var23);
    int var25 = var23.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var26 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var27 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var28 = var27.getType();
    var23.setData((java.lang.Object)var27);
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator(var5, (japa.parser.ast.expr.Expression)var23);
    java.util.List var31 = var23.getVars();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);

  }

  public void test265() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    japa.parser.ast.type.PrimitiveType var23 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.Parameter var31 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var23, var28);
    japa.parser.ast.type.PrimitiveType var32 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.Parameter var40 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var32, var37);
    var31.setId(var37);
    var8.setId(var37);
    java.lang.Object var43 = var8.getData();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);

  }

  public void test266() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var9 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    var14.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    var40.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.Type var58 = var57.getType();
    var46.setType(var58);
    japa.parser.ast.stmt.ReturnStmt var60 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt(1, var11, var13, 0, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var63 = japa.parser.Token.newToken(var13, "");
    japa.parser.ast.type.ClassOrInterfaceType var64 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "");
    java.lang.String var65 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var66 = var64.getScope();
    java.util.List var67 = var66.getTypeArgs();
    java.util.List var68 = var66.getTypeArgs();
    java.util.List var69 = var66.getTypeArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);

  }

  public void test267() throws Throwable {

    japa.parser.ast.stmt.ReturnStmt var0 = new japa.parser.ast.stmt.ReturnStmt();
    int var1 = var0.getEndLine();
    japa.parser.ast.expr.Expression var2 = var0.getExpr();
    japa.parser.ast.expr.Expression var3 = var0.getExpr();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test268() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = var0.getPackage();
    java.util.List var3 = var0.getComments();
    int var4 = var0.getEndColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test269() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getMembers();
    int var20 = var17.getModifiers();
    java.util.List var21 = var17.getExtends();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);

  }

  public void test270() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var10.getArrayCount();
    var10.setArrayCount(0);
    japa.parser.ast.type.PrimitiveType var14 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.Parameter var22 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var14, var19);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    int var30 = var28.getModifiers();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator(var19, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var32 = var31.getId();
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var32);
    java.util.List var34 = var33.getAnnotations();
    java.util.List var35 = var33.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test271() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var9 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    var14.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    var40.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.Type var58 = var57.getType();
    var46.setType(var58);
    japa.parser.ast.stmt.ReturnStmt var60 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt(1, var11, var13, 0, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var63 = japa.parser.Token.newToken(var13, "");
    japa.parser.ast.type.ClassOrInterfaceType var64 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "");
    java.lang.String var65 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var66 = var64.getScope();
    java.lang.String var67 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var68 = var64.getScope();
    japa.parser.ast.type.ReferenceType var69 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var68);
    japa.parser.ast.type.ReferenceType var70 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var69);
    int var71 = var69.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test272() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getBody();
    java.util.List var4 = var0.getAnnotations();
    java.util.List var5 = var0.getAnnotations();
    java.lang.String var6 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test273() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    japa.parser.ast.body.VariableDeclaratorId var5 = var4.getId();
    japa.parser.ast.expr.Expression var6 = var4.getInit();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.Token var24 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var25 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var29 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    var29.setExpression((japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.type.PrimitiveType var38 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.Parameter var46 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var38, var43);
    japa.parser.ast.type.Type var47 = var46.getType();
    var35.setType(var47);
    japa.parser.ast.stmt.ReturnStmt var49 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.Token var67 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var68 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var72 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    var72.setExpression((japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.stmt.ReturnStmt var81 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.ImportDeclaration var82 = new japa.parser.ast.ImportDeclaration();
    var82.setStatic(false);
    boolean var85 = var82.isAsterisk();
    var82.setStatic(false);
    japa.parser.ast.expr.NameExpr var88 = new japa.parser.ast.expr.NameExpr();
    int var89 = var88.getBeginLine();
    var82.setName(var88);
    var81.setExpr((japa.parser.ast.expr.Expression)var88);
    var49.setExpr((japa.parser.ast.expr.Expression)var88);
    japa.parser.ast.PackageDeclaration var93 = new japa.parser.ast.PackageDeclaration(var88);
    japa.parser.ast.PackageDeclaration var94 = new japa.parser.ast.PackageDeclaration(var88);
    var4.setInit((japa.parser.ast.expr.Expression)var88);
    japa.parser.ast.expr.Expression var96 = var4.getInit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);

  }

  public void test274() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.type.ClassOrInterfaceType var23 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var23, "");
    java.lang.String var87 = var86.getName();
    japa.parser.ast.type.ClassOrInterfaceType var88 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var89 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var91 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.MethodDeclaration var92 = new japa.parser.ast.body.MethodDeclaration(0, (japa.parser.ast.type.Type)var86, "hi!");
    java.util.List var93 = var92.getParameters();
    java.lang.String var94 = var92.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi!"+ "'", var94.equals("hi!"));

  }

  public void test275() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    var0.setBody(var6);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    java.util.List var18 = var17.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var19 = var17.getId();
    japa.parser.ast.body.Parameter var20 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    var20.setEndColumn((-1));
    var19.setEndColumn((-1));
    boolean var30 = var0.equals((java.lang.Object)var19);
    japa.parser.ast.stmt.TryStmt var31 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var32 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var33 = var32.getType();
    java.lang.String var34 = var32.getName();
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    japa.parser.ast.type.ReferenceType var45 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var35, 0);
    japa.parser.Token var46 = new japa.parser.Token(0);
    var32.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var48 = new japa.parser.ast.body.MethodDeclaration();
    int var49 = var48.getModifiers();
    japa.parser.ast.stmt.BlockStmt var50 = new japa.parser.ast.stmt.BlockStmt();
    var48.setBody(var50);
    japa.parser.ast.stmt.BlockStmt var52 = new japa.parser.ast.stmt.BlockStmt();
    var48.setBody(var52);
    var32.setBody(var52);
    var31.setFinallyBlock(var52);
    japa.parser.ast.stmt.BlockStmt var56 = var31.getFinallyBlock();
    japa.parser.ast.body.MethodDeclaration var57 = new japa.parser.ast.body.MethodDeclaration();
    int var58 = var57.getModifiers();
    japa.parser.ast.stmt.BlockStmt var59 = new japa.parser.ast.stmt.BlockStmt();
    var57.setBody(var59);
    var31.setTryBlock(var59);
    java.util.List var62 = var59.getStmts();
    java.util.List var63 = var59.getStmts();
    java.util.List var64 = var59.getStmts();
    var0.setBody(var59);
    java.lang.String var66 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test276() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator(var15, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var28 = var27.getId();
    var8.setId(var28);
    int var30 = var8.getModifiers();
    japa.parser.ast.type.Type var31 = var8.getType();
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType();
    int var33 = var32.getEndColumn();
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    japa.parser.ast.stmt.BlockStmt var36 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var36);
    japa.parser.ast.stmt.BlockStmt var38 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var38);
    int var40 = var34.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var41 = var34.getBody();
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var60 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var64 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var63);
    var34.setArrayCount(1);
    var32.setEndLine(1);
    var8.setModifiers(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);

  }

  public void test277() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    java.util.List var35 = var0.getTypes();
    java.util.List var36 = var0.getImports();
    java.util.List var37 = var0.getImports();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);

  }

  public void test278() throws Throwable {

    japa.parser.ast.expr.NameExpr var0 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.stmt.ReturnStmt var1 = new japa.parser.ast.stmt.ReturnStmt();
    int var2 = var1.getEndLine();
    var0.setEndLine(var2);
    japa.parser.Token var4 = new japa.parser.Token(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test279() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var7 = var6.getId();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.Token var24 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var25 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var26 = new japa.parser.ast.ImportDeclaration();
    var26.setStatic(false);
    boolean var29 = var26.isAsterisk();
    var25.setInterface(var29);
    int var31 = var25.getBeginColumn();
    int var32 = var25.getModifiers();
    java.util.List var33 = var25.getExtends();
    java.lang.String var34 = var25.getName();
    var7.setName(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));

  }

  public void test280() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    java.util.List var21 = var17.getExtends();
    java.util.List var22 = var17.getImplements();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var24 = var23.getName();
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    int var26 = var25.getEndLine();
    var23.setArrayCount(var26);
    int var28 = var23.getArrayCount();
    var17.setModifiers(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test281() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var33 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var32);
    var10.setArrayCount(0);
    int var35 = var10.getArrayCount();
    japa.parser.ast.type.Type var36 = var10.getType();
    japa.parser.ast.type.ReferenceType var37 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10);
    japa.parser.ast.body.MethodDeclaration var38 = new japa.parser.ast.body.MethodDeclaration();
    int var39 = var38.getModifiers();
    var38.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var42 = new japa.parser.ast.body.MethodDeclaration();
    int var43 = var42.getModifiers();
    japa.parser.ast.stmt.BlockStmt var44 = new japa.parser.ast.stmt.BlockStmt();
    var42.setBody(var44);
    var38.setBody(var44);
    japa.parser.ast.type.Type var47 = var38.getType();
    japa.parser.ast.type.Type var48 = var38.getType();
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.ReferenceType var59 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var49, 0);
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var74 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var75 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var73, (japa.parser.ast.expr.Expression)var74);
    japa.parser.Token var77 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var78 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var81 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var82 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var81);
    var59.setArrayCount(0);
    int var84 = var59.getArrayCount();
    japa.parser.ast.type.Type var85 = var59.getType();
    int var86 = var59.getEndColumn();
    int var87 = var59.getArrayCount();
    var38.setType((japa.parser.ast.type.Type)var59);
    var10.setType((japa.parser.ast.type.Type)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);

  }

  public void test282() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    var0.setAsterisk(false);
    japa.parser.ast.expr.NameExpr var5 = new japa.parser.ast.expr.NameExpr();
    var0.setName(var5);
    japa.parser.ast.body.MethodDeclaration var7 = new japa.parser.ast.body.MethodDeclaration();
    int var8 = var7.getModifiers();
    var0.setEndColumn(var8);
    boolean var10 = var0.isAsterisk();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test283() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    var0.setAsterisk(false);
    japa.parser.ast.expr.NameExpr var5 = new japa.parser.ast.expr.NameExpr();
    var0.setName(var5);
    japa.parser.ast.body.MethodDeclaration var7 = new japa.parser.ast.body.MethodDeclaration();
    int var8 = var7.getModifiers();
    var0.setEndColumn(var8);
    japa.parser.ast.ImportDeclaration var10 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var11 = new japa.parser.ast.ImportDeclaration();
    var11.setStatic(false);
    boolean var14 = var11.isStatic();
    var10.setStatic(var14);
    japa.parser.ast.type.PrimitiveType var16 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.Parameter var24 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var16, var21);
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    var24.setId(var30);
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    int var42 = var40.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var43 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.type.PrimitiveType var44 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var45 = var44.getType();
    var40.setData((java.lang.Object)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    var40.setType((japa.parser.ast.type.Type)var47);
    var24.setType((japa.parser.ast.type.Type)var47);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.Token var74 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var75 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var76 = new japa.parser.ast.ImportDeclaration();
    var76.setStatic(false);
    boolean var79 = var76.isAsterisk();
    var75.setInterface(var79);
    var24.setVarArgs(var79);
    var10.setStatic(var79);
    boolean var83 = var10.isAsterisk();
    var0.setStatic(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test284() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    japa.parser.ast.type.Type var23 = var8.getType();
    java.util.List var24 = var8.getAnnotations();
    japa.parser.ast.body.MethodDeclaration var25 = new japa.parser.ast.body.MethodDeclaration();
    int var26 = var25.getModifiers();
    japa.parser.ast.stmt.BlockStmt var27 = new japa.parser.ast.stmt.BlockStmt();
    var25.setBody(var27);
    java.util.List var29 = var25.getTypeParameters();
    int var30 = var25.getModifiers();
    var8.setModifiers(var30);
    int var32 = var8.getModifiers();
    japa.parser.ast.type.PrimitiveType var33 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.Parameter var41 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var33, var38);
    japa.parser.ast.type.ReferenceType var43 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var33, 0);
    int var44 = var43.getArrayCount();
    int var45 = var43.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var47 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var43, var46);
    japa.parser.ast.body.MethodDeclaration var48 = new japa.parser.ast.body.MethodDeclaration();
    int var49 = var48.getModifiers();
    var48.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var52 = new japa.parser.ast.body.MethodDeclaration();
    int var53 = var52.getModifiers();
    japa.parser.ast.stmt.BlockStmt var54 = new japa.parser.ast.stmt.BlockStmt();
    var52.setBody(var54);
    var48.setBody(var54);
    japa.parser.ast.type.Type var57 = var48.getType();
    japa.parser.ast.type.Type var58 = var48.getType();
    japa.parser.ast.body.MethodDeclaration var59 = new japa.parser.ast.body.MethodDeclaration();
    int var60 = var59.getModifiers();
    japa.parser.ast.stmt.BlockStmt var61 = new japa.parser.ast.stmt.BlockStmt();
    var59.setBody(var61);
    japa.parser.ast.stmt.BlockStmt var63 = new japa.parser.ast.stmt.BlockStmt();
    var59.setBody(var63);
    java.util.List var65 = var63.getStmts();
    java.util.List var66 = var63.getStmts();
    var48.setBody(var63);
    japa.parser.ast.stmt.BlockStmt var68 = var48.getBody();
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var74);
    japa.parser.ast.type.ReferenceType var79 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var69, 0);
    int var80 = var79.getArrayCount();
    int var81 = var79.getArrayCount();
    var48.setArrayCount(var81);
    var47.setModifiers(var81);
    var8.setModifiers(var81);
    boolean var85 = var8.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test285() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    var0.setStatic(false);
    boolean var6 = var0.isStatic();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var8 = new japa.parser.ast.ImportDeclaration();
    var8.setStatic(false);
    boolean var11 = var8.isStatic();
    var7.setStatic(var11);
    boolean var13 = var7.isAsterisk();
    var0.setAsterisk(var13);
    japa.parser.ast.CompilationUnit var15 = new japa.parser.ast.CompilationUnit();
    java.util.List var16 = var15.getComments();
    japa.parser.ast.PackageDeclaration var17 = new japa.parser.ast.PackageDeclaration();
    java.util.List var18 = var17.getAnnotations();
    japa.parser.ast.expr.NameExpr var19 = var17.getName();
    java.util.List var20 = var17.getAnnotations();
    japa.parser.ast.expr.NameExpr var21 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var22 = new japa.parser.ast.ImportDeclaration();
    var22.setStatic(false);
    var22.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.Token var43 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var44 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var45 = var44.getExtends();
    boolean var46 = var44.isInterface();
    japa.parser.ast.ImportDeclaration var47 = new japa.parser.ast.ImportDeclaration(var21, false, var46);
    var17.setName(var21);
    var15.setPackage(var17);
    japa.parser.ast.expr.NameExpr var50 = var17.getName();
    japa.parser.ast.ImportDeclaration var51 = new japa.parser.ast.ImportDeclaration();
    var51.setStatic(false);
    boolean var54 = var51.isStatic();
    boolean var55 = var51.isAsterisk();
    japa.parser.ast.expr.NameExpr var56 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var57 = new japa.parser.ast.ImportDeclaration();
    var57.setStatic(false);
    var57.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var66 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var68 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var66, (japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.Token var78 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var79 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var80 = var79.getExtends();
    boolean var81 = var79.isInterface();
    japa.parser.ast.ImportDeclaration var82 = new japa.parser.ast.ImportDeclaration(var56, false, var81);
    japa.parser.ast.ImportDeclaration var83 = new japa.parser.ast.ImportDeclaration(var50, var55, false);
    var0.setStatic(var55);
    boolean var85 = var0.isStatic();
    japa.parser.ast.expr.NameExpr var86 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);

  }

  public void test286() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var9 = var8.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator(var8);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    int var18 = var16.getModifiers();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var43 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var42);
    japa.parser.Token var45 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.Token var63 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var64 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var68 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var71 = new japa.parser.ast.LineComment(var20, 0, 0, 1, "");
    var16.setModifiers(0);
    var10.setInit((japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator(var4, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.expr.Expression var75 = var74.getInit();
    japa.parser.ast.expr.Expression var76 = var74.getInit();
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var78 = var77.getName();
    var74.setId(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);

  }

  public void test287() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    java.util.List var34 = var33.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    int var42 = var40.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var43 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.type.PrimitiveType var44 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var45 = var44.getType();
    var40.setData((java.lang.Object)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    var40.setType((japa.parser.ast.type.Type)var47);
    var33.setType((japa.parser.ast.type.Type)var47);
    var23.setType((japa.parser.ast.type.Type)var47);
    japa.parser.ast.stmt.ReturnStmt var59 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var60 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.Parameter var68 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var65);
    japa.parser.ast.body.MethodDeclaration var69 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var70 = var69.getType();
    java.lang.String var71 = var69.getName();
    int var72 = var69.getModifiers();
    japa.parser.ast.type.ReferenceType var73 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var60, var72);
    japa.parser.ast.type.PrimitiveType.Primitive var74 = var60.getType();
    var23.setType((japa.parser.ast.type.Type)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);

  }

  public void test288() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    var8.setId(var14);
    japa.parser.ast.body.VariableDeclaratorId var19 = var8.getId();
    japa.parser.ast.expr.NameExpr var20 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var21 = new japa.parser.ast.ImportDeclaration();
    var21.setStatic(false);
    var21.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var44 = var43.getExtends();
    boolean var45 = var43.isInterface();
    japa.parser.ast.ImportDeclaration var46 = new japa.parser.ast.ImportDeclaration(var20, false, var45);
    japa.parser.ast.expr.NameExpr var47 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var48 = new japa.parser.ast.ImportDeclaration();
    var48.setStatic(false);
    var48.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var57 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var59 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var57, (japa.parser.ast.expr.Expression)var58);
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.Token var69 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var70 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var71 = var70.getExtends();
    boolean var72 = var70.isInterface();
    japa.parser.ast.ImportDeclaration var73 = new japa.parser.ast.ImportDeclaration(var47, false, var72);
    japa.parser.ast.ImportDeclaration var74 = new japa.parser.ast.ImportDeclaration();
    var74.setStatic(false);
    boolean var77 = var74.isAsterisk();
    var74.setStatic(false);
    boolean var80 = var74.isStatic();
    japa.parser.ast.ImportDeclaration var81 = new japa.parser.ast.ImportDeclaration(var20, false, var80);
    var8.setVarArgs(false);
    boolean var83 = var8.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test289() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.type.ClassOrInterfaceType var23 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var23, "");
    java.lang.String var87 = var86.getName();
    japa.parser.ast.type.ClassOrInterfaceType var88 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var89 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var91 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.MethodDeclaration var92 = new japa.parser.ast.body.MethodDeclaration(0, (japa.parser.ast.type.Type)var86, "hi!");
    int var93 = var92.getBeginLine();
    japa.parser.ast.body.JavadocComment var94 = var92.getJavaDoc();
    int var95 = var92.getModifiers();
    java.util.List var96 = var92.getThrows();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);

  }

  public void test290() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.ImportDeclaration var22 = new japa.parser.ast.ImportDeclaration();
    var22.setStatic(false);
    var8.setVarArgs(false);
    japa.parser.ast.type.PrimitiveType var26 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.Parameter var34 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var26, var31);
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    var34.setId(var40);
    var8.setId(var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = var8.getId();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.Token var64 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var65 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var69 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    var69.setExpression((japa.parser.ast.expr.Expression)var75);
    java.util.List var78 = var75.getAnnotations();
    java.util.List var79 = var75.getVars();
    int var80 = var75.getModifiers();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator(var46, (japa.parser.ast.expr.Expression)var75);
    int var82 = var75.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);

  }

  public void test291() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    int var21 = var17.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test292() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.stmt.ReturnStmt var31 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.Type var32 = var28.getType();
    int var33 = var28.getModifiers();
    japa.parser.ast.type.Type var34 = var28.getType();
    japa.parser.ast.stmt.ExpressionStmt var35 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var38 = var37.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator(var37, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var43 = var42.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator(var42, (japa.parser.ast.expr.Expression)var44);
    var40.setInit((japa.parser.ast.expr.Expression)var44);
    java.util.List var47 = var44.getVars();
    var35.setExpression((japa.parser.ast.expr.Expression)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);

  }

  public void test293() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    int var21 = var17.getBeginColumn();
    java.util.List var22 = var17.getTypeParameters();
    java.lang.String var23 = var17.getName();
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    int var25 = var24.getEndLine();
    var17.setBeginColumn(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test294() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var5.setData((java.lang.Object)var9);
    japa.parser.ast.stmt.ExpressionStmt var12 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.stmt.ExpressionStmt var13 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var15 = var14.getType();
    java.lang.String var16 = var14.getName();
    japa.parser.ast.stmt.BlockStmt var17 = var14.getBody();
    java.util.List var18 = var14.getThrows();
    int var19 = var14.getModifiers();
    var5.setModifiers(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test295() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var33 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var32);
    var10.setArrayCount(0);
    int var35 = var10.getArrayCount();
    japa.parser.ast.type.Type var36 = var10.getType();
    int var37 = var10.getEndColumn();
    int var38 = var10.getArrayCount();
    japa.parser.ast.type.ReferenceType var39 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);

  }

  public void test296() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    japa.parser.ast.expr.NameExpr var4 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.expr.NameExpr var7 = new japa.parser.ast.expr.NameExpr("");
    java.lang.String var8 = var7.getName();
    japa.parser.ast.PackageDeclaration var9 = new japa.parser.ast.PackageDeclaration(var7);
    japa.parser.ast.expr.NameExpr var10 = var9.getName();
    var0.setName(var10);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var21 = var20.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator(var20, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.MethodDeclaration var24 = new japa.parser.ast.body.MethodDeclaration();
    int var25 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.Token var43 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var44 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var48 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var47);
    japa.parser.Token var50 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.Token var68 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var69 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var72 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var73 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var72);
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var76 = new japa.parser.ast.LineComment(var25, 0, 0, 1, "");
    int var77 = var76.getEndColumn();
    var76.setContent("hi!");
    var20.setName("hi!");
    japa.parser.Token var81 = new japa.parser.Token(1, "hi!");
    japa.parser.ast.expr.NameExpr var82 = new japa.parser.ast.expr.NameExpr("hi!");
    japa.parser.ast.PackageDeclaration var83 = new japa.parser.ast.PackageDeclaration(var82);
    var0.setName(var82);
    java.lang.String var85 = var82.getName();
    japa.parser.ast.LineComment var86 = new japa.parser.ast.LineComment(var85);
    japa.parser.ast.type.ClassOrInterfaceType var88 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var89 = var88.getScope();
    java.lang.String var90 = var88.getName();
    var86.setContent(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!"+ "'", var85.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));

  }

  public void test297() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    java.util.List var5 = var0.getTypeParameters();
    japa.parser.ast.type.PrimitiveType var6 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var6, var11);
    japa.parser.ast.type.ReferenceType var16 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var6, 0);
    int var17 = var16.getArrayCount();
    japa.parser.ast.type.Type var18 = var16.getType();
    japa.parser.ast.type.ReferenceType var19 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var16);
    int var20 = var19.getArrayCount();
    var0.setType((japa.parser.ast.type.Type)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test298() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    var0.setAsterisk(false);
    japa.parser.ast.expr.NameExpr var5 = new japa.parser.ast.expr.NameExpr();
    var0.setName(var5);
    boolean var7 = var0.isStatic();
    japa.parser.ast.expr.NameExpr var8 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test299() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    japa.parser.ast.type.ClassOrInterfaceType var3 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.Token var11 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var14 = new japa.parser.ast.stmt.ReturnStmt();
    int var15 = var14.getEndLine();
    japa.parser.ast.body.MethodDeclaration var16 = new japa.parser.ast.body.MethodDeclaration();
    int var17 = var16.getModifiers();
    var16.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.Token var37 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var38 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var42 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    var42.setExpression((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.type.PrimitiveType var51 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.ast.body.Parameter var59 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var51, var56);
    japa.parser.ast.type.Type var60 = var59.getType();
    var48.setType(var60);
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.stmt.ReturnStmt var63 = new japa.parser.ast.stmt.ReturnStmt(1, var13, var15, 0, (japa.parser.ast.expr.Expression)var48);
    japa.parser.Token var65 = japa.parser.Token.newToken(var15, "");
    japa.parser.ast.type.ClassOrInterfaceType var66 = new japa.parser.ast.type.ClassOrInterfaceType(var3, "");
    java.lang.String var67 = var66.getName();
    var0.setName(var67);
    japa.parser.ast.body.MethodDeclaration var69 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var70 = var69.getType();
    japa.parser.ast.stmt.BlockStmt var71 = var69.getBody();
    int var72 = var69.getArrayCount();
    var0.setModifiers(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);

  }

  public void test300() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    int var19 = var17.getModifiers();
    var17.setInterface(true);
    java.util.List var22 = var17.getImplements();
    java.util.List var23 = var17.getAnnotations();
    java.util.List var24 = var17.getMembers();
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.type.PrimitiveType var34 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var35 = var34.getType();
    var33.setType((japa.parser.ast.type.Type)var34);
    boolean var37 = var33.isVarArgs();
    japa.parser.ast.ImportDeclaration var38 = new japa.parser.ast.ImportDeclaration();
    var38.setStatic(false);
    boolean var41 = var38.isAsterisk();
    var38.setStatic(false);
    japa.parser.ast.expr.NameExpr var44 = new japa.parser.ast.expr.NameExpr();
    int var45 = var44.getBeginLine();
    var38.setName(var44);
    boolean var47 = var38.isAsterisk();
    var33.setVarArgs(var47);
    japa.parser.ast.body.VariableDeclaratorId var49 = var33.getId();
    int var50 = var33.getBeginLine();
    var17.setModifiers(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test301() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var10.getArrayCount();
    int var12 = var10.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var15 = var14.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator(var14, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.MethodDeclaration var18 = new japa.parser.ast.body.MethodDeclaration();
    int var19 = var18.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.Token var37 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var38 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var42 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var41);
    japa.parser.Token var44 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.Token var62 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var63 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var67 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.VariableDeclaratorId var69 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var70 = new japa.parser.ast.LineComment(var19, 0, 0, 1, "");
    int var71 = var70.getEndColumn();
    var70.setContent("hi!");
    var14.setName("hi!");
    japa.parser.ast.body.Parameter var75 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var14);
    java.lang.String var76 = var14.toString();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));

  }

  public void test302() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    java.util.List var23 = var21.getVars();
    int var24 = var21.getModifiers();
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.type.ReferenceType var35 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var25, 0);
    int var36 = var35.getArrayCount();
    japa.parser.ast.type.Type var37 = var35.getType();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var54 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var55 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var56 = var55.getExtends();
    japa.parser.ast.body.MethodDeclaration var57 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var58 = var57.getType();
    java.lang.String var59 = var57.getName();
    japa.parser.ast.type.PrimitiveType var60 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.Parameter var68 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var65);
    japa.parser.ast.type.ReferenceType var70 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var60, 0);
    japa.parser.Token var71 = new japa.parser.Token(0);
    var57.setArrayCount(0);
    var55.setModifiers(0);
    java.util.List var74 = var55.getImplements();
    java.util.List var75 = var55.getImplements();
    java.util.List var76 = var55.getTypeParameters();
    java.util.List var77 = var55.getTypeParameters();
    var35.setData((java.lang.Object)var55);
    japa.parser.ast.body.MethodDeclaration var79 = new japa.parser.ast.body.MethodDeclaration();
    int var80 = var79.getModifiers();
    var79.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var83 = new japa.parser.ast.body.MethodDeclaration();
    int var84 = var83.getModifiers();
    japa.parser.ast.stmt.BlockStmt var85 = new japa.parser.ast.stmt.BlockStmt();
    var83.setBody(var85);
    var79.setBody(var85);
    java.util.List var88 = var79.getThrows();
    int var89 = var79.getBeginLine();
    var35.setArrayCount(var89);
    var21.setType((japa.parser.ast.type.Type)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test303() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    int var1 = var0.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var3 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var4 = var3.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator(var3, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var9 = var8.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator(var8, (japa.parser.ast.expr.Expression)var10);
    var6.setInit((japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.VariableDeclaratorId var13 = var6.getId();
    japa.parser.ast.expr.Expression var14 = var6.getInit();
    japa.parser.ast.expr.Expression var15 = var6.getInit();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator(var0, var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);

  }

  public void test304() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var8.setType((japa.parser.ast.type.Type)var9);
    boolean var12 = var8.isVarArgs();
    japa.parser.ast.ImportDeclaration var13 = new japa.parser.ast.ImportDeclaration();
    var13.setStatic(false);
    boolean var16 = var13.isAsterisk();
    var13.setStatic(false);
    japa.parser.ast.expr.NameExpr var19 = new japa.parser.ast.expr.NameExpr();
    int var20 = var19.getBeginLine();
    var13.setName(var19);
    boolean var22 = var13.isAsterisk();
    var8.setVarArgs(var22);
    japa.parser.ast.body.VariableDeclaratorId var24 = var8.getId();
    japa.parser.ast.type.ClassOrInterfaceType var26 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var34 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var35 = new japa.parser.ast.stmt.ReturnStmt();
    int var36 = var35.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var37 = new japa.parser.ast.stmt.ReturnStmt();
    int var38 = var37.getEndLine();
    japa.parser.ast.body.MethodDeclaration var39 = new japa.parser.ast.body.MethodDeclaration();
    int var40 = var39.getModifiers();
    var39.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var65 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    var65.setExpression((japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.type.PrimitiveType var74 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.Parameter var82 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var74, var79);
    japa.parser.ast.type.Type var83 = var82.getType();
    var71.setType(var83);
    japa.parser.ast.stmt.ReturnStmt var85 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.stmt.ReturnStmt var86 = new japa.parser.ast.stmt.ReturnStmt(1, var36, var38, 0, (japa.parser.ast.expr.Expression)var71);
    japa.parser.Token var88 = japa.parser.Token.newToken(var38, "");
    japa.parser.ast.type.ClassOrInterfaceType var89 = new japa.parser.ast.type.ClassOrInterfaceType(var26, "");
    java.lang.String var90 = var89.getName();
    japa.parser.ast.type.ClassOrInterfaceType var91 = var89.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var92 = var89.getScope();
    java.util.List var93 = var89.getTypeArgs();
    var8.setType((japa.parser.ast.type.Type)var89);
    japa.parser.ast.body.VariableDeclaratorId var95 = var8.getId();
    japa.parser.ast.type.Type var96 = var8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + ""+ "'", var90.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);

  }

  public void test305() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    var0.setStatic(false);
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    int var7 = var6.getBeginLine();
    var0.setName(var6);
    japa.parser.ast.stmt.ReturnStmt var9 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var6);
    java.lang.Object var10 = var9.getData();
    int var11 = var9.getEndColumn();
    japa.parser.ast.expr.Expression var12 = var9.getExpr();
    japa.parser.ast.expr.Expression var13 = var9.getExpr();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test306() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    java.util.List var2 = var0.getCatchs();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.stmt.TryStmt var5 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var6 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var7 = var6.getType();
    java.lang.String var8 = var6.getName();
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    japa.parser.ast.type.ReferenceType var19 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var9, 0);
    japa.parser.Token var20 = new japa.parser.Token(0);
    var6.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var22 = new japa.parser.ast.body.MethodDeclaration();
    int var23 = var22.getModifiers();
    japa.parser.ast.stmt.BlockStmt var24 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var24);
    japa.parser.ast.stmt.BlockStmt var26 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var26);
    var6.setBody(var26);
    var5.setFinallyBlock(var26);
    japa.parser.ast.stmt.BlockStmt var30 = var5.getFinallyBlock();
    var4.setBody(var30);
    var0.setTryBlock(var30);
    japa.parser.ast.stmt.TryStmt var33 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var34 = var33.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var35 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var36 = var35.getStmts();
    var33.setFinallyBlock(var35);
    japa.parser.ast.stmt.BlockStmt var38 = var33.getFinallyBlock();
    java.util.List var39 = var33.getCatchs();
    japa.parser.ast.stmt.TryStmt var40 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var41 = var40.getCatchs();
    java.util.List var42 = var40.getCatchs();
    japa.parser.ast.stmt.BlockStmt var43 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var44 = var43.getStmts();
    var40.setFinallyBlock(var43);
    var33.setFinallyBlock(var43);
    java.util.List var47 = var43.getStmts();
    var0.setTryBlock(var43);
    japa.parser.ast.stmt.BlockStmt var49 = var0.getFinallyBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test307() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    java.util.List var35 = var0.getImports();
    java.util.List var36 = var0.getImports();
    int var37 = var0.getBeginLine();
    java.util.List var38 = var0.getImports();
    java.util.List var39 = var0.getComments();
    java.util.List var40 = var0.getTypes();
    java.util.List var41 = var0.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);

  }

  public void test308() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    java.lang.String var24 = var17.toString();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId(var24);
    japa.parser.ast.expr.NameExpr var26 = new japa.parser.ast.expr.NameExpr(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "private protected public abstract static final native strictfp synchronized transient volatile class  {\n}"+ "'", var24.equals("private protected public abstract static final native strictfp synchronized transient volatile class  {\n}"));

  }

  public void test309() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.stmt.ExpressionStmt var25 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var27 = var26.getName();
    japa.parser.ast.type.PrimitiveType var28 = new japa.parser.ast.type.PrimitiveType();
    int var29 = var28.getEndLine();
    var26.setArrayCount(var29);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var47 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var48 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    int var49 = var48.getModifiers();
    boolean var50 = var26.equals((java.lang.Object)var48);
    java.lang.String var51 = var48.getName();
    int var52 = var48.getModifiers();
    var25.setData((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ""+ "'", var51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);

  }

  public void test310() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getMembers();
    java.util.List var33 = var30.getTypeParameters();
    int var34 = var30.getBeginColumn();
    var12.setArrayCount(var34);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36, 0);
    int var47 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter(var34, (japa.parser.ast.type.Type)var46, var52);
    japa.parser.ast.type.Type var56 = var46.getType();
    japa.parser.ast.type.ReferenceType var57 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46);
    int var58 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.Token var67 = new japa.parser.Token((-1), "");
    java.lang.String var68 = var67.toString();
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType(var68);
    java.lang.String var70 = var69.getName();
    var46.setType((japa.parser.ast.type.Type)var69);
    int var72 = var69.getBeginColumn();
    japa.parser.ast.type.ReferenceType var74 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var69, 0);
    int var75 = var74.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);

  }

  public void test311() throws Throwable {

    japa.parser.ast.body.VariableDeclarator var0 = new japa.parser.ast.body.VariableDeclarator();
    japa.parser.ast.body.VariableDeclaratorId var1 = var0.getId();
    japa.parser.ast.expr.Expression var2 = var0.getInit();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    int var4 = var3.getModifiers();
    japa.parser.ast.body.MethodDeclaration var5 = new japa.parser.ast.body.MethodDeclaration();
    int var6 = var5.getModifiers();
    japa.parser.ast.stmt.BlockStmt var7 = new japa.parser.ast.stmt.BlockStmt();
    var5.setBody(var7);
    japa.parser.ast.stmt.BlockStmt var9 = new japa.parser.ast.stmt.BlockStmt();
    var5.setBody(var9);
    int var11 = var5.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var12 = var5.getBody();
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.Token var30 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var31 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var35 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var34);
    var5.setArrayCount(1);
    japa.parser.ast.body.MethodDeclaration var37 = new japa.parser.ast.body.MethodDeclaration();
    int var38 = var37.getModifiers();
    var37.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.expr.NameExpr var48 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var49 = new japa.parser.ast.ImportDeclaration();
    var49.setStatic(false);
    boolean var52 = var49.isAsterisk();
    boolean var53 = var49.isStatic();
    japa.parser.ast.ImportDeclaration var54 = new japa.parser.ast.ImportDeclaration();
    var54.setStatic(false);
    boolean var57 = var54.isAsterisk();
    var54.setStatic(false);
    japa.parser.ast.expr.NameExpr var60 = new japa.parser.ast.expr.NameExpr();
    int var61 = var60.getBeginLine();
    var54.setName(var60);
    boolean var63 = var54.isAsterisk();
    japa.parser.ast.ImportDeclaration var64 = new japa.parser.ast.ImportDeclaration(var4, 1, 0, (-1), var48, var53, var63);
    var0.setInit((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var66 = var0.getId();
    japa.parser.ast.body.VariableDeclaratorId var67 = var0.getId();
    japa.parser.ast.body.VariableDeclaratorId var68 = var0.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);

  }

  public void test312() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var4);
    java.util.List var6 = var0.getTypeParameters();
    java.lang.String var7 = var0.getName();
    java.util.List var8 = var0.getThrows();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test313() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    java.util.List var4 = var0.getThrows();
    int var5 = var0.getArrayCount();
    java.util.List var6 = var0.getAnnotations();
    int var7 = var0.getModifiers();
    japa.parser.ast.type.Type var8 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test314() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.Token var20 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var21 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    var0.setName("");
    java.util.List var23 = var0.getParameters();
    int var24 = var0.getModifiers();
    japa.parser.ast.type.ClassOrInterfaceType var27 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var35 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var36 = new japa.parser.ast.stmt.ReturnStmt();
    int var37 = var36.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var38 = new japa.parser.ast.stmt.ReturnStmt();
    int var39 = var38.getEndLine();
    japa.parser.ast.body.MethodDeclaration var40 = new japa.parser.ast.body.MethodDeclaration();
    int var41 = var40.getModifiers();
    var40.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var51 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var49, (japa.parser.ast.expr.Expression)var50);
    japa.parser.ast.body.VariableDeclaratorId var57 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var59 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var57, (japa.parser.ast.expr.Expression)var58);
    japa.parser.Token var61 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var62 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var66 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.body.VariableDeclaratorId var71 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var72 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var73 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var71, (japa.parser.ast.expr.Expression)var72);
    var66.setExpression((japa.parser.ast.expr.Expression)var72);
    japa.parser.ast.type.PrimitiveType var75 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var80 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var81 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var82 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var80, (japa.parser.ast.expr.Expression)var81);
    japa.parser.ast.body.Parameter var83 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var75, var80);
    japa.parser.ast.type.Type var84 = var83.getType();
    var72.setType(var84);
    japa.parser.ast.stmt.ReturnStmt var86 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var72);
    japa.parser.ast.stmt.ReturnStmt var87 = new japa.parser.ast.stmt.ReturnStmt(1, var37, var39, 0, (japa.parser.ast.expr.Expression)var72);
    japa.parser.Token var89 = japa.parser.Token.newToken(var39, "");
    japa.parser.ast.type.ClassOrInterfaceType var90 = new japa.parser.ast.type.ClassOrInterfaceType(var27, "");
    java.lang.String var91 = var90.getName();
    japa.parser.Token var92 = japa.parser.Token.newToken((-1), var91);
    java.lang.String var93 = var92.toString();
    japa.parser.ast.type.ClassOrInterfaceType var94 = new japa.parser.ast.type.ClassOrInterfaceType(var93);
    japa.parser.ast.LineComment var95 = new japa.parser.ast.LineComment(var93);
    japa.parser.Token var96 = new japa.parser.Token(var24, var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));

  }

  public void test315() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.Type var40 = var39.getType();
    var28.setType(var40);
    java.util.List var42 = var28.getAnnotations();
    japa.parser.ast.stmt.ReturnStmt var43 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.Type var44 = var28.getType();
    japa.parser.ast.stmt.ReturnStmt var45 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.stmt.ExpressionStmt var46 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var28);
    int var47 = var28.getModifiers();
    japa.parser.Token var48 = japa.parser.Token.newToken(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);

  }

  public void test316() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    java.lang.String var24 = var17.toString();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId(var24);
    japa.parser.ast.LineComment var26 = new japa.parser.ast.LineComment(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "private protected public abstract static final native strictfp synchronized transient volatile class  {\n}"+ "'", var24.equals("private protected public abstract static final native strictfp synchronized transient volatile class  {\n}"));

  }

  public void test317() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var10.getArrayCount();
    int var12 = var10.getArrayCount();
    int var13 = var10.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var31 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var32 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var36 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var36.setExpression((japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.type.PrimitiveType var39 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.Parameter var47 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var39, var44);
    japa.parser.ast.type.ReferenceType var49 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var39, 0);
    japa.parser.Token var50 = new japa.parser.Token(0);
    var37.setModifiers(0);
    java.util.List var52 = var37.getAnnotations();
    japa.parser.ast.type.PrimitiveType var53 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.Parameter var61 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var53, var58);
    japa.parser.ast.type.ReferenceType var63 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var53, 0);
    japa.parser.ast.type.PrimitiveType var64 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var69 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var71 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var69, (japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.body.Parameter var72 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var64, var69);
    japa.parser.ast.type.ReferenceType var74 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var64, 0);
    var63.setType((japa.parser.ast.type.Type)var64);
    var37.setType((japa.parser.ast.type.Type)var64);
    japa.parser.ast.type.ReferenceType var77 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var64);
    var10.setType((japa.parser.ast.type.Type)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);

  }

  public void test318() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var10.getArrayCount();
    int var12 = var10.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var13);
    japa.parser.ast.type.Type var15 = var10.getType();
    japa.parser.ast.type.PrimitiveType var16 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.Parameter var24 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var16, var21);
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    var24.setId(var30);
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    int var42 = var40.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var43 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.type.PrimitiveType var44 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var45 = var44.getType();
    var40.setData((java.lang.Object)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    var40.setType((japa.parser.ast.type.Type)var47);
    var24.setType((japa.parser.ast.type.Type)var47);
    japa.parser.ast.type.PrimitiveType var58 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.Parameter var66 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var58, var63);
    japa.parser.ast.type.ReferenceType var68 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var58, 0);
    int var69 = var68.getArrayCount();
    int var70 = var68.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var71 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var72 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var68, var71);
    int var73 = var72.getBeginColumn();
    japa.parser.ast.type.PrimitiveType var74 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.Parameter var82 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var74, var79);
    var72.setId(var79);
    var24.setId(var79);
    japa.parser.ast.body.Parameter var85 = new japa.parser.ast.body.Parameter(var15, var79);
    java.util.List var86 = var85.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var87 = var85.getId();
    boolean var88 = var85.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test319() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var27 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var26);
    var0.setBeginColumn(0);
    int var29 = var0.getArrayCount();
    japa.parser.ast.type.Type var30 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);

  }

  public void test320() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getExtends();
    java.util.List var20 = var17.getTypeParameters();
    java.util.List var21 = var17.getMembers();
    java.util.List var22 = var17.getAnnotations();
    java.util.List var23 = var17.getImplements();
    java.util.List var24 = var17.getExtends();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);

  }

  public void test321() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    var23.setEndColumn(0);
    java.util.List var49 = var23.getVars();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test322() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var7 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt();
    int var9 = var8.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    var12.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    var38.setExpression((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.Type var56 = var55.getType();
    var44.setType(var56);
    japa.parser.ast.stmt.ReturnStmt var58 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.stmt.ReturnStmt var59 = new japa.parser.ast.stmt.ReturnStmt(1, var9, var11, 0, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.expr.Expression var60 = var59.getExpr();
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var63 = var62.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator(var62, (japa.parser.ast.expr.Expression)var64);
    java.util.List var66 = var64.getAnnotations();
    int var67 = var64.getModifiers();
    java.util.List var68 = var64.getAnnotations();
    var59.setExpr((japa.parser.ast.expr.Expression)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);

  }

  public void test323() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    int var17 = var15.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var18 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.type.PrimitiveType var19 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var20 = var19.getType();
    var15.setData((java.lang.Object)var19);
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    var15.setType((japa.parser.ast.type.Type)var22);
    var8.setType((japa.parser.ast.type.Type)var22);
    japa.parser.ast.type.PrimitiveType.Primitive var33 = var22.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);

  }

  public void test324() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.expr.NameExpr var2 = new japa.parser.ast.expr.NameExpr("");
    java.lang.String var3 = var2.getName();
    japa.parser.ast.PackageDeclaration var4 = new japa.parser.ast.PackageDeclaration(var2);
    japa.parser.ast.expr.NameExpr var5 = var4.getName();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var35 = var34.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator(var34, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.MethodDeclaration var38 = new japa.parser.ast.body.MethodDeclaration();
    int var39 = var38.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.Token var64 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.Token var82 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var83 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var87 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var86);
    japa.parser.ast.body.VariableDeclaratorId var89 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var90 = new japa.parser.ast.LineComment(var39, 0, 0, 1, "");
    int var91 = var90.getEndColumn();
    var90.setContent("hi!");
    var34.setName("hi!");
    var6.setName("hi!");
    japa.parser.ast.PackageDeclaration var96 = new japa.parser.ast.PackageDeclaration(var6);
    var4.setName(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 1);

  }

  public void test325() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    java.util.List var36 = var17.getImplements();
    java.util.List var37 = var17.getImplements();
    java.util.List var38 = var17.getImplements();
    japa.parser.ast.expr.NameExpr var39 = new japa.parser.ast.expr.NameExpr();
    int var40 = var39.getBeginLine();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator();
    java.lang.Object var43 = var42.getData();
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var42.setInit((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.MethodDeclaration var52 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var53 = var52.getType();
    java.lang.String var54 = var52.getName();
    int var55 = var52.getModifiers();
    japa.parser.Token var57 = japa.parser.Token.newToken(var55, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var58 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    var49.setType((japa.parser.ast.type.Type)var58);
    var41.setExpression((japa.parser.ast.expr.Expression)var49);
    int var61 = var49.getBeginLine();
    japa.parser.ast.body.MethodDeclaration var62 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var63 = var62.getType();
    java.lang.String var64 = var62.getName();
    japa.parser.ast.stmt.BlockStmt var65 = var62.getBody();
    java.util.List var66 = var62.getThrows();
    int var67 = var62.getArrayCount();
    japa.parser.Token var68 = new japa.parser.Token(var67);
    var49.setModifiers(var67);
    japa.parser.Token var70 = japa.parser.Token.newToken(var67);
    var17.setModifiers(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);

  }

  public void test326() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    japa.parser.ast.stmt.TryStmt var2 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var4 = var3.getType();
    java.lang.String var5 = var3.getName();
    japa.parser.ast.type.PrimitiveType var6 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var6, var11);
    japa.parser.ast.type.ReferenceType var16 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var6, 0);
    japa.parser.Token var17 = new japa.parser.Token(0);
    var3.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var21);
    japa.parser.ast.stmt.BlockStmt var23 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var23);
    var3.setBody(var23);
    var2.setFinallyBlock(var23);
    japa.parser.ast.stmt.BlockStmt var27 = var2.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var28 = var2.getFinallyBlock();
    var0.setFinallyBlock(var28);
    japa.parser.ast.body.MethodDeclaration var30 = new japa.parser.ast.body.MethodDeclaration();
    int var31 = var30.getModifiers();
    japa.parser.ast.stmt.BlockStmt var32 = new japa.parser.ast.stmt.BlockStmt();
    var30.setBody(var32);
    java.util.List var34 = var30.getTypeParameters();
    int var35 = var30.getModifiers();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    japa.parser.ast.stmt.BlockStmt var38 = new japa.parser.ast.stmt.BlockStmt();
    var36.setBody(var38);
    var30.setBody(var38);
    var0.setFinallyBlock(var38);
    japa.parser.ast.stmt.BlockStmt var42 = var0.getTryBlock();
    java.util.List var43 = var0.getCatchs();
    japa.parser.ast.stmt.TryStmt var44 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var45 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var46 = var45.getType();
    java.lang.String var47 = var45.getName();
    japa.parser.ast.type.PrimitiveType var48 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.Parameter var56 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var48, var53);
    japa.parser.ast.type.ReferenceType var58 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var48, 0);
    japa.parser.Token var59 = new japa.parser.Token(0);
    var45.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var61 = new japa.parser.ast.body.MethodDeclaration();
    int var62 = var61.getModifiers();
    japa.parser.ast.stmt.BlockStmt var63 = new japa.parser.ast.stmt.BlockStmt();
    var61.setBody(var63);
    japa.parser.ast.stmt.BlockStmt var65 = new japa.parser.ast.stmt.BlockStmt();
    var61.setBody(var65);
    var45.setBody(var65);
    var44.setFinallyBlock(var65);
    japa.parser.ast.stmt.BlockStmt var69 = var44.getTryBlock();
    japa.parser.ast.type.PrimitiveType var70 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.body.Parameter var78 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var70, var75);
    japa.parser.ast.body.MethodDeclaration var79 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var80 = var79.getType();
    java.lang.String var81 = var79.getName();
    int var82 = var79.getModifiers();
    japa.parser.ast.type.ReferenceType var83 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var70, var82);
    japa.parser.Token var84 = new japa.parser.Token(var82);
    var44.setEndLine(var82);
    japa.parser.ast.stmt.TryStmt var86 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var87 = new japa.parser.ast.body.MethodDeclaration();
    int var88 = var87.getModifiers();
    japa.parser.ast.stmt.BlockStmt var89 = new japa.parser.ast.stmt.BlockStmt();
    var87.setBody(var89);
    japa.parser.ast.stmt.BlockStmt var91 = new japa.parser.ast.stmt.BlockStmt();
    var87.setBody(var91);
    java.util.List var93 = var91.getStmts();
    var86.setFinallyBlock(var91);
    var44.setTryBlock(var91);
    java.util.List var96 = var91.getStmts();
    var0.setTryBlock(var91);
    java.util.List var98 = var0.getCatchs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == null);

  }

  public void test327() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var8 = new japa.parser.Token((-1), "");
    java.lang.String var9 = var8.toString();
    japa.parser.ast.type.ClassOrInterfaceType var10 = new japa.parser.ast.type.ClassOrInterfaceType(var9);
    int var11 = var10.getEndColumn();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10);
    japa.parser.ast.type.PrimitiveType var13 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.Parameter var21 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var13, var18);
    japa.parser.ast.type.Type var22 = var21.getType();
    japa.parser.ast.type.PrimitiveType var23 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.Parameter var31 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var23, var28);
    japa.parser.ast.type.ReferenceType var33 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var23, 0);
    var21.setModifiers(0);
    boolean var35 = var21.isVarArgs();
    japa.parser.ast.type.Type var36 = var21.getType();
    java.util.List var37 = var21.getAnnotations();
    japa.parser.ast.body.MethodDeclaration var38 = new japa.parser.ast.body.MethodDeclaration();
    int var39 = var38.getModifiers();
    japa.parser.ast.stmt.BlockStmt var40 = new japa.parser.ast.stmt.BlockStmt();
    var38.setBody(var40);
    java.util.List var42 = var38.getTypeParameters();
    int var43 = var38.getModifiers();
    var21.setModifiers(var43);
    int var45 = var21.getModifiers();
    japa.parser.ast.type.PrimitiveType var46 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.Parameter var54 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var46, var51);
    japa.parser.ast.type.ReferenceType var56 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46, 0);
    int var57 = var56.getArrayCount();
    int var58 = var56.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var60 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var56, var59);
    japa.parser.ast.body.MethodDeclaration var61 = new japa.parser.ast.body.MethodDeclaration();
    int var62 = var61.getModifiers();
    var61.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var65 = new japa.parser.ast.body.MethodDeclaration();
    int var66 = var65.getModifiers();
    japa.parser.ast.stmt.BlockStmt var67 = new japa.parser.ast.stmt.BlockStmt();
    var65.setBody(var67);
    var61.setBody(var67);
    japa.parser.ast.type.Type var70 = var61.getType();
    japa.parser.ast.type.Type var71 = var61.getType();
    japa.parser.ast.body.MethodDeclaration var72 = new japa.parser.ast.body.MethodDeclaration();
    int var73 = var72.getModifiers();
    japa.parser.ast.stmt.BlockStmt var74 = new japa.parser.ast.stmt.BlockStmt();
    var72.setBody(var74);
    japa.parser.ast.stmt.BlockStmt var76 = new japa.parser.ast.stmt.BlockStmt();
    var72.setBody(var76);
    java.util.List var78 = var76.getStmts();
    java.util.List var79 = var76.getStmts();
    var61.setBody(var76);
    japa.parser.ast.stmt.BlockStmt var81 = var61.getBody();
    japa.parser.ast.type.PrimitiveType var82 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var87 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var88 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var89 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var87, (japa.parser.ast.expr.Expression)var88);
    japa.parser.ast.body.Parameter var90 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var82, var87);
    japa.parser.ast.type.ReferenceType var92 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var82, 0);
    int var93 = var92.getArrayCount();
    int var94 = var92.getArrayCount();
    var61.setArrayCount(var94);
    var60.setModifiers(var94);
    var21.setModifiers(var94);
    var10.setBeginLine(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test328() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    int var1 = var0.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.Token var18 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var19 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var20 = var19.getMembers();
    japa.parser.ast.body.MethodDeclaration var21 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var22 = var21.getType();
    java.lang.String var23 = var21.getName();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    var21.setName("");
    japa.parser.ast.LineComment var87 = new japa.parser.ast.LineComment("");
    var19.setName("");
    var0.setName("");
    japa.parser.ast.type.ClassOrInterfaceType var90 = new japa.parser.ast.type.ClassOrInterfaceType("");
    java.util.List var91 = var90.getTypeArgs();
    japa.parser.ast.type.ClassOrInterfaceType var92 = var90.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);

  }

  public void test329() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    japa.parser.ast.stmt.TryStmt var5 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var6 = new japa.parser.ast.body.MethodDeclaration();
    int var7 = var6.getModifiers();
    japa.parser.ast.stmt.BlockStmt var8 = new japa.parser.ast.stmt.BlockStmt();
    var6.setBody(var8);
    japa.parser.ast.stmt.BlockStmt var10 = new japa.parser.ast.stmt.BlockStmt();
    var6.setBody(var10);
    java.util.List var12 = var10.getStmts();
    var5.setFinallyBlock(var10);
    var0.setBody(var10);
    java.util.List var15 = var0.getParameters();
    japa.parser.ast.type.Type var16 = var0.getType();
    japa.parser.ast.stmt.TryStmt var17 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var18 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var19 = var18.getType();
    java.lang.String var20 = var18.getName();
    japa.parser.ast.type.PrimitiveType var21 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.Parameter var29 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var21, var26);
    japa.parser.ast.type.ReferenceType var31 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var21, 0);
    japa.parser.Token var32 = new japa.parser.Token(0);
    var18.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    japa.parser.ast.stmt.BlockStmt var36 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var36);
    japa.parser.ast.stmt.BlockStmt var38 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var38);
    var18.setBody(var38);
    var17.setFinallyBlock(var38);
    japa.parser.ast.stmt.BlockStmt var42 = var17.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var43 = var17.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var44 = var17.getTryBlock();
    java.util.List var45 = var17.getCatchs();
    japa.parser.ast.stmt.TryStmt var46 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var47 = var46.getCatchs();
    japa.parser.ast.stmt.BlockStmt var48 = var46.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var49 = new japa.parser.ast.body.MethodDeclaration();
    int var50 = var49.getModifiers();
    japa.parser.ast.stmt.BlockStmt var51 = new japa.parser.ast.stmt.BlockStmt();
    var49.setBody(var51);
    japa.parser.ast.stmt.BlockStmt var53 = new japa.parser.ast.stmt.BlockStmt();
    var49.setBody(var53);
    int var55 = var49.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var56 = var49.getBody();
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.Token var74 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var75 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var79 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var78);
    var49.setArrayCount(1);
    japa.parser.ast.stmt.BlockStmt var81 = var49.getBody();
    java.util.List var82 = var81.getStmts();
    var46.setTryBlock(var81);
    var17.setTryBlock(var81);
    var0.setBody(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);

  }

  public void test330() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var7 = var6.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator(var6, (japa.parser.ast.expr.Expression)var8);
    var4.setInit((japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.VariableDeclaratorId var11 = var4.getId();
    japa.parser.ast.expr.Expression var12 = var4.getInit();
    japa.parser.ast.expr.Expression var13 = var4.getInit();
    japa.parser.ast.type.PrimitiveType var14 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.Parameter var22 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var14, var19);
    japa.parser.ast.type.Type var23 = var22.getType();
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    var22.setModifiers(0);
    boolean var36 = var22.isVarArgs();
    japa.parser.ast.type.Type var37 = var22.getType();
    japa.parser.ast.body.MethodDeclaration var38 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var39 = var38.getType();
    int var40 = var38.getArrayCount();
    japa.parser.ast.type.Type var41 = var38.getType();
    int var42 = var38.getBeginLine();
    var22.setBeginColumn(var42);
    int var44 = var22.getBeginColumn();
    var4.setEndColumn(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test331() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var1 = new japa.parser.ast.ImportDeclaration();
    var1.setStatic(false);
    boolean var4 = var1.isStatic();
    var0.setStatic(var4);
    japa.parser.ast.type.PrimitiveType var6 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var6, var11);
    japa.parser.ast.type.PrimitiveType var15 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.Parameter var23 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var15, var20);
    var14.setId(var20);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    int var32 = var30.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var33 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.type.PrimitiveType var34 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var35 = var34.getType();
    var30.setData((java.lang.Object)var34);
    japa.parser.ast.type.PrimitiveType var37 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.Parameter var45 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var37, var42);
    var30.setType((japa.parser.ast.type.Type)var37);
    var14.setType((japa.parser.ast.type.Type)var37);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.Token var64 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var65 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var66 = new japa.parser.ast.ImportDeclaration();
    var66.setStatic(false);
    boolean var69 = var66.isAsterisk();
    var65.setInterface(var69);
    var14.setVarArgs(var69);
    var0.setStatic(var69);
    boolean var73 = var0.isAsterisk();
    boolean var74 = var0.isAsterisk();
    japa.parser.ast.expr.NameExpr var75 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);

  }

  public void test332() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    java.util.List var4 = var0.getAnnotations();
    java.lang.String var5 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var6 = var0.getBody();
    int var7 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var8 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.Parameter var16 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var8, var13);
    japa.parser.ast.type.Type var17 = var16.getType();
    japa.parser.ast.type.PrimitiveType var18 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.Parameter var26 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var18, var23);
    japa.parser.ast.type.ReferenceType var28 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var18, 0);
    var16.setModifiers(0);
    boolean var30 = var16.isVarArgs();
    japa.parser.ast.type.Type var31 = var16.getType();
    japa.parser.ast.body.VariableDeclaratorId var32 = var16.getId();
    japa.parser.ast.type.PrimitiveType var33 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.Parameter var41 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var33, var38);
    japa.parser.ast.body.MethodDeclaration var42 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var43 = var42.getType();
    java.lang.String var44 = var42.getName();
    int var45 = var42.getModifiers();
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var33, var45);
    var16.setType((japa.parser.ast.type.Type)var33);
    japa.parser.ast.type.PrimitiveType.Primitive var48 = var33.getType();
    var0.setType((japa.parser.ast.type.Type)var33);
    int var50 = var0.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test333() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    var0.setBody(var6);
    japa.parser.ast.type.Type var9 = var0.getType();
    japa.parser.ast.type.Type var10 = var0.getType();
    japa.parser.ast.body.MethodDeclaration var11 = new japa.parser.ast.body.MethodDeclaration();
    int var12 = var11.getModifiers();
    japa.parser.ast.stmt.BlockStmt var13 = new japa.parser.ast.stmt.BlockStmt();
    var11.setBody(var13);
    japa.parser.ast.stmt.BlockStmt var15 = new japa.parser.ast.stmt.BlockStmt();
    var11.setBody(var15);
    java.util.List var17 = var15.getStmts();
    java.util.List var18 = var15.getStmts();
    var0.setBody(var15);
    japa.parser.ast.stmt.BlockStmt var20 = var0.getBody();
    japa.parser.ast.type.PrimitiveType var21 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.Parameter var29 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var21, var26);
    japa.parser.ast.type.ReferenceType var31 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var21, 0);
    int var32 = var31.getArrayCount();
    int var33 = var31.getArrayCount();
    var0.setArrayCount(var33);
    int var35 = var0.getArrayCount();
    int var36 = var0.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test334() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    japa.parser.ast.expr.NameExpr var4 = var0.getName();
    boolean var5 = var0.isAsterisk();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var28 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    var28.setExpression((japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.stmt.ReturnStmt var37 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.ImportDeclaration var38 = new japa.parser.ast.ImportDeclaration();
    var38.setStatic(false);
    boolean var41 = var38.isAsterisk();
    var38.setStatic(false);
    japa.parser.ast.expr.NameExpr var44 = new japa.parser.ast.expr.NameExpr();
    int var45 = var44.getBeginLine();
    var38.setName(var44);
    var37.setExpr((japa.parser.ast.expr.Expression)var44);
    var0.setName(var44);
    japa.parser.ast.PackageDeclaration var49 = new japa.parser.ast.PackageDeclaration(var44);
    japa.parser.ast.expr.NameExpr var50 = var49.getName();
    japa.parser.ast.expr.NameExpr var51 = var49.getName();
    japa.parser.ast.PackageDeclaration var52 = new japa.parser.ast.PackageDeclaration(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);

  }

  public void test335() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var8 = new japa.parser.Token((-1), "");
    java.lang.String var9 = var8.toString();
    japa.parser.ast.type.ClassOrInterfaceType var10 = new japa.parser.ast.type.ClassOrInterfaceType(var9);
    japa.parser.ast.expr.NameExpr var11 = new japa.parser.ast.expr.NameExpr(var9);
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var31 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var32 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var36 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var57 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var61 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var64 = new japa.parser.ast.LineComment(var13, 0, 0, 1, "");
    japa.parser.ast.type.ClassOrInterfaceType var65 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.LineComment var66 = new japa.parser.ast.LineComment("");
    var11.setName("");
    java.lang.String var68 = var11.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));

  }

  public void test336() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.Token var10 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var11 = new japa.parser.ast.stmt.ReturnStmt();
    int var12 = var11.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var13 = new japa.parser.ast.stmt.ReturnStmt();
    int var14 = var13.getEndLine();
    japa.parser.ast.body.MethodDeclaration var15 = new japa.parser.ast.body.MethodDeclaration();
    int var16 = var15.getModifiers();
    var15.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    var41.setExpression((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.type.PrimitiveType var50 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.Parameter var58 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var50, var55);
    japa.parser.ast.type.Type var59 = var58.getType();
    var47.setType(var59);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt(1, var12, var14, 0, (japa.parser.ast.expr.Expression)var47);
    japa.parser.Token var64 = japa.parser.Token.newToken(var14, "");
    var0.setName("");
    japa.parser.ast.LineComment var66 = new japa.parser.ast.LineComment("");
    japa.parser.ast.type.ClassOrInterfaceType var67 = new japa.parser.ast.type.ClassOrInterfaceType("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);

  }

  public void test337() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.body.MethodDeclaration var22 = new japa.parser.ast.body.MethodDeclaration();
    int var23 = var22.getModifiers();
    japa.parser.ast.stmt.BlockStmt var24 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var24);
    java.util.List var26 = var22.getAnnotations();
    int var27 = var22.getBeginColumn();
    var8.setModifiers(var27);
    japa.parser.ast.type.PrimitiveType var29 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.body.Parameter var37 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var29, var34);
    japa.parser.ast.type.ReferenceType var39 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var29, 0);
    int var40 = var39.getArrayCount();
    int var41 = var39.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var39, var42);
    japa.parser.ast.type.ReferenceType var44 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var39);
    japa.parser.ast.body.Parameter var45 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    var45.setEndColumn((-1));
    japa.parser.ast.type.ReferenceType var54 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var44, (-1));
    japa.parser.ast.body.MethodDeclaration var55 = new japa.parser.ast.body.MethodDeclaration();
    int var56 = var55.getModifiers();
    java.util.List var57 = var55.getThrows();
    int var58 = var55.getModifiers();
    var44.setArrayCount(var58);
    var8.setModifiers(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test338() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var4);
    int var6 = var0.getArrayCount();
    japa.parser.ast.type.ClassOrInterfaceType var8 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var16 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var17 = new japa.parser.ast.stmt.ReturnStmt();
    int var18 = var17.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var19 = new japa.parser.ast.stmt.ReturnStmt();
    int var20 = var19.getEndLine();
    japa.parser.ast.body.MethodDeclaration var21 = new japa.parser.ast.body.MethodDeclaration();
    int var22 = var21.getModifiers();
    var21.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    var47.setExpression((japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.type.PrimitiveType var56 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.ast.body.Parameter var64 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var56, var61);
    japa.parser.ast.type.Type var65 = var64.getType();
    var53.setType(var65);
    japa.parser.ast.stmt.ReturnStmt var67 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.stmt.ReturnStmt var68 = new japa.parser.ast.stmt.ReturnStmt(1, var18, var20, 0, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var70 = japa.parser.Token.newToken(var20, "");
    japa.parser.ast.type.ClassOrInterfaceType var71 = new japa.parser.ast.type.ClassOrInterfaceType(var8, "");
    java.lang.String var72 = var71.getName();
    japa.parser.ast.type.ClassOrInterfaceType var73 = var71.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var74 = var71.getScope();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter(var6, (japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.ClassOrInterfaceType var78 = var71.getScope();
    java.lang.String var79 = var71.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));

  }

  public void test339() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.Type var19 = var18.getType();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.ReferenceType var30 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var20, 0);
    var18.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var32 = var18.getId();
    var8.setId(var32);
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    int var35 = var34.getModifiers();
    japa.parser.ast.stmt.BlockStmt var36 = new japa.parser.ast.stmt.BlockStmt();
    var34.setBody(var36);
    java.util.List var38 = var34.getAnnotations();
    int var39 = var34.getBeginColumn();
    var8.setBeginColumn(var39);
    japa.parser.ast.body.VariableDeclaratorId var41 = var8.getId();
    int var42 = var41.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator(var41);
    int var44 = var41.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test340() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    japa.parser.ast.type.ClassOrInterfaceType var3 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.Token var11 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var14 = new japa.parser.ast.stmt.ReturnStmt();
    int var15 = var14.getEndLine();
    japa.parser.ast.body.MethodDeclaration var16 = new japa.parser.ast.body.MethodDeclaration();
    int var17 = var16.getModifiers();
    var16.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.Token var37 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var38 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var42 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    var42.setExpression((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.type.PrimitiveType var51 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.ast.body.Parameter var59 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var51, var56);
    japa.parser.ast.type.Type var60 = var59.getType();
    var48.setType(var60);
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.stmt.ReturnStmt var63 = new japa.parser.ast.stmt.ReturnStmt(1, var13, var15, 0, (japa.parser.ast.expr.Expression)var48);
    japa.parser.Token var65 = japa.parser.Token.newToken(var15, "");
    japa.parser.ast.type.ClassOrInterfaceType var66 = new japa.parser.ast.type.ClassOrInterfaceType(var3, "");
    java.lang.String var67 = var66.getName();
    var0.setName(var67);
    japa.parser.ast.stmt.BlockStmt var69 = var0.getBody();
    japa.parser.ast.stmt.BlockStmt var70 = var0.getBody();
    java.util.List var71 = var0.getParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);

  }

  public void test341() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getMembers();
    java.util.List var33 = var30.getTypeParameters();
    int var34 = var30.getBeginColumn();
    var12.setArrayCount(var34);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36, 0);
    int var47 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter(var34, (japa.parser.ast.type.Type)var46, var52);
    japa.parser.ast.type.Type var56 = var46.getType();
    int var57 = var46.getArrayCount();
    japa.parser.ast.type.Type var58 = var46.getType();
    japa.parser.ast.type.PrimitiveType var59 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.body.Parameter var67 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var59, var64);
    japa.parser.ast.type.ReferenceType var69 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var59, 0);
    japa.parser.ast.type.PrimitiveType var70 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.body.Parameter var78 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var70, var75);
    japa.parser.ast.type.ReferenceType var80 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var70, 0);
    var69.setType((japa.parser.ast.type.Type)var70);
    japa.parser.ast.type.Type var82 = var69.getType();
    japa.parser.ast.type.Type var83 = var69.getType();
    var46.setType((japa.parser.ast.type.Type)var69);
    int var85 = var46.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);

  }

  public void test342() throws Throwable {

    japa.parser.ast.type.ReferenceType var0 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.ClassOrInterfaceType var2 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.Token var10 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var11 = new japa.parser.ast.stmt.ReturnStmt();
    int var12 = var11.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var13 = new japa.parser.ast.stmt.ReturnStmt();
    int var14 = var13.getEndLine();
    japa.parser.ast.body.MethodDeclaration var15 = new japa.parser.ast.body.MethodDeclaration();
    int var16 = var15.getModifiers();
    var15.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    var41.setExpression((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.type.PrimitiveType var50 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.Parameter var58 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var50, var55);
    japa.parser.ast.type.Type var59 = var58.getType();
    var47.setType(var59);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt(1, var12, var14, 0, (japa.parser.ast.expr.Expression)var47);
    japa.parser.Token var64 = japa.parser.Token.newToken(var14, "");
    japa.parser.ast.type.ClassOrInterfaceType var65 = new japa.parser.ast.type.ClassOrInterfaceType(var2, "");
    java.lang.String var66 = var65.getName();
    japa.parser.ast.type.ClassOrInterfaceType var67 = var65.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var68 = var65.getScope();
    var0.setType((japa.parser.ast.type.Type)var68);
    int var70 = var0.getArrayCount();
    int var71 = var0.getArrayCount();
    int var72 = var0.getEndLine();
    japa.parser.ast.type.Type var73 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);

  }

  public void test343() throws Throwable {

    japa.parser.ast.expr.NameExpr var0 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var1 = new japa.parser.ast.ImportDeclaration();
    var1.setStatic(false);
    var1.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var24 = var23.getExtends();
    boolean var25 = var23.isInterface();
    japa.parser.ast.ImportDeclaration var26 = new japa.parser.ast.ImportDeclaration(var0, false, var25);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var29 = var28.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator(var28, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.MethodDeclaration var32 = new japa.parser.ast.body.MethodDeclaration();
    int var33 = var32.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.Token var51 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var52 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var56 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var55);
    japa.parser.Token var58 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    japa.parser.Token var76 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var77 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var81 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var84 = new japa.parser.ast.LineComment(var33, 0, 0, 1, "");
    int var85 = var84.getEndColumn();
    var84.setContent("hi!");
    var28.setName("hi!");
    var0.setName("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var90 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    java.lang.String var91 = var90.getName();
    japa.parser.ast.type.ClassOrInterfaceType var92 = var90.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "hi!"+ "'", var91.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);

  }

  public void test344() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var9 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    var14.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    var40.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.Type var58 = var57.getType();
    var46.setType(var58);
    japa.parser.ast.stmt.ReturnStmt var60 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt(1, var11, var13, 0, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var63 = japa.parser.Token.newToken(var13, "");
    japa.parser.ast.type.ClassOrInterfaceType var64 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "");
    java.lang.String var65 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var66 = var64.getScope();
    java.lang.String var67 = var64.getName();
    japa.parser.ast.type.ClassOrInterfaceType var68 = var64.getScope();
    int var69 = var68.getBeginColumn();
    java.lang.String var70 = var68.getName();
    japa.parser.ast.type.ClassOrInterfaceType var71 = var68.getScope();
    java.util.List var72 = var68.getTypeArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);

  }

  public void test345() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.type.Type var4 = var0.getType();
    japa.parser.ast.body.MethodDeclaration var5 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var6 = var5.getType();
    java.lang.String var7 = var5.getName();
    japa.parser.ast.type.PrimitiveType var8 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.Parameter var16 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var8, var13);
    japa.parser.ast.type.ReferenceType var18 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var8, 0);
    japa.parser.Token var19 = new japa.parser.Token(0);
    var5.setArrayCount(0);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var43 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var43.setExpression((japa.parser.ast.expr.Expression)var49);
    java.util.List var52 = var49.getAnnotations();
    int var53 = var49.getEndColumn();
    var5.setArrayCount(var53);
    var0.setArrayCount(var53);
    java.util.List var56 = var0.getTypeParameters();
    java.util.List var57 = var0.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var60 = var59.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator(var59, (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var63 = var62.getId();
    japa.parser.ast.body.VariableDeclaratorId var64 = var62.getId();
    java.lang.String var65 = var64.getName();
    var0.setName(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));

  }

  public void test346() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    java.util.List var4 = var0.getTypeParameters();
    var0.setName("hi!");
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var25 = var24.getExtends();
    java.util.List var26 = var24.getExtends();
    japa.parser.ast.stmt.ReturnStmt var27 = new japa.parser.ast.stmt.ReturnStmt();
    int var28 = var27.getEndLine();
    var24.setModifiers(var28);
    var0.setArrayCount(var28);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    var0.setModifiers((-1));
    int var39 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var40 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.Parameter var48 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var40, var45);
    japa.parser.ast.type.Type var49 = var48.getType();
    japa.parser.ast.type.PrimitiveType var50 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.Parameter var58 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var50, var55);
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    int var66 = var64.getModifiers();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator(var55, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.VariableDeclaratorId var68 = var67.getId();
    var48.setId(var68);
    int var70 = var48.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var71 = var48.getId();
    boolean var72 = var48.isVarArgs();
    japa.parser.ast.body.MethodDeclaration var73 = new japa.parser.ast.body.MethodDeclaration();
    int var74 = var73.getModifiers();
    japa.parser.ast.type.PrimitiveType var75 = new japa.parser.ast.type.PrimitiveType();
    var73.setType((japa.parser.ast.type.Type)var75);
    japa.parser.ast.body.VariableDeclaratorId var81 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var82 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var83 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var81, (japa.parser.ast.expr.Expression)var82);
    japa.parser.ast.body.VariableDeclaratorId var89 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var90 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var91 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var89, (japa.parser.ast.expr.Expression)var90);
    japa.parser.Token var93 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var94 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    var73.setName("");
    japa.parser.ast.type.ClassOrInterfaceType var96 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var97 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(var39, var72, "");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);

  }

  public void test347() throws Throwable {

    japa.parser.ast.body.Parameter var0 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var1 = var0.getId();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    int var9 = var6.getArrayCount();
    var0.setId(var6);
    japa.parser.ast.type.Type var11 = var0.getType();
    japa.parser.ast.type.PrimitiveType var12 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.Parameter var20 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var12, var17);
    japa.parser.ast.type.ReferenceType var22 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var12, 0);
    int var23 = var12.getBeginLine();
    japa.parser.ast.type.ReferenceType var24 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var12);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.Token var41 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var42 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var43 = var42.getExtends();
    java.util.List var44 = var42.getMembers();
    java.util.List var45 = var42.getTypeParameters();
    int var46 = var42.getBeginColumn();
    var24.setArrayCount(var46);
    japa.parser.ast.type.PrimitiveType var48 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.Parameter var56 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var48, var53);
    japa.parser.ast.type.ReferenceType var58 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var48, 0);
    int var59 = var58.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.body.Parameter var67 = new japa.parser.ast.body.Parameter(var46, (japa.parser.ast.type.Type)var58, var64);
    japa.parser.ast.type.ReferenceType var69 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var58, 1);
    int var70 = var58.getArrayCount();
    var0.setModifiers(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);

  }

  public void test348() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var4);
    java.util.List var6 = var4.getStmts();
    java.lang.String var7 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "{\n}"+ "'", var7.equals("{\n}"));

  }

  public void test349() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    japa.parser.ast.body.JavadocComment var4 = var0.getJavaDoc();
    japa.parser.ast.expr.NameExpr var5 = new japa.parser.ast.expr.NameExpr();
    int var6 = var5.getBeginLine();
    japa.parser.ast.stmt.ExpressionStmt var7 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var17 = var16.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator(var16);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.MethodDeclaration var27 = new japa.parser.ast.body.MethodDeclaration();
    int var28 = var27.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.Token var46 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var47 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var51 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var50);
    japa.parser.Token var53 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var71 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var72 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var76 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var79 = new japa.parser.ast.LineComment(var28, 0, 0, 1, "");
    var24.setModifiers(0);
    var18.setInit((japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclarator var82 = new japa.parser.ast.body.VariableDeclarator(var12, (japa.parser.ast.expr.Expression)var24);
    var7.setExpression((japa.parser.ast.expr.Expression)var24);
    int var84 = var24.getModifiers();
    var0.setData((java.lang.Object)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);

  }

  public void test350() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    var23.setEndColumn(0);
    japa.parser.ast.stmt.ExpressionStmt var49 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var23);
    java.util.List var50 = var23.getAnnotations();
    java.util.List var51 = var23.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);

  }

  public void test351() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    int var21 = var17.getBeginColumn();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.Token var39 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var40 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var44 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var51 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var49, (japa.parser.ast.expr.Expression)var50);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    int var59 = var56.getArrayCount();
    japa.parser.ast.type.PrimitiveType var60 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.Parameter var68 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var65);
    japa.parser.ast.type.Type var69 = var68.getType();
    japa.parser.ast.type.PrimitiveType var70 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.body.Parameter var78 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var70, var75);
    japa.parser.ast.type.ReferenceType var80 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var70, 0);
    var68.setModifiers(0);
    japa.parser.ast.expr.NameExpr var83 = new japa.parser.ast.expr.NameExpr((-1), 1, var59, 0, "");
    var17.setEndColumn((-1));
    java.util.List var85 = var17.getExtends();
    java.util.List var86 = var17.getImplements();
    java.util.List var87 = var17.getAnnotations();
    java.util.List var88 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);

  }

  public void test352() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    int var29 = var26.getEndColumn();
    var8.setId(var26);
    int var31 = var26.getEndColumn();
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var34 = var33.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator(var33, (japa.parser.ast.expr.Expression)var35);
    java.util.List var37 = var35.getAnnotations();
    int var38 = var35.getModifiers();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator(var26, (japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.stmt.ReturnStmt var40 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var43 = var42.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator(var42, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var46 = var45.getId();
    japa.parser.ast.expr.Expression var47 = var45.getInit();
    japa.parser.ast.expr.Expression var48 = var45.getInit();
    japa.parser.ast.expr.Expression var49 = var45.getInit();
    var40.setExpr(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);

  }

  public void test353() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.Type var19 = var18.getType();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.ReferenceType var30 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var20, 0);
    var18.setModifiers(0);
    var8.setModifiers(0);
    japa.parser.ast.type.Type var33 = var8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);

  }

  public void test354() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isStatic();
    boolean var4 = var0.isStatic();
    japa.parser.ast.ImportDeclaration var5 = new japa.parser.ast.ImportDeclaration();
    var5.setStatic(false);
    boolean var8 = var5.isAsterisk();
    var5.setStatic(false);
    boolean var11 = var5.isStatic();
    boolean var12 = var5.isStatic();
    boolean var13 = var5.isAsterisk();
    var0.setAsterisk(var13);
    boolean var15 = var0.isAsterisk();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test355() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    java.util.List var2 = var1.getTypeArgs();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    int var4 = var3.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var27 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var47 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var48 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var52 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var55 = new japa.parser.ast.LineComment(var4, 0, 0, 1, "");
    japa.parser.ast.type.ClassOrInterfaceType var56 = new japa.parser.ast.type.ClassOrInterfaceType("");
    java.util.List var57 = var56.getTypeArgs();
    var1.setScope(var56);
    java.util.List var59 = var56.getTypeArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);

  }

  public void test356() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    japa.parser.ast.PackageDeclaration var35 = var0.getPackage();
    java.util.List var36 = var0.getImports();
    java.util.List var37 = var0.getTypes();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.Token var46 = new japa.parser.Token((-1), "");
    japa.parser.ast.expr.NameExpr var47 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var48 = new japa.parser.ast.PackageDeclaration(var47);
    java.util.List var49 = var48.getAnnotations();
    japa.parser.ast.expr.NameExpr var50 = var48.getName();
    var0.setPackage(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);

  }

  public void test357() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    japa.parser.ast.type.ClassOrInterfaceType var3 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.Token var11 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var14 = new japa.parser.ast.stmt.ReturnStmt();
    int var15 = var14.getEndLine();
    japa.parser.ast.body.MethodDeclaration var16 = new japa.parser.ast.body.MethodDeclaration();
    int var17 = var16.getModifiers();
    var16.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.Token var37 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var38 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var42 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    var42.setExpression((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.type.PrimitiveType var51 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.ast.body.Parameter var59 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var51, var56);
    japa.parser.ast.type.Type var60 = var59.getType();
    var48.setType(var60);
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.stmt.ReturnStmt var63 = new japa.parser.ast.stmt.ReturnStmt(1, var13, var15, 0, (japa.parser.ast.expr.Expression)var48);
    japa.parser.Token var65 = japa.parser.Token.newToken(var15, "");
    japa.parser.ast.type.ClassOrInterfaceType var66 = new japa.parser.ast.type.ClassOrInterfaceType(var3, "");
    java.lang.String var67 = var66.getName();
    var0.setName(var67);
    java.util.List var69 = var0.getParameters();
    japa.parser.ast.stmt.BlockStmt var70 = var0.getBody();
    java.lang.String var71 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));

  }

  public void test358() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    japa.parser.ast.expr.NameExpr var3 = var0.getName();
    japa.parser.ast.expr.NameExpr var4 = var0.getName();
    japa.parser.ast.ImportDeclaration var5 = new japa.parser.ast.ImportDeclaration();
    var5.setStatic(false);
    japa.parser.ast.expr.NameExpr var8 = var5.getName();
    japa.parser.ast.expr.NameExpr var9 = var5.getName();
    japa.parser.ast.expr.NameExpr var10 = var5.getName();
    japa.parser.ast.ImportDeclaration var11 = new japa.parser.ast.ImportDeclaration();
    var11.setStatic(false);
    var11.setAsterisk(false);
    boolean var16 = var11.isStatic();
    var5.setAsterisk(var16);
    boolean var18 = var5.isAsterisk();
    var0.setStatic(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test359() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    java.util.List var2 = var0.getComments();
    japa.parser.ast.PackageDeclaration var3 = var0.getPackage();
    java.util.List var4 = var0.getComments();
    java.util.List var5 = var0.getImports();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test360() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    int var1 = var0.getArrayCount();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.Parameter var10 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var2, var7);
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var2, 0);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.Token var30 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var31 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var35 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var34);
    var12.setArrayCount(0);
    int var37 = var12.getArrayCount();
    japa.parser.ast.type.Type var38 = var12.getType();
    japa.parser.ast.type.PrimitiveType var39 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.Parameter var47 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var39, var44);
    japa.parser.ast.type.Type var48 = var47.getType();
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.ReferenceType var59 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var49, 0);
    var47.setModifiers(0);
    japa.parser.ast.ImportDeclaration var61 = new japa.parser.ast.ImportDeclaration();
    var61.setStatic(false);
    var47.setVarArgs(false);
    japa.parser.ast.type.PrimitiveType var65 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.Parameter var73 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var65, var70);
    japa.parser.ast.type.PrimitiveType var74 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.Parameter var82 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var74, var79);
    var73.setId(var79);
    var47.setId(var79);
    japa.parser.ast.body.VariableDeclaratorId var85 = var47.getId();
    int var86 = var85.getArrayCount();
    japa.parser.ast.body.Parameter var87 = new japa.parser.ast.body.Parameter(var1, var38, var85);
    boolean var88 = var87.isVarArgs();
    java.util.List var89 = var87.getAnnotations();
    japa.parser.ast.type.Type var90 = var87.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);

  }

  public void test361() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.type.ClassOrInterfaceType var23 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var23, "");
    java.lang.String var87 = var86.getName();
    japa.parser.ast.type.ClassOrInterfaceType var88 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var89 = var86.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var91 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.MethodDeclaration var92 = new japa.parser.ast.body.MethodDeclaration(0, (japa.parser.ast.type.Type)var86, "hi!");
    java.util.List var93 = var92.getParameters();
    japa.parser.ast.type.Type var94 = var92.getType();
    java.util.List var95 = var92.getThrows();
    int var96 = var92.getModifiers();
    japa.parser.ast.stmt.BlockStmt var97 = var92.getBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == null);

  }

  public void test362() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    int var23 = var8.getModifiers();
    java.lang.Object var24 = var8.getData();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);

  }

  public void test363() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    int var21 = var17.getBeginColumn();
    japa.parser.ast.type.ClassOrInterfaceType var23 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var23, "");
    java.lang.String var87 = var86.getName();
    japa.parser.Token var88 = new japa.parser.Token(var21, var87);
    java.lang.String var89 = var88.toString();
    japa.parser.ast.expr.NameExpr var90 = new japa.parser.ast.expr.NameExpr(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));

  }

  public void test364() throws Throwable {

    japa.parser.ast.body.VariableDeclarator var0 = new japa.parser.ast.body.VariableDeclarator();
    java.lang.Object var1 = var0.getData();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    var0.setInit((japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.MethodDeclaration var10 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var11 = var10.getType();
    java.lang.String var12 = var10.getName();
    int var13 = var10.getModifiers();
    japa.parser.Token var15 = japa.parser.Token.newToken(var13, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var16 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    var7.setType((japa.parser.ast.type.Type)var16);
    java.lang.Object var18 = var16.getData();
    japa.parser.ast.type.ReferenceType var19 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var16);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var38 = new japa.parser.ast.ImportDeclaration();
    var38.setStatic(false);
    boolean var41 = var38.isAsterisk();
    var37.setInterface(var41);
    int var43 = var37.getBeginColumn();
    japa.parser.ast.type.ReferenceType var44 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var19, var43);
    japa.parser.ast.ImportDeclaration var45 = new japa.parser.ast.ImportDeclaration();
    var45.setStatic(false);
    var45.setAsterisk(false);
    boolean var50 = var45.isStatic();
    boolean var51 = var45.isStatic();
    japa.parser.ast.ImportDeclaration var52 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var53 = new japa.parser.ast.ImportDeclaration();
    var53.setStatic(false);
    boolean var56 = var53.isStatic();
    var52.setStatic(var56);
    japa.parser.ast.expr.NameExpr var58 = var52.getName();
    boolean var59 = var52.isAsterisk();
    var45.setStatic(var59);
    boolean var61 = var45.isAsterisk();
    japa.parser.ast.body.MethodDeclaration var62 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var63 = var62.getType();
    java.lang.String var64 = var62.getName();
    int var65 = var62.getModifiers();
    japa.parser.Token var67 = japa.parser.Token.newToken(var65, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var68 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    java.util.List var69 = var68.getTypeArgs();
    java.lang.String var70 = var68.getName();
    japa.parser.ast.type.ClassOrInterfaceType var71 = new japa.parser.ast.type.ClassOrInterfaceType(var70);
    java.util.List var72 = var71.getTypeArgs();
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.body.VariableDeclaratorId var85 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var87 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var85, (japa.parser.ast.expr.Expression)var86);
    japa.parser.Token var89 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var90 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var91 = var90.getMembers();
    java.util.List var92 = var90.getExtends();
    java.util.List var93 = var90.getImplements();
    java.util.List var94 = var90.getImplements();
    java.lang.String var95 = var90.getName();
    japa.parser.ast.type.ClassOrInterfaceType var96 = new japa.parser.ast.type.ClassOrInterfaceType(var71, var95);
    japa.parser.ast.body.ClassOrInterfaceDeclaration var97 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(var43, var61, var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + ""+ "'", var95.equals(""));

  }

  public void test365() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var4.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    var4.setArrayCount((-1));
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator(var4);
    int var17 = var4.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));

  }

  public void test366() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isAsterisk();
    japa.parser.ast.expr.NameExpr var4 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.expr.NameExpr var7 = new japa.parser.ast.expr.NameExpr("");
    java.lang.String var8 = var7.getName();
    japa.parser.ast.PackageDeclaration var9 = new japa.parser.ast.PackageDeclaration(var7);
    japa.parser.ast.expr.NameExpr var10 = var9.getName();
    var0.setName(var10);
    japa.parser.ast.type.PrimitiveType var12 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.Parameter var20 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var12, var17);
    japa.parser.ast.type.Type var21 = var20.getType();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    var20.setModifiers(0);
    japa.parser.ast.ImportDeclaration var34 = new japa.parser.ast.ImportDeclaration();
    var34.setStatic(false);
    var20.setVarArgs(false);
    japa.parser.ast.type.PrimitiveType var38 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.Parameter var46 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var38, var43);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    var46.setId(var52);
    var20.setId(var52);
    japa.parser.ast.ImportDeclaration var58 = new japa.parser.ast.ImportDeclaration();
    var58.setStatic(false);
    var58.setAsterisk(false);
    japa.parser.ast.expr.NameExpr var63 = new japa.parser.ast.expr.NameExpr();
    var58.setName(var63);
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator(var52, (japa.parser.ast.expr.Expression)var63);
    var0.setName(var63);
    boolean var67 = var0.isAsterisk();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test367() throws Throwable {

    japa.parser.ast.body.Parameter var0 = new japa.parser.ast.body.Parameter();
    boolean var1 = var0.isVarArgs();
    int var2 = var0.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test368() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    japa.parser.ast.type.ClassOrInterfaceType var6 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.Token var14 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt();
    int var16 = var15.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var17 = new japa.parser.ast.stmt.ReturnStmt();
    int var18 = var17.getEndLine();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    var19.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var45 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    var45.setExpression((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.type.PrimitiveType var54 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.Parameter var62 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var54, var59);
    japa.parser.ast.type.Type var63 = var62.getType();
    var51.setType(var63);
    japa.parser.ast.stmt.ReturnStmt var65 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.stmt.ReturnStmt var66 = new japa.parser.ast.stmt.ReturnStmt(1, var16, var18, 0, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var68 = japa.parser.Token.newToken(var18, "");
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType(var6, "");
    java.lang.String var70 = var69.getName();
    japa.parser.ast.type.ClassOrInterfaceType var71 = var69.getScope();
    java.lang.String var72 = var69.getName();
    japa.parser.ast.body.VariableDeclaratorId var77 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var78 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var79 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var77, (japa.parser.ast.expr.Expression)var78);
    japa.parser.ast.body.VariableDeclaratorId var85 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var86 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var87 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var85, (japa.parser.ast.expr.Expression)var86);
    japa.parser.Token var89 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var90 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.type.ClassOrInterfaceType var91 = new japa.parser.ast.type.ClassOrInterfaceType(var69, "");
    var0.setName("");
    japa.parser.ast.body.JavadocComment var93 = var0.getJavaDoc();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);

  }

  public void test369() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getMembers();
    java.util.List var33 = var30.getTypeParameters();
    int var34 = var30.getBeginColumn();
    var12.setArrayCount(var34);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36, 0);
    int var47 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter(var34, (japa.parser.ast.type.Type)var46, var52);
    java.util.List var56 = var55.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);

  }

  public void test370() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    java.util.List var2 = var0.getCatchs();
    japa.parser.ast.stmt.BlockStmt var3 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var4 = var3.getStmts();
    var0.setFinallyBlock(var3);
    japa.parser.ast.stmt.BlockStmt var6 = var0.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var7 = var0.getTryBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test371() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    japa.parser.ast.type.ClassOrInterfaceType var12 = new japa.parser.ast.type.ClassOrInterfaceType("");
    var10.setType((japa.parser.ast.type.Type)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var31 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var32 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var36 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var37 = japa.parser.Token.newToken(0);
    var10.setArrayCount(0);
    japa.parser.ast.type.PrimitiveType var39 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.Parameter var47 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var39, var44);
    japa.parser.ast.type.ReferenceType var49 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var39, 0);
    int var50 = var49.getArrayCount();
    int var51 = var49.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var53 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var52);
    japa.parser.ast.type.ReferenceType var54 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var49);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    var55.setEndColumn((-1));
    japa.parser.ast.type.ReferenceType var64 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var54, (-1));
    var10.setType((japa.parser.ast.type.Type)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

  public void test372() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var8.setType((japa.parser.ast.type.Type)var9);
    boolean var12 = var8.isVarArgs();
    japa.parser.ast.ImportDeclaration var13 = new japa.parser.ast.ImportDeclaration();
    var13.setStatic(false);
    boolean var16 = var13.isAsterisk();
    var13.setStatic(false);
    japa.parser.ast.expr.NameExpr var19 = new japa.parser.ast.expr.NameExpr();
    int var20 = var19.getBeginLine();
    var13.setName(var19);
    boolean var22 = var13.isAsterisk();
    var8.setVarArgs(var22);
    japa.parser.ast.body.VariableDeclaratorId var24 = var8.getId();
    int var25 = var24.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test373() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    var0.setAsterisk(false);
    boolean var5 = var0.isStatic();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var24 = var23.getExtends();
    java.util.List var25 = var23.getAnnotations();
    java.util.List var26 = var23.getImplements();
    java.lang.String var27 = var23.getName();
    japa.parser.ast.body.MethodDeclaration var28 = new japa.parser.ast.body.MethodDeclaration();
    int var29 = var28.getModifiers();
    japa.parser.ast.stmt.BlockStmt var30 = new japa.parser.ast.stmt.BlockStmt();
    var28.setBody(var30);
    java.util.List var32 = var28.getAnnotations();
    int var33 = var28.getBeginColumn();
    var23.setModifiers(var33);
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    japa.parser.ast.type.ReferenceType var45 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var35, 0);
    int var46 = var35.getBeginLine();
    japa.parser.ast.type.ReferenceType var47 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var35);
    java.lang.Object var48 = var35.getData();
    boolean var49 = var23.equals((java.lang.Object)var35);
    var0.setStatic(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test374() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.expr.NameExpr var2 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.ImportDeclaration var3 = new japa.parser.ast.ImportDeclaration();
    var3.setStatic(false);
    boolean var6 = var3.isAsterisk();
    var3.setStatic(false);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.Token var25 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var26 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var27 = var26.getMembers();
    java.util.List var28 = var26.getExtends();
    java.util.List var29 = var26.getImplements();
    java.util.List var30 = var26.getExtends();
    boolean var31 = var26.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var2, false, var31);
    boolean var33 = var32.isAsterisk();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test375() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    var8.setId(var14);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var27 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.type.PrimitiveType var28 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var29 = var28.getType();
    var24.setData((java.lang.Object)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    var24.setType((japa.parser.ast.type.Type)var31);
    var8.setType((japa.parser.ast.type.Type)var31);
    japa.parser.ast.type.PrimitiveType var42 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.Parameter var50 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var42, var47);
    japa.parser.ast.type.ReferenceType var52 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var42, 0);
    int var53 = var52.getArrayCount();
    int var54 = var52.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var56 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var52, var55);
    int var57 = var56.getBeginColumn();
    japa.parser.ast.type.PrimitiveType var58 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.Parameter var66 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var58, var63);
    var56.setId(var63);
    var8.setId(var63);
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var74);
    japa.parser.ast.type.PrimitiveType var78 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var83, (japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.body.Parameter var86 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var78, var83);
    var77.setId(var83);
    japa.parser.ast.type.Type var88 = var77.getType();
    japa.parser.ast.body.VariableDeclaratorId var89 = var77.getId();
    var8.setId(var89);
    int var91 = var8.getModifiers();
    int var92 = var8.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test376() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var2 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    japa.parser.ast.stmt.BlockStmt var8 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var8);
    int var10 = var4.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var11 = var4.getBody();
    var0.setFinallyBlock(var11);
    japa.parser.ast.stmt.BlockStmt var13 = var0.getFinallyBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test377() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var7 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt();
    int var9 = var8.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    var12.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    var38.setExpression((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.Type var56 = var55.getType();
    var44.setType(var56);
    japa.parser.ast.stmt.ReturnStmt var58 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.stmt.ReturnStmt var59 = new japa.parser.ast.stmt.ReturnStmt(1, var9, var11, 0, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var61 = japa.parser.Token.newToken(var11, "");
    japa.parser.ast.LineComment var62 = new japa.parser.ast.LineComment("");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);

  }

  public void test378() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var8 = new japa.parser.Token((-1), "");
    java.lang.String var9 = var8.toString();
    japa.parser.ast.type.ClassOrInterfaceType var10 = new japa.parser.ast.type.ClassOrInterfaceType(var9);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var20 = var19.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator(var19, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.MethodDeclaration var23 = new japa.parser.ast.body.MethodDeclaration();
    int var24 = var23.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var49 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.Token var67 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var68 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var72 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var75 = new japa.parser.ast.LineComment(var24, 0, 0, 1, "");
    int var76 = var75.getEndColumn();
    var75.setContent("hi!");
    var19.setName("hi!");
    japa.parser.Token var80 = new japa.parser.Token(1, "hi!");
    japa.parser.ast.expr.NameExpr var81 = new japa.parser.ast.expr.NameExpr("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var82 = new japa.parser.ast.type.ClassOrInterfaceType(var10, "hi!");
    java.lang.String var83 = var82.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));

  }

  public void test379() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.Type var19 = var18.getType();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.ReferenceType var30 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var20, 0);
    var18.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var32 = var18.getId();
    var8.setId(var32);
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    var32.setArrayCount(var35);
    java.lang.String var37 = var32.getName();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);

  }

  public void test380() throws Throwable {

    japa.parser.ast.body.VariableDeclarator var0 = new japa.parser.ast.body.VariableDeclarator();
    java.lang.Object var1 = var0.getData();
    japa.parser.ast.body.VariableDeclaratorId var2 = var0.getId();
    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var5 = var4.getArrayCount();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator(var4);
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    int var14 = var12.getModifiers();
    japa.parser.ast.body.MethodDeclaration var15 = new japa.parser.ast.body.MethodDeclaration();
    int var16 = var15.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var24 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var22, (japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.Token var34 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var35 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var39 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var38);
    japa.parser.Token var41 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var60 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var64 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.body.VariableDeclaratorId var66 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var67 = new japa.parser.ast.LineComment(var16, 0, 0, 1, "");
    var12.setModifiers(0);
    var6.setInit((japa.parser.ast.expr.Expression)var12);
    boolean var70 = var0.equals((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test381() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    java.util.List var23 = var8.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var24 = var8.getId();
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.type.PrimitiveType var34 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.Parameter var42 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var34, var39);
    var33.setId(var39);
    japa.parser.ast.type.Type var44 = var33.getType();
    japa.parser.ast.type.Type var45 = var33.getType();
    var8.setType(var45);
    java.util.List var47 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var48 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.Parameter var56 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var48, var53);
    japa.parser.ast.type.PrimitiveType var57 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.body.Parameter var65 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var57, var62);
    var56.setId(var62);
    japa.parser.ast.type.Type var67 = var56.getType();
    japa.parser.ast.type.Type var68 = var56.getType();
    japa.parser.ast.ImportDeclaration var69 = new japa.parser.ast.ImportDeclaration();
    var69.setStatic(false);
    boolean var72 = var69.isAsterisk();
    var69.setStatic(false);
    boolean var75 = var69.isStatic();
    boolean var76 = var69.isStatic();
    boolean var77 = var69.isAsterisk();
    boolean var78 = var69.isStatic();
    var56.setVarArgs(var78);
    var8.setVarArgs(var78);
    japa.parser.ast.type.Type var81 = var8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);

  }

  public void test382() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    int var16 = var14.getModifiers();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator(var5, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var18 = var17.getId();
    japa.parser.ast.type.ReferenceType var19 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    int var29 = var28.getEndLine();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var32 = var31.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    int var47 = var44.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.Token var67 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var68 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var72 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var72.setExpression((japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.body.VariableDeclaratorId var79 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var80 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var81 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var79, (japa.parser.ast.expr.Expression)var80);
    var72.setExpression((japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.type.Type var83 = var80.getType();
    japa.parser.ast.stmt.ExpressionStmt var84 = new japa.parser.ast.stmt.ExpressionStmt((-1), var47, 100, 1, (japa.parser.ast.expr.Expression)var80);
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator(var31, (japa.parser.ast.expr.Expression)var80);
    var28.setId(var31);
    japa.parser.ast.body.Parameter var87 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var19, var31);
    var17.setId(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);

  }

  public void test383() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    java.util.List var36 = var17.getImplements();
    boolean var37 = var17.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test384() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    java.util.List var2 = var0.getComments();
    java.util.List var3 = var0.getImports();
    japa.parser.ast.PackageDeclaration var4 = var0.getPackage();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.Token var22 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var23 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var27 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    var27.setExpression((japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.Type var45 = var44.getType();
    var33.setType(var45);
    japa.parser.ast.stmt.ReturnStmt var47 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.Token var65 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var66 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var70 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    var70.setExpression((japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.stmt.ReturnStmt var79 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.ImportDeclaration var80 = new japa.parser.ast.ImportDeclaration();
    var80.setStatic(false);
    boolean var83 = var80.isAsterisk();
    var80.setStatic(false);
    japa.parser.ast.expr.NameExpr var86 = new japa.parser.ast.expr.NameExpr();
    int var87 = var86.getBeginLine();
    var80.setName(var86);
    var79.setExpr((japa.parser.ast.expr.Expression)var86);
    var47.setExpr((japa.parser.ast.expr.Expression)var86);
    japa.parser.ast.PackageDeclaration var91 = new japa.parser.ast.PackageDeclaration(var86);
    japa.parser.ast.PackageDeclaration var92 = new japa.parser.ast.PackageDeclaration(var86);
    var0.setPackage(var92);
    java.util.List var94 = var0.getComments();
    java.lang.Object var95 = var0.getData();
    java.util.List var96 = var0.getImports();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);

  }

  public void test385() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = var0.getPackage();
    java.util.List var3 = var0.getComments();
    java.util.List var4 = var0.getTypes();
    japa.parser.ast.PackageDeclaration var5 = var0.getPackage();
    japa.parser.ast.PackageDeclaration var6 = var0.getPackage();
    java.util.List var7 = var0.getImports();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test386() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.body.MethodDeclaration var8 = new japa.parser.ast.body.MethodDeclaration();
    int var9 = var8.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.Token var27 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var28 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var32 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var31);
    japa.parser.Token var34 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.Token var52 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var53 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var57 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var60 = new japa.parser.ast.LineComment(var9, 0, 0, 1, "");
    var5.setModifiers(0);
    japa.parser.Token var62 = new japa.parser.Token(0);
    japa.parser.ast.body.MethodDeclaration var63 = new japa.parser.ast.body.MethodDeclaration();
    int var64 = var63.getModifiers();
    japa.parser.ast.stmt.BlockStmt var65 = new japa.parser.ast.stmt.BlockStmt();
    var63.setBody(var65);
    java.util.List var67 = var63.getTypeParameters();
    var63.setName("hi!");
    japa.parser.ast.LineComment var70 = new japa.parser.ast.LineComment("hi!");
    japa.parser.Token var71 = japa.parser.Token.newToken(0, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);

  }

  public void test387() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.Token var19 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var20 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var24 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var23);
    japa.parser.Token var26 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.Token var44 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var45 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var49 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var52 = new japa.parser.ast.LineComment(var1, 0, 0, 1, "");
    int var53 = var52.getEndColumn();
    var52.setContent("hi!");
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var57 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.expr.NameExpr var58 = new japa.parser.ast.expr.NameExpr("hi!");
    japa.parser.ast.PackageDeclaration var59 = new japa.parser.ast.PackageDeclaration(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);

  }

  public void test388() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    var22.setExpression((japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.type.Type var33 = var30.getType();
    japa.parser.ast.type.PrimitiveType var34 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.Parameter var42 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var34, var39);
    japa.parser.ast.type.Type var43 = var42.getType();
    japa.parser.ast.type.PrimitiveType var44 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var49 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var50 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var51 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var49, (japa.parser.ast.expr.Expression)var50);
    japa.parser.ast.body.Parameter var52 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var44, var49);
    japa.parser.ast.type.ReferenceType var54 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var44, 0);
    var42.setModifiers(0);
    japa.parser.ast.ImportDeclaration var56 = new japa.parser.ast.ImportDeclaration();
    var56.setStatic(false);
    var42.setVarArgs(false);
    japa.parser.ast.type.PrimitiveType var60 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.Parameter var68 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var65);
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var74);
    var68.setId(var74);
    var42.setId(var74);
    int var80 = var74.getArrayCount();
    var30.setModifiers(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);

  }

  public void test389() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    java.util.List var4 = var0.getThrows();
    java.util.List var5 = var0.getAnnotations();
    int var6 = var0.getArrayCount();
    java.util.List var7 = var0.getThrows();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test390() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    int var21 = var17.getBeginColumn();
    java.util.List var22 = var17.getTypeParameters();
    boolean var23 = var17.isInterface();
    java.util.List var24 = var17.getExtends();
    boolean var25 = var17.isInterface();
    java.lang.String var26 = var17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));

  }

  public void test391() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    java.util.List var5 = var3.getAnnotations();
    int var6 = var3.getModifiers();
    japa.parser.ast.type.PrimitiveType var7 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.ast.body.Parameter var15 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var7, var12);
    japa.parser.ast.type.Type var16 = var15.getType();
    japa.parser.ast.type.PrimitiveType var17 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var22 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var24 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var22, (japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.Parameter var25 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var17, var22);
    japa.parser.ast.type.ReferenceType var27 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var17, 0);
    var15.setModifiers(0);
    japa.parser.ast.type.ReferenceType var29 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.Type var30 = var29.getType();
    int var31 = var29.getArrayCount();
    japa.parser.ast.type.PrimitiveType var32 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.Parameter var40 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var32, var37);
    japa.parser.ast.type.ReferenceType var42 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var32, 0);
    japa.parser.ast.type.Type var43 = var42.getType();
    var29.setType((japa.parser.ast.type.Type)var42);
    japa.parser.ast.type.ReferenceType var45 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var42);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var42);
    var15.setType((japa.parser.ast.type.Type)var46);
    var3.setType((japa.parser.ast.type.Type)var46);
    java.util.List var49 = var3.getVars();
    java.util.List var50 = var3.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);

  }

  public void test392() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.Type var40 = var39.getType();
    var28.setType(var40);
    java.util.List var42 = var28.getVars();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);

  }

  public void test393() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    var0.setBody(var6);
    java.util.List var9 = var0.getThrows();
    int var10 = var0.getBeginLine();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.Token var27 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var28 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var29 = var28.getExtends();
    japa.parser.ast.body.MethodDeclaration var30 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var31 = var30.getType();
    java.lang.String var32 = var30.getName();
    japa.parser.ast.type.PrimitiveType var33 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.Parameter var41 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var33, var38);
    japa.parser.ast.type.ReferenceType var43 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var33, 0);
    japa.parser.Token var44 = new japa.parser.Token(0);
    var30.setArrayCount(0);
    var28.setModifiers(0);
    java.lang.String var47 = var28.getName();
    var0.setName(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));

  }

  public void test394() throws Throwable {

    japa.parser.ast.LineComment var0 = new japa.parser.ast.LineComment();
    java.lang.String var1 = var0.getContent();
    java.lang.String var2 = var0.getContent();
    japa.parser.ast.type.ClassOrInterfaceType var4 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.Token var12 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var13 = new japa.parser.ast.stmt.ReturnStmt();
    int var14 = var13.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt();
    int var16 = var15.getEndLine();
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    var17.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var43 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var43.setExpression((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.type.PrimitiveType var52 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var57 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var59 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var57, (japa.parser.ast.expr.Expression)var58);
    japa.parser.ast.body.Parameter var60 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var52, var57);
    japa.parser.ast.type.Type var61 = var60.getType();
    var49.setType(var61);
    japa.parser.ast.stmt.ReturnStmt var63 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.stmt.ReturnStmt var64 = new japa.parser.ast.stmt.ReturnStmt(1, var14, var16, 0, (japa.parser.ast.expr.Expression)var49);
    japa.parser.Token var66 = japa.parser.Token.newToken(var16, "");
    japa.parser.ast.type.ClassOrInterfaceType var67 = new japa.parser.ast.type.ClassOrInterfaceType(var4, "");
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId("");
    var0.setContent("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);

  }

  public void test395() throws Throwable {

    japa.parser.ast.expr.NameExpr var0 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.stmt.ReturnStmt var1 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var0);
    japa.parser.ast.body.Parameter var2 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var3 = var2.getId();
    japa.parser.ast.ImportDeclaration var4 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var5 = new japa.parser.ast.ImportDeclaration();
    var5.setStatic(false);
    boolean var8 = var5.isStatic();
    var4.setStatic(var8);
    var2.setVarArgs(var8);
    japa.parser.ast.body.VariableDeclaratorId var11 = var2.getId();
    boolean var12 = var2.isVarArgs();
    japa.parser.ast.body.MethodDeclaration var13 = new japa.parser.ast.body.MethodDeclaration();
    int var14 = var13.getModifiers();
    var13.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    japa.parser.ast.stmt.BlockStmt var19 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var19);
    var13.setBody(var19);
    java.util.List var22 = var13.getThrows();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    int var30 = var28.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var31 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var49 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var50 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var54 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    var54.setExpression((japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.type.PrimitiveType var63 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var68, (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.Parameter var71 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var63, var68);
    japa.parser.ast.type.Type var72 = var71.getType();
    var60.setType(var72);
    java.util.List var74 = var60.getAnnotations();
    japa.parser.ast.stmt.ReturnStmt var75 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var60);
    var28.setData((java.lang.Object)var75);
    boolean var77 = var13.equals((java.lang.Object)var75);
    japa.parser.ast.ImportDeclaration var78 = new japa.parser.ast.ImportDeclaration(var0, var12, var77);
    japa.parser.ast.PackageDeclaration var79 = new japa.parser.ast.PackageDeclaration(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test396() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    java.util.List var4 = var0.getAnnotations();
    japa.parser.ast.type.PrimitiveType var5 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var10 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var11 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var12 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var10, (japa.parser.ast.expr.Expression)var11);
    japa.parser.ast.body.Parameter var13 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var5, var10);
    japa.parser.ast.type.Type var14 = var13.getType();
    japa.parser.ast.type.PrimitiveType var15 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.Parameter var23 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var15, var20);
    japa.parser.ast.type.ReferenceType var25 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var15, 0);
    var13.setModifiers(0);
    boolean var27 = var13.isVarArgs();
    japa.parser.ast.type.Type var28 = var13.getType();
    java.util.List var29 = var13.getAnnotations();
    japa.parser.ast.body.MethodDeclaration var30 = new japa.parser.ast.body.MethodDeclaration();
    int var31 = var30.getModifiers();
    japa.parser.ast.stmt.BlockStmt var32 = new japa.parser.ast.stmt.BlockStmt();
    var30.setBody(var32);
    java.util.List var34 = var30.getTypeParameters();
    int var35 = var30.getModifiers();
    var13.setModifiers(var35);
    var0.setBeginLine(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);

  }

  public void test397() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = var0.getPackage();
    java.util.List var3 = var0.getComments();
    java.util.List var4 = var0.getTypes();
    japa.parser.ast.PackageDeclaration var5 = var0.getPackage();
    japa.parser.ast.PackageDeclaration var6 = var0.getPackage();
    japa.parser.ast.PackageDeclaration var7 = var0.getPackage();
    java.util.List var8 = var0.getImports();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test398() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.body.MethodDeclaration var9 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var10 = var9.getType();
    java.lang.String var11 = var9.getName();
    int var12 = var9.getModifiers();
    japa.parser.ast.type.ReferenceType var13 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, var12);
    japa.parser.ast.type.PrimitiveType.Primitive var14 = var0.getType();
    japa.parser.ast.type.PrimitiveType.Primitive var15 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test399() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.Token var23 = japa.parser.Token.newToken(0);
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    java.lang.String var26 = var23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);

  }

  public void test400() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    java.util.List var23 = var8.getAnnotations();
    java.util.List var24 = var8.getAnnotations();
    japa.parser.ast.ImportDeclaration var25 = new japa.parser.ast.ImportDeclaration();
    var25.setStatic(false);
    boolean var28 = var25.isAsterisk();
    boolean var29 = var25.isStatic();
    var8.setVarArgs(var29);
    int var31 = var8.getEndLine();
    japa.parser.ast.type.Type var32 = var8.getType();
    var8.setVarArgs(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);

  }

  public void test401() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.stmt.ReturnStmt var31 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var39 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var40 = new japa.parser.ast.stmt.ReturnStmt();
    int var41 = var40.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var42 = new japa.parser.ast.stmt.ReturnStmt();
    int var43 = var42.getEndLine();
    japa.parser.ast.body.MethodDeclaration var44 = new japa.parser.ast.body.MethodDeclaration();
    int var45 = var44.getModifiers();
    var44.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.Token var65 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var66 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var70 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    var70.setExpression((japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.type.PrimitiveType var79 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var84 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var85 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var86 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var84, (japa.parser.ast.expr.Expression)var85);
    japa.parser.ast.body.Parameter var87 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var79, var84);
    japa.parser.ast.type.Type var88 = var87.getType();
    var76.setType(var88);
    japa.parser.ast.stmt.ReturnStmt var90 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.stmt.ReturnStmt var91 = new japa.parser.ast.stmt.ReturnStmt(1, var41, var43, 0, (japa.parser.ast.expr.Expression)var76);
    var28.setEndColumn(var43);
    java.util.List var93 = var28.getVars();
    int var94 = var28.getModifiers();
    var28.setModifiers(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test402() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getImports();
    java.util.List var2 = var0.getImports();
    japa.parser.ast.PackageDeclaration var3 = new japa.parser.ast.PackageDeclaration();
    java.util.List var4 = var3.getAnnotations();
    japa.parser.ast.expr.NameExpr var5 = var3.getName();
    java.util.List var6 = var3.getAnnotations();
    japa.parser.ast.expr.NameExpr var7 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var8 = new japa.parser.ast.ImportDeclaration();
    var8.setStatic(false);
    var8.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    boolean var32 = var30.isInterface();
    japa.parser.ast.ImportDeclaration var33 = new japa.parser.ast.ImportDeclaration(var7, false, var32);
    var3.setName(var7);
    var0.setPackage(var3);
    java.util.List var36 = var0.getImports();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);

  }

  public void test403() throws Throwable {

    japa.parser.ast.expr.NameExpr var0 = new japa.parser.ast.expr.NameExpr();
    int var1 = var0.getBeginLine();
    japa.parser.ast.stmt.ExpressionStmt var2 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var0);
    japa.parser.ast.PackageDeclaration var3 = new japa.parser.ast.PackageDeclaration(var0);
    japa.parser.ast.PackageDeclaration var4 = new japa.parser.ast.PackageDeclaration(var0);
    japa.parser.ast.PackageDeclaration var5 = new japa.parser.ast.PackageDeclaration(var0);
    java.util.List var6 = var5.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test404() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    japa.parser.ast.expr.NameExpr var3 = var0.getName();
    japa.parser.ast.ImportDeclaration var4 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var5 = new japa.parser.ast.ImportDeclaration();
    var5.setStatic(false);
    boolean var8 = var5.isStatic();
    var4.setStatic(var8);
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.PrimitiveType var19 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.Parameter var27 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var19, var24);
    var18.setId(var24);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    int var36 = var34.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var37 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.type.PrimitiveType var38 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var39 = var38.getType();
    var34.setData((java.lang.Object)var38);
    japa.parser.ast.type.PrimitiveType var41 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.body.Parameter var49 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var41, var46);
    var34.setType((japa.parser.ast.type.Type)var41);
    var18.setType((japa.parser.ast.type.Type)var41);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.Token var68 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var69 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var70 = new japa.parser.ast.ImportDeclaration();
    var70.setStatic(false);
    boolean var73 = var70.isAsterisk();
    var69.setInterface(var73);
    var18.setVarArgs(var73);
    var4.setStatic(var73);
    boolean var77 = var4.isAsterisk();
    var0.setStatic(var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter();
    boolean var80 = var79.isVarArgs();
    boolean var81 = var79.isVarArgs();
    var0.setStatic(var81);
    boolean var83 = var0.isStatic();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test405() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.ast.type.PrimitiveType var15 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.Parameter var23 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var15, var20);
    japa.parser.ast.type.ReferenceType var25 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var15, 0);
    var14.setType((japa.parser.ast.type.Type)var15);
    japa.parser.ast.type.PrimitiveType var27 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.Parameter var35 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var27, var32);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var37 = var36.getType();
    var35.setType((japa.parser.ast.type.Type)var36);
    var14.setType((japa.parser.ast.type.Type)var36);
    japa.parser.ast.type.Type var40 = var14.getType();
    var0.setType(var40);
    int var42 = var0.getModifiers();
    int var43 = var0.getEndColumn();
    java.util.List var44 = var0.getParameters();
    japa.parser.ast.stmt.TryStmt var45 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var46 = var45.getCatchs();
    java.util.List var47 = var45.getCatchs();
    japa.parser.ast.stmt.BlockStmt var48 = var45.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var49 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.stmt.TryStmt var50 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var51 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var52 = var51.getType();
    java.lang.String var53 = var51.getName();
    japa.parser.ast.type.PrimitiveType var54 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.Parameter var62 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var54, var59);
    japa.parser.ast.type.ReferenceType var64 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var54, 0);
    japa.parser.Token var65 = new japa.parser.Token(0);
    var51.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var67 = new japa.parser.ast.body.MethodDeclaration();
    int var68 = var67.getModifiers();
    japa.parser.ast.stmt.BlockStmt var69 = new japa.parser.ast.stmt.BlockStmt();
    var67.setBody(var69);
    japa.parser.ast.stmt.BlockStmt var71 = new japa.parser.ast.stmt.BlockStmt();
    var67.setBody(var71);
    var51.setBody(var71);
    var50.setFinallyBlock(var71);
    japa.parser.ast.stmt.BlockStmt var75 = var50.getFinallyBlock();
    var49.setBody(var75);
    var45.setTryBlock(var75);
    int var78 = var45.getEndColumn();
    japa.parser.ast.body.MethodDeclaration var79 = new japa.parser.ast.body.MethodDeclaration();
    int var80 = var79.getModifiers();
    japa.parser.ast.stmt.BlockStmt var81 = new japa.parser.ast.stmt.BlockStmt();
    var79.setBody(var81);
    java.util.List var83 = var81.getStmts();
    java.util.List var84 = var81.getStmts();
    var45.setFinallyBlock(var81);
    japa.parser.ast.stmt.BlockStmt var86 = var45.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var87 = var45.getTryBlock();
    var0.setBody(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);

  }

  public void test406() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    var22.setExpression((japa.parser.ast.expr.Expression)var30);
    java.util.List var33 = var30.getAnnotations();
    java.util.List var34 = var30.getVars();
    int var35 = var30.getModifiers();
    japa.parser.ast.type.Type var36 = var30.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);

  }

  public void test407() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var8 = new japa.parser.Token((-1), "");
    japa.parser.ast.expr.NameExpr var9 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var10 = new japa.parser.ast.PackageDeclaration(var9);
    java.util.List var11 = var10.getAnnotations();
    japa.parser.ast.expr.NameExpr var12 = var10.getName();
    japa.parser.ast.expr.NameExpr var13 = var10.getName();
    japa.parser.ast.stmt.ExpressionStmt var14 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test408() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var7 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt();
    int var9 = var8.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    var12.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    var38.setExpression((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.Type var56 = var55.getType();
    var44.setType(var56);
    japa.parser.ast.stmt.ReturnStmt var58 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.stmt.ReturnStmt var59 = new japa.parser.ast.stmt.ReturnStmt(1, var9, var11, 0, (japa.parser.ast.expr.Expression)var44);
    java.lang.Object var60 = var59.getData();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    int var68 = var66.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var69 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.type.PrimitiveType var70 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var71 = var70.getType();
    var66.setData((java.lang.Object)var70);
    var59.setExpr((japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var76 = var75.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator(var75, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.VariableDeclaratorId var79 = var78.getId();
    japa.parser.ast.expr.Expression var80 = var78.getInit();
    var59.setExpr(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);

  }

  public void test409() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);

  }

  public void test410() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var1 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var2 = var1.getType();
    java.lang.String var3 = var1.getName();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.Token var15 = new japa.parser.Token(0);
    var1.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    japa.parser.ast.stmt.BlockStmt var19 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var19);
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var21);
    var1.setBody(var21);
    var0.setFinallyBlock(var21);
    japa.parser.ast.body.MethodDeclaration var25 = new japa.parser.ast.body.MethodDeclaration();
    int var26 = var25.getModifiers();
    japa.parser.ast.stmt.BlockStmt var27 = new japa.parser.ast.stmt.BlockStmt();
    var25.setBody(var27);
    japa.parser.ast.stmt.BlockStmt var29 = new japa.parser.ast.stmt.BlockStmt();
    var25.setBody(var29);
    java.util.List var31 = var29.getStmts();
    var0.setTryBlock(var29);
    java.util.List var33 = var0.getCatchs();
    japa.parser.ast.stmt.TryStmt var34 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var35 = var34.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var36 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var37 = var36.getStmts();
    var34.setFinallyBlock(var36);
    japa.parser.ast.stmt.BlockStmt var39 = var34.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var40 = var34.getFinallyBlock();
    var0.setTryBlock(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);

  }

  public void test411() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    java.util.List var2 = var0.getCatchs();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.stmt.TryStmt var5 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var6 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var7 = var6.getType();
    java.lang.String var8 = var6.getName();
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    japa.parser.ast.type.ReferenceType var19 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var9, 0);
    japa.parser.Token var20 = new japa.parser.Token(0);
    var6.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var22 = new japa.parser.ast.body.MethodDeclaration();
    int var23 = var22.getModifiers();
    japa.parser.ast.stmt.BlockStmt var24 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var24);
    japa.parser.ast.stmt.BlockStmt var26 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var26);
    var6.setBody(var26);
    var5.setFinallyBlock(var26);
    japa.parser.ast.stmt.BlockStmt var30 = var5.getFinallyBlock();
    var4.setBody(var30);
    var0.setTryBlock(var30);
    int var33 = var0.getEndColumn();
    java.util.List var34 = var0.getCatchs();
    java.lang.Object var35 = var0.getData();
    japa.parser.ast.stmt.BlockStmt var36 = var0.getTryBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test412() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    java.util.List var36 = var17.getImplements();
    java.util.List var37 = var17.getImplements();
    java.util.List var38 = var17.getImplements();
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.Token var46 = japa.parser.Token.newToken(1);
    var17.setModifiers(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);

  }

  public void test413() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    int var5 = var0.getArrayCount();
    int var6 = var0.getArrayCount();
    int var7 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var8 = var0.getBody();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test414() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator(var15, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var28 = var27.getId();
    var8.setId(var28);
    japa.parser.ast.type.PrimitiveType var30 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var30, var35);
    japa.parser.ast.type.ReferenceType var40 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var30, 0);
    int var41 = var40.getArrayCount();
    int var42 = var40.getArrayCount();
    japa.parser.Token var43 = japa.parser.Token.newToken(var42);
    var8.setModifiers(var42);
    japa.parser.Token var45 = new japa.parser.Token(var42);
    java.lang.String var46 = var45.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test415() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.type.Type var7 = var5.getType();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    var5.setModifiers(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test416() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var8 = new japa.parser.Token((-1), "");
    java.lang.String var9 = var8.toString();
    japa.parser.ast.type.ClassOrInterfaceType var10 = new japa.parser.ast.type.ClassOrInterfaceType(var9);
    japa.parser.ast.expr.NameExpr var11 = new japa.parser.ast.expr.NameExpr(var9);
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    japa.parser.ast.stmt.BlockStmt var14 = new japa.parser.ast.stmt.BlockStmt();
    var12.setBody(var14);
    java.util.List var16 = var12.getTypeParameters();
    var12.setName("hi!");
    var11.setName("hi!");
    japa.parser.ast.PackageDeclaration var20 = new japa.parser.ast.PackageDeclaration(var11);
    java.lang.String var21 = var11.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));

  }

  public void test417() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getBody();
    java.util.List var4 = var0.getAnnotations();
    japa.parser.ast.type.ReferenceType var5 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.Type var6 = var5.getType();
    int var7 = var5.getArrayCount();
    japa.parser.ast.type.PrimitiveType var8 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.Parameter var16 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var8, var13);
    japa.parser.ast.type.ReferenceType var18 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var8, 0);
    japa.parser.ast.type.Type var19 = var18.getType();
    var5.setType((japa.parser.ast.type.Type)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.Token var37 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var38 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var39 = var38.getExtends();
    java.util.List var40 = var38.getExtends();
    japa.parser.ast.stmt.ReturnStmt var41 = new japa.parser.ast.stmt.ReturnStmt();
    int var42 = var41.getEndLine();
    var38.setModifiers(var42);
    var18.setArrayCount(var42);
    var0.setType((japa.parser.ast.type.Type)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test418() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    int var35 = var2.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.Token var55 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var56 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var60 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var59);
    japa.parser.Token var62 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var68, (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.Token var80 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var81 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var85 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.body.VariableDeclaratorId var87 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var88 = new japa.parser.ast.LineComment(var37, 0, 0, 1, "");
    japa.parser.ast.type.ClassOrInterfaceType var89 = new japa.parser.ast.type.ClassOrInterfaceType("");
    java.lang.String var90 = var89.getName();
    japa.parser.ast.expr.NameExpr var91 = new japa.parser.ast.expr.NameExpr(var90);
    japa.parser.Token var92 = japa.parser.Token.newToken(var35, var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + ""+ "'", var90.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);

  }

  public void test419() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    japa.parser.ast.ImportDeclaration var35 = new japa.parser.ast.ImportDeclaration();
    var35.setStatic(false);
    var35.setAsterisk(false);
    japa.parser.ast.expr.NameExpr var40 = new japa.parser.ast.expr.NameExpr();
    var35.setName(var40);
    japa.parser.ast.PackageDeclaration var42 = new japa.parser.ast.PackageDeclaration(var40);
    var0.setPackage(var42);
    japa.parser.ast.CompilationUnit var44 = new japa.parser.ast.CompilationUnit();
    java.util.List var45 = var44.getComments();
    japa.parser.ast.PackageDeclaration var46 = var44.getPackage();
    java.util.List var47 = var44.getComments();
    java.util.List var48 = var44.getImports();
    japa.parser.ast.PackageDeclaration var49 = new japa.parser.ast.PackageDeclaration();
    java.util.List var50 = var49.getAnnotations();
    japa.parser.ast.expr.NameExpr var51 = var49.getName();
    japa.parser.ast.expr.NameExpr var52 = var49.getName();
    japa.parser.ast.type.PrimitiveType var53 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.Parameter var61 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var53, var58);
    japa.parser.ast.body.MethodDeclaration var62 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var63 = var62.getType();
    java.lang.String var64 = var62.getName();
    int var65 = var62.getModifiers();
    japa.parser.ast.type.ReferenceType var66 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var53, var65);
    var49.setBeginLine(var65);
    var44.setPackage(var49);
    var0.setPackage(var49);
    japa.parser.ast.PackageDeclaration var70 = var0.getPackage();
    java.util.List var71 = var0.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);

  }

  public void test420() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    japa.parser.ast.stmt.BlockStmt var5 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var5);
    japa.parser.ast.type.PrimitiveType var7 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.ast.body.Parameter var15 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var7, var12);
    int var16 = var15.getEndLine();
    var0.setArrayCount(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test421() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var1 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    int var16 = var13.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var41.setExpression((japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var41.setExpression((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.type.Type var52 = var49.getType();
    japa.parser.ast.stmt.ExpressionStmt var53 = new japa.parser.ast.stmt.ExpressionStmt((-1), var16, 100, 1, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator(var0, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.type.PrimitiveType var55 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.Parameter var63 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var55, var60);
    japa.parser.ast.type.ReferenceType var65 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var55, 0);
    int var66 = var65.getArrayCount();
    int var67 = var65.getArrayCount();
    var49.setModifiers(var67);
    int var69 = var49.getModifiers();
    japa.parser.ast.type.Type var70 = var49.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);

  }

  public void test422() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    java.util.List var4 = var0.getAnnotations();
    japa.parser.ast.type.Type var5 = var0.getType();
    japa.parser.ast.body.JavadocComment var6 = var0.getJavaDoc();
    japa.parser.ast.body.MethodDeclaration var7 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var8 = var7.getType();
    java.lang.String var9 = var7.getName();
    int var10 = var7.getArrayCount();
    var0.setArrayCount(var10);
    japa.parser.ast.ImportDeclaration var12 = new japa.parser.ast.ImportDeclaration();
    var12.setStatic(false);
    boolean var15 = var12.isStatic();
    japa.parser.ast.expr.NameExpr var16 = var12.getName();
    japa.parser.ast.ImportDeclaration var17 = new japa.parser.ast.ImportDeclaration();
    var17.setStatic(false);
    boolean var20 = var17.isStatic();
    boolean var21 = var17.isStatic();
    var12.setStatic(var21);
    japa.parser.ast.type.PrimitiveType var23 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.Parameter var31 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var23, var28);
    java.util.List var32 = var31.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var33 = var31.getId();
    japa.parser.ast.body.Parameter var34 = new japa.parser.ast.body.Parameter();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    var34.setEndColumn((-1));
    var33.setEndColumn((-1));
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var62 = var61.getMembers();
    int var63 = var61.getModifiers();
    var61.setInterface(true);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.Token var82 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var83 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var84 = var83.getExtends();
    boolean var85 = var83.isInterface();
    var61.setInterface(var85);
    java.util.List var87 = var61.getMembers();
    java.lang.String var88 = var61.getName();
    var33.setName(var88);
    japa.parser.ast.expr.NameExpr var90 = new japa.parser.ast.expr.NameExpr(var88);
    japa.parser.ast.body.ClassOrInterfaceDeclaration var91 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(var10, var21, var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));

  }

  public void test423() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.body.MethodDeclaration var22 = new japa.parser.ast.body.MethodDeclaration();
    int var23 = var22.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.Token var41 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var42 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var46 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var45);
    japa.parser.Token var48 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.Token var66 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var67 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var71 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var74 = new japa.parser.ast.LineComment(var23, 0, 0, 1, "");
    var8.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var76 = var8.getId();
    japa.parser.ast.type.ClassOrInterfaceType var78 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var79 = var78.getScope();
    var8.setType((japa.parser.ast.type.Type)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);

  }

  public void test424() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator(var15, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var28 = var27.getId();
    var8.setId(var28);
    int var30 = var8.getModifiers();
    boolean var31 = var8.isVarArgs();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var39 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var40 = new japa.parser.ast.stmt.ReturnStmt();
    int var41 = var40.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var42 = new japa.parser.ast.stmt.ReturnStmt();
    int var43 = var42.getEndLine();
    japa.parser.ast.body.MethodDeclaration var44 = new japa.parser.ast.body.MethodDeclaration();
    int var45 = var44.getModifiers();
    var44.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.VariableDeclaratorId var61 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var62 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var61, (japa.parser.ast.expr.Expression)var62);
    japa.parser.Token var65 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var66 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var70 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    var70.setExpression((japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.type.PrimitiveType var79 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var84 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var85 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var86 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var84, (japa.parser.ast.expr.Expression)var85);
    japa.parser.ast.body.Parameter var87 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var79, var84);
    japa.parser.ast.type.Type var88 = var87.getType();
    var76.setType(var88);
    japa.parser.ast.stmt.ReturnStmt var90 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.stmt.ReturnStmt var91 = new japa.parser.ast.stmt.ReturnStmt(1, var41, var43, 0, (japa.parser.ast.expr.Expression)var76);
    japa.parser.Token var93 = japa.parser.Token.newToken(var43, "");
    java.lang.String var94 = var93.toString();
    japa.parser.ast.type.ClassOrInterfaceType var95 = new japa.parser.ast.type.ClassOrInterfaceType(var94);
    japa.parser.ast.body.VariableDeclaratorId var96 = new japa.parser.ast.body.VariableDeclaratorId(var94);
    var8.setId(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + ""+ "'", var94.equals(""));

  }

  public void test425() throws Throwable {

    japa.parser.ast.type.ReferenceType var0 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.Type var1 = var0.getType();
    japa.parser.ast.type.Type var2 = var0.getType();
    japa.parser.ast.type.ClassOrInterfaceType var4 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.Token var12 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var13 = new japa.parser.ast.stmt.ReturnStmt();
    int var14 = var13.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt();
    int var16 = var15.getEndLine();
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    var17.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var38 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var39 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var43 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var43.setExpression((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.type.PrimitiveType var52 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var57 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var59 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var57, (japa.parser.ast.expr.Expression)var58);
    japa.parser.ast.body.Parameter var60 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var52, var57);
    japa.parser.ast.type.Type var61 = var60.getType();
    var49.setType(var61);
    japa.parser.ast.stmt.ReturnStmt var63 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.stmt.ReturnStmt var64 = new japa.parser.ast.stmt.ReturnStmt(1, var14, var16, 0, (japa.parser.ast.expr.Expression)var49);
    japa.parser.Token var66 = japa.parser.Token.newToken(var16, "");
    japa.parser.ast.type.ClassOrInterfaceType var67 = new japa.parser.ast.type.ClassOrInterfaceType(var4, "");
    japa.parser.ast.type.ClassOrInterfaceType var68 = var4.getScope();
    var0.setType((japa.parser.ast.type.Type)var4);
    java.util.List var70 = var4.getTypeArgs();
    japa.parser.ast.type.ClassOrInterfaceType var71 = var4.getScope();
    java.util.List var72 = var4.getTypeArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);

  }

  public void test426() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    japa.parser.ast.type.ClassOrInterfaceType var3 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var13 = var12.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator(var12, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.MethodDeclaration var16 = new japa.parser.ast.body.MethodDeclaration();
    int var17 = var16.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var65 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var68 = new japa.parser.ast.LineComment(var17, 0, 0, 1, "");
    int var69 = var68.getEndColumn();
    var68.setContent("hi!");
    var12.setName("hi!");
    japa.parser.Token var73 = new japa.parser.Token(1, "hi!");
    japa.parser.ast.expr.NameExpr var74 = new japa.parser.ast.expr.NameExpr("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var75 = new japa.parser.ast.type.ClassOrInterfaceType(var3, "hi!");
    var0.setType((japa.parser.ast.type.Type)var75);
    java.lang.Object var77 = var75.getData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);

  }

  public void test427() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.Token var20 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var21 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    var0.setName("");
    java.util.List var23 = var0.getParameters();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    int var84 = var68.getModifiers();
    var0.setBeginColumn(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);

  }

  public void test428() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.Type var19 = var18.getType();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.ReferenceType var30 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var20, 0);
    var18.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var32 = var18.getId();
    var8.setId(var32);
    japa.parser.ast.type.Type var34 = var8.getType();
    boolean var35 = var8.isVarArgs();
    boolean var36 = var8.isVarArgs();
    java.util.List var37 = var8.getAnnotations();
    japa.parser.ast.type.Type var38 = var8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);

  }

  public void test429() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.type.ReferenceType var35 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var25, 0);
    japa.parser.Token var36 = new japa.parser.Token(0);
    var23.setModifiers(0);
    int var38 = var23.getModifiers();
    int var39 = var23.getBeginColumn();
    japa.parser.ast.stmt.ReturnStmt var40 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test430() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var5.setData((java.lang.Object)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    int var19 = var16.getEndColumn();
    japa.parser.ast.body.Parameter var20 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var16);
    japa.parser.ast.body.MethodDeclaration var21 = new japa.parser.ast.body.MethodDeclaration();
    int var22 = var21.getModifiers();
    japa.parser.ast.type.PrimitiveType var23 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.Parameter var31 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var23, var28);
    japa.parser.ast.type.ReferenceType var33 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var23, 0);
    japa.parser.ast.type.PrimitiveType var34 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.Parameter var42 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var34, var39);
    japa.parser.ast.type.ReferenceType var44 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var34, 0);
    var33.setType((japa.parser.ast.type.Type)var34);
    var21.setType((japa.parser.ast.type.Type)var34);
    java.util.List var47 = var21.getParameters();
    java.util.List var48 = var21.getTypeParameters();
    var20.setData((java.lang.Object)var21);
    java.lang.String var50 = var21.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);

  }

  public void test431() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    var0.setEndLine(0);
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    japa.parser.ast.type.ClassOrInterfaceType var6 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.Token var14 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt();
    int var16 = var15.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var17 = new japa.parser.ast.stmt.ReturnStmt();
    int var18 = var17.getEndLine();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    var19.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var45 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    var45.setExpression((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.type.PrimitiveType var54 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.Parameter var62 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var54, var59);
    japa.parser.ast.type.Type var63 = var62.getType();
    var51.setType(var63);
    japa.parser.ast.stmt.ReturnStmt var65 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.stmt.ReturnStmt var66 = new japa.parser.ast.stmt.ReturnStmt(1, var16, var18, 0, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var68 = japa.parser.Token.newToken(var18, "");
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType(var6, "");
    java.lang.String var70 = var69.getName();
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    japa.parser.Token var79 = new japa.parser.Token((-1), "");
    java.lang.String var80 = var79.toString();
    japa.parser.ast.type.ClassOrInterfaceType var81 = new japa.parser.ast.type.ClassOrInterfaceType(var69, var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt();
    java.lang.String var83 = var82.toString();
    japa.parser.ast.type.ClassOrInterfaceType var84 = new japa.parser.ast.type.ClassOrInterfaceType(var69, var83);
    var0.setType((japa.parser.ast.type.Type)var69);
    java.util.List var86 = var69.getTypeArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "return;"+ "'", var83.equals("return;"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);

  }

  public void test432() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    boolean var37 = var17.isInterface();
    java.util.List var38 = var17.getTypeParameters();
    java.util.List var39 = var17.getExtends();
    java.lang.String var40 = var17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));

  }

  public void test433() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    java.util.List var2 = var0.getImports();
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.Token var20 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var21 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var25 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    var25.setExpression((japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.type.PrimitiveType var34 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.Parameter var42 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var34, var39);
    japa.parser.ast.type.Type var43 = var42.getType();
    var31.setType(var43);
    japa.parser.ast.stmt.ReturnStmt var45 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.Token var63 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var64 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var68 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var74 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var75 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var73, (japa.parser.ast.expr.Expression)var74);
    var68.setExpression((japa.parser.ast.expr.Expression)var74);
    japa.parser.ast.stmt.ReturnStmt var77 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var74);
    japa.parser.ast.ImportDeclaration var78 = new japa.parser.ast.ImportDeclaration();
    var78.setStatic(false);
    boolean var81 = var78.isAsterisk();
    var78.setStatic(false);
    japa.parser.ast.expr.NameExpr var84 = new japa.parser.ast.expr.NameExpr();
    int var85 = var84.getBeginLine();
    var78.setName(var84);
    var77.setExpr((japa.parser.ast.expr.Expression)var84);
    var45.setExpr((japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.PackageDeclaration var89 = new japa.parser.ast.PackageDeclaration(var84);
    java.util.List var90 = var89.getAnnotations();
    var0.setPackage(var89);
    java.util.List var92 = var0.getImports();
    java.util.List var93 = var0.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);

  }

  public void test434() throws Throwable {

    japa.parser.ast.stmt.ReturnStmt var0 = new japa.parser.ast.stmt.ReturnStmt();
    japa.parser.ast.body.VariableDeclaratorId var2 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var3 = var2.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var4 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var5 = new japa.parser.ast.body.VariableDeclarator(var2, (japa.parser.ast.expr.Expression)var4);
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var8 = var7.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator(var7, (japa.parser.ast.expr.Expression)var9);
    var5.setInit((japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var34 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var34.setExpression((japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.type.PrimitiveType var37 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.Parameter var45 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var37, var42);
    japa.parser.ast.type.ReferenceType var47 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var37, 0);
    japa.parser.Token var48 = new japa.parser.Token(0);
    var35.setModifiers(0);
    java.util.List var50 = var35.getAnnotations();
    japa.parser.ast.type.PrimitiveType var51 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.ast.body.Parameter var59 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var51, var56);
    japa.parser.ast.type.ReferenceType var61 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var51, 0);
    japa.parser.ast.type.PrimitiveType var62 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.body.Parameter var70 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var62, var67);
    japa.parser.ast.type.ReferenceType var72 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var62, 0);
    var61.setType((japa.parser.ast.type.Type)var62);
    var35.setType((japa.parser.ast.type.Type)var62);
    var5.setInit((japa.parser.ast.expr.Expression)var35);
    var0.setExpr((japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.expr.Expression var77 = var0.getExpr();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);

  }

  public void test435() throws Throwable {

    japa.parser.ast.type.ClassOrInterfaceType var1 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.Token var9 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var12 = new japa.parser.ast.stmt.ReturnStmt();
    int var13 = var12.getEndLine();
    japa.parser.ast.body.MethodDeclaration var14 = new japa.parser.ast.body.MethodDeclaration();
    int var15 = var14.getModifiers();
    var14.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    var40.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.type.PrimitiveType var49 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.Parameter var57 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var49, var54);
    japa.parser.ast.type.Type var58 = var57.getType();
    var46.setType(var58);
    japa.parser.ast.stmt.ReturnStmt var60 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt(1, var11, var13, 0, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var63 = japa.parser.Token.newToken(var13, "");
    japa.parser.ast.type.ClassOrInterfaceType var64 = new japa.parser.ast.type.ClassOrInterfaceType(var1, "");
    java.lang.String var65 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));

  }

  public void test436() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator(var15, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var28 = var27.getId();
    var8.setId(var28);
    int var30 = var8.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var31 = var8.getId();
    japa.parser.ast.body.VariableDeclaratorId var32 = var8.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);

  }

  public void test437() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getBody();
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var13 = var12.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator(var12, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.MethodDeclaration var16 = new japa.parser.ast.body.MethodDeclaration();
    int var17 = var16.getModifiers();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.Token var35 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var36 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var40 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token(0);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var65 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.LineComment var68 = new japa.parser.ast.LineComment(var17, 0, 0, 1, "");
    int var69 = var68.getEndColumn();
    var68.setContent("hi!");
    var12.setName("hi!");
    japa.parser.Token var73 = new japa.parser.Token(1, "hi!");
    var0.setName("hi!");
    japa.parser.ast.body.JavadocComment var75 = var0.getJavaDoc();
    int var76 = var0.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);

  }

  public void test438() throws Throwable {

    japa.parser.ast.stmt.ExpressionStmt var0 = new japa.parser.ast.stmt.ExpressionStmt();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    int var8 = var6.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var9 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    var6.setModifiers((-1));
    japa.parser.ast.type.Type var18 = var6.getType();
    var0.setExpression((japa.parser.ast.expr.Expression)var6);
    int var20 = var6.getModifiers();
    japa.parser.ast.type.PrimitiveType var21 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.ast.body.Parameter var29 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var21, var26);
    japa.parser.ast.type.ReferenceType var31 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var21, 0);
    japa.parser.ast.body.VariableDeclaratorId var37 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var38 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var39 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var37, (japa.parser.ast.expr.Expression)var38);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.Token var49 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var50 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var54 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var53);
    var31.setArrayCount(0);
    int var56 = var31.getArrayCount();
    japa.parser.ast.type.Type var57 = var31.getType();
    int var58 = var31.getEndColumn();
    var6.setType((japa.parser.ast.type.Type)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test439() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    java.util.List var4 = var0.getThrows();
    japa.parser.ast.type.ClassOrInterfaceType var6 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.Token var14 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var15 = new japa.parser.ast.stmt.ReturnStmt();
    int var16 = var15.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var17 = new japa.parser.ast.stmt.ReturnStmt();
    int var18 = var17.getEndLine();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    var19.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var45 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    var45.setExpression((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.type.PrimitiveType var54 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.Parameter var62 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var54, var59);
    japa.parser.ast.type.Type var63 = var62.getType();
    var51.setType(var63);
    japa.parser.ast.stmt.ReturnStmt var65 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.stmt.ReturnStmt var66 = new japa.parser.ast.stmt.ReturnStmt(1, var16, var18, 0, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var68 = japa.parser.Token.newToken(var18, "");
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType(var6, "");
    java.lang.String var70 = var69.getName();
    japa.parser.ast.type.ClassOrInterfaceType var71 = var69.getScope();
    java.lang.String var72 = var69.getName();
    java.lang.String var73 = var69.getName();
    var0.setName(var73);
    java.util.List var75 = var0.getThrows();
    japa.parser.ast.stmt.BlockStmt var76 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var77 = var76.getStmts();
    var0.setBody(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);

  }

  public void test440() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator(var15, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var28 = var27.getId();
    var8.setId(var28);
    int var30 = var8.getModifiers();
    japa.parser.ast.type.Type var31 = var8.getType();
    int var32 = var8.getModifiers();
    japa.parser.ast.type.Type var33 = var8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);

  }

  public void test441() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    java.util.List var4 = var0.getTypeParameters();
    var0.setName("hi!");
    java.util.List var7 = var0.getParameters();
    int var8 = var0.getArrayCount();
    int var9 = var0.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test442() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var4.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    var4.setArrayCount((-1));
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator(var4);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    japa.parser.ast.stmt.BlockStmt var19 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var19);
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var21);
    int var23 = var17.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var24 = var17.getBody();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var47.setExpression((japa.parser.ast.expr.Expression)var48);
    int var50 = var47.getBeginLine();
    japa.parser.ast.body.MethodDeclaration var51 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var52 = var51.getType();
    java.lang.String var53 = var51.getName();
    int var54 = var51.getModifiers();
    japa.parser.Token var56 = japa.parser.Token.newToken(var54, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var57 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.Token var58 = japa.parser.Token.newToken(var50, "hi!");
    java.lang.String var59 = var58.toString();
    var17.setName(var59);
    japa.parser.ast.LineComment var61 = new japa.parser.ast.LineComment(var59);
    japa.parser.ast.type.PrimitiveType var62 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.body.Parameter var70 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var62, var67);
    japa.parser.ast.type.ReferenceType var72 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var62, 0);
    japa.parser.ast.type.PrimitiveType var73 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.ast.body.Parameter var81 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var73, var78);
    japa.parser.ast.type.ReferenceType var83 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var73, 0);
    var72.setType((japa.parser.ast.type.Type)var73);
    boolean var85 = var61.equals((java.lang.Object)var72);
    java.lang.String var86 = var61.getContent();
    var4.setName(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi!"+ "'", var86.equals("hi!"));

  }

  public void test443() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var3 = var2.getStmts();
    var0.setFinallyBlock(var2);
    japa.parser.ast.stmt.BlockStmt var5 = var0.getFinallyBlock();
    java.util.List var6 = var0.getCatchs();
    japa.parser.ast.stmt.TryStmt var7 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var8 = var7.getCatchs();
    java.util.List var9 = var7.getCatchs();
    japa.parser.ast.stmt.BlockStmt var10 = new japa.parser.ast.stmt.BlockStmt();
    java.util.List var11 = var10.getStmts();
    var7.setFinallyBlock(var10);
    var0.setFinallyBlock(var10);
    java.util.List var14 = var10.getStmts();
    java.util.List var15 = var10.getStmts();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test444() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.Type var40 = var39.getType();
    var28.setType(var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    japa.parser.Token var58 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var59 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    int var60 = var59.getModifiers();
    japa.parser.ast.type.ReferenceType var61 = new japa.parser.ast.type.ReferenceType(var40, var60);
    japa.parser.ast.type.Type var62 = var61.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);

  }

  public void test445() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    japa.parser.Token var37 = japa.parser.Token.newToken(var35);
    japa.parser.Token var38 = new japa.parser.Token(var35);
    japa.parser.Token var39 = japa.parser.Token.newToken(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);

  }

  public void test446() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.type.PrimitiveType var2 = new japa.parser.ast.type.PrimitiveType();
    var0.setType((japa.parser.ast.type.Type)var2);
    java.util.List var4 = var0.getThrows();
    int var5 = var0.getArrayCount();
    java.util.List var6 = var0.getAnnotations();
    int var7 = var0.getModifiers();
    java.lang.String var8 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test447() throws Throwable {

    japa.parser.ast.ImportDeclaration var0 = new japa.parser.ast.ImportDeclaration();
    var0.setStatic(false);
    boolean var3 = var0.isStatic();
    japa.parser.ast.expr.NameExpr var4 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId("");
    japa.parser.ast.expr.NameExpr var7 = new japa.parser.ast.expr.NameExpr("");
    java.lang.String var8 = var7.getName();
    var0.setName(var7);
    japa.parser.ast.ImportDeclaration var10 = new japa.parser.ast.ImportDeclaration();
    japa.parser.ast.ImportDeclaration var11 = new japa.parser.ast.ImportDeclaration();
    var11.setStatic(false);
    boolean var14 = var11.isStatic();
    var10.setStatic(var14);
    japa.parser.ast.type.PrimitiveType var16 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.Parameter var24 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var16, var21);
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    var24.setId(var30);
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    int var42 = var40.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var43 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.type.PrimitiveType var44 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var45 = var44.getType();
    var40.setData((java.lang.Object)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    var40.setType((japa.parser.ast.type.Type)var47);
    var24.setType((japa.parser.ast.type.Type)var47);
    japa.parser.ast.body.VariableDeclaratorId var62 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var62, (japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.body.VariableDeclaratorId var70 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var71 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var72 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var70, (japa.parser.ast.expr.Expression)var71);
    japa.parser.Token var74 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var75 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var76 = new japa.parser.ast.ImportDeclaration();
    var76.setStatic(false);
    boolean var79 = var76.isAsterisk();
    var75.setInterface(var79);
    var24.setVarArgs(var79);
    var10.setStatic(var79);
    boolean var83 = var10.isAsterisk();
    boolean var84 = var10.isAsterisk();
    boolean var85 = var10.isAsterisk();
    var0.setStatic(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test448() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var5.setData((java.lang.Object)var9);
    japa.parser.ast.stmt.ExpressionStmt var12 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var5);
    int var13 = var5.getModifiers();
    japa.parser.ast.type.Type var14 = var5.getType();
    japa.parser.ast.body.MethodDeclaration var15 = new japa.parser.ast.body.MethodDeclaration();
    int var16 = var15.getModifiers();
    var15.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var21);
    var15.setBody(var21);
    japa.parser.ast.type.Type var24 = var15.getType();
    japa.parser.ast.type.Type var25 = var15.getType();
    japa.parser.ast.type.PrimitiveType var26 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.Parameter var34 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var26, var31);
    japa.parser.ast.type.ReferenceType var36 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var26, 0);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    japa.parser.Token var54 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var55 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var58 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var59 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var58);
    var36.setArrayCount(0);
    int var61 = var36.getArrayCount();
    japa.parser.ast.type.Type var62 = var36.getType();
    int var63 = var36.getEndColumn();
    int var64 = var36.getArrayCount();
    var15.setType((japa.parser.ast.type.Type)var36);
    var5.setType((japa.parser.ast.type.Type)var36);
    int var67 = var5.getModifiers();
    japa.parser.ast.type.Type var68 = var5.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);

  }

  public void test449() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var8 = new japa.parser.Token((-1), "");
    japa.parser.ast.expr.NameExpr var9 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var10 = new japa.parser.ast.PackageDeclaration(var9);
    japa.parser.ast.expr.NameExpr var11 = var10.getName();
    java.lang.String var12 = var11.toString();
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getMembers();
    java.util.List var33 = var30.getTypeParameters();
    java.lang.String var34 = var30.getName();
    var11.setData((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));

  }

  public void test450() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getImports();
    java.util.List var2 = var0.getComments();
    java.util.List var3 = var0.getImports();
    japa.parser.ast.CompilationUnit var4 = new japa.parser.ast.CompilationUnit();
    java.util.List var5 = var4.getComments();
    japa.parser.ast.PackageDeclaration var6 = new japa.parser.ast.PackageDeclaration();
    java.util.List var7 = var6.getAnnotations();
    japa.parser.ast.expr.NameExpr var8 = var6.getName();
    java.util.List var9 = var6.getAnnotations();
    japa.parser.ast.expr.NameExpr var10 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var11 = new japa.parser.ast.ImportDeclaration();
    var11.setStatic(false);
    var11.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var20 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var22 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var20, (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var32 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var33 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var34 = var33.getExtends();
    boolean var35 = var33.isInterface();
    japa.parser.ast.ImportDeclaration var36 = new japa.parser.ast.ImportDeclaration(var10, false, var35);
    var6.setName(var10);
    var4.setPackage(var6);
    japa.parser.ast.PackageDeclaration var39 = new japa.parser.ast.PackageDeclaration();
    java.util.List var40 = var39.getAnnotations();
    java.util.List var41 = var39.getAnnotations();
    var4.setPackage(var39);
    var0.setPackage(var39);
    java.util.List var44 = var0.getComments();
    int var45 = var0.getEndColumn();
    java.util.List var46 = var0.getComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test451() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    japa.parser.ast.stmt.TryStmt var2 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var3 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var4 = var3.getType();
    java.lang.String var5 = var3.getName();
    japa.parser.ast.type.PrimitiveType var6 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.Parameter var14 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var6, var11);
    japa.parser.ast.type.ReferenceType var16 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var6, 0);
    japa.parser.Token var17 = new japa.parser.Token(0);
    var3.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var21);
    japa.parser.ast.stmt.BlockStmt var23 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var23);
    var3.setBody(var23);
    var2.setFinallyBlock(var23);
    japa.parser.ast.stmt.BlockStmt var27 = var2.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var28 = var2.getFinallyBlock();
    var0.setFinallyBlock(var28);
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.Token var46 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var47 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var48 = var47.getExtends();
    java.util.List var49 = var47.getMembers();
    java.lang.String var50 = var47.getName();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var53 = var52.getArrayCount();
    var47.setModifiers(var53);
    var0.setBeginLine(var53);
    japa.parser.ast.stmt.BlockStmt var56 = var0.getTryBlock();
    int var57 = var0.getBeginColumn();
    java.util.List var58 = var0.getCatchs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);

  }

  public void test452() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.type.ReferenceType var35 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var25, 0);
    japa.parser.Token var36 = new japa.parser.Token(0);
    var23.setModifiers(0);
    java.util.List var38 = var23.getAnnotations();
    japa.parser.ast.stmt.ExpressionStmt var39 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test453() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    java.util.List var9 = var8.getAnnotations();
    java.util.List var10 = var8.getAnnotations();
    boolean var11 = var8.isVarArgs();
    int var12 = var8.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test454() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator(var15, (japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.body.VariableDeclaratorId var28 = var27.getId();
    var8.setId(var28);
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator(var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    int var47 = var45.getModifiers();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator(var36, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var49 = var48.getId();
    japa.parser.ast.body.VariableDeclaratorId var54 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var55 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var56 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var54, (japa.parser.ast.expr.Expression)var55);
    int var57 = var55.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var58 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.type.PrimitiveType var59 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var60 = var59.getType();
    var55.setData((java.lang.Object)var59);
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclarator var63 = new japa.parser.ast.body.VariableDeclarator(var49, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.body.VariableDeclarator var64 = new japa.parser.ast.body.VariableDeclarator(var28, (japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.stmt.ExpressionStmt var65 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var55);
    japa.parser.ast.expr.Expression var66 = var65.getExpression();
    japa.parser.ast.expr.Expression var67 = var65.getExpression();
    japa.parser.ast.expr.Expression var68 = var65.getExpression();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);

  }

  public void test455() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    japa.parser.ast.expr.NameExpr var35 = var2.getName();
    japa.parser.ast.stmt.ExpressionStmt var36 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var35);
    java.lang.Object var37 = var35.getData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);

  }

  public void test456() throws Throwable {

    japa.parser.ast.type.ReferenceType var0 = new japa.parser.ast.type.ReferenceType();
    japa.parser.ast.type.PrimitiveType var1 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.Parameter var9 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var1, var6);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    int var17 = var15.getModifiers();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator(var6, (japa.parser.ast.expr.Expression)var15);
    java.lang.String var19 = var6.getName();
    japa.parser.ast.body.Parameter var20 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var6);
    int var21 = var20.getEndColumn();
    java.util.List var22 = var20.getAnnotations();
    boolean var23 = var20.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test457() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var1 = var0.getCatchs();
    java.util.List var2 = var0.getCatchs();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.stmt.TryStmt var5 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var6 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var7 = var6.getType();
    java.lang.String var8 = var6.getName();
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    japa.parser.ast.type.ReferenceType var19 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var9, 0);
    japa.parser.Token var20 = new japa.parser.Token(0);
    var6.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var22 = new japa.parser.ast.body.MethodDeclaration();
    int var23 = var22.getModifiers();
    japa.parser.ast.stmt.BlockStmt var24 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var24);
    japa.parser.ast.stmt.BlockStmt var26 = new japa.parser.ast.stmt.BlockStmt();
    var22.setBody(var26);
    var6.setBody(var26);
    var5.setFinallyBlock(var26);
    japa.parser.ast.stmt.BlockStmt var30 = var5.getFinallyBlock();
    var4.setBody(var30);
    var0.setTryBlock(var30);
    japa.parser.ast.stmt.BlockStmt var33 = var0.getTryBlock();
    japa.parser.ast.stmt.TryStmt var34 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var35 = var34.getCatchs();
    java.util.List var36 = var34.getCatchs();
    japa.parser.ast.stmt.BlockStmt var37 = var34.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var38 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.stmt.TryStmt var39 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var40 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var41 = var40.getType();
    java.lang.String var42 = var40.getName();
    japa.parser.ast.type.PrimitiveType var43 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.Parameter var51 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var43, var48);
    japa.parser.ast.type.ReferenceType var53 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var43, 0);
    japa.parser.Token var54 = new japa.parser.Token(0);
    var40.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var56 = new japa.parser.ast.body.MethodDeclaration();
    int var57 = var56.getModifiers();
    japa.parser.ast.stmt.BlockStmt var58 = new japa.parser.ast.stmt.BlockStmt();
    var56.setBody(var58);
    japa.parser.ast.stmt.BlockStmt var60 = new japa.parser.ast.stmt.BlockStmt();
    var56.setBody(var60);
    var40.setBody(var60);
    var39.setFinallyBlock(var60);
    japa.parser.ast.stmt.BlockStmt var64 = var39.getFinallyBlock();
    var38.setBody(var64);
    var34.setTryBlock(var64);
    japa.parser.ast.stmt.BlockStmt var67 = var34.getTryBlock();
    var0.setFinallyBlock(var67);
    japa.parser.ast.stmt.BlockStmt var69 = var0.getFinallyBlock();
    japa.parser.ast.body.MethodDeclaration var70 = new japa.parser.ast.body.MethodDeclaration();
    int var71 = var70.getModifiers();
    java.util.List var72 = var70.getThrows();
    japa.parser.ast.stmt.BlockStmt var73 = var70.getBody();
    japa.parser.ast.body.MethodDeclaration var74 = new japa.parser.ast.body.MethodDeclaration();
    int var75 = var74.getModifiers();
    japa.parser.ast.stmt.BlockStmt var76 = new japa.parser.ast.stmt.BlockStmt();
    var74.setBody(var76);
    japa.parser.ast.stmt.BlockStmt var78 = new japa.parser.ast.stmt.BlockStmt();
    var74.setBody(var78);
    int var80 = var74.getArrayCount();
    japa.parser.ast.stmt.BlockStmt var81 = var74.getBody();
    java.util.List var82 = var81.getStmts();
    var70.setBody(var81);
    var0.setFinallyBlock(var81);
    japa.parser.ast.body.MethodDeclaration var85 = new japa.parser.ast.body.MethodDeclaration();
    int var86 = var85.getModifiers();
    japa.parser.ast.stmt.BlockStmt var87 = new japa.parser.ast.stmt.BlockStmt();
    var85.setBody(var87);
    java.util.List var89 = var85.getTypeParameters();
    japa.parser.ast.type.Type var90 = var85.getType();
    japa.parser.ast.stmt.BlockStmt var91 = var85.getBody();
    var0.setFinallyBlock(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);

  }

  public void test458() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getImports();
    java.util.List var2 = var0.getImports();
    java.util.List var3 = var0.getComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test459() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var22 = var8.getId();
    java.util.List var23 = var8.getAnnotations();
    int var24 = var8.getEndColumn();
    japa.parser.ast.ImportDeclaration var25 = new japa.parser.ast.ImportDeclaration();
    var25.setStatic(false);
    boolean var28 = var25.isStatic();
    var8.setVarArgs(var28);
    japa.parser.ast.type.PrimitiveType var30 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var30, var35);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    int var46 = var44.getModifiers();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator(var35, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    int var55 = var53.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var56 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.type.PrimitiveType var57 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var58 = var57.getType();
    var53.setData((java.lang.Object)var57);
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator(var35, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.type.PrimitiveType var61 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var66 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var68 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var66, (japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.body.Parameter var69 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var61, var66);
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    int var77 = var75.getModifiers();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator(var66, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var83, (japa.parser.ast.expr.Expression)var84);
    int var86 = var84.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var87 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.type.PrimitiveType var88 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var89 = var88.getType();
    var84.setData((java.lang.Object)var88);
    japa.parser.ast.body.VariableDeclarator var91 = new japa.parser.ast.body.VariableDeclarator(var66, (japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.body.VariableDeclaratorId var92 = var91.getId();
    var60.setId(var92);
    var8.setId(var92);
    japa.parser.ast.body.VariableDeclaratorId var95 = var8.getId();
    int var96 = var95.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test460() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    java.util.List var19 = var17.getExtends();
    java.util.List var20 = var17.getTypeParameters();
    int var21 = var17.getModifiers();
    java.util.List var22 = var17.getTypeParameters();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.Token var30 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var31 = new japa.parser.ast.stmt.ReturnStmt();
    int var32 = var31.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var33 = new japa.parser.ast.stmt.ReturnStmt();
    int var34 = var33.getEndLine();
    japa.parser.ast.body.MethodDeclaration var35 = new japa.parser.ast.body.MethodDeclaration();
    int var36 = var35.getModifiers();
    var35.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.Token var56 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var57 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var61 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var60);
    japa.parser.ast.body.VariableDeclaratorId var66 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var68 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var66, (japa.parser.ast.expr.Expression)var67);
    var61.setExpression((japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.type.PrimitiveType var70 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var75 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var76 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var75, (japa.parser.ast.expr.Expression)var76);
    japa.parser.ast.body.Parameter var78 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var70, var75);
    japa.parser.ast.type.Type var79 = var78.getType();
    var67.setType(var79);
    japa.parser.ast.stmt.ReturnStmt var81 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt(1, var32, var34, 0, (japa.parser.ast.expr.Expression)var67);
    japa.parser.Token var84 = japa.parser.Token.newToken(var34, "");
    java.lang.String var85 = var84.toString();
    japa.parser.ast.type.ClassOrInterfaceType var86 = new japa.parser.ast.type.ClassOrInterfaceType(var85);
    japa.parser.ast.body.VariableDeclaratorId var87 = new japa.parser.ast.body.VariableDeclaratorId(var85);
    var17.setName(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));

  }

  public void test461() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    var22.setExpression((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.stmt.ReturnStmt var31 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.expr.Expression var32 = var31.getExpr();
    japa.parser.ast.expr.Expression var33 = var31.getExpr();
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    java.lang.String var43 = var42.toString();
    japa.parser.ast.type.ClassOrInterfaceType var44 = new japa.parser.ast.type.ClassOrInterfaceType(var43);
    japa.parser.ast.expr.NameExpr var45 = new japa.parser.ast.expr.NameExpr(var43);
    var31.setExpr((japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.Token var64 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var65 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var69 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var69.setExpression((japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.expr.Expression var72 = var69.getExpression();
    japa.parser.ast.stmt.ReturnStmt var73 = new japa.parser.ast.stmt.ReturnStmt(var72);
    var31.setExpr(var72);
    japa.parser.ast.expr.Expression var75 = var31.getExpr();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);

  }

  public void test462() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var0.getBeginLine();
    japa.parser.ast.type.ReferenceType var12 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.Token var29 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var30 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var31 = var30.getExtends();
    java.util.List var32 = var30.getMembers();
    java.util.List var33 = var30.getTypeParameters();
    int var34 = var30.getBeginColumn();
    var12.setArrayCount(var34);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.ReferenceType var46 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var36, 0);
    int var47 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter(var34, (japa.parser.ast.type.Type)var46, var52);
    japa.parser.ast.type.Type var56 = var46.getType();
    japa.parser.ast.type.ReferenceType var57 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46);
    int var58 = var46.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.Token var67 = new japa.parser.Token((-1), "");
    java.lang.String var68 = var67.toString();
    japa.parser.ast.type.ClassOrInterfaceType var69 = new japa.parser.ast.type.ClassOrInterfaceType(var68);
    java.lang.String var70 = var69.getName();
    var46.setType((japa.parser.ast.type.Type)var69);
    int var72 = var69.getBeginColumn();
    japa.parser.ast.type.ReferenceType var74 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var69, 0);
    japa.parser.ast.type.Type var75 = var74.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);

  }

  public void test463() throws Throwable {

    japa.parser.ast.stmt.ExpressionStmt var0 = new japa.parser.ast.stmt.ExpressionStmt();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    int var8 = var6.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var9 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    var6.setModifiers((-1));
    japa.parser.ast.type.Type var18 = var6.getType();
    var0.setExpression((japa.parser.ast.expr.Expression)var6);
    int var20 = var6.getModifiers();
    int var21 = var6.getModifiers();
    japa.parser.ast.type.ReferenceType var22 = new japa.parser.ast.type.ReferenceType();
    int var23 = var22.getArrayCount();
    var6.setModifiers(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test464() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var33 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var32);
    var10.setArrayCount(0);
    int var35 = var10.getArrayCount();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var37 = var36.getType();
    java.lang.String var38 = var36.getName();
    int var39 = var36.getModifiers();
    japa.parser.Token var41 = japa.parser.Token.newToken(var39, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var42 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.type.ClassOrInterfaceType var43 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    japa.parser.ast.expr.NameExpr var44 = new japa.parser.ast.expr.NameExpr();
    int var45 = var44.getBeginLine();
    japa.parser.ast.stmt.ExpressionStmt var46 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator();
    java.lang.Object var48 = var47.getData();
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    var47.setInit((japa.parser.ast.expr.Expression)var54);
    japa.parser.ast.body.MethodDeclaration var57 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var58 = var57.getType();
    java.lang.String var59 = var57.getName();
    int var60 = var57.getModifiers();
    japa.parser.Token var62 = japa.parser.Token.newToken(var60, "hi!");
    japa.parser.ast.type.ClassOrInterfaceType var63 = new japa.parser.ast.type.ClassOrInterfaceType("hi!");
    var54.setType((japa.parser.ast.type.Type)var63);
    var46.setExpression((japa.parser.ast.expr.Expression)var54);
    int var66 = var54.getBeginLine();
    japa.parser.ast.body.MethodDeclaration var67 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var68 = var67.getType();
    java.lang.String var69 = var67.getName();
    japa.parser.ast.stmt.BlockStmt var70 = var67.getBody();
    java.util.List var71 = var67.getThrows();
    int var72 = var67.getArrayCount();
    japa.parser.Token var73 = new japa.parser.Token(var72);
    var54.setModifiers(var72);
    japa.parser.ast.type.ReferenceType var75 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var43, var72);
    var10.setType((japa.parser.ast.type.Type)var43);
    japa.parser.ast.body.VariableDeclaratorId var81 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var82 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var83 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var81, (japa.parser.ast.expr.Expression)var82);
    japa.parser.Token var85 = new japa.parser.Token((-1), "");
    japa.parser.ast.expr.NameExpr var86 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var87 = new japa.parser.ast.PackageDeclaration(var86);
    japa.parser.ast.expr.NameExpr var88 = var87.getName();
    java.lang.String var89 = var88.toString();
    var43.setName(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));

  }

  public void test465() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    java.util.List var23 = var8.getAnnotations();
    japa.parser.ast.type.ClassOrInterfaceType var25 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.Token var33 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var36 = new japa.parser.ast.stmt.ReturnStmt();
    int var37 = var36.getEndLine();
    japa.parser.ast.body.MethodDeclaration var38 = new japa.parser.ast.body.MethodDeclaration();
    int var39 = var38.getModifiers();
    var38.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var47 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var48 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var49 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var47, (japa.parser.ast.expr.Expression)var48);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.Token var59 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var60 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var63 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var64 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var63);
    japa.parser.ast.body.VariableDeclaratorId var69 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var71 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var69, (japa.parser.ast.expr.Expression)var70);
    var64.setExpression((japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.type.PrimitiveType var73 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.ast.body.Parameter var81 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var73, var78);
    japa.parser.ast.type.Type var82 = var81.getType();
    var70.setType(var82);
    japa.parser.ast.stmt.ReturnStmt var84 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.stmt.ReturnStmt var85 = new japa.parser.ast.stmt.ReturnStmt(1, var35, var37, 0, (japa.parser.ast.expr.Expression)var70);
    japa.parser.Token var87 = japa.parser.Token.newToken(var37, "");
    japa.parser.ast.type.ClassOrInterfaceType var88 = new japa.parser.ast.type.ClassOrInterfaceType(var25, "");
    java.lang.String var89 = var88.getName();
    japa.parser.ast.type.ClassOrInterfaceType var90 = var88.getScope();
    japa.parser.ast.type.ClassOrInterfaceType var91 = var88.getScope();
    japa.parser.ast.type.ReferenceType var92 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var88);
    int var93 = var92.getArrayCount();
    var8.setModifiers(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);

  }

  public void test466() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.stmt.ExpressionStmt var7 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var5);

  }

  public void test467() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var1 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var2 = var1.getType();
    java.lang.String var3 = var1.getName();
    japa.parser.ast.type.PrimitiveType var4 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.Parameter var12 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var4, var9);
    japa.parser.ast.type.ReferenceType var14 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var4, 0);
    japa.parser.Token var15 = new japa.parser.Token(0);
    var1.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var17 = new japa.parser.ast.body.MethodDeclaration();
    int var18 = var17.getModifiers();
    japa.parser.ast.stmt.BlockStmt var19 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var19);
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var17.setBody(var21);
    var1.setBody(var21);
    var0.setFinallyBlock(var21);
    japa.parser.ast.stmt.BlockStmt var25 = var0.getFinallyBlock();
    japa.parser.ast.body.MethodDeclaration var26 = new japa.parser.ast.body.MethodDeclaration();
    int var27 = var26.getModifiers();
    japa.parser.ast.stmt.BlockStmt var28 = new japa.parser.ast.stmt.BlockStmt();
    var26.setBody(var28);
    var0.setTryBlock(var28);
    japa.parser.ast.stmt.TryStmt var31 = new japa.parser.ast.stmt.TryStmt();
    java.util.List var32 = var31.getCatchs();
    japa.parser.ast.stmt.TryStmt var33 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var34 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var35 = var34.getType();
    java.lang.String var36 = var34.getName();
    japa.parser.ast.type.PrimitiveType var37 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var42 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var43 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var44 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var42, (japa.parser.ast.expr.Expression)var43);
    japa.parser.ast.body.Parameter var45 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var37, var42);
    japa.parser.ast.type.ReferenceType var47 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var37, 0);
    japa.parser.Token var48 = new japa.parser.Token(0);
    var34.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var50 = new japa.parser.ast.body.MethodDeclaration();
    int var51 = var50.getModifiers();
    japa.parser.ast.stmt.BlockStmt var52 = new japa.parser.ast.stmt.BlockStmt();
    var50.setBody(var52);
    japa.parser.ast.stmt.BlockStmt var54 = new japa.parser.ast.stmt.BlockStmt();
    var50.setBody(var54);
    var34.setBody(var54);
    var33.setFinallyBlock(var54);
    japa.parser.ast.stmt.BlockStmt var58 = var33.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var59 = var33.getFinallyBlock();
    var31.setFinallyBlock(var59);
    japa.parser.ast.body.MethodDeclaration var61 = new japa.parser.ast.body.MethodDeclaration();
    int var62 = var61.getModifiers();
    japa.parser.ast.stmt.BlockStmt var63 = new japa.parser.ast.stmt.BlockStmt();
    var61.setBody(var63);
    java.util.List var65 = var61.getTypeParameters();
    int var66 = var61.getModifiers();
    japa.parser.ast.body.MethodDeclaration var67 = new japa.parser.ast.body.MethodDeclaration();
    int var68 = var67.getModifiers();
    japa.parser.ast.stmt.BlockStmt var69 = new japa.parser.ast.stmt.BlockStmt();
    var67.setBody(var69);
    var61.setBody(var69);
    var31.setFinallyBlock(var69);
    var0.setTryBlock(var69);
    java.util.List var74 = var0.getCatchs();
    japa.parser.ast.body.MethodDeclaration var75 = new japa.parser.ast.body.MethodDeclaration();
    int var76 = var75.getModifiers();
    japa.parser.ast.stmt.BlockStmt var77 = new japa.parser.ast.stmt.BlockStmt();
    var75.setBody(var77);
    japa.parser.ast.stmt.BlockStmt var79 = new japa.parser.ast.stmt.BlockStmt();
    var75.setBody(var79);
    var0.setFinallyBlock(var79);
    java.util.List var82 = var0.getCatchs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);

  }

  public void test468() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    java.lang.String var36 = var17.getName();
    japa.parser.ast.type.ClassOrInterfaceType var37 = new japa.parser.ast.type.ClassOrInterfaceType(var36);
    japa.parser.ast.type.ClassOrInterfaceType var38 = var37.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test469() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.Type var3 = var0.getType();
    japa.parser.ast.stmt.BlockStmt var4 = var0.getBody();
    int var5 = var0.getArrayCount();
    java.lang.String var6 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var11 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var12 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var13 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var11, (japa.parser.ast.expr.Expression)var12);
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.Token var23 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var24 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    int var25 = var24.getModifiers();
    var0.setEndLine(var25);
    java.util.List var27 = var0.getParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);

  }

  public void test470() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    java.lang.String var1 = var0.getName();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    int var16 = var13.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var41.setExpression((japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    var41.setExpression((japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.type.Type var52 = var49.getType();
    japa.parser.ast.stmt.ExpressionStmt var53 = new japa.parser.ast.stmt.ExpressionStmt((-1), var16, 100, 1, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator(var0, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var57 = var56.getArrayCount();
    var54.setId(var56);
    int var59 = var54.getBeginColumn();
    japa.parser.ast.type.PrimitiveType var60 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.Parameter var68 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var60, var65);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var74 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var75 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var73, (japa.parser.ast.expr.Expression)var74);
    int var76 = var74.getModifiers();
    japa.parser.ast.body.VariableDeclarator var77 = new japa.parser.ast.body.VariableDeclarator(var65, (japa.parser.ast.expr.Expression)var74);
    japa.parser.ast.body.VariableDeclaratorId var82 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var83 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var84 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var82, (japa.parser.ast.expr.Expression)var83);
    int var85 = var83.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var86 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.type.PrimitiveType var87 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var88 = var87.getType();
    var83.setData((java.lang.Object)var87);
    japa.parser.ast.body.VariableDeclarator var90 = new japa.parser.ast.body.VariableDeclarator(var65, (japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.body.VariableDeclaratorId var91 = var90.getId();
    int var92 = var91.getBeginColumn();
    var54.setId(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test471() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.body.MethodDeclaration var2 = new japa.parser.ast.body.MethodDeclaration();
    int var3 = var2.getModifiers();
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var4);
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var2.setBody(var6);
    java.util.List var8 = var6.getStmts();
    var0.setTryBlock(var6);
    japa.parser.ast.stmt.BlockStmt var10 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var11 = var0.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var12 = var0.getTryBlock();
    int var13 = var12.getBeginLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test472() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = var0.getPackage();
    java.util.List var3 = var0.getComments();
    java.util.List var4 = var0.getImports();
    java.util.List var5 = var0.getComments();
    java.util.List var6 = var0.getComments();
    japa.parser.ast.PackageDeclaration var7 = new japa.parser.ast.PackageDeclaration();
    java.util.List var8 = var7.getAnnotations();
    japa.parser.ast.expr.NameExpr var9 = var7.getName();
    japa.parser.ast.expr.NameExpr var10 = var7.getName();
    var0.setPackage(var7);
    japa.parser.ast.expr.NameExpr var12 = var7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test473() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var4);
    int var6 = var0.getArrayCount();
    java.lang.String var7 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var8 = var0.getBody();
    java.util.List var9 = var8.getStmts();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);

  }

  public void test474() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.type.PrimitiveType var3 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.Parameter var11 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var3, var8);
    japa.parser.ast.type.ReferenceType var13 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var3, 0);
    japa.parser.Token var14 = new japa.parser.Token(0);
    var0.setArrayCount(0);
    java.util.List var16 = var0.getAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);

  }

  public void test475() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getBody();
    japa.parser.ast.body.VariableDeclaratorId var8 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var9 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var10 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var8, (japa.parser.ast.expr.Expression)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.Token var20 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var21 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.ImportDeclaration var22 = new japa.parser.ast.ImportDeclaration();
    var22.setStatic(false);
    boolean var25 = var22.isAsterisk();
    var21.setInterface(var25);
    int var27 = var21.getBeginColumn();
    var0.setEndColumn(var27);
    japa.parser.ast.stmt.BlockStmt var29 = var0.getBody();
    japa.parser.ast.stmt.TryStmt var30 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.body.MethodDeclaration var31 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var32 = var31.getType();
    java.lang.String var33 = var31.getName();
    japa.parser.ast.type.PrimitiveType var34 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var39 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var41 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var39, (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.Parameter var42 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var34, var39);
    japa.parser.ast.type.ReferenceType var44 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var34, 0);
    japa.parser.Token var45 = new japa.parser.Token(0);
    var31.setArrayCount(0);
    japa.parser.ast.body.MethodDeclaration var47 = new japa.parser.ast.body.MethodDeclaration();
    int var48 = var47.getModifiers();
    japa.parser.ast.stmt.BlockStmt var49 = new japa.parser.ast.stmt.BlockStmt();
    var47.setBody(var49);
    japa.parser.ast.stmt.BlockStmt var51 = new japa.parser.ast.stmt.BlockStmt();
    var47.setBody(var51);
    var31.setBody(var51);
    var30.setFinallyBlock(var51);
    japa.parser.ast.stmt.BlockStmt var55 = var30.getFinallyBlock();
    japa.parser.ast.body.MethodDeclaration var56 = new japa.parser.ast.body.MethodDeclaration();
    int var57 = var56.getModifiers();
    japa.parser.ast.stmt.BlockStmt var58 = new japa.parser.ast.stmt.BlockStmt();
    var56.setBody(var58);
    var30.setTryBlock(var58);
    japa.parser.ast.stmt.BlockStmt var61 = var30.getTryBlock();
    var0.setBody(var61);
    int var63 = var0.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test476() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var1 = new japa.parser.ast.body.VariableDeclaratorId("");
    int var2 = var1.getArrayCount();
    japa.parser.ast.expr.VariableDeclarationExpr var3 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var4 = new japa.parser.ast.body.VariableDeclarator(var1, (japa.parser.ast.expr.Expression)var3);
    java.util.List var5 = var3.getAnnotations();
    int var6 = var3.getModifiers();
    java.util.List var7 = var3.getAnnotations();
    japa.parser.ast.stmt.ExpressionStmt var8 = new japa.parser.ast.stmt.ExpressionStmt((japa.parser.ast.expr.Expression)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test477() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = var0.getPackage();
    japa.parser.ast.body.VariableDeclaratorId var7 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var8 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var9 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var7, (japa.parser.ast.expr.Expression)var8);
    japa.parser.Token var10 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var11 = new japa.parser.ast.stmt.ReturnStmt();
    int var12 = var11.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var13 = new japa.parser.ast.stmt.ReturnStmt();
    int var14 = var13.getEndLine();
    japa.parser.ast.body.MethodDeclaration var15 = new japa.parser.ast.body.MethodDeclaration();
    int var16 = var15.getModifiers();
    var15.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.Token var36 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var37 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var40 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var41 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var40);
    japa.parser.ast.body.VariableDeclaratorId var46 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var47 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var48 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var46, (japa.parser.ast.expr.Expression)var47);
    var41.setExpression((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.type.PrimitiveType var50 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.Parameter var58 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var50, var55);
    japa.parser.ast.type.Type var59 = var58.getType();
    var47.setType(var59);
    japa.parser.ast.stmt.ReturnStmt var61 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var47);
    japa.parser.ast.stmt.ReturnStmt var62 = new japa.parser.ast.stmt.ReturnStmt(1, var12, var14, 0, (japa.parser.ast.expr.Expression)var47);
    japa.parser.Token var64 = japa.parser.Token.newToken(var14, "");
    japa.parser.ast.expr.NameExpr var65 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var66 = new japa.parser.ast.PackageDeclaration(var65);
    japa.parser.ast.PackageDeclaration var67 = new japa.parser.ast.PackageDeclaration(var65);
    var0.setPackage(var67);
    japa.parser.ast.expr.NameExpr var69 = var67.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);

  }

  public void test478() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var2 = var0.getFinallyBlock();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getFinallyBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test479() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var0 = new japa.parser.ast.body.VariableDeclaratorId();
    int var1 = var0.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var6 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var7 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var8 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var6, (japa.parser.ast.expr.Expression)var7);
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.Token var18 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var19 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var20 = var19.getMembers();
    japa.parser.ast.body.MethodDeclaration var21 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var22 = var21.getType();
    java.lang.String var23 = var21.getName();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.Token var31 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var32 = new japa.parser.ast.stmt.ReturnStmt();
    int var33 = var32.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var34 = new japa.parser.ast.stmt.ReturnStmt();
    int var35 = var34.getEndLine();
    japa.parser.ast.body.MethodDeclaration var36 = new japa.parser.ast.body.MethodDeclaration();
    int var37 = var36.getModifiers();
    var36.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var45 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var47 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var45, (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var53 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var54 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var55 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var53, (japa.parser.ast.expr.Expression)var54);
    japa.parser.Token var57 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var58 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var62 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.VariableDeclaratorId var67 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var68 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var69 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var67, (japa.parser.ast.expr.Expression)var68);
    var62.setExpression((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.type.PrimitiveType var71 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var76 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var77 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var78 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var76, (japa.parser.ast.expr.Expression)var77);
    japa.parser.ast.body.Parameter var79 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var71, var76);
    japa.parser.ast.type.Type var80 = var79.getType();
    var68.setType(var80);
    japa.parser.ast.stmt.ReturnStmt var82 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var68);
    japa.parser.ast.stmt.ReturnStmt var83 = new japa.parser.ast.stmt.ReturnStmt(1, var33, var35, 0, (japa.parser.ast.expr.Expression)var68);
    japa.parser.Token var85 = japa.parser.Token.newToken(var35, "");
    var21.setName("");
    japa.parser.ast.LineComment var87 = new japa.parser.ast.LineComment("");
    var19.setName("");
    var0.setName("");
    japa.parser.ast.type.ClassOrInterfaceType var90 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.expr.NameExpr var91 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.PackageDeclaration var92 = new japa.parser.ast.PackageDeclaration(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);

  }

  public void test480() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var10 = var9.getType();
    var8.setType((japa.parser.ast.type.Type)var9);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.Token var19 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var20 = new japa.parser.ast.stmt.ReturnStmt();
    int var21 = var20.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var22 = new japa.parser.ast.stmt.ReturnStmt();
    int var23 = var22.getEndLine();
    japa.parser.ast.body.MethodDeclaration var24 = new japa.parser.ast.body.MethodDeclaration();
    int var25 = var24.getModifiers();
    var24.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var33 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var34 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var35 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var33, (japa.parser.ast.expr.Expression)var34);
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.Token var45 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var46 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var50 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    var50.setExpression((japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.type.PrimitiveType var59 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var64 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var65 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var66 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var64, (japa.parser.ast.expr.Expression)var65);
    japa.parser.ast.body.Parameter var67 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var59, var64);
    japa.parser.ast.type.Type var68 = var67.getType();
    var56.setType(var68);
    japa.parser.ast.stmt.ReturnStmt var70 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.stmt.ReturnStmt var71 = new japa.parser.ast.stmt.ReturnStmt(1, var21, var23, 0, (japa.parser.ast.expr.Expression)var56);
    var8.setEndLine(1);
    japa.parser.ast.body.VariableDeclaratorId var73 = var8.getId();
    java.util.List var74 = var8.getAnnotations();
    japa.parser.ast.type.Type var75 = var8.getType();
    japa.parser.ast.type.Type var76 = var8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);

  }

  public void test481() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    japa.parser.Token var17 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var18 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var21 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var22 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var21);
    japa.parser.ast.expr.VariableDeclarationExpr var23 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var22.setExpression((japa.parser.ast.expr.Expression)var23);
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.type.ReferenceType var35 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var25, 0);
    japa.parser.Token var36 = new japa.parser.Token(0);
    var23.setModifiers(0);
    java.util.List var38 = var23.getAnnotations();
    japa.parser.ast.type.PrimitiveType var39 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var44 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var45 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var46 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var44, (japa.parser.ast.expr.Expression)var45);
    japa.parser.ast.body.Parameter var47 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var39, var44);
    japa.parser.ast.type.ReferenceType var49 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var39, 0);
    japa.parser.ast.type.PrimitiveType var50 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var55 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var56 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var57 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var55, (japa.parser.ast.expr.Expression)var56);
    japa.parser.ast.body.Parameter var58 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var50, var55);
    japa.parser.ast.type.ReferenceType var60 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var50, 0);
    var49.setType((japa.parser.ast.type.Type)var50);
    var23.setType((japa.parser.ast.type.Type)var50);
    japa.parser.ast.type.ReferenceType var63 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var50);
    japa.parser.ast.type.PrimitiveType var64 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var69 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var70 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var71 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var69, (japa.parser.ast.expr.Expression)var70);
    japa.parser.ast.body.Parameter var72 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var64, var69);
    japa.parser.ast.type.ReferenceType var74 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var64, 0);
    int var75 = var74.getArrayCount();
    var63.setType((japa.parser.ast.type.Type)var74);
    japa.parser.ast.type.Type var77 = var74.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);

  }

  public void test482() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    japa.parser.ast.stmt.BlockStmt var3 = var0.getBody();
    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    int var5 = var4.getArrayCount();
    var0.setArrayCount(var5);
    java.util.List var7 = var0.getThrows();
    japa.parser.ast.stmt.BlockStmt var8 = var0.getBody();
    java.util.List var9 = var0.getThrows();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);

  }

  public void test483() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var1 = var0.getType();
    java.lang.String var2 = var0.getName();
    int var3 = var0.getArrayCount();
    java.util.List var4 = var0.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var9 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var10 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var11 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var9, (japa.parser.ast.expr.Expression)var10);
    japa.parser.ast.body.VariableDeclaratorId var17 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var18 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var19 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var17, (japa.parser.ast.expr.Expression)var18);
    japa.parser.Token var21 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var22 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var23 = var22.getMembers();
    java.util.List var24 = var22.getExtends();
    java.util.List var25 = var22.getImplements();
    java.util.List var26 = var22.getMembers();
    boolean var27 = var0.equals((java.lang.Object)var22);
    japa.parser.ast.type.ClassOrInterfaceType var29 = new japa.parser.ast.type.ClassOrInterfaceType("");
    japa.parser.ast.body.VariableDeclaratorId var34 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var35 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var36 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var34, (japa.parser.ast.expr.Expression)var35);
    japa.parser.Token var37 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var38 = new japa.parser.ast.stmt.ReturnStmt();
    int var39 = var38.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var40 = new japa.parser.ast.stmt.ReturnStmt();
    int var41 = var40.getEndLine();
    japa.parser.ast.body.MethodDeclaration var42 = new japa.parser.ast.body.MethodDeclaration();
    int var43 = var42.getModifiers();
    var42.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    japa.parser.Token var63 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var64 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var67 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var68 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var67);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var74 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var75 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var73, (japa.parser.ast.expr.Expression)var74);
    var68.setExpression((japa.parser.ast.expr.Expression)var74);
    japa.parser.ast.type.PrimitiveType var77 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var82 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var83 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var84 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var82, (japa.parser.ast.expr.Expression)var83);
    japa.parser.ast.body.Parameter var85 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var77, var82);
    japa.parser.ast.type.Type var86 = var85.getType();
    var74.setType(var86);
    japa.parser.ast.stmt.ReturnStmt var88 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var74);
    japa.parser.ast.stmt.ReturnStmt var89 = new japa.parser.ast.stmt.ReturnStmt(1, var39, var41, 0, (japa.parser.ast.expr.Expression)var74);
    japa.parser.Token var91 = japa.parser.Token.newToken(var41, "");
    japa.parser.ast.type.ClassOrInterfaceType var92 = new japa.parser.ast.type.ClassOrInterfaceType(var29, "");
    japa.parser.ast.body.VariableDeclaratorId var93 = new japa.parser.ast.body.VariableDeclaratorId("");
    var22.setName("");
    java.util.List var95 = var22.getMembers();
    java.util.List var96 = var22.getImplements();
    java.util.List var97 = var22.getExtends();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == null);

  }

  public void test484() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getMembers();
    japa.parser.Token var22 = japa.parser.Token.newToken((-1));
    var17.setModifiers((-1));
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.type.ReferenceType var34 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, 0);
    int var35 = var34.getArrayCount();
    var17.setModifiers(var35);
    int var37 = var17.getModifiers();
    java.util.List var38 = var17.getExtends();
    java.util.List var39 = var17.getTypeParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test485() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getMembers();
    int var19 = var17.getModifiers();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.Type var29 = var28.getType();
    japa.parser.ast.type.PrimitiveType var30 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var30, var35);
    japa.parser.ast.type.ReferenceType var40 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var30, 0);
    var28.setModifiers(0);
    boolean var42 = var28.isVarArgs();
    var17.setInterface(var42);
    japa.parser.ast.type.ReferenceType var44 = new japa.parser.ast.type.ReferenceType();
    int var45 = var44.getArrayCount();
    int var46 = var44.getBeginColumn();
    var17.setModifiers(var46);
    java.util.List var48 = var17.getTypeParameters();
    java.util.List var49 = var17.getExtends();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test486() throws Throwable {

    japa.parser.ast.CompilationUnit var0 = new japa.parser.ast.CompilationUnit();
    java.util.List var1 = var0.getComments();
    japa.parser.ast.PackageDeclaration var2 = new japa.parser.ast.PackageDeclaration();
    java.util.List var3 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var4 = var2.getName();
    java.util.List var5 = var2.getAnnotations();
    japa.parser.ast.expr.NameExpr var6 = new japa.parser.ast.expr.NameExpr();
    japa.parser.ast.ImportDeclaration var7 = new japa.parser.ast.ImportDeclaration();
    var7.setStatic(false);
    var7.setAsterisk(false);
    japa.parser.ast.body.VariableDeclaratorId var16 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var17 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var18 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var16, (japa.parser.ast.expr.Expression)var17);
    japa.parser.ast.body.VariableDeclaratorId var24 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var25 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var26 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var24, (japa.parser.ast.expr.Expression)var25);
    japa.parser.Token var28 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var29 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var30 = var29.getExtends();
    boolean var31 = var29.isInterface();
    japa.parser.ast.ImportDeclaration var32 = new japa.parser.ast.ImportDeclaration(var6, false, var31);
    var2.setName(var6);
    var0.setPackage(var2);
    japa.parser.ast.ImportDeclaration var35 = new japa.parser.ast.ImportDeclaration();
    var35.setStatic(false);
    var35.setAsterisk(false);
    japa.parser.ast.expr.NameExpr var40 = new japa.parser.ast.expr.NameExpr();
    var35.setName(var40);
    japa.parser.ast.PackageDeclaration var42 = new japa.parser.ast.PackageDeclaration(var40);
    var0.setPackage(var42);
    japa.parser.ast.CompilationUnit var44 = new japa.parser.ast.CompilationUnit();
    java.util.List var45 = var44.getComments();
    japa.parser.ast.PackageDeclaration var46 = var44.getPackage();
    java.util.List var47 = var44.getComments();
    java.util.List var48 = var44.getImports();
    japa.parser.ast.PackageDeclaration var49 = new japa.parser.ast.PackageDeclaration();
    java.util.List var50 = var49.getAnnotations();
    japa.parser.ast.expr.NameExpr var51 = var49.getName();
    japa.parser.ast.expr.NameExpr var52 = var49.getName();
    japa.parser.ast.type.PrimitiveType var53 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var58 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var59 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var60 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var58, (japa.parser.ast.expr.Expression)var59);
    japa.parser.ast.body.Parameter var61 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var53, var58);
    japa.parser.ast.body.MethodDeclaration var62 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var63 = var62.getType();
    java.lang.String var64 = var62.getName();
    int var65 = var62.getModifiers();
    japa.parser.ast.type.ReferenceType var66 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var53, var65);
    var49.setBeginLine(var65);
    var44.setPackage(var49);
    var0.setPackage(var49);
    japa.parser.ast.PackageDeclaration var70 = var0.getPackage();
    java.util.List var71 = var0.getImports();
    java.util.List var72 = var0.getImports();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);

  }

  public void test487() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    var8.setId(var14);
    int var19 = var14.getArrayCount();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var21 = var20.getType();
    japa.parser.ast.body.VariableDeclaratorId var26 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var27 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var28 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var26, (japa.parser.ast.expr.Expression)var27);
    japa.parser.Token var30 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.MethodDeclaration var31 = new japa.parser.ast.body.MethodDeclaration(var19, (japa.parser.ast.type.Type)var20, "");
    japa.parser.Token var32 = japa.parser.Token.newToken(var19);
    java.lang.Object var33 = var32.getValue();
    java.lang.Object var34 = var32.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test488() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    japa.parser.ast.type.Type var23 = var8.getType();
    japa.parser.ast.body.VariableDeclaratorId var24 = var8.getId();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.VariableDeclaratorId var38 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var39 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var40 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var38, (japa.parser.ast.expr.Expression)var39);
    japa.parser.Token var42 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var43 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var47 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.VariableDeclaratorId var59 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var60 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var61 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var59, (japa.parser.ast.expr.Expression)var60);
    int var62 = var59.getArrayCount();
    japa.parser.ast.type.PrimitiveType var63 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var68 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var69 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var70 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var68, (japa.parser.ast.expr.Expression)var69);
    japa.parser.ast.body.Parameter var71 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var63, var68);
    japa.parser.ast.type.Type var72 = var71.getType();
    japa.parser.ast.type.PrimitiveType var73 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var78 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var79 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var80 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var78, (japa.parser.ast.expr.Expression)var79);
    japa.parser.ast.body.Parameter var81 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var73, var78);
    japa.parser.ast.type.ReferenceType var83 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var73, 0);
    var71.setModifiers(0);
    japa.parser.ast.expr.NameExpr var86 = new japa.parser.ast.expr.NameExpr((-1), 1, var62, 0, "");
    var24.setName("");
    japa.parser.ast.expr.NameExpr var88 = new japa.parser.ast.expr.NameExpr("");
    japa.parser.ast.stmt.ReturnStmt var89 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);

  }

  public void test489() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    int var7 = var5.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    var5.setModifiers((-1));
    japa.parser.ast.type.Type var17 = var5.getType();
    java.util.List var18 = var5.getAnnotations();
    japa.parser.ast.body.VariableDeclaratorId var23 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var24 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var25 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var23, (japa.parser.ast.expr.Expression)var24);
    int var26 = var24.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var27 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var24);
    japa.parser.ast.type.PrimitiveType var28 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var29 = var28.getType();
    var24.setData((java.lang.Object)var28);
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    var24.setType((japa.parser.ast.type.Type)var31);
    var5.setType((japa.parser.ast.type.Type)var31);
    int var42 = var5.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));

  }

  public void test490() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    java.util.List var19 = var17.getMembers();
    java.util.List var20 = var17.getTypeParameters();
    java.util.List var21 = var17.getTypeParameters();
    java.util.List var22 = var17.getMembers();
    java.util.List var23 = var17.getImplements();
    java.util.List var24 = var17.getMembers();
    japa.parser.ast.type.PrimitiveType var25 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var30 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var31 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var32 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var30, (japa.parser.ast.expr.Expression)var31);
    japa.parser.ast.body.Parameter var33 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var25, var30);
    japa.parser.ast.type.Type var34 = var33.getType();
    japa.parser.ast.type.PrimitiveType var35 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var40 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var41 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var42 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var40, (japa.parser.ast.expr.Expression)var41);
    japa.parser.ast.body.Parameter var43 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var35, var40);
    japa.parser.ast.type.ReferenceType var45 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var35, 0);
    var33.setModifiers(0);
    japa.parser.ast.ImportDeclaration var47 = new japa.parser.ast.ImportDeclaration();
    var47.setStatic(false);
    var33.setVarArgs(false);
    var17.setInterface(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);

  }

  public void test491() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.ast.body.VariableDeclaratorId var12 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var13 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var14 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var12, (japa.parser.ast.expr.Expression)var13);
    japa.parser.Token var16 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var17 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var18 = var17.getExtends();
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var20 = var19.getType();
    java.lang.String var21 = var19.getName();
    japa.parser.ast.type.PrimitiveType var22 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var28 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var29 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var27, (japa.parser.ast.expr.Expression)var28);
    japa.parser.ast.body.Parameter var30 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var22, var27);
    japa.parser.ast.type.ReferenceType var32 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var22, 0);
    japa.parser.Token var33 = new japa.parser.Token(0);
    var19.setArrayCount(0);
    var17.setModifiers(0);
    java.util.List var36 = var17.getImplements();
    java.util.List var37 = var17.getImplements();
    java.util.List var38 = var17.getTypeParameters();
    java.util.List var39 = var17.getTypeParameters();
    int var40 = var17.getModifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test492() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.body.MethodDeclaration var9 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var10 = var9.getType();
    java.lang.String var11 = var9.getName();
    int var12 = var9.getModifiers();
    japa.parser.ast.type.ReferenceType var13 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, var12);
    japa.parser.ast.type.PrimitiveType var14 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var19 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var20 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var21 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var19, (japa.parser.ast.expr.Expression)var20);
    japa.parser.ast.body.Parameter var22 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var14, var19);
    japa.parser.ast.type.ReferenceType var24 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var14, 0);
    int var25 = var24.getArrayCount();
    int var26 = var24.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var27 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var27);
    var27.setBeginColumn((-1));
    japa.parser.ast.type.PrimitiveType var31 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.Parameter var39 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var31, var36);
    japa.parser.ast.type.ReferenceType var41 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var31, 0);
    int var42 = var31.getBeginLine();
    japa.parser.ast.type.ReferenceType var43 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var31);
    japa.parser.ast.body.VariableDeclaratorId var48 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var49 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var48, (japa.parser.ast.expr.Expression)var49);
    japa.parser.ast.body.VariableDeclaratorId var56 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var57 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var58 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var56, (japa.parser.ast.expr.Expression)var57);
    japa.parser.Token var60 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var61 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    java.util.List var62 = var61.getExtends();
    java.util.List var63 = var61.getMembers();
    java.util.List var64 = var61.getTypeParameters();
    int var65 = var61.getBeginColumn();
    var43.setArrayCount(var65);
    japa.parser.ast.type.PrimitiveType var67 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var72 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var73 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var74 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var72, (japa.parser.ast.expr.Expression)var73);
    japa.parser.ast.body.Parameter var75 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var67, var72);
    japa.parser.ast.type.ReferenceType var77 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var67, 0);
    int var78 = var77.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var83 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var84 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var85 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var83, (japa.parser.ast.expr.Expression)var84);
    japa.parser.ast.body.Parameter var86 = new japa.parser.ast.body.Parameter(var65, (japa.parser.ast.type.Type)var77, var83);
    int var87 = var83.getEndLine();
    var27.setData((java.lang.Object)var87);
    java.lang.String var89 = var27.getName();
    japa.parser.ast.body.Parameter var90 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var27);
    java.lang.String var91 = var27.getName();
    java.lang.String var92 = var27.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);

  }

  public void test493() throws Throwable {

    japa.parser.ast.stmt.TryStmt var0 = new japa.parser.ast.stmt.TryStmt();
    japa.parser.ast.stmt.BlockStmt var1 = var0.getTryBlock();
    japa.parser.ast.stmt.BlockStmt var2 = var0.getTryBlock();
    java.util.List var3 = var0.getCatchs();
    japa.parser.ast.body.MethodDeclaration var4 = new japa.parser.ast.body.MethodDeclaration();
    int var5 = var4.getModifiers();
    japa.parser.ast.stmt.BlockStmt var6 = new japa.parser.ast.stmt.BlockStmt();
    var4.setBody(var6);
    japa.parser.ast.body.MethodDeclaration var8 = new japa.parser.ast.body.MethodDeclaration();
    int var9 = var8.getModifiers();
    var8.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    japa.parser.ast.stmt.BlockStmt var14 = new japa.parser.ast.stmt.BlockStmt();
    var12.setBody(var14);
    var8.setBody(var14);
    var4.setBody(var14);
    var0.setTryBlock(var14);
    japa.parser.ast.body.MethodDeclaration var19 = new japa.parser.ast.body.MethodDeclaration();
    int var20 = var19.getModifiers();
    japa.parser.ast.stmt.BlockStmt var21 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var21);
    japa.parser.ast.stmt.BlockStmt var23 = new japa.parser.ast.stmt.BlockStmt();
    var19.setBody(var23);
    java.util.List var25 = var23.getStmts();
    java.util.List var26 = var23.getStmts();
    var0.setTryBlock(var23);
    japa.parser.ast.stmt.BlockStmt var28 = var0.getTryBlock();
    java.util.List var29 = var0.getCatchs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);

  }

  public void test494() throws Throwable {

    japa.parser.ast.body.MethodDeclaration var0 = new japa.parser.ast.body.MethodDeclaration();
    int var1 = var0.getModifiers();
    japa.parser.ast.stmt.BlockStmt var2 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var2);
    japa.parser.ast.stmt.BlockStmt var4 = new japa.parser.ast.stmt.BlockStmt();
    var0.setBody(var4);
    int var6 = var0.getArrayCount();
    java.lang.String var7 = var0.getName();
    java.util.List var8 = var0.getTypeParameters();
    japa.parser.ast.body.MethodDeclaration var9 = new japa.parser.ast.body.MethodDeclaration();
    int var10 = var9.getModifiers();
    var9.setEndLine(0);
    japa.parser.ast.body.MethodDeclaration var13 = new japa.parser.ast.body.MethodDeclaration();
    int var14 = var13.getModifiers();
    japa.parser.ast.stmt.BlockStmt var15 = new japa.parser.ast.stmt.BlockStmt();
    var13.setBody(var15);
    var9.setBody(var15);
    var0.setBody(var15);
    java.util.List var19 = var0.getParameters();
    japa.parser.ast.PackageDeclaration var20 = new japa.parser.ast.PackageDeclaration();
    java.util.List var21 = var20.getAnnotations();
    japa.parser.ast.expr.NameExpr var22 = var20.getName();
    japa.parser.ast.expr.NameExpr var23 = var20.getName();
    japa.parser.ast.type.PrimitiveType var24 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.ast.body.Parameter var32 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var24, var29);
    japa.parser.ast.body.MethodDeclaration var33 = new japa.parser.ast.body.MethodDeclaration();
    japa.parser.ast.type.Type var34 = var33.getType();
    java.lang.String var35 = var33.getName();
    int var36 = var33.getModifiers();
    japa.parser.ast.type.ReferenceType var37 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var24, var36);
    var20.setBeginLine(var36);
    var0.setArrayCount(var36);
    int var40 = var0.getArrayCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test495() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.Type var9 = var8.getType();
    japa.parser.ast.type.PrimitiveType var10 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var15 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var16 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var15, (japa.parser.ast.expr.Expression)var16);
    japa.parser.ast.body.Parameter var18 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var10, var15);
    japa.parser.ast.type.ReferenceType var20 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var10, 0);
    var8.setModifiers(0);
    boolean var22 = var8.isVarArgs();
    java.util.List var23 = var8.getAnnotations();
    java.util.List var24 = var8.getAnnotations();
    java.util.List var25 = var8.getAnnotations();
    japa.parser.ast.type.PrimitiveType var26 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var31 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var32 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var33 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var31, (japa.parser.ast.expr.Expression)var32);
    japa.parser.ast.body.Parameter var34 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var26, var31);
    java.util.List var35 = var34.getAnnotations();
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    japa.parser.ast.type.Type var45 = var44.getType();
    japa.parser.ast.type.PrimitiveType var46 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.Parameter var54 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var46, var51);
    japa.parser.ast.type.ReferenceType var56 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var46, 0);
    var44.setModifiers(0);
    japa.parser.ast.body.VariableDeclaratorId var58 = var44.getId();
    var34.setId(var58);
    japa.parser.ast.body.MethodDeclaration var60 = new japa.parser.ast.body.MethodDeclaration();
    int var61 = var60.getModifiers();
    japa.parser.ast.stmt.BlockStmt var62 = new japa.parser.ast.stmt.BlockStmt();
    var60.setBody(var62);
    java.util.List var64 = var60.getAnnotations();
    int var65 = var60.getBeginColumn();
    var34.setBeginColumn(var65);
    japa.parser.ast.body.VariableDeclaratorId var67 = var34.getId();
    int var68 = var67.getArrayCount();
    var8.setId(var67);
    japa.parser.ast.stmt.TryStmt var70 = new japa.parser.ast.stmt.TryStmt();
    int var71 = var70.getEndColumn();
    var8.setModifiers(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test496() throws Throwable {

    japa.parser.Token var1 = japa.parser.Token.newToken((-1));
    java.lang.Object var2 = var1.getValue();
    java.lang.Object var3 = var1.getValue();
    java.lang.Object var4 = var1.getValue();
    java.lang.Object var5 = var1.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test497() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.PrimitiveType var9 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var14 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var15 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var16 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var14, (japa.parser.ast.expr.Expression)var15);
    japa.parser.ast.body.Parameter var17 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var9, var14);
    var8.setId(var14);
    japa.parser.ast.body.VariableDeclaratorId var19 = var8.getId();
    japa.parser.ast.type.PrimitiveType var20 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var25 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var26 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var27 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var25, (japa.parser.ast.expr.Expression)var26);
    japa.parser.ast.body.Parameter var28 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var20, var25);
    japa.parser.ast.type.Type var29 = var28.getType();
    japa.parser.ast.type.PrimitiveType var30 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var35 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var36 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var37 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var35, (japa.parser.ast.expr.Expression)var36);
    japa.parser.ast.body.Parameter var38 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var30, var35);
    japa.parser.ast.type.ReferenceType var40 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var30, 0);
    var28.setModifiers(0);
    japa.parser.ast.ImportDeclaration var42 = new japa.parser.ast.ImportDeclaration();
    var42.setStatic(false);
    var28.setVarArgs(false);
    japa.parser.ast.type.PrimitiveType var46 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var51 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var52 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var53 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var51, (japa.parser.ast.expr.Expression)var52);
    japa.parser.ast.body.Parameter var54 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var46, var51);
    japa.parser.ast.type.PrimitiveType var55 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var60 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var61 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var62 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var60, (japa.parser.ast.expr.Expression)var61);
    japa.parser.ast.body.Parameter var63 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var55, var60);
    var54.setId(var60);
    var28.setId(var60);
    int var66 = var60.getArrayCount();
    japa.parser.Token var68 = new japa.parser.Token(0);
    var60.setEndColumn(0);
    java.lang.String var70 = var60.getName();
    var8.setId(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);

  }

  public void test498() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.body.VariableDeclaratorId var13 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var14 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var15 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var13, (japa.parser.ast.expr.Expression)var14);
    int var16 = var14.getModifiers();
    japa.parser.ast.body.VariableDeclarator var17 = new japa.parser.ast.body.VariableDeclarator(var5, (japa.parser.ast.expr.Expression)var14);
    japa.parser.ast.body.VariableDeclaratorId var18 = var17.getId();
    japa.parser.ast.body.VariableDeclaratorId var19 = var17.getId();
    japa.parser.ast.body.VariableDeclaratorId var20 = var17.getId();
    japa.parser.ast.body.VariableDeclaratorId var21 = var17.getId();
    japa.parser.ast.body.VariableDeclaratorId var22 = var17.getId();
    japa.parser.ast.body.VariableDeclaratorId var28 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var29 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var30 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var28, (japa.parser.ast.expr.Expression)var29);
    japa.parser.ast.body.VariableDeclaratorId var36 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var38 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var36, (japa.parser.ast.expr.Expression)var37);
    japa.parser.Token var40 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var41 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var45 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.expr.VariableDeclarationExpr var46 = new japa.parser.ast.expr.VariableDeclarationExpr();
    var45.setExpression((japa.parser.ast.expr.Expression)var46);
    japa.parser.ast.expr.Expression var48 = var45.getExpression();
    japa.parser.ast.stmt.ExpressionStmt var49 = new japa.parser.ast.stmt.ExpressionStmt(var48);
    japa.parser.ast.body.VariableDeclarator var50 = new japa.parser.ast.body.VariableDeclarator(var22, var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);

  }

  public void test499() throws Throwable {

    japa.parser.ast.body.VariableDeclaratorId var4 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var5 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var6 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var4, (japa.parser.ast.expr.Expression)var5);
    japa.parser.Token var7 = japa.parser.Token.newToken(1);
    japa.parser.ast.stmt.ReturnStmt var8 = new japa.parser.ast.stmt.ReturnStmt();
    int var9 = var8.getEndLine();
    japa.parser.ast.stmt.ReturnStmt var10 = new japa.parser.ast.stmt.ReturnStmt();
    int var11 = var10.getEndLine();
    japa.parser.ast.body.MethodDeclaration var12 = new japa.parser.ast.body.MethodDeclaration();
    int var13 = var12.getModifiers();
    var12.setEndLine(0);
    japa.parser.ast.body.VariableDeclaratorId var21 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var22 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var23 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var21, (japa.parser.ast.expr.Expression)var22);
    japa.parser.ast.body.VariableDeclaratorId var29 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var30 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var31 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var29, (japa.parser.ast.expr.Expression)var30);
    japa.parser.Token var33 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var34 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var37 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var38 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var37);
    japa.parser.ast.body.VariableDeclaratorId var43 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var44 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var45 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var43, (japa.parser.ast.expr.Expression)var44);
    var38.setExpression((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.type.PrimitiveType var47 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var52 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var53 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var54 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var52, (japa.parser.ast.expr.Expression)var53);
    japa.parser.ast.body.Parameter var55 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var47, var52);
    japa.parser.ast.type.Type var56 = var55.getType();
    var44.setType(var56);
    japa.parser.ast.stmt.ReturnStmt var58 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.stmt.ReturnStmt var59 = new japa.parser.ast.stmt.ReturnStmt(1, var9, var11, 0, (japa.parser.ast.expr.Expression)var44);
    japa.parser.ast.body.VariableDeclaratorId var65 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var66 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var67 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var65, (japa.parser.ast.expr.Expression)var66);
    japa.parser.ast.body.VariableDeclaratorId var73 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var74 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var75 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var73, (japa.parser.ast.expr.Expression)var74);
    japa.parser.Token var77 = new japa.parser.Token((-1), "");
    japa.parser.ast.body.ClassOrInterfaceDeclaration var78 = new japa.parser.ast.body.ClassOrInterfaceDeclaration(1, false, "");
    japa.parser.ast.expr.VariableDeclarationExpr var81 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.stmt.ExpressionStmt var82 = new japa.parser.ast.stmt.ExpressionStmt(0, 1, 0, (-1), (japa.parser.ast.expr.Expression)var81);
    japa.parser.ast.body.VariableDeclaratorId var87 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var88 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var89 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var87, (japa.parser.ast.expr.Expression)var88);
    var82.setExpression((japa.parser.ast.expr.Expression)var88);
    japa.parser.ast.stmt.ReturnStmt var91 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var88);
    japa.parser.ast.type.Type var92 = var88.getType();
    java.util.List var93 = var88.getVars();
    var59.setExpr((japa.parser.ast.expr.Expression)var88);
    japa.parser.ast.expr.Expression var95 = var59.getExpr();
    japa.parser.ast.expr.Expression var96 = var59.getExpr();
    japa.parser.ast.expr.Expression var97 = var59.getExpr();
    japa.parser.ast.stmt.ReturnStmt var98 = new japa.parser.ast.stmt.ReturnStmt(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var97 == null);

  }

  public void test500() throws Throwable {

    japa.parser.ast.type.PrimitiveType var0 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var5 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var6 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var7 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var5, (japa.parser.ast.expr.Expression)var6);
    japa.parser.ast.body.Parameter var8 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var0, var5);
    japa.parser.ast.type.ReferenceType var10 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var0, 0);
    int var11 = var10.getArrayCount();
    int var12 = var10.getArrayCount();
    japa.parser.ast.type.PrimitiveType var13 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var18 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var19 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var20 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var18, (japa.parser.ast.expr.Expression)var19);
    japa.parser.ast.body.Parameter var21 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var13, var18);
    japa.parser.ast.type.ReferenceType var23 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var13, 0);
    int var24 = var13.getBeginLine();
    japa.parser.ast.type.ReferenceType var25 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var13);
    java.lang.Object var26 = var13.getData();
    japa.parser.ast.type.PrimitiveType var27 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var32 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var33 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var34 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var32, (japa.parser.ast.expr.Expression)var33);
    japa.parser.ast.body.Parameter var35 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var27, var32);
    japa.parser.ast.type.PrimitiveType var36 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var41 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var42 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var43 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var41, (japa.parser.ast.expr.Expression)var42);
    japa.parser.ast.body.Parameter var44 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var36, var41);
    var35.setId(var41);
    japa.parser.ast.body.VariableDeclaratorId var50 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var51 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var52 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var50, (japa.parser.ast.expr.Expression)var51);
    int var53 = var51.getModifiers();
    japa.parser.ast.stmt.ReturnStmt var54 = new japa.parser.ast.stmt.ReturnStmt((japa.parser.ast.expr.Expression)var51);
    japa.parser.ast.type.PrimitiveType var55 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.type.PrimitiveType.Primitive var56 = var55.getType();
    var51.setData((java.lang.Object)var55);
    japa.parser.ast.type.PrimitiveType var58 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var63 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var64 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var65 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var63, (japa.parser.ast.expr.Expression)var64);
    japa.parser.ast.body.Parameter var66 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var58, var63);
    var51.setType((japa.parser.ast.type.Type)var58);
    var35.setType((japa.parser.ast.type.Type)var58);
    japa.parser.ast.type.PrimitiveType var69 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var74 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var75 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var76 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var74, (japa.parser.ast.expr.Expression)var75);
    japa.parser.ast.body.Parameter var77 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var69, var74);
    japa.parser.ast.type.ReferenceType var79 = new japa.parser.ast.type.ReferenceType((japa.parser.ast.type.Type)var69, 0);
    int var80 = var79.getArrayCount();
    int var81 = var79.getArrayCount();
    japa.parser.ast.body.VariableDeclaratorId var82 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.body.Parameter var83 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var79, var82);
    int var84 = var83.getBeginColumn();
    japa.parser.ast.type.PrimitiveType var85 = new japa.parser.ast.type.PrimitiveType();
    japa.parser.ast.body.VariableDeclaratorId var90 = new japa.parser.ast.body.VariableDeclaratorId();
    japa.parser.ast.expr.VariableDeclarationExpr var91 = new japa.parser.ast.expr.VariableDeclarationExpr();
    japa.parser.ast.body.VariableDeclarator var92 = new japa.parser.ast.body.VariableDeclarator((-1), 1, 1, (-1), var90, (japa.parser.ast.expr.Expression)var91);
    japa.parser.ast.body.Parameter var93 = new japa.parser.ast.body.Parameter((japa.parser.ast.type.Type)var85, var90);
    var83.setId(var90);
    var35.setId(var90);
    japa.parser.ast.body.VariableDeclaratorId var96 = var35.getId();
    japa.parser.ast.body.Parameter var97 = new japa.parser.ast.body.Parameter(var12, (japa.parser.ast.type.Type)var13, var96);
    boolean var98 = var97.isVarArgs();
    japa.parser.ast.body.VariableDeclaratorId var99 = var97.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var99 == null);

  }

}
