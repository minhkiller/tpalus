package generatedtest;

import junit.framework.*;

public class TinySQLUnitTest0 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(TinySQLUnitTest0.class);
  }

  public void test1() throws Throwable {

    com.sqlmagic.tinysql.Utils var0 = new com.sqlmagic.tinysql.Utils();

  }

  public void test2() throws Throwable {

    byte[] var0 = new byte[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var1 = com.sqlmagic.tinysql.Utils.vax_to_long(var0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test3() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var8 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var11 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var14 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.Utils.setPriority(var8, "hi!");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test4() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.Utils.delFile("hi!", "");
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test5() throws Throwable {

    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLGlobals.writeLongNames();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test6() throws Throwable {

    com.sqlmagic.tinysql.UtilString var0 = new com.sqlmagic.tinysql.UtilString();

  }

  public void test7() throws Throwable {

    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName("hi!");
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test8() throws Throwable {

    short var1 = com.sqlmagic.tinysql.Utils.fixByte((byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (short)1);

  }

  public void test9() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var2 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName("hi!");
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test10() throws Throwable {

    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var3 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    boolean var4 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var5 = new com.sqlmagic.tinysql.SimpleXMLTag("");
      fail("Expected exception of type java.lang.Exception");
    } catch (java.lang.Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test11() throws Throwable {

    com.sqlmagic.tinysql.tinySQLCmd var0 = new com.sqlmagic.tinysql.tinySQLCmd();

  }

  public void test12() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var15 = com.sqlmagic.tinysql.UtilString.actionToString((java.util.Hashtable)var14);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test13() throws Throwable {

    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var2 = new com.sqlmagic.tinysql.dbfFile("hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var3 = var2.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test14() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var8 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.Utils.delFile("hi!");
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test15() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.PreparedStatement var72 = var64.prepareStatement("", 0, 100);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test16() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var69 = var64.prepareStatement("");
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test17() throws Throwable {

    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var3 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var5 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var4);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var15 = com.sqlmagic.tinysql.UtilString.findTableForAlias(var5, var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test18() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var17 = var13.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test19() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var17 = var13.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));

  }

  public void test20() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    boolean var29 = var28.isReadOnly();
    java.lang.Object var31 = var14.put((java.lang.Object)var29, (java.lang.Object)true);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var32 = com.sqlmagic.tinysql.UtilString.actionToString((java.util.Hashtable)var14);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test21() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var19 = var13.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test22() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag(var24, var26, var35);
    java.util.Enumeration var37 = var36.keys();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var47 = var36.put((java.lang.Object)var39, (java.lang.Object)var46);
    java.lang.Object[] var48 = new java.lang.Object[] { var39};
    java.sql.Array var49 = var12.createArrayOf("hi!", var48);
    var12.clearWarnings();
    double var53 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var78 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.setReadOnly(var80);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var21.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test23() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var37 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var41 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var47 = var13.getImportedKeys(var34, "hi!", var46);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));

  }

  public void test24() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var30 = var29.nullsAreSortedAtEnd();
    int var31 = var29.getMaxTableNameLength();
    java.lang.String var32 = var29.getDatabaseProductName();
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var41 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.tsResultSet var49 = new com.sqlmagic.tinysql.tsResultSet();
    int var50 = var49.getLevel();
    int var51 = var49.getColumnCount();
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var66 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var69 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var72 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var75 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var78 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var79 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var80 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var81 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var82 = var13.getBestRowIdentifier(var32, "hi!", "hi!", var51, var81);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "tinySQL"+ "'", var32.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test25() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isClosed();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var23 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var26 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var25);
    java.sql.Clob var27 = var26.createClob();
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var35 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var38 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var39 = var26.prepareStatement("hi!", 100);
    var12.setTransactionIsolation(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test26() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var22 = var13.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test27() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    int var20 = var13.getMaxIndexLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var21 = var13.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test28() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getMaxColumnsInIndex();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var16 = var13.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test29() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var3 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var4 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var19 = new com.sqlmagic.tinysql.SimpleXMLTag(var7, var9, var18);
    java.util.Enumeration var20 = var19.keys();
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    boolean var34 = var33.isReadOnly();
    java.lang.Object var36 = var19.put((java.lang.Object)var34, (java.lang.Object)true);
    double var39 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var54 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var63 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var66 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var69 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var72 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var71);
    boolean var73 = com.sqlmagic.tinysql.UtilString.isInteger(var72);
    var0.setState(100, (java.util.Hashtable)var19, "hi!", var73);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var75 = com.sqlmagic.tinysql.UtilString.actionToString((java.util.Hashtable)var19);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test30() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var19 = var13.getSchemaTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test31() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var22 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var30);
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.util.Vector var36 = com.sqlmagic.tinysql.Utils.getAllFiles(var30, "hi!");
    com.sqlmagic.tinysql.tinySQLException var37 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    var37.setNextException((java.sql.SQLException)var38);
    java.util.Iterator var41 = var38.iterator();
    java.lang.String var42 = var38.toString();
    boolean var44 = com.sqlmagic.tinysql.Utils.isCharColumn(1);
    boolean var46 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var47 = var13.getBestRowIdentifier("", var30, var42, 1, var46);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var30.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var31.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var42.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test32() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    java.lang.String var20 = var13.getDriverName();
    java.lang.String var21 = var13.getDriverVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var22 = com.sqlmagic.tinysql.UtilString.dateValue(var21);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var20.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "2.26h"+ "'", var21.equals("2.26h"));

  }

  public void test33() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    boolean var29 = var28.isReadOnly();
    java.lang.Object var31 = var14.put((java.lang.Object)var29, (java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var32 = var14.nextTag();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);

  }

  public void test34() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var16 = var13.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test35() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var24);
    java.lang.String var26 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var25);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));

  }

  public void test36() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var19 = var13.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test37() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var30 = var29.isCatalogAtStart();
    int var31 = var29.getSQLStateType();
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var39);
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var50 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var51 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var52 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var53 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var52);
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var62 = var29.getSuperTypes(var40, "", "hi!");
    double var67 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var71 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var73 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var74 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var75 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var76 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var75);
    int var77 = var75.getMajorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.CallableStatement var78 = var12.prepareCall(var40, 1, var77);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var39.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var40.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var61.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);

  }

  public void test38() throws Throwable {

    com.sqlmagic.tinysql.textFile var0 = new com.sqlmagic.tinysql.textFile();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var1 = var0.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test39() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getFetchSize();
    double var5 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var9 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var14 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var13);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var14);
    boolean var17 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var18 = var15.supportsResultSetType(0);
    boolean var19 = var15.supportsOpenCursorsAcrossCommit();
    boolean var20 = var15.supportsCatalogsInDataManipulation();
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    boolean var36 = var15.othersUpdatesAreVisible(var25);
    int var37 = var15.getMaxTablesInSelect();
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var51 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag(var40, var42, var51);
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var72 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var74 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var73);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var75 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var74);
    boolean var76 = var75.isCatalogAtStart();
    boolean var77 = var75.supportsSchemasInTableDefinitions();
    boolean var78 = var75.supportsAlterTableWithDropColumn();
    var0.setState(var37, (java.util.Hashtable)var52, var61, var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var80 = var52.nextTag();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test40() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getMaxColumnsInIndex();
    java.sql.ResultSet var16 = var13.getTypeInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);

  }

  public void test41() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var15 = var13.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test42() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var14 = var13.getMaxColumnsInIndex();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var64 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var67 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var71 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var73 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var81 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var82 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    int[] var83 = new int[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var84 = var13.getUDTs("hi!", "hi!", "hi!", var83);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi!"+ "'", var81.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);

  }

  public void test43() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var24 = var13.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test44() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getMaxColumnsInIndex();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var16 = var13.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test45() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    int var17 = var15.getMaxColumnNameLength();
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var28 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var29);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var31 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var30);
    boolean var33 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var34 = var31.supportsResultSetType(0);
    boolean var35 = var31.supportsOpenCursorsAcrossCommit();
    boolean var36 = var31.supportsCatalogsInDataManipulation();
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var50 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag(var39, var41, var50);
    boolean var52 = var31.othersUpdatesAreVisible(var41);
    boolean var53 = var15.othersInsertsAreVisible(var41);
    java.sql.RowIdLifetime var54 = var15.getRowIdLifetime();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);

  }

  public void test46() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    int var20 = var13.getMaxIndexLength();
    boolean var22 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    double var39 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var46 = var13.getColumnPrivileges("hi!", var26, "", "hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));

  }

  public void test47() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    boolean var29 = var28.isReadOnly();
    java.lang.Object var31 = var14.put((java.lang.Object)var29, (java.lang.Object)true);
    java.util.Set var32 = var14.entrySet();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var33 = com.sqlmagic.tinysql.UtilString.actionToString((java.util.Hashtable)var14);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test48() throws Throwable {

    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var3 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var4);
    com.sqlmagic.tinysql.tsResultSet var6 = new com.sqlmagic.tinysql.tsResultSet();
    int var7 = var6.getLevel();
    int var8 = var6.getColumnCount();
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var22 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag(var11, var13, var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag(var5, var8, var22);
      fail("Expected exception of type java.lang.Exception");
    } catch (java.lang.Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test49() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var8 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    java.util.Enumeration var36 = var35.keys();
    com.sqlmagic.tinysql.tinySQLException var37 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var38 = var37.iterator();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var46 = var35.put((java.lang.Object)var38, (java.lang.Object)var45);
    boolean var47 = var35.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var48 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var35);
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Vector var56 = var48.getIndexCondition("hi!");
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test50() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    java.sql.ResultSet var24 = var13.getTableTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);

  }

  public void test51() throws Throwable {

    byte[] var3 = new byte[] { (byte)100, (byte)10, (byte)100};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var4 = com.sqlmagic.tinysql.Utils.vax_to_long(var3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test52() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getFetchSize();
    double var5 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var9 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var14 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var13);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var14);
    boolean var17 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var18 = var15.supportsResultSetType(0);
    boolean var19 = var15.supportsOpenCursorsAcrossCommit();
    boolean var20 = var15.supportsCatalogsInDataManipulation();
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    boolean var36 = var15.othersUpdatesAreVisible(var25);
    int var37 = var15.getMaxTablesInSelect();
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var51 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag(var40, var42, var51);
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var72 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var74 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var73);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var75 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var74);
    boolean var76 = var75.isCatalogAtStart();
    boolean var77 = var75.supportsSchemasInTableDefinitions();
    boolean var78 = var75.supportsAlterTableWithDropColumn();
    var0.setState(var37, (java.util.Hashtable)var52, var61, var78);
    boolean var80 = var52.hasMoreTags();
    double var84 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var86 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var87 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var88 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var90 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var91 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var92 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var93 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var92);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var94 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var93);
    boolean var95 = var94.supportsGetGeneratedKeys();
    boolean var96 = var94.supportsSchemasInTableDefinitions();
    int var97 = var94.getDriverMinorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var98 = var52.getTag(var97);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 1);

  }

  public void test53() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    int var13 = var12.getHoldability();
    java.sql.NClob var14 = var12.createNClob();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);

  }

  public void test54() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    double var6 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var9 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var12 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var13 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var15 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var14);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var16 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var15);
    boolean var17 = var16.nullsAreSortedAtEnd();
    int var18 = var16.getMaxTableNameLength();
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var36 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var37 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var39 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var38);
    java.sql.Clob var40 = var39.createClob();
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var48 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var51 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var52 = var39.prepareStatement("hi!", 100);
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var78 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var80 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var79);
    java.sql.ResultSet var81 = var16.getAttributes("hi!", "hi!", "", var79);
    int var82 = var16.getDatabaseMajorVersion();
    var0.setType(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);

  }

  public void test55() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isClosed();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var23 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var26 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var25);
    java.sql.Clob var27 = var26.createClob();
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var35 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var38 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var39 = var26.prepareStatement("hi!", 100);
    var12.setTransactionIsolation(100);
    java.sql.Blob var41 = var12.createBlob();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var42 = var12.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);

  }

  public void test56() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsStoredFunctionsUsingCallSyntax();
    boolean var37 = var13.supportsSubqueriesInIns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var38 = var13.getSchemaTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test57() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsAlterTableWithAddColumn();
    boolean var31 = var13.supportsSubqueriesInIns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test58() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    int var21 = var13.getDriverMinorVersion();
    boolean var22 = var13.nullPlusNonNullIsNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test59() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    int var21 = var13.getDriverMinorVersion();
    boolean var22 = com.sqlmagic.tinysql.Utils.isCharColumn(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test60() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var6 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var7);
    double var11 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var12 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles(var7, "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.Utils.delFile("hi!");
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var7.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var8.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);

  }

  public void test61() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isClosed();
    int var14 = var12.getHoldability();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    boolean var30 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var31 = var28.supportsResultSetType(0);
    boolean var32 = var28.supportsOpenCursorsAcrossCommit();
    boolean var33 = var28.supportsCoreSQLGrammar();
    int var34 = var28.getMaxRowSize();
    java.lang.String var35 = var28.getDriverName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.CallableStatement var36 = var12.prepareCall(var35);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var35.equals("com.sqlmagic.tinysql.dbfFileDriver"));

  }

  public void test62() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    boolean var19 = var13.autoCommitFailureClosesAllResultSets();
    boolean var20 = var13.supportsDataManipulationTransactionsOnly();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = var13.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test63() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);

  }

  public void test64() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = com.sqlmagic.tinysql.Utils.isCharColumn(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test65() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var25 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.sql.ResultSet var57 = var15.getSuperTypes("hi!", var31, var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var58 = com.sqlmagic.tinysql.UtilString.toStandardDate(var31);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);

  }

  public void test66() throws Throwable {

    byte[] var3 = new byte[] { (byte)(-1), (byte)1, (byte)100};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var4 = com.sqlmagic.tinysql.Utils.vax_to_long(var3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test67() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsStatementPooling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var23 = var13.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test68() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var29 = var28.getMaxColumnsInIndex();
    boolean var30 = var12.isValid(var29);
    java.sql.Statement var31 = var12.createStatement();
    com.sqlmagic.tinysql.tsResultSet var33 = new com.sqlmagic.tinysql.tsResultSet();
    int var34 = var33.getFetchSize();
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.PreparedStatement var37 = var12.prepareStatement("hi!", var34, var36);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);

  }

  public void test69() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = com.sqlmagic.tinysql.Utils.isCharColumn(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test70() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxColumnsInSelect();
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var30 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var32 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var31);
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var45 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var47 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var46);
    java.lang.String var48 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var58 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var59 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var61 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var60);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var61);
    boolean var63 = var62.isCatalogAtStart();
    int var64 = var62.getSQLStateType();
    int var65 = var62.getMaxSchemaNameLength();
    java.lang.String var66 = var62.getURL();
    java.lang.String[] var67 = new java.lang.String[] { var66};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var68 = var13.getTables("hi!", "hi!", "", var67);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);

  }

  public void test71() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSubqueriesInIns();
    java.lang.String var16 = var13.getDriverVersion();
    int var17 = var13.getMaxUserNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2.26h"+ "'", var16.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test72() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.removeQuotes(var23);
    boolean var25 = var14.contains((java.lang.Object)var23);
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var40 = new com.sqlmagic.tinysql.SimpleXMLTag(var28, var30, var39);
    java.util.Enumeration var41 = var40.keys();
    com.sqlmagic.tinysql.tinySQLException var42 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var43 = var42.iterator();
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var51 = var40.put((java.lang.Object)var43, (java.lang.Object)var50);
    java.util.Enumeration var52 = var40.elements();
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.removeQuotes(var60);
    java.lang.Object var62 = var14.put((java.lang.Object)var40, (java.lang.Object)var61);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var63 = var40.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test73() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsGetGeneratedKeys();
    boolean var18 = var15.dataDefinitionCausesTransactionCommit();
    boolean var19 = var15.supportsSubqueriesInQuantifieds();
    boolean var20 = var15.supportsUnionAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test74() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    int var17 = var15.getMaxColumnNameLength();
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var28 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var29);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var31 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var30);
    boolean var33 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var34 = var31.supportsResultSetType(0);
    boolean var35 = var31.supportsOpenCursorsAcrossCommit();
    boolean var36 = var31.supportsCatalogsInDataManipulation();
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var50 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag(var39, var41, var50);
    boolean var52 = var31.othersUpdatesAreVisible(var41);
    boolean var53 = var15.othersInsertsAreVisible(var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var54 = var15.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test75() throws Throwable {

    byte[] var1 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test76() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    java.sql.ResultSet var35 = var13.getClientInfoProperties();
    double var39 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var45 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var46 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var48 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var47);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var49 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var48);
    boolean var51 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var52 = var49.supportsResultSetType(0);
    boolean var53 = var49.supportsOpenCursorsAcrossCommit();
    int var54 = var49.getMaxCharLiteralLength();
    boolean var55 = var49.supportsSchemasInProcedureCalls();
    boolean var56 = var49.nullsAreSortedAtEnd();
    int var57 = var49.getResultSetHoldability();
    boolean var58 = var13.othersInsertsAreVisible(var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var59 = var13.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test77() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.UtilString.removeQuotes(var28);
    boolean var31 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var32 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("");
    java.sql.ResultSet var35 = var13.getProcedureColumns("hi!", var29, "hi!", "");
    java.lang.String var36 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var28.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var29.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "COL00053"+ "'", var36.equals("COL00053"));

  }

  public void test78() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    java.sql.Blob var16 = var12.createBlob();
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var28 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var29 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var31 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var30);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var32 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var31);
    boolean var34 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var35 = var32.supportsResultSetType(0);
    boolean var36 = var32.supportsOpenCursorsAcrossCommit();
    boolean var37 = var32.supportsCoreSQLGrammar();
    int var38 = var32.getMaxColumnsInSelect();
    int var39 = var32.getMaxBinaryLiteralLength();
    int var40 = var32.getMaxCursorNameLength();
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var50 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var51 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var52 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var53 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var52);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var54 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var53);
    boolean var56 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var57 = var54.supportsResultSetType(0);
    int var58 = var54.getMaxIndexLength();
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var69 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var71 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var70);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var72 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var71);
    boolean var74 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var75 = var72.supportsResultSetType(0);
    boolean var76 = var72.supportsOpenCursorsAcrossCommit();
    int var77 = var72.getMaxCharLiteralLength();
    java.sql.CallableStatement var78 = var12.prepareCall("hi!", var40, var58, var77);
    byte[] var79 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);

  }

  public void test79() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getFetchSize();
    double var5 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var9 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var14 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var13);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var14);
    boolean var17 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var18 = var15.supportsResultSetType(0);
    boolean var19 = var15.supportsOpenCursorsAcrossCommit();
    boolean var20 = var15.supportsCatalogsInDataManipulation();
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    boolean var36 = var15.othersUpdatesAreVisible(var25);
    int var37 = var15.getMaxTablesInSelect();
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var51 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag(var40, var42, var51);
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var72 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var74 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var73);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var75 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var74);
    boolean var76 = var75.isCatalogAtStart();
    boolean var77 = var75.supportsSchemasInTableDefinitions();
    boolean var78 = var75.supportsAlterTableWithDropColumn();
    var0.setState(var37, (java.util.Hashtable)var52, var61, var78);
    int var80 = var52.size();
    java.util.Set var81 = var52.entrySet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var82 = var52.nextTag();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);

  }

  public void test80() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var11.jdbcCompliant();
    int var14 = var11.getMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test81() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.supportsGetGeneratedKeys();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    int var16 = var13.getDriverMinorVersion();
    boolean var17 = var13.supportsMixedCaseQuotedIdentifiers();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var18 = var13.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test82() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsSchemasInDataManipulation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test83() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var3 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var9 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var8);
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles(var8, "hi!");
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var57 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var64 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var68 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var72 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var82 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var85 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var87 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var88 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var89 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var90 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var91 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var92 = var39.getConnection("hi!", "hi!", (java.sql.Driver)var91);
    com.sqlmagic.tinysql.tinySQLConnection var93 = var0.getConnection(var8, "hi!", (java.sql.Driver)var91);
    com.sqlmagic.tinysql.dbfFile var94 = new com.sqlmagic.tinysql.dbfFile(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var8.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var9.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);

  }

  public void test84() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getFetchSize();
    double var5 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var9 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var14 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var13);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var14);
    boolean var17 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var18 = var15.supportsResultSetType(0);
    boolean var19 = var15.supportsOpenCursorsAcrossCommit();
    boolean var20 = var15.supportsCatalogsInDataManipulation();
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    boolean var36 = var15.othersUpdatesAreVisible(var25);
    int var37 = var15.getMaxTablesInSelect();
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var51 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag(var40, var42, var51);
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var72 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var74 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var73);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var75 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var74);
    boolean var76 = var75.isCatalogAtStart();
    boolean var77 = var75.supportsSchemasInTableDefinitions();
    boolean var78 = var75.supportsAlterTableWithDropColumn();
    var0.setState(var37, (java.util.Hashtable)var52, var61, var78);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var80 = var52.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test85() throws Throwable {

    short var1 = com.sqlmagic.tinysql.Utils.fixByte((byte)10);
    short var2 = com.sqlmagic.tinysql.Utils.fixByte((byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (short)10);

  }

  public void test86() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    java.sql.Blob var16 = var12.createBlob();
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.sql.Savepoint var21 = var12.setSavepoint("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.tsResultSet var23 = new com.sqlmagic.tinysql.tsResultSet();
    int var24 = var23.getLevel();
    boolean var26 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var27 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var41 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var42 = new com.sqlmagic.tinysql.SimpleXMLTag(var30, var32, var41);
    java.util.Enumeration var43 = var42.keys();
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var53 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var54 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var56 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var55);
    boolean var57 = var56.isReadOnly();
    java.lang.Object var59 = var42.put((java.lang.Object)var57, (java.lang.Object)true);
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var67 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var68 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var69 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var72 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var76 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var80 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var82 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var84 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var86 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var89 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var91 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var92 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var93 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var94 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var95 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var94);
    boolean var96 = com.sqlmagic.tinysql.UtilString.isInteger(var95);
    var23.setState(100, (java.util.Hashtable)var42, "hi!", var96);
    java.util.Vector var98 = var23.getTables();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var99 = com.sqlmagic.tinysql.UtilString.findTableForAlias("hi!", var98);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "hi!"+ "'", var92.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi!"+ "'", var94.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "hi!"+ "'", var95.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var98 == null);

  }

  public void test87() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag(var24, var26, var35);
    java.util.Enumeration var37 = var36.keys();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var47 = var36.put((java.lang.Object)var39, (java.lang.Object)var46);
    java.lang.Object[] var48 = new java.lang.Object[] { var39};
    java.sql.Array var49 = var12.createArrayOf("hi!", var48);
    var12.clearWarnings();
    java.sql.Clob var51 = var12.createClob();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var52 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var53 = var52.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var21.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);

  }

  public void test88() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    java.lang.String var65 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));

  }

  public void test89() throws Throwable {

    com.sqlmagic.tinysql.dbfFile var0 = new com.sqlmagic.tinysql.dbfFile();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var1 = var0.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test90() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag(var24, var26, var35);
    java.util.Enumeration var37 = var36.keys();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var47 = var36.put((java.lang.Object)var39, (java.lang.Object)var46);
    java.lang.Object[] var48 = new java.lang.Object[] { var39};
    java.sql.Array var49 = var12.createArrayOf("hi!", var48);
    var12.clearWarnings();
    java.sql.Clob var51 = var12.createClob();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var52 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var53 = var52.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var21.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);

  }

  public void test91() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var8 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    java.util.Enumeration var36 = var35.keys();
    com.sqlmagic.tinysql.tinySQLException var37 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var38 = var37.iterator();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var46 = var35.put((java.lang.Object)var38, (java.lang.Object)var45);
    boolean var47 = var35.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var48 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var35);
    com.sqlmagic.tinysql.tinySQLException var49 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var50 = var49.getNextException();
    java.lang.String var51 = var49.toString();
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var56 = var48.evaluate(var51, "hi!");
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var51.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));

  }

  public void test92() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getSQLStateType();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var23);
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var46 = var13.getSuperTypes(var24, "", "hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.toYMD(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var45.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var47.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));

  }

  public void test93() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.lang.String var13 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var17 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var37 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var41 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.Utils.delFile(var13, "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.isFunctionName(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test94() throws Throwable {

    byte[] var2 = new byte[] { (byte)1, (byte)10};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var3 = com.sqlmagic.tinysql.Utils.vax_to_long(var2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test95() throws Throwable {

    byte[] var0 = new byte[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var1 = com.sqlmagic.tinysql.Utils.vax_to_short(var0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test96() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    java.lang.String var20 = var13.getDatabaseProductName();
    boolean var21 = var13.supportsMultipleTransactions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var22 = var13.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "tinySQL"+ "'", var20.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test97() throws Throwable {

    short var1 = com.sqlmagic.tinysql.Utils.fixByte((byte)10);
    byte[] var2 = com.sqlmagic.tinysql.Utils.shortToLittleEndian(var1);
    byte[] var3 = com.sqlmagic.tinysql.Utils.shortToLittleEndian(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test98() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var14 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var15 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var19 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var20 = var12.prepareStatement("hi!", var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var50 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var53 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var54 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var56 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag(var45, var47, var56);
    java.util.Enumeration var58 = var57.keys();
    com.sqlmagic.tinysql.tinySQLException var59 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var60 = var59.iterator();
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var68 = var57.put((java.lang.Object)var60, (java.lang.Object)var67);
    java.lang.Object[] var69 = new java.lang.Object[] { var60};
    java.sql.Array var70 = var33.createArrayOf("hi!", var69);
    var33.clearWarnings();
    java.sql.Clob var72 = var33.createClob();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var73 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var33);
    java.sql.DatabaseMetaData var74 = var33.getMetaData();
    double var77 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var80 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var81 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.lang.String var84 = var33.nativeSQL("hi!");
    java.lang.String var85 = var12.getClientInfo("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var42.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi!"+ "'", var84.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == null);

  }

  public void test99() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxColumnsInSelect();
    int var20 = var13.getMaxBinaryLiteralLength();
    boolean var21 = var13.isReadOnly();
    boolean var22 = var13.supportsDataManipulationTransactionsOnly();
    boolean var23 = var13.storesUpperCaseIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test100() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var14 = var13.getMaxColumnsInIndex();
    boolean var15 = var13.supportsAlterTableWithDropColumn();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var16 = var13.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test101() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsGetGeneratedKeys();
    boolean var18 = var15.supportsMinimumSQLGrammar();
    boolean var19 = var15.supportsCoreSQLGrammar();
    boolean var20 = var15.supportsSelectForUpdate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = var15.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test102() throws Throwable {

    com.sqlmagic.tinysql.tinySQLGlobals var0 = new com.sqlmagic.tinysql.tinySQLGlobals();

  }

  public void test103() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var29 = var28.getMaxColumnsInIndex();
    boolean var30 = var12.isValid(var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test104() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    int var36 = var13.getMaxStatements();
    boolean var37 = var13.nullsAreSortedHigh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test105() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsFullOuterJoins();
    int var17 = var15.getMaxCatalogNameLength();
    boolean var18 = var15.supportsCatalogsInProcedureCalls();
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var28 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var29 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var31 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var30);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var32 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var31);
    int var33 = var32.getMaxColumnsInIndex();
    int var34 = var32.getMaxColumnsInOrderBy();
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var45 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var47 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var46);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var48 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    boolean var49 = var48.nullsAreSortedAtEnd();
    int var50 = var48.getMaxTableNameLength();
    java.lang.String var51 = var48.getDatabaseProductName();
    boolean var53 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var54 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var55 = var48.ownInsertsAreVisible(0);
    boolean var56 = var32.supportsResultSetType(0);
    boolean var57 = var15.supportsResultSetHoldability(0);
    boolean var58 = var15.nullsAreSortedHigh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "tinySQL"+ "'", var51.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test106() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    com.sqlmagic.tinysql.tinySQLException var16 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var17 = var16.iterator();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var25 = var14.put((java.lang.Object)var17, (java.lang.Object)var24);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var26 = com.sqlmagic.tinysql.UtilString.actionToString((java.util.Hashtable)var14);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test107() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    int var36 = var13.getMaxStatements();
    boolean var37 = var13.supportsNonNullableColumns();
    int var38 = var13.getMaxIndexLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);

  }

  public void test108() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var21 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var25 = var12.prepareStatement("hi!", 100);
    boolean var26 = com.sqlmagic.tinysql.Utils.isCharColumn(100);
    boolean var27 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test109() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    boolean var16 = var13.supportsNonNullableColumns();
    boolean var17 = var13.supportsSubqueriesInComparisons();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test110() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    boolean var16 = var13.nullPlusNonNullIsNull();
    boolean var17 = var13.locatorsUpdateCopy();
    boolean var18 = var13.supportsANSI92EntryLevelSQL();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var26);
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var40 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var49 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var57);
    java.sql.ResultSet var59 = var13.getSuperTypes(var27, var32, var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var60 = var13.getSchemaTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var26.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var27.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);

  }

  public void test111() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    boolean var20 = var13.nullsAreSortedAtEnd();
    int var21 = var13.getResultSetHoldability();
    int var22 = var13.getMaxTablesInSelect();
    java.lang.String var23 = var13.getNumericFunctions();
    com.sqlmagic.tinysql.tsResultSet var24 = new com.sqlmagic.tinysql.tsResultSet();
    int var25 = var24.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var26 = var24.getWhereClause();
    int var27 = var24.size();
    int var28 = var24.getType();
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var36 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var40 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var42 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var43 = new com.sqlmagic.tinysql.SimpleXMLTag(var31, var33, var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var44 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var28, var42);
      fail("Expected exception of type java.lang.Exception");
    } catch (java.lang.Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);

  }

  public void test112() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toStandardDate("hi!");
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));

  }

  public void test113() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var20 = var13.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test114() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.removeQuotes(var23);
    boolean var25 = var14.contains((java.lang.Object)var23);
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var41 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var42 = var39.supportsResultSetType(0);
    boolean var43 = var39.supportsOpenCursorsAcrossCommit();
    boolean var44 = var39.supportsCoreSQLGrammar();
    boolean var45 = var39.autoCommitFailureClosesAllResultSets();
    boolean var46 = var39.supportsDataManipulationTransactionsOnly();
    boolean var47 = var14.containsValue((java.lang.Object)var46);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var48 = com.sqlmagic.tinysql.UtilString.actionToString((java.util.Hashtable)var14);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test115() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getDatabaseProductName();
    boolean var24 = var13.storesUpperCaseQuotedIdentifiers();
    java.lang.String var25 = var13.getSystemFunctions();
    boolean var26 = var13.supportsTransactions();
    boolean var27 = var13.supportsUnionAll();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var28 = var13.getSchemaTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "tinySQL"+ "'", var23.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test116() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    boolean var15 = var12.getAutoClose();
    java.sql.Statement var16 = var12.createStatement();
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var19 = var12.prepareStatement("");
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test117() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var7 = new com.sqlmagic.tinysql.dbfFile("hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var8 = var7.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test118() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tsResultSet var5 = new com.sqlmagic.tinysql.tsResultSet();
    int var6 = var5.getLevel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var7 = var4.getScale(var6);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test119() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var24);
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var41 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var40);
    boolean var42 = var41.isCatalogAtStart();
    boolean var44 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    boolean var45 = var41.othersInsertsAreVisible(100);
    boolean var46 = var41.supportsSubqueriesInExists();
    com.sqlmagic.tinysql.FieldTokenizer var47 = new com.sqlmagic.tinysql.FieldTokenizer(var25, ' ', var46);
    int var48 = var47.countFields();
    int var49 = var47.countFields();
    boolean var50 = var47.hasMoreFields();
    java.lang.String var51 = var47.nextField();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));

  }

  public void test120() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var20 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var21 = var18.supportsResultSetType(0);
    boolean var22 = var18.supportsOpenCursorsAcrossCommit();
    boolean var23 = var18.supportsCoreSQLGrammar();
    int var24 = var18.getMaxRowSize();
    int var25 = var18.getMaxIndexLength();
    int var26 = var18.getMaxStatements();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var27 = var4.getColumnTypeName(var26);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 10);

  }

  public void test121() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var37 = var34.supportsResultSetType(0);
    boolean var38 = var34.supportsOpenCursorsAcrossCommit();
    int var39 = var34.getMaxCharLiteralLength();
    boolean var40 = var34.supportsSchemasInProcedureCalls();
    boolean var41 = var34.nullsAreSortedAtEnd();
    int var42 = var34.getResultSetHoldability();
    int var43 = var34.getMaxBinaryLiteralLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var44 = var4.getColumnDisplaySize(var43);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);

  }

  public void test122() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var8 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    java.util.Enumeration var36 = var35.keys();
    com.sqlmagic.tinysql.tinySQLException var37 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var38 = var37.iterator();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var46 = var35.put((java.lang.Object)var38, (java.lang.Object)var45);
    boolean var47 = var35.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var48 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var35);
    java.lang.String var49 = var48.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var50 = var48.getStatus();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "\n"+ "'", var49.equals("\n"));

  }

  public void test123() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag(var24, var26, var35);
    java.util.Enumeration var37 = var36.keys();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var47 = var36.put((java.lang.Object)var39, (java.lang.Object)var46);
    java.lang.Object[] var48 = new java.lang.Object[] { var39};
    java.sql.Array var49 = var12.createArrayOf("hi!", var48);
    var12.clearWarnings();
    java.sql.Clob var51 = var12.createClob();
    com.sqlmagic.tinysql.tinySQL var52 = var12.get_tinySQL();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var53 = var52.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test124() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsGetGeneratedKeys();
    boolean var18 = var15.supportsMinimumSQLGrammar();
    boolean var19 = var15.supportsCoreSQLGrammar();
    boolean var20 = var15.supportsSelectForUpdate();
    boolean var21 = var15.supportsDataDefinitionAndDataManipulationTransactions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test125() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var22 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var23 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var25 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var24);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var26 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var25);
    boolean var27 = var26.nullsAreSortedAtEnd();
    int var28 = var26.getMaxTableNameLength();
    java.lang.String var29 = var26.getDatabaseProductName();
    boolean var31 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var32 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var33 = var26.ownInsertsAreVisible(0);
    boolean var34 = var12.isValid(0);
    java.sql.NClob var35 = var12.createNClob();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "tinySQL"+ "'", var29.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test126() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var22 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var46 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var47 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var49 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var48);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var50 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var49);
    boolean var51 = var50.nullsAreSortedAtEnd();
    int var52 = var50.getMaxTableNameLength();
    java.lang.String var53 = var50.getDatabaseProductName();
    boolean var55 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var56 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var57 = var50.ownInsertsAreVisible(0);
    boolean var58 = var36.isValid(0);
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var64 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var67 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var68 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var70 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var71 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var73 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var72);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var74 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var73);
    boolean var76 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var77 = var74.supportsResultSetType(0);
    boolean var78 = var74.supportsOpenCursorsAcrossCommit();
    boolean var79 = var74.supportsCatalogsInDataManipulation();
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var84 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var87 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var89 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var90 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var91 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var93 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var94 = new com.sqlmagic.tinysql.SimpleXMLTag(var82, var84, var93);
    boolean var95 = var74.othersUpdatesAreVisible(var84);
    int var96 = var74.getMaxTablesInSelect();
    int var97 = var74.getMaxStatements();
    java.sql.PreparedStatement var98 = var12.prepareStatement("hi!", 0, var60, var97);
    com.sqlmagic.tinysql.tinySQLException var99 = new com.sqlmagic.tinysql.tinySQLException("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "tinySQL"+ "'", var53.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == null);

  }

  public void test127() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var15 = var14.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test128() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    java.lang.String var20 = var13.getDriverName();
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var37 = var34.supportsResultSetType(0);
    boolean var38 = var34.supportsOpenCursorsAcrossCommit();
    boolean var39 = var34.supportsCatalogsInDataManipulation();
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var53 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag(var42, var44, var53);
    boolean var55 = var34.othersUpdatesAreVisible(var44);
    int var56 = var34.getMaxTablesInSelect();
    int var57 = var34.getMaxStatements();
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var72 = new com.sqlmagic.tinysql.SimpleXMLTag(var60, var62, var71);
    com.sqlmagic.tinysql.SimpleXMLTag var73 = new com.sqlmagic.tinysql.SimpleXMLTag(var20, var57, var71);
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var81 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!");
    boolean var84 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var85 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    com.sqlmagic.tinysql.SimpleXMLTag var86 = var82.getTag(100);
    var73.putAll((java.util.Map)var82);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var88 = var82.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test129() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var23 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var26 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var25);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var27 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var26);
    boolean var29 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var30 = var27.supportsResultSetType(0);
    boolean var31 = var27.supportsOpenCursorsAcrossCommit();
    boolean var32 = var27.supportsCoreSQLGrammar();
    int var33 = var27.getMaxRowSize();
    int var34 = var27.getMaxIndexLength();
    boolean var35 = var12.isValid(var34);
    java.lang.String var36 = var12.getCatalog();
    boolean var37 = var12.getAutoClose();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var38 = var12.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test130() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getSQLStateType();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var23);
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var46 = var13.getSuperTypes(var24, "", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.Utils.delFile("hi!");
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var45.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test131() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsCoreSQLGrammar();
    boolean var22 = var13.supportsSchemasInIndexDefinitions();
    boolean var23 = var13.supportsSubqueriesInComparisons();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test132() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    java.sql.SQLXML var16 = var12.createSQLXML();
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("");
    com.sqlmagic.tinysql.dbfFile var19 = new com.sqlmagic.tinysql.dbfFile("");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var20 = var12.prepareStatement("");
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test133() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getDatabaseProductName();
    boolean var24 = var13.storesUpperCaseQuotedIdentifiers();
    java.lang.String var25 = var13.getSystemFunctions();
    boolean var26 = var13.supportsTransactions();
    boolean var27 = var13.supportsUnionAll();
    boolean var28 = var13.supportsDifferentTableCorrelationNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "tinySQL"+ "'", var23.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test134() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var28 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var29);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var31 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var30);
    boolean var32 = var31.isCatalogAtStart();
    int var33 = var31.getMaxColumnsInIndex();
    boolean var34 = var13.ownUpdatesAreVisible(var33);
    boolean var35 = var13.supportsCoreSQLGrammar();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test135() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag(var24, var26, var35);
    java.util.Enumeration var37 = var36.keys();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var47 = var36.put((java.lang.Object)var39, (java.lang.Object)var46);
    java.lang.Object[] var48 = new java.lang.Object[] { var39};
    java.sql.Array var49 = var12.createArrayOf("hi!", var48);
    var12.clearWarnings();
    java.sql.Clob var51 = var12.createClob();
    com.sqlmagic.tinysql.tinySQL var52 = var12.get_tinySQL();
    double var56 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var59 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var60 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var62 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var63 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var65 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var64);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var65);
    boolean var68 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var69 = var66.supportsResultSetType(0);
    boolean var70 = var66.supportsSelectForUpdate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.setReadOnly(var70);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var21.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test136() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var19 = var18.nullsAreSortedAtEnd();
    int var20 = var18.getMaxTableNameLength();
    java.lang.String var21 = var18.getDatabaseProductName();
    boolean var23 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var25 = var18.ownInsertsAreVisible(0);
    int var26 = var18.getMaxTablesInSelect();
    int var27 = var18.getJDBCMajorVersion();
    boolean var28 = var4.isWritable(var27);
    int var29 = var4.getColumnCount();
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var40 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var42 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var41);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var43 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var42);
    boolean var45 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var46 = var43.supportsResultSetType(0);
    boolean var47 = var43.supportsOpenCursorsAcrossCommit();
    boolean var48 = var43.supportsMixedCaseIdentifiers();
    boolean var49 = var43.supportsStatementPooling();
    int var50 = var43.getMaxStatementLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var51 = var4.getColumnLabel(var50);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinySQL"+ "'", var21.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test137() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var37 = var34.supportsResultSetType(0);
    boolean var38 = var34.supportsOpenCursorsAcrossCommit();
    boolean var39 = var34.supportsCoreSQLGrammar();
    int var40 = var34.getMaxRowSize();
    int var41 = var34.getMaxIndexLength();
    byte[] var42 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var43 = var4.getCatalogName(var41);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);

  }

  public void test138() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    boolean var24 = var13.supportsSchemasInDataManipulation();
    boolean var25 = var13.supportsCoreSQLGrammar();
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var41 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var42 = var39.supportsResultSetType(0);
    boolean var43 = var39.supportsOpenCursorsAcrossCommit();
    boolean var44 = var39.supportsCatalogsInDataManipulation();
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var58 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag(var47, var49, var58);
    boolean var60 = var39.othersUpdatesAreVisible(var49);
    java.sql.ResultSet var61 = var39.getClientInfoProperties();
    int var62 = var39.getMaxColumnsInTable();
    boolean var63 = var13.insertsAreDetected(var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var64 = var13.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test139() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsGroupByUnrelated();
    boolean var22 = var13.supportsSchemasInIndexDefinitions();
    java.lang.String var23 = var13.getDatabaseProductName();
    boolean var24 = var13.supportsColumnAliasing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "tinySQL"+ "'", var23.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test140() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    boolean var29 = var28.isReadOnly();
    java.lang.Object var31 = var14.put((java.lang.Object)var29, (java.lang.Object)true);
    java.util.Set var32 = var14.entrySet();
    java.lang.Object var33 = var14.clone();
    int var34 = var14.countTags();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var35 = var14.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test141() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    int var21 = var13.getJDBCMajorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var22 = var13.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test142() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var19 = var18.nullsAreSortedAtEnd();
    int var20 = var18.getMaxTableNameLength();
    java.lang.String var21 = var18.getDatabaseProductName();
    boolean var23 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var25 = var18.ownInsertsAreVisible(0);
    int var26 = var18.getMaxTablesInSelect();
    int var27 = var18.getJDBCMajorVersion();
    boolean var28 = var4.isWritable(var27);
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var38 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var41 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var40);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var42 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var41);
    boolean var44 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var45 = var42.supportsResultSetType(0);
    boolean var46 = var42.supportsOpenCursorsAcrossCommit();
    boolean var47 = var42.supportsCatalogsInDataManipulation();
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var61 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var62 = new com.sqlmagic.tinysql.SimpleXMLTag(var50, var52, var61);
    boolean var63 = var42.othersUpdatesAreVisible(var52);
    int var64 = var42.getMaxTablesInSelect();
    boolean var65 = var42.supportsStoredFunctionsUsingCallSyntax();
    boolean var66 = var42.supportsSubqueriesInIns();
    int var67 = var42.getDatabaseMinorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var68 = var4.getColumnLabel(var67);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinySQL"+ "'", var21.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test143() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isClosed();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var23 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var26 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var25);
    java.sql.Clob var27 = var26.createClob();
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var35 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var38 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var39 = var26.prepareStatement("hi!", 100);
    var12.setTransactionIsolation(100);
    java.sql.Blob var41 = var12.createBlob();
    var12.disableAutoClose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);

  }

  public void test144() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var1 = var0.getNextException();
    java.lang.String var2 = var0.toString();
    boolean var3 = com.sqlmagic.tinysql.Utils.isFunctionName(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var2.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test145() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    int var2 = var0.getColumnCount();
    java.util.Hashtable var3 = var0.getTableState();
    com.sqlmagic.tinysql.tsResultSet var4 = new com.sqlmagic.tinysql.tsResultSet();
    int var5 = var4.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var6 = var4.getWhereClause();
    int var7 = var4.size();
    var0.setFetchSize(var7);
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var21 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var20);
    java.sql.Clob var22 = var21.createClob();
    int var23 = var21.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var21);
    java.sql.Blob var25 = var21.createBlob();
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var41 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var40);
    boolean var43 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var44 = var41.supportsResultSetType(0);
    boolean var45 = var41.supportsOpenCursorsAcrossCommit();
    boolean var46 = var41.supportsCoreSQLGrammar();
    int var47 = var41.getMaxColumnsInSelect();
    int var48 = var41.getMaxBinaryLiteralLength();
    int var49 = var41.getMaxCursorNameLength();
    double var53 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var59 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var60 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var62 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var61);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var63 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var62);
    boolean var65 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var66 = var63.supportsResultSetType(0);
    int var67 = var63.getMaxIndexLength();
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var77 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var78 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var79 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var80 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var79);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var81 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var80);
    boolean var83 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var84 = var81.supportsResultSetType(0);
    boolean var85 = var81.supportsOpenCursorsAcrossCommit();
    int var86 = var81.getMaxCharLiteralLength();
    java.sql.CallableStatement var87 = var21.prepareCall("hi!", var49, var67, var86);
    var0.setFetchSize(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);

  }

  public void test146() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.autoCommitFailureClosesAllResultSets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test147() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var19 = var18.nullsAreSortedAtEnd();
    int var20 = var18.getMaxTableNameLength();
    java.lang.String var21 = var18.getDatabaseProductName();
    boolean var23 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var25 = var18.ownInsertsAreVisible(0);
    int var26 = var18.getMaxTablesInSelect();
    int var27 = var18.getJDBCMajorVersion();
    boolean var28 = var4.isWritable(var27);
    int var29 = var4.getColumnCount();
    com.sqlmagic.tinysql.tsResultSet var30 = new com.sqlmagic.tinysql.tsResultSet();
    int var31 = var30.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var32 = var30.getWhereClause();
    int var33 = var30.getLevel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var34 = var4.getPrecision(var33);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinySQL"+ "'", var21.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test148() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var6 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.removeQuotes(var7);
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString(var8);
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var7.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var8.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test149() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    int var36 = var13.getJDBCMinorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var37 = var13.getSchemaTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test150() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    int var34 = var33.getHoldability();
    boolean var35 = var4.isDefinitelyWritable(var34);
    double var39 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var45 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var46 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var48 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var47);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var49 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var48);
    boolean var51 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var52 = var49.supportsResultSetType(0);
    int var53 = var49.getMaxIndexLength();
    boolean var54 = var4.isWritable(var53);
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var64 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var65 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var67 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var66);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var68 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var67);
    boolean var70 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var71 = var68.supportsResultSetType(0);
    boolean var72 = var68.supportsOpenCursorsAcrossCommit();
    boolean var73 = var68.supportsCoreSQLGrammar();
    int var74 = var68.getMaxRowSize();
    int var75 = var68.getSQLStateType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var76 = var4.getColumnLabel(var75);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);

  }

  public void test151() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var20 = var13.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test152() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isClosed();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var23 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var26 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var25);
    java.sql.Clob var27 = var26.createClob();
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var35 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var38 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var39 = var26.prepareStatement("hi!", 100);
    var12.setTransactionIsolation(100);
    java.sql.SQLXML var41 = var12.createSQLXML();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);

  }

  public void test153() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var19 = new com.sqlmagic.tinysql.SimpleXMLTag(var7, var9, var18);
    byte[] var20 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var21 = var4.getColumnDisplaySize(var9);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test154() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSubqueriesInIns();
    java.lang.String var16 = var13.getDriverVersion();
    java.lang.String var17 = var13.getDatabaseProductVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var18 = var13.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2.26h"+ "'", var16.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "2.26h"+ "'", var17.equals("2.26h"));

  }

  public void test155() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsAlterTableWithAddColumn();
    boolean var31 = var13.allTablesAreSelectable();
    boolean var32 = var13.supportsGroupByUnrelated();
    boolean var33 = var13.supportsSubqueriesInQuantifieds();
    boolean var34 = var13.supportsStatementPooling();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test156() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var25 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.sql.ResultSet var57 = var15.getSuperTypes("hi!", var31, var56);
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var66 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var69 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var72 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var73 = new com.sqlmagic.tinysql.SimpleXMLTag(var61, var63, var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var74 = com.sqlmagic.tinysql.UtilString.findTableForAlias(var31, var72);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);

  }

  public void test157() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    int var79 = var13.getDatabaseMajorVersion();
    boolean var80 = var13.supportsOrderByUnrelated();
    boolean var81 = var13.supportsPositionedDelete();
    int var82 = var13.getMaxTablesInSelect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);

  }

  public void test158() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    com.sqlmagic.tinysql.tinySQLException var16 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var17 = var16.iterator();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var25 = var14.put((java.lang.Object)var17, (java.lang.Object)var24);
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var40 = var39.isCatalogAtStart();
    int var41 = var39.getSQLStateType();
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var49);
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var60 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var61 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var63 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var62);
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var70 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var72 = var39.getSuperTypes(var50, "", "hi!");
    boolean var73 = var39.allProceduresAreCallable();
    boolean var74 = var14.equals((java.lang.Object)var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var75 = var39.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var49.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var50.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var71.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test159() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    int var21 = var13.getJDBCMajorVersion();
    java.sql.Connection var22 = var13.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test160() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    java.sql.NClob var14 = var12.createNClob();
    boolean var15 = var12.getAutoClose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test161() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var19 = var18.nullsAreSortedAtEnd();
    int var20 = var18.getMaxTableNameLength();
    java.lang.String var21 = var18.getDatabaseProductName();
    boolean var23 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var25 = var18.ownInsertsAreVisible(0);
    int var26 = var18.getMaxTablesInSelect();
    int var27 = var18.getJDBCMajorVersion();
    boolean var28 = var4.isWritable(var27);
    int var29 = var4.getColumnCount();
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var40 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var42 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var41);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var43 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var42);
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var50 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var65 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var66 = new com.sqlmagic.tinysql.SimpleXMLTag(var54, var56, var65);
    java.util.Enumeration var67 = var66.keys();
    com.sqlmagic.tinysql.tinySQLException var68 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var69 = var68.iterator();
    double var72 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var76 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var77 = var66.put((java.lang.Object)var69, (java.lang.Object)var76);
    java.lang.Object[] var78 = new java.lang.Object[] { var69};
    java.sql.Array var79 = var42.createArrayOf("hi!", var78);
    var42.clearWarnings();
    int var81 = var42.getHoldability();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var82 = var4.getScale(var81);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinySQL"+ "'", var21.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var51.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);

  }

  public void test162() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.supportsGetGeneratedKeys();
    boolean var15 = var13.supportsDataManipulationTransactionsOnly();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var30 = var29.nullsAreSortedAtEnd();
    int var31 = var29.getMaxTableNameLength();
    java.lang.String var32 = var29.getDatabaseProductName();
    boolean var34 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var35 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var36 = var29.ownInsertsAreVisible(0);
    int var37 = var29.getMaxTablesInSelect();
    boolean var38 = var29.supportsGroupByUnrelated();
    java.lang.String var39 = var29.getDatabaseProductName();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var50 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var53 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var54 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var56 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName("hi!");
    java.sql.ResultSet var67 = var13.getSuperTypes(var39, "hi!", "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var68 = com.sqlmagic.tinysql.UtilString.dateValue("hi!");
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "tinySQL"+ "'", var32.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "tinySQL"+ "'", var39.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "COL00000"+ "'", var65.equals("COL00000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);

  }

  public void test163() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getMaxRows();
    var65.clearWarnings();
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    com.sqlmagic.tinysql.tinySQLException var72 = new com.sqlmagic.tinysql.tinySQLException("");
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var82 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var83 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var84 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var85 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var84);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var86 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var85);
    boolean var87 = var86.isCatalogAtStart();
    int var88 = var86.getMaxColumnsInIndex();
    boolean var89 = var86.supportsColumnAliasing();
    boolean var90 = var86.doesMaxRowSizeIncludeBlobs();
    int var91 = var86.getMaxColumnNameLength();
    int var92 = var65.executeUpdate("", var91);
    com.sqlmagic.tinysql.tinySQLException var93 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var94 = var93.getNextException();
    java.lang.String var95 = var93.toString();
    com.sqlmagic.tinysql.tinySQLException var96 = new com.sqlmagic.tinysql.tinySQLException();
    var93.setNextException((java.sql.SQLException)var96);
    int var98 = var96.getErrorCode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var65.setFetchDirection(var98);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var95.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 0);

  }

  public void test164() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    com.sqlmagic.tinysql.tsResultSet var21 = new com.sqlmagic.tinysql.tsResultSet();
    int var22 = var21.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var23 = var21.getWhereClause();
    int var24 = var21.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var25 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var21);
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var40 = var39.nullsAreSortedAtEnd();
    int var41 = var39.getMaxTableNameLength();
    java.lang.String var42 = var39.getDatabaseProductName();
    boolean var44 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var45 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var46 = var39.ownInsertsAreVisible(0);
    int var47 = var39.getMaxTablesInSelect();
    int var48 = var39.getJDBCMajorVersion();
    boolean var49 = var25.isWritable(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var50 = var4.getTableName(var48);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "tinySQL"+ "'", var42.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test165() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    boolean var19 = var13.autoCommitFailureClosesAllResultSets();
    boolean var20 = var13.supportsDataManipulationTransactionsOnly();
    boolean var21 = var13.supportsExpressionsInOrderBy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var22 = var13.getSchemaTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test166() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    int var17 = var15.getMaxColumnNameLength();
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var28 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var29);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var31 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var30);
    boolean var33 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var34 = var31.supportsResultSetType(0);
    boolean var35 = var31.supportsOpenCursorsAcrossCommit();
    boolean var36 = var31.supportsCatalogsInDataManipulation();
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var50 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag(var39, var41, var50);
    boolean var52 = var31.othersUpdatesAreVisible(var41);
    boolean var53 = var15.othersInsertsAreVisible(var41);
    java.sql.ResultSet var54 = var15.getClientInfoProperties();
    boolean var55 = var15.supportsMultipleResultSets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test167() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var8 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    java.sql.Clob var34 = var33.createClob();
    int var35 = var33.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var36 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    java.sql.SQLXML var37 = var33.createSQLXML();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var50 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var49);
    java.sql.Clob var51 = var50.createClob();
    int var52 = var50.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var50);
    boolean var54 = var53.supportsGroupBy();
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var63 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var64 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var69 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var72 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var76 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var80 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var82 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var84 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var86 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var89 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var91 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var92 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var93 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var94 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.sql.ResultSet var95 = var53.getSuperTypes("hi!", var69, var94);
    var33.setCatalog(var94);
    boolean var97 = com.sqlmagic.tinysql.Utils.renameFile("hi!", var94);
    double var98 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "hi!"+ "'", var92.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi!"+ "'", var94.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 4.9E-324d);

  }

  public void test168() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getSQLStateType();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var23);
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var46 = var13.getSuperTypes(var24, "", "hi!");
    boolean var47 = var13.allProceduresAreCallable();
    boolean var48 = var13.supportsMultipleResultSets();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var49 = var13.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var45.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test169() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsGetGeneratedKeys();
    boolean var18 = var15.supportsMultipleResultSets();
    boolean var19 = var15.supportsMultipleTransactions();
    java.lang.String var20 = var15.getTimeDateFunctions();
    java.lang.String var21 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));

  }

  public void test170() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var79 = com.sqlmagic.tinysql.UtilString.toStandardDate("hi!");
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);

  }

  public void test171() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var1 = var0.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.sqlmagic.tinysql.UtilString.toStandardDate(var1);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var1.equals("com.sqlmagic.tinysql.tinySQLException"));

  }

  public void test172() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsMixedCaseIdentifiers();
    boolean var19 = var13.allProceduresAreCallable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test173() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var40 = new com.sqlmagic.tinysql.SimpleXMLTag(var28, var30, var39);
    java.util.Enumeration var41 = var40.keys();
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.removeQuotes(var49);
    boolean var51 = var40.contains((java.lang.Object)var49);
    java.util.Enumeration var52 = var40.keys();
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var54 = var53.getStatus();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var49.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var50.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);

  }

  public void test174() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getSQLStateType();
    int var16 = var13.getMaxSchemaNameLength();
    java.lang.String var17 = var13.getURL();
    boolean var18 = var13.supportsNonNullableColumns();
    boolean var19 = var13.supportsMixedCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test175() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    java.sql.Blob var16 = var12.createBlob();
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.sql.Savepoint var21 = var12.setSavepoint("hi!");
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var32 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var34 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var33);
    double var37 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var41 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var51 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var59 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var70 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var73 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var74 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var76 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var83 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var84 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var85 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var86 = var33.getConnection("hi!", "hi!", (java.sql.Driver)var85);
    com.sqlmagic.tinysql.tinySQLStatement var87 = new com.sqlmagic.tinysql.tinySQLStatement(var86);
    int var88 = var87.getQueryTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var89 = var12.executetinyUpdate(var87);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi!"+ "'", var84.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);

  }

  public void test176() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    boolean var6 = com.sqlmagic.tinysql.Utils.isCharColumn(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = var4.getColumnClassName(10);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test177() throws Throwable {

    boolean var1 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    double var5 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var9 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var14 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var13);
    java.sql.Clob var15 = var14.createClob();
    int var16 = var14.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var17 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var14);
    java.sql.Blob var18 = var14.createBlob();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.sql.Savepoint var23 = var14.setSavepoint("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);

  }

  public void test178() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var3 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var9 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var8);
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles(var8, "hi!");
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var57 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var64 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var68 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var72 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var82 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var85 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var87 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var88 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var89 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var90 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var91 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var92 = var39.getConnection("hi!", "hi!", (java.sql.Driver)var91);
    com.sqlmagic.tinysql.tinySQLConnection var93 = var0.getConnection(var8, "hi!", (java.sql.Driver)var91);
    int var94 = var0.getMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var8.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var9.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test179() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    java.lang.String var20 = var13.getDriverName();
    boolean var21 = var13.storesUpperCaseQuotedIdentifiers();
    boolean var22 = var13.storesUpperCaseIdentifiers();
    boolean var23 = var13.supportsCorrelatedSubqueries();
    java.sql.ResultSet var24 = var13.getTypeInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var20.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);

  }

  public void test180() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var14 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var15 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var19 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var20 = var12.prepareStatement("hi!", var19);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var21 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var12);
    java.lang.String var22 = var21.getNumericFunctions();
    boolean var23 = var21.supportsANSI92FullSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test181() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsGroupByUnrelated();
    boolean var22 = var13.supportsSchemasInIndexDefinitions();
    java.lang.String var23 = var13.getDatabaseProductName();
    boolean var24 = var13.supportsUnion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "tinySQL"+ "'", var23.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test182() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    boolean var66 = var65.isPoolable();
    double var70 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var73 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var74 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var76 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var77 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var78 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var79 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var78);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var80 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var79);
    boolean var82 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var83 = var80.supportsResultSetType(0);
    boolean var84 = var80.supportsOpenCursorsAcrossCommit();
    int var85 = var80.getMaxCharLiteralLength();
    boolean var86 = var80.supportsSchemasInProcedureCalls();
    boolean var87 = var80.nullsAreSortedAtEnd();
    java.lang.String var88 = var80.getSearchStringEscape();
    boolean var89 = var80.supportsLikeEscapeClause();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var65.setEscapeProcessing(var89);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "\\"+ "'", var88.equals("\\"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test183() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var22 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var46 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var47 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var49 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var48);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var50 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var49);
    boolean var51 = var50.nullsAreSortedAtEnd();
    int var52 = var50.getMaxTableNameLength();
    java.lang.String var53 = var50.getDatabaseProductName();
    boolean var55 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var56 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var57 = var50.ownInsertsAreVisible(0);
    boolean var58 = var36.isValid(0);
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var64 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var67 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var68 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var70 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var71 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var73 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var72);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var74 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var73);
    boolean var76 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var77 = var74.supportsResultSetType(0);
    boolean var78 = var74.supportsOpenCursorsAcrossCommit();
    boolean var79 = var74.supportsCatalogsInDataManipulation();
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var84 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var87 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var89 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var90 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var91 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var93 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var94 = new com.sqlmagic.tinysql.SimpleXMLTag(var82, var84, var93);
    boolean var95 = var74.othersUpdatesAreVisible(var84);
    int var96 = var74.getMaxTablesInSelect();
    int var97 = var74.getMaxStatements();
    java.sql.PreparedStatement var98 = var12.prepareStatement("hi!", 0, var60, var97);
    boolean var99 = com.sqlmagic.tinysql.Utils.isCharColumn(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "tinySQL"+ "'", var53.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test184() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.storesLowerCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test185() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    int var36 = var13.getJDBCMinorVersion();
    boolean var37 = var13.supportsUnion();
    boolean var38 = var13.supportsStoredProcedures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test186() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxColumnsInSelect();
    int var20 = var13.getMaxBinaryLiteralLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = var13.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test187() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsAlterTableWithAddColumn();
    boolean var31 = var13.allTablesAreSelectable();
    boolean var32 = var13.supportsGroupByUnrelated();
    boolean var33 = var13.supportsSubqueriesInQuantifieds();
    boolean var34 = var13.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test188() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    java.lang.String var20 = var13.getDriverName();
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var37 = var34.supportsResultSetType(0);
    boolean var38 = var34.supportsOpenCursorsAcrossCommit();
    boolean var39 = var34.supportsCatalogsInDataManipulation();
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var53 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag(var42, var44, var53);
    boolean var55 = var34.othersUpdatesAreVisible(var44);
    int var56 = var34.getMaxTablesInSelect();
    int var57 = var34.getMaxStatements();
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var72 = new com.sqlmagic.tinysql.SimpleXMLTag(var60, var62, var71);
    com.sqlmagic.tinysql.SimpleXMLTag var73 = new com.sqlmagic.tinysql.SimpleXMLTag(var20, var57, var71);
    boolean var74 = var73.hasMoreTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var20.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test189() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var7 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var22 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag(var11, var13, var22);
    java.util.Enumeration var24 = var23.keys();
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.UtilString.removeQuotes(var32);
    boolean var34 = var23.contains((java.lang.Object)var32);
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var49 = new com.sqlmagic.tinysql.SimpleXMLTag(var37, var39, var48);
    java.util.Enumeration var50 = var49.keys();
    com.sqlmagic.tinysql.tinySQLException var51 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var52 = var51.iterator();
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var60 = var49.put((java.lang.Object)var52, (java.lang.Object)var59);
    java.util.Enumeration var61 = var49.elements();
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var68 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var69 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.UtilString.removeQuotes(var69);
    java.lang.Object var71 = var23.put((java.lang.Object)var49, (java.lang.Object)var70);
    boolean var72 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var70);
    com.sqlmagic.tinysql.Utils.delFile("hi!", var70);
    java.lang.String var74 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toStandardDate(var70);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var32.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var33.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var69.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var70.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var74.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));

  }

  public void test190() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    int var36 = var13.getJDBCMinorVersion();
    boolean var37 = var13.supportsCatalogsInPrivilegeDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test191() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getFetchSize();
    double var5 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var9 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var14 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var13);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var14);
    boolean var17 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var18 = var15.supportsResultSetType(0);
    boolean var19 = var15.supportsOpenCursorsAcrossCommit();
    boolean var20 = var15.supportsCatalogsInDataManipulation();
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    boolean var36 = var15.othersUpdatesAreVisible(var25);
    int var37 = var15.getMaxTablesInSelect();
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var51 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag(var40, var42, var51);
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var72 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var74 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var73);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var75 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var74);
    boolean var76 = var75.isCatalogAtStart();
    boolean var77 = var75.supportsSchemasInTableDefinitions();
    boolean var78 = var75.supportsAlterTableWithDropColumn();
    var0.setState(var37, (java.util.Hashtable)var52, var61, var78);
    boolean var80 = var52.isEmpty();
    java.util.Set var81 = var52.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);

  }

  public void test192() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var25 = com.sqlmagic.tinysql.UtilString.toStandardDate(var24);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));

  }

  public void test193() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    boolean var24 = var13.supportsSchemasInDataManipulation();
    boolean var25 = var13.supportsCoreSQLGrammar();
    boolean var26 = var13.storesLowerCaseQuotedIdentifiers();
    boolean var27 = var13.supportsANSI92EntryLevelSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test194() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getSQLStateType();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var23);
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var46 = var13.getSuperTypes(var24, "", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var47 = var13.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var45.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test195() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getDatabaseProductName();
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "tinySQL"+ "'", var23.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test196() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getExtraNameCharacters();
    boolean var24 = var13.supportsMultipleTransactions();
    boolean var25 = var13.storesLowerCaseQuotedIdentifiers();
    boolean var26 = var13.supportsANSI92FullSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test197() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var14 = var13.getMaxColumnsInIndex();
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var22);
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var23);
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var33 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var37 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var41 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName("hi!");
    double var50 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var53 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var54 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var56 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var57 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var59 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var58);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var60 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var59);
    int var61 = var60.getMaxColumnsInIndex();
    int var62 = var60.getMaxColumnsInOrderBy();
    boolean var63 = var60.supportsPositionedDelete();
    int var64 = var60.getMaxTableNameLength();
    java.lang.String var65 = var60.getStringFunctions();
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType(var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var67 = var13.getExportedKeys(var23, var46, var65);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var22.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "COL00001"+ "'", var46.equals("COL00001"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);

  }

  public void test198() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    java.sql.Blob var16 = var12.createBlob();
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.sql.Savepoint var21 = var12.setSavepoint("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var23 = com.sqlmagic.tinysql.UtilString.dateValue(var22);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));

  }

  public void test199() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSubqueriesInIns();
    java.lang.String var16 = var13.getDriverVersion();
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var28 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var30 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var29);
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var40 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var41 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var43 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var42);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var44 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var43);
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var58 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag(var47, var49, var58);
    boolean var60 = var44.ownDeletesAreVisible(var49);
    boolean var61 = var44.supportsSubqueriesInQuantifieds();
    boolean var62 = var44.supportsStoredProcedures();
    java.lang.String var63 = var44.getDatabaseProductName();
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var77 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var78 = new com.sqlmagic.tinysql.SimpleXMLTag(var66, var68, var77);
    java.util.Enumeration var79 = var78.keys();
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var86 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var87 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var88 = com.sqlmagic.tinysql.UtilString.removeQuotes(var87);
    boolean var89 = var78.contains((java.lang.Object)var87);
    java.sql.ResultSet var90 = var13.getColumns("hi!", var30, var63, var87);
    double var91 = com.sqlmagic.tinysql.UtilString.doubleValue(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2.26h"+ "'", var16.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "tinySQL"+ "'", var63.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var87.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var88.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 4.9E-324d);

  }

  public void test200() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getFetchSize();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var31 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var32 = var29.supportsResultSetType(0);
    boolean var33 = var29.supportsOpenCursorsAcrossCommit();
    boolean var34 = var29.supportsCatalogsInDataManipulation();
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var49 = new com.sqlmagic.tinysql.SimpleXMLTag(var37, var39, var48);
    boolean var50 = var29.othersUpdatesAreVisible(var39);
    int var51 = var29.getMaxTablesInSelect();
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var65 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var66 = new com.sqlmagic.tinysql.SimpleXMLTag(var54, var56, var65);
    double var69 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var72 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var83 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var85 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var86 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var88 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var87);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var89 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var88);
    boolean var90 = var89.isCatalogAtStart();
    boolean var91 = var89.supportsSchemasInTableDefinitions();
    boolean var92 = var89.supportsAlterTableWithDropColumn();
    var14.setState(var51, (java.util.Hashtable)var66, var75, var92);
    boolean var94 = var66.hasMoreTags();
    var12.setTypeMap((java.util.Map)var66);
    java.util.Set var96 = var66.entrySet();
    java.util.Enumeration var97 = var66.keys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var98 = var66.nextTag();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var97 == null);

  }

  public void test201() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsAlterTableWithAddColumn();
    boolean var31 = var13.allTablesAreSelectable();
    boolean var32 = var13.supportsNamedParameters();
    boolean var33 = var13.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test202() throws Throwable {

    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var3 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var5 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var6 = new com.sqlmagic.tinysql.SimpleXMLTag(var4);
      fail("Expected exception of type java.lang.Exception");
    } catch (java.lang.Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));

  }

  public void test203() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxColumnsInSelect();
    int var20 = var13.getMaxBinaryLiteralLength();
    int var21 = var13.getMaxCursorNameLength();
    boolean var22 = com.sqlmagic.tinysql.Utils.isNumberColumn(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test204() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var24);
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var41 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var40);
    boolean var42 = var41.isCatalogAtStart();
    boolean var44 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    boolean var45 = var41.othersInsertsAreVisible(100);
    boolean var46 = var41.supportsSubqueriesInExists();
    com.sqlmagic.tinysql.FieldTokenizer var47 = new com.sqlmagic.tinysql.FieldTokenizer(var25, ' ', var46);
    int var48 = var47.countFields();
    java.lang.String[] var49 = var47.getFields();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);

  }

  public void test205() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsStoredFunctionsUsingCallSyntax();
    boolean var37 = var13.supportsSubqueriesInIns();
    int var38 = var13.getDatabaseMinorVersion();
    com.sqlmagic.tinysql.tsResultSet var39 = new com.sqlmagic.tinysql.tsResultSet();
    int var40 = var39.getFetchSize();
    int var41 = var39.getType();
    boolean var42 = var13.supportsResultSetHoldability(var41);
    boolean var43 = var13.supportsSchemasInIndexDefinitions();
    java.lang.String var44 = var13.getTimeDateFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));

  }

  public void test206() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsCoreSQLGrammar();
    boolean var22 = var13.supportsSchemasInIndexDefinitions();
    boolean var23 = var13.supportsCatalogsInPrivilegeDefinitions();
    boolean var24 = var13.supportsGroupByUnrelated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test207() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var50 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag(var39, var41, var50);
    java.util.Enumeration var52 = var51.keys();
    com.sqlmagic.tinysql.tinySQLException var53 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var54 = var53.iterator();
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var62 = var51.put((java.lang.Object)var54, (java.lang.Object)var61);
    java.lang.Object[] var63 = new java.lang.Object[] { var54};
    java.sql.Array var64 = var27.createArrayOf("hi!", var63);
    double var67 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var71 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var72 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var73 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var77 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var80 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var81 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    boolean var85 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    var12.setClientInfo("hi!", "hi!");
    com.sqlmagic.tinysql.tinySQL var87 = var12.get_tinySQL();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var88 = var87.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test208() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var11.jdbcCompliant();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var23 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var26 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var25);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var27 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var26);
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var41 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var42 = new com.sqlmagic.tinysql.SimpleXMLTag(var30, var32, var41);
    boolean var43 = var27.ownDeletesAreVisible(var32);
    boolean var44 = var27.supportsAlterTableWithAddColumn();
    java.lang.String var45 = var27.getDatabaseProductVersion();
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var56 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var58 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var57);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var59 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var58);
    boolean var60 = var59.nullsAreSortedAtEnd();
    int var61 = var59.getMaxTableNameLength();
    java.lang.String var62 = var59.getDatabaseProductName();
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    double var67 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var71 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var73 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var74 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var75 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var76 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var75);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var77 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var76);
    boolean var78 = var77.nullsAreSortedAtEnd();
    int var79 = var77.getMaxTableNameLength();
    java.lang.String var80 = var77.getDatabaseProductName();
    boolean var81 = var63.acceptsURL(var80);
    com.sqlmagic.tinysql.tinySQLConnection var82 = var11.getConnection(var45, var62, (java.sql.Driver)var63);
    boolean var83 = var63.jdbcCompliant();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "2.26h"+ "'", var45.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "tinySQL"+ "'", var62.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "tinySQL"+ "'", var80.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test209() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    int var79 = var13.getDatabaseMajorVersion();
    int var80 = var13.getMaxCursorNameLength();
    boolean var81 = var13.supportsTransactions();
    int var82 = var13.getResultSetHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);

  }

  public void test210() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var25 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.sql.ResultSet var57 = var15.getSuperTypes("hi!", var31, var56);
    com.sqlmagic.tinysql.dbfFile var58 = new com.sqlmagic.tinysql.dbfFile(var31);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var59 = var58.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test211() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxColumnsInSelect();
    java.lang.String var36 = var13.getDatabaseProductVersion();
    boolean var37 = var13.supportsGroupBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "2.26h"+ "'", var36.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test212() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.getMoreResults();
    var65.close();
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var72 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var73 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var74 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var73);
    boolean var75 = com.sqlmagic.tinysql.UtilString.isInteger(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var65.setCursorName(var73);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test213() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsCoreSQLGrammar();
    int var23 = var13.getMaxTableNameLength();
    boolean var24 = var13.supportsSavepoints();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test214() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsStoredFunctionsUsingCallSyntax();
    boolean var37 = var13.supportsSubqueriesInIns();
    int var38 = var13.getJDBCMajorVersion();
    boolean var39 = var13.storesUpperCaseIdentifiers();
    boolean var40 = var13.supportsExtendedSQLGrammar();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test215() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    com.sqlmagic.tinysql.tinySQLException var16 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var17 = var16.iterator();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var25 = var14.put((java.lang.Object)var17, (java.lang.Object)var24);
    boolean var26 = var14.isEmpty();
    int var27 = var14.countTags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var28 = var14.nextTag();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);

  }

  public void test216() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var12.getAutoClose();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var26 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var27 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var29 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var28);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var30 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var29);
    boolean var32 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var33 = var30.supportsResultSetType(0);
    boolean var34 = var30.supportsOpenCursorsAcrossCommit();
    boolean var35 = var30.supportsMixedCaseIdentifiers();
    boolean var36 = var30.supportsStatementPooling();
    int var37 = var30.getMaxStatementLength();
    boolean var38 = var12.isValid(var37);
    java.sql.Savepoint var39 = var12.setSavepoint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var40 = var12.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test217() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsDifferentTableCorrelationNames();
    com.sqlmagic.tinysql.tsResultSet var22 = new com.sqlmagic.tinysql.tsResultSet();
    int var23 = var22.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var24 = var22.getWhereClause();
    int var25 = var22.numcols();
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    boolean var28 = var26.isGrouped();
    com.sqlmagic.tinysql.tsResultSet var29 = new com.sqlmagic.tinysql.tsResultSet();
    int var30 = var29.getFetchSize();
    int var31 = var29.size();
    int var32 = var29.getColumnCount();
    int var33 = var29.getFetchSize();
    var26.setFetchSize(var33);
    boolean var35 = var13.supportsResultSetConcurrency(var25, var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test218() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag(var24, var26, var35);
    java.util.Enumeration var37 = var36.keys();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var47 = var36.put((java.lang.Object)var39, (java.lang.Object)var46);
    java.lang.Object[] var48 = new java.lang.Object[] { var39};
    java.sql.Array var49 = var12.createArrayOf("hi!", var48);
    var12.clearWarnings();
    java.sql.Clob var51 = var12.createClob();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var52 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var12);
    boolean var53 = var52.supportsConvert();
    boolean var54 = var52.supportsExtendedSQLGrammar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var55 = var52.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var21.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test219() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var19 = var18.nullsAreSortedAtEnd();
    int var20 = var18.getMaxTableNameLength();
    java.lang.String var21 = var18.getDatabaseProductName();
    boolean var23 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var25 = var18.ownInsertsAreVisible(0);
    int var26 = var18.getMaxTablesInSelect();
    int var27 = var18.getJDBCMajorVersion();
    boolean var28 = var4.isWritable(var27);
    int var29 = var4.getColumnCount();
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var40 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var42 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var41);
    java.sql.Clob var43 = var42.createClob();
    int var44 = var42.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var45 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var42);
    boolean var46 = var45.supportsGroupBy();
    boolean var47 = var45.supportsGetGeneratedKeys();
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var57 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var58 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var60 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var59);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    boolean var63 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var64 = var61.supportsResultSetType(0);
    boolean var65 = var61.supportsOpenCursorsAcrossCommit();
    boolean var66 = var61.supportsCatalogsInDataManipulation();
    int var67 = var61.getMaxColumnsInGroupBy();
    boolean var68 = var45.ownUpdatesAreVisible(var67);
    boolean var69 = var4.isCaseSensitive(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinySQL"+ "'", var21.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);

  }

  public void test220() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.isClosed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var68 = var65.getResultSetConcurrency();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test221() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    java.sql.Statement var15 = var12.createStatement();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var30 = var29.isCatalogAtStart();
    int var31 = var29.getMaxColumnsInIndex();
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var41 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var42 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var44 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var43);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var45 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var44);
    boolean var47 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var48 = var45.supportsResultSetType(0);
    boolean var49 = var45.supportsOpenCursorsAcrossCommit();
    boolean var50 = var45.supportsCoreSQLGrammar();
    int var51 = var45.getMaxRowSize();
    int var52 = var45.getMaxIndexLength();
    int var53 = var45.getMaxProcedureNameLength();
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var63 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var64 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var65 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var66 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var65);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var67 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var66);
    boolean var69 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var70 = var67.supportsResultSetType(0);
    boolean var71 = var67.supportsOpenCursorsAcrossCommit();
    boolean var72 = var67.supportsCatalogsInDataManipulation();
    int var73 = var67.getMaxColumnsInGroupBy();
    boolean var74 = var29.supportsResultSetConcurrency(var53, var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.setReadOnly(var74);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test222() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsAlterTableWithAddColumn();
    boolean var31 = var13.allTablesAreSelectable();
    boolean var32 = var13.supportsAlterTableWithAddColumn();
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var39 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var40);
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var58 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var61 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var65 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var67 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var75 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var75);
    java.lang.String var77 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName(var76);
    java.lang.String var78 = com.sqlmagic.tinysql.UtilString.removeQuotes(var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var79 = var13.getTablePrivileges(var41, "hi!", var76);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var40.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var41.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var75.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var76.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "COL00003"+ "'", var77.equals("COL00003"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var78.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));

  }

  public void test223() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var3 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var9 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var8);
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles(var8, "hi!");
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var57 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var64 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var68 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var72 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var82 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var85 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var87 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var88 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var89 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var90 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var91 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var92 = var39.getConnection("hi!", "hi!", (java.sql.Driver)var91);
    com.sqlmagic.tinysql.tinySQLConnection var93 = var0.getConnection(var8, "hi!", (java.sql.Driver)var91);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var94 = com.sqlmagic.tinysql.UtilString.toStandardDate(var8);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var8.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var9.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);

  }

  public void test224() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getFetchSize();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var31 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var32 = var29.supportsResultSetType(0);
    boolean var33 = var29.supportsOpenCursorsAcrossCommit();
    boolean var34 = var29.supportsCatalogsInDataManipulation();
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var49 = new com.sqlmagic.tinysql.SimpleXMLTag(var37, var39, var48);
    boolean var50 = var29.othersUpdatesAreVisible(var39);
    int var51 = var29.getMaxTablesInSelect();
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var65 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var66 = new com.sqlmagic.tinysql.SimpleXMLTag(var54, var56, var65);
    double var69 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var72 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var83 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var85 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var86 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var88 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var87);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var89 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var88);
    boolean var90 = var89.isCatalogAtStart();
    boolean var91 = var89.supportsSchemasInTableDefinitions();
    boolean var92 = var89.supportsAlterTableWithDropColumn();
    var14.setState(var51, (java.util.Hashtable)var66, var75, var92);
    boolean var94 = var66.hasMoreTags();
    var12.setTypeMap((java.util.Map)var66);
    java.util.Enumeration var96 = var66.elements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);

  }

  public void test225() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsSubqueriesInQuantifieds();
    java.lang.String var31 = var13.getStringFunctions();
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    boolean var40 = var13.othersDeletesAreVisible(100);
    boolean var41 = var13.supportsStoredProcedures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var39.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test226() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var25 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.sql.ResultSet var57 = var15.getSuperTypes("hi!", var31, var56);
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var64 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var69 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var72 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var75 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var76 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var77 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var78 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var77);
    com.sqlmagic.tinysql.textFileConnection var79 = new com.sqlmagic.tinysql.textFileConnection(var56, "hi!", (java.sql.Driver)var77);
    boolean var80 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test227() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    int var21 = var13.getDriverMinorVersion();
    boolean var22 = var13.supportsTransactions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test228() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    boolean var16 = var13.nullPlusNonNullIsNull();
    java.lang.String var17 = var13.getIdentifierQuoteString();
    com.sqlmagic.tinysql.tsResultSet var18 = new com.sqlmagic.tinysql.tsResultSet();
    java.util.Vector var19 = var18.getTables();
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var30 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var32 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var31);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var33 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var32);
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag(var44, var46, var55);
    java.util.Enumeration var57 = var56.keys();
    com.sqlmagic.tinysql.tinySQLException var58 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var59 = var58.iterator();
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var67 = var56.put((java.lang.Object)var59, (java.lang.Object)var66);
    java.lang.Object[] var68 = new java.lang.Object[] { var59};
    java.sql.Array var69 = var32.createArrayOf("hi!", var68);
    var32.clearWarnings();
    java.sql.Clob var71 = var32.createClob();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var72 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var32);
    java.sql.DatabaseMetaData var73 = var32.getMetaData();
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var81 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.lang.String var83 = var32.nativeSQL("hi!");
    int var86 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var87 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var88 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var89 = com.sqlmagic.tinysql.UtilString.toYMD(var88);
    com.sqlmagic.tinysql.tinySQLException var90 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var91 = var90.getNextException();
    java.lang.String var92 = var90.toString();
    int var93 = com.sqlmagic.tinysql.UtilString.getValueType(var92);
    double var95 = com.sqlmagic.tinysql.UtilString.doubleValue(var92, 100.0d);
    double var96 = com.sqlmagic.tinysql.UtilString.doubleValue(var88, 100.0d);
    double var97 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", var96);
    com.sqlmagic.tinysql.Utils.setPriority(var19, "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var99 = com.sqlmagic.tinysql.UtilString.findTableAlias(var17, var19);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "\""+ "'", var17.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var41.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var92.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 100.0d);

  }

  public void test229() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsAlterTableWithAddColumn();
    boolean var31 = var13.allTablesAreSelectable();
    boolean var32 = var13.supportsGroupByUnrelated();
    boolean var33 = var13.supportsMultipleOpenResults();
    boolean var34 = var13.nullsAreSortedAtEnd();
    java.lang.String var35 = var13.getSystemFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var36 = com.sqlmagic.tinysql.UtilString.dateValue(var35);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));

  }

  public void test230() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getSQLStateType();
    int var16 = var13.getMaxSchemaNameLength();
    java.lang.String var17 = var13.getURL();
    boolean var18 = var13.supportsSchemasInPrivilegeDefinitions();
    boolean var19 = var13.supportsIntegrityEnhancementFacility();
    boolean var20 = var13.supportsOpenStatementsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test231() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    int var22 = var13.getJDBCMajorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var23 = var13.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test232() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test233() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getExtraNameCharacters();
    boolean var24 = var13.supportsMultipleTransactions();
    boolean var25 = var13.storesLowerCaseQuotedIdentifiers();
    boolean var26 = var13.supportsGetGeneratedKeys();
    int var27 = var13.getDriverMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);

  }

  public void test234() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsMixedCaseIdentifiers();
    boolean var19 = var13.supportsOpenStatementsAcrossCommit();
    java.sql.RowIdLifetime var20 = var13.getRowIdLifetime();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);

  }

  public void test235() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.supportsGetGeneratedKeys();
    boolean var15 = var13.supportsDataManipulationTransactionsOnly();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var16 = var13.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test236() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    boolean var24 = var13.supportsSchemasInDataManipulation();
    boolean var25 = var13.supportsCoreSQLGrammar();
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var41 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var42 = var39.supportsResultSetType(0);
    boolean var43 = var39.supportsOpenCursorsAcrossCommit();
    boolean var44 = var39.supportsCatalogsInDataManipulation();
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var58 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag(var47, var49, var58);
    boolean var60 = var39.othersUpdatesAreVisible(var49);
    java.sql.ResultSet var61 = var39.getClientInfoProperties();
    int var62 = var39.getMaxColumnsInTable();
    boolean var63 = var13.insertsAreDetected(var62);
    boolean var64 = var13.supportsSubqueriesInExists();
    boolean var65 = var13.supportsTableCorrelationNames();
    int var66 = var13.getMaxCatalogNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test237() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag(var24, var26, var35);
    java.util.Enumeration var37 = var36.keys();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var47 = var36.put((java.lang.Object)var39, (java.lang.Object)var46);
    java.lang.Object[] var48 = new java.lang.Object[] { var39};
    java.sql.Array var49 = var12.createArrayOf("hi!", var48);
    var12.clearWarnings();
    java.sql.Clob var51 = var12.createClob();
    int var52 = var12.getTransactionIsolation();
    int var53 = var12.getHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var21.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);

  }

  public void test238() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    java.sql.DatabaseMetaData var14 = var12.getMetaData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);

  }

  public void test239() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    java.lang.String var3 = var0.toString();
    com.sqlmagic.tinysql.tsResultSet var4 = new com.sqlmagic.tinysql.tsResultSet();
    int var5 = var4.getLevel();
    boolean var7 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var8 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var22 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag(var11, var13, var22);
    java.util.Enumeration var24 = var23.keys();
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    boolean var38 = var37.isReadOnly();
    java.lang.Object var40 = var23.put((java.lang.Object)var38, (java.lang.Object)true);
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var49 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var50 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var53 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var61 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var65 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var67 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var70 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var73 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var74 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var75);
    boolean var77 = com.sqlmagic.tinysql.UtilString.isInteger(var76);
    var4.setState(100, (java.util.Hashtable)var23, "hi!", var77);
    int var80 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var81 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.forceToSize(var3, 100, "hi!");
    boolean var84 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var85 = com.sqlmagic.tinysql.UtilString.dateValue("hi!");
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var3.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi!"+ "'", var81.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\nhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var83.equals("\nColumns in ResultSet\n\nRows in tsResultSet\nhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test240() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var35 = var34.isCatalogAtStart();
    int var36 = var34.getSQLStateType();
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var44);
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var56 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var58 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var57);
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var67 = var34.getSuperTypes(var45, "", "hi!");
    int var68 = var34.getDatabaseMajorVersion();
    boolean var69 = var4.isWritable(var68);
    double var73 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var79 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var80 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var81 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var82 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var81);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var83 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var82);
    boolean var85 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var86 = var83.supportsResultSetType(0);
    boolean var87 = var83.supportsOpenCursorsAcrossCommit();
    boolean var88 = var83.supportsCatalogsInDataManipulation();
    int var89 = var83.getMaxColumnsInGroupBy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var90 = var4.getTableName(var89);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var44.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var45.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var66.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test241() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag(var24, var26, var35);
    java.util.Enumeration var37 = var36.keys();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var47 = var36.put((java.lang.Object)var39, (java.lang.Object)var46);
    java.lang.Object[] var48 = new java.lang.Object[] { var39};
    java.sql.Array var49 = var12.createArrayOf("hi!", var48);
    com.sqlmagic.tinysql.dbfFile var50 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var60 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var61 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var63 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var62);
    boolean var65 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var66 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var70 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var71 = var63.prepareStatement("hi!", var70);
    com.sqlmagic.tinysql.tinySQLStatement var72 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var73 = var50.sqlexec(var72);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var21.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);

  }

  public void test242() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    boolean var30 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var31 = var28.supportsResultSetType(0);
    boolean var32 = var28.supportsOpenCursorsAcrossCommit();
    boolean var33 = var28.supportsCatalogsInDataManipulation();
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var48 = new com.sqlmagic.tinysql.SimpleXMLTag(var36, var38, var47);
    boolean var49 = var28.othersUpdatesAreVisible(var38);
    int var50 = var28.getMaxTablesInSelect();
    boolean var51 = var28.supportsStoredFunctionsUsingCallSyntax();
    boolean var52 = var28.supportsSubqueriesInIns();
    int var53 = var28.getJDBCMajorVersion();
    java.lang.Object var54 = var14.remove((java.lang.Object)var28);
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var64 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var65 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var67 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var66);
    boolean var68 = var67.isReadOnly();
    boolean var69 = var67.getAutoClose();
    double var73 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var79 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var80 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var81 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var82 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var81);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var83 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var82);
    int var84 = var83.getMaxColumnsInIndex();
    boolean var85 = var67.isValid(var84);
    java.sql.Statement var86 = var67.createStatement();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var87 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var67);
    int var88 = var87.getMaxColumnsInTable();
    boolean var89 = var28.supportsTransactionIsolationLevel(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test243() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getExtraNameCharacters();
    boolean var24 = var13.supportsMultipleTransactions();
    java.lang.String var25 = var13.getExtraNameCharacters();
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test244() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.getMoreResults();
    var65.close();
    boolean var69 = var65.isClosed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var70 = var65.getResultSetType();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test245() throws Throwable {

    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var3 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var4);
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var7 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var5);
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));

  }

  public void test246() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    boolean var18 = var13.supportsSchemasInIndexDefinitions();
    boolean var19 = var13.dataDefinitionCausesTransactionCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test247() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    boolean var39 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var40 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var44 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var45 = var37.prepareStatement("hi!", var44);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var46 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var37);
    java.lang.String var47 = var46.getNumericFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.Utils.delFile("hi!", var47);
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));

  }

  public void test248() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsCoreSQLGrammar();
    int var22 = var13.getDatabaseMajorVersion();
    java.lang.String var23 = var13.getTimeDateFunctions();
    boolean var24 = var13.supportsGetGeneratedKeys();
    boolean var25 = var13.supportsLimitedOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test249() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    int var2 = var0.getColumnCount();
    java.util.Hashtable var3 = var0.getTableState();
    int var4 = var0.getLevel();
    java.util.Vector var5 = var0.getTables();
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var13 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var15 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var18 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var17);
    java.sql.Clob var19 = var18.createClob();
    int var20 = var18.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var21 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var18);
    boolean var22 = var21.supportsGroupBy();
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var31 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var36 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.sql.ResultSet var63 = var21.getSuperTypes("hi!", var37, var62);
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var37);
    boolean var65 = com.sqlmagic.tinysql.Utils.isCharColumn(var64);
    var0.setLevel(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test250() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsCoreSQLGrammar();
    boolean var22 = var13.supportsSubqueriesInQuantifieds();
    java.lang.String var23 = var13.getNumericFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));

  }

  public void test251() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsGroupByUnrelated();
    boolean var22 = var13.supportsSchemasInIndexDefinitions();
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var33 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var35 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var34);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var36 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var35);
    boolean var38 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var39 = var36.supportsResultSetType(0);
    boolean var40 = var36.supportsOpenCursorsAcrossCommit();
    boolean var41 = var36.supportsCoreSQLGrammar();
    int var42 = var36.getMaxColumnsInSelect();
    int var43 = var36.getMaxBinaryLiteralLength();
    int var44 = var36.getMaxCursorNameLength();
    boolean var45 = var13.othersDeletesAreVisible(var44);
    java.lang.String var46 = var13.getNumericFunctions();
    boolean var47 = var13.supportsCatalogsInProcedureCalls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + ""+ "'", var46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test252() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var21 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var25 = var12.prepareStatement("hi!", 100);
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var41 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var42 = var39.supportsResultSetType(0);
    boolean var43 = var39.supportsOpenCursorsAcrossCommit();
    boolean var44 = var39.supportsCoreSQLGrammar();
    int var45 = var39.getMaxRowSize();
    java.lang.String var46 = var39.getDriverName();
    java.lang.String var47 = var12.getClientInfo(var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var48 = com.sqlmagic.tinysql.UtilString.toStandardDate(var46);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var46.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);

  }

  public void test253() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    java.lang.String var20 = var13.getDriverName();
    boolean var21 = var13.supportsTableCorrelationNames();
    boolean var22 = var13.supportsCatalogsInIndexDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var20.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test254() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.getMoreResults();
    java.sql.ResultSet var68 = var65.getResultSet();
    boolean var69 = var65.isClosed();
    double var73 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var79 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var80 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var81 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var82 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var81);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var83 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var82);
    boolean var85 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var86 = var83.supportsResultSetType(0);
    int var87 = var83.getMaxIndexLength();
    int var88 = var83.getMaxCatalogNameLength();
    int var89 = var83.getMaxStatementLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var65.setFetchDirection(var89);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test255() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    boolean var20 = var13.nullsAreSortedAtEnd();
    java.lang.String var21 = var13.getSearchStringEscape();
    boolean var22 = var13.supportsLikeEscapeClause();
    int var23 = var13.getMaxCatalogNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "\\"+ "'", var21.equals("\\"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test256() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    java.lang.String var20 = var13.getDriverName();
    boolean var21 = var13.supportsConvert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var20.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test257() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isClosed();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var23 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var26 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var25);
    java.sql.Clob var27 = var26.createClob();
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var35 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var38 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var39 = var26.prepareStatement("hi!", 100);
    var12.setTransactionIsolation(100);
    java.sql.Blob var41 = var12.createBlob();
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag(var44, var46, var55);
    java.util.Enumeration var57 = var56.keys();
    double var61 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var65 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var67 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var68 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var69 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var70 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var69);
    boolean var71 = var70.isReadOnly();
    java.lang.Object var73 = var56.put((java.lang.Object)var71, (java.lang.Object)true);
    var12.setAutoCommit(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);

  }

  public void test258() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tsResultSet var5 = new com.sqlmagic.tinysql.tsResultSet();
    int var6 = var5.getLevel();
    int var7 = var5.getColumnCount();
    java.util.Hashtable var8 = var5.getTableState();
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var21 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var20);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var22 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var21);
    boolean var24 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var25 = var22.supportsResultSetType(0);
    boolean var26 = var22.supportsOpenCursorsAcrossCommit();
    boolean var27 = var22.supportsCoreSQLGrammar();
    int var28 = var22.getMaxColumnsInSelect();
    var5.setLevel(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var30 = var4.getCatalogName(var28);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 10000);

  }

  public void test259() throws Throwable {

    com.sqlmagic.tinysql.textFile var0 = new com.sqlmagic.tinysql.textFile();
    double var4 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var8 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var10 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var12 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var13 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var12);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var65 = var12.getConnection("hi!", "hi!", (java.sql.Driver)var64);
    com.sqlmagic.tinysql.tinySQLStatement var66 = new com.sqlmagic.tinysql.tinySQLStatement(var65);
    int var67 = var66.getQueryTimeout();
    boolean var68 = var66.getMoreResults();
    boolean var70 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var71 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    var66.setMaxFieldSize(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var73 = var0.sqlexec(var66);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);

  }

  public void test260() throws Throwable {

    com.sqlmagic.tinysql.textFile var0 = new com.sqlmagic.tinysql.textFile();
    double var4 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var8 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var10 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var12 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var13 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var12);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var65 = var12.getConnection("hi!", "hi!", (java.sql.Driver)var64);
    com.sqlmagic.tinysql.tinySQLStatement var66 = new com.sqlmagic.tinysql.tinySQLStatement(var65);
    int var67 = var66.getQueryTimeout();
    var66.cancel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var69 = var0.sqlexec(var66);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test261() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    boolean var15 = var13.supportsLikeEscapeClause();
    int var16 = var13.getMaxColumnsInIndex();
    java.sql.ResultSet var17 = var13.getTableTypes();
    boolean var18 = var13.allProceduresAreCallable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test262() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getMaxRows();
    var65.clearWarnings();
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    com.sqlmagic.tinysql.tinySQLException var72 = new com.sqlmagic.tinysql.tinySQLException("");
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var82 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var83 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var84 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var85 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var84);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var86 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var85);
    boolean var87 = var86.isCatalogAtStart();
    int var88 = var86.getMaxColumnsInIndex();
    boolean var89 = var86.supportsColumnAliasing();
    boolean var90 = var86.doesMaxRowSizeIncludeBlobs();
    int var91 = var86.getMaxColumnNameLength();
    int var92 = var65.executeUpdate("", var91);
    boolean var93 = com.sqlmagic.tinysql.Utils.isNumberColumn(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test263() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsGetGeneratedKeys();
    boolean var18 = var15.supportsMultipleResultSets();
    boolean var19 = var15.supportsMultipleTransactions();
    java.lang.String var20 = var15.getTimeDateFunctions();
    boolean var21 = var15.autoCommitFailureClosesAllResultSets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test264() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    java.sql.Clob var18 = var17.createClob();
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var29 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var30 = var17.prepareStatement("hi!", 100);
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var40 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var41 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var43 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var42);
    boolean var44 = var43.isClosed();
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var55 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var56 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var57 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var56);
    java.sql.Clob var58 = var57.createClob();
    double var61 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var65 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var66 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var68 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var69 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var70 = var57.prepareStatement("hi!", 100);
    var43.setTransactionIsolation(100);
    double var75 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var78 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var79 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var81 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var82 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var83 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var84 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var83);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var85 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var84);
    boolean var87 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var88 = var85.supportsResultSetType(0);
    com.sqlmagic.tinysql.tsResultSet var89 = new com.sqlmagic.tinysql.tsResultSet();
    int var90 = var89.getFetchSize();
    java.sql.Statement var91 = var17.createStatement(100, 0, var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var92 = var4.getTableName(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);

  }

  public void test265() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    java.lang.String var79 = var13.getDatabaseProductName();
    boolean var80 = var13.supportsCatalogsInProcedureCalls();
    boolean var81 = var13.nullsAreSortedAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "tinySQL"+ "'", var79.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test266() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getDatabaseProductName();
    boolean var24 = var13.storesUpperCaseQuotedIdentifiers();
    java.lang.String var25 = var13.getSystemFunctions();
    boolean var26 = var13.supportsTransactions();
    int var27 = var13.getDatabaseMajorVersion();
    boolean var28 = var13.dataDefinitionCausesTransactionCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "tinySQL"+ "'", var23.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test267() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    int var65 = var11.getMajorVersion();
    int var66 = var11.getMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test268() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    java.lang.String var3 = var0.toString();
    com.sqlmagic.tinysql.tsResultSet var4 = new com.sqlmagic.tinysql.tsResultSet();
    int var5 = var4.getLevel();
    boolean var7 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var8 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var13 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var22 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag(var11, var13, var22);
    java.util.Enumeration var24 = var23.keys();
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    boolean var38 = var37.isReadOnly();
    java.lang.Object var40 = var23.put((java.lang.Object)var38, (java.lang.Object)true);
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var49 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var50 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var53 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var61 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var63 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var65 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var67 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var70 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var73 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var74 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var75);
    boolean var77 = com.sqlmagic.tinysql.UtilString.isInteger(var76);
    var4.setState(100, (java.util.Hashtable)var23, "hi!", var77);
    int var80 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var81 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.forceToSize(var3, 100, "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var84 = com.sqlmagic.tinysql.UtilString.dateValue("hi!");
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var3.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi!"+ "'", var81.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\nhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var83.equals("\nColumns in ResultSet\n\nRows in tsResultSet\nhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));

  }

  public void test269() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.supportsGetGeneratedKeys();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    int var16 = var13.getDriverMinorVersion();
    boolean var17 = var13.supportsOpenStatementsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test270() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var24);
    boolean var26 = com.sqlmagic.tinysql.UtilString.isInteger(var25);
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var41 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var40);
    boolean var42 = var41.isCatalogAtStart();
    boolean var44 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    boolean var45 = var41.othersInsertsAreVisible(100);
    boolean var46 = var41.supportsSubqueriesInExists();
    com.sqlmagic.tinysql.FieldTokenizer var47 = new com.sqlmagic.tinysql.FieldTokenizer(var25, ' ', var46);
    boolean var48 = var47.hasMoreFields();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test271() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getMaxColumnsInIndex();
    boolean var16 = var13.supportsColumnAliasing();
    boolean var17 = var13.doesMaxRowSizeIncludeBlobs();
    boolean var18 = var13.supportsOpenStatementsAcrossCommit();
    java.lang.String var19 = var13.getTimeDateFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));

  }

  public void test272() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    boolean var24 = var13.supportsSchemasInDataManipulation();
    boolean var25 = var13.supportsCoreSQLGrammar();
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var41 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var42 = var39.supportsResultSetType(0);
    boolean var43 = var39.supportsOpenCursorsAcrossCommit();
    boolean var44 = var39.supportsCatalogsInDataManipulation();
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var58 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag(var47, var49, var58);
    boolean var60 = var39.othersUpdatesAreVisible(var49);
    java.sql.ResultSet var61 = var39.getClientInfoProperties();
    int var62 = var39.getMaxColumnsInTable();
    boolean var63 = var13.insertsAreDetected(var62);
    boolean var64 = var13.supportsSubqueriesInExists();
    boolean var65 = var13.supportsTableCorrelationNames();
    boolean var66 = var13.supportsStoredProcedures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test273() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    java.sql.SQLWarning var66 = var65.getWarnings();
    java.sql.Connection var67 = var65.getConnection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var68 = var65.getResultSetType();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);

  }

  public void test274() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var19 = var13.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test275() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    boolean var21 = var13.usesLocalFiles();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test276() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    boolean var30 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var31 = var28.supportsResultSetType(0);
    boolean var32 = var28.supportsOpenCursorsAcrossCommit();
    boolean var33 = var28.supportsCatalogsInDataManipulation();
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var48 = new com.sqlmagic.tinysql.SimpleXMLTag(var36, var38, var47);
    boolean var49 = var28.othersUpdatesAreVisible(var38);
    int var50 = var28.getMaxTablesInSelect();
    boolean var51 = var28.supportsStoredFunctionsUsingCallSyntax();
    boolean var52 = var28.supportsSubqueriesInIns();
    int var53 = var28.getJDBCMajorVersion();
    java.lang.Object var54 = var14.remove((java.lang.Object)var28);
    boolean var55 = var28.supportsANSI92IntermediateSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test277() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsStoredFunctionsUsingCallSyntax();
    boolean var37 = var13.supportsSubqueriesInIns();
    int var38 = var13.getDatabaseMinorVersion();
    com.sqlmagic.tinysql.tsResultSet var39 = new com.sqlmagic.tinysql.tsResultSet();
    int var40 = var39.getFetchSize();
    int var41 = var39.getType();
    boolean var42 = var13.supportsResultSetHoldability(var41);
    java.lang.String var43 = var13.getSystemFunctions();
    int var44 = var13.getJDBCMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test278() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    boolean var24 = var13.supportsSchemasInDataManipulation();
    boolean var25 = var13.supportsCoreSQLGrammar();
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var41 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var42 = var39.supportsResultSetType(0);
    boolean var43 = var39.supportsOpenCursorsAcrossCommit();
    boolean var44 = var39.supportsCatalogsInDataManipulation();
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var58 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag(var47, var49, var58);
    boolean var60 = var39.othersUpdatesAreVisible(var49);
    java.sql.ResultSet var61 = var39.getClientInfoProperties();
    int var62 = var39.getMaxColumnsInTable();
    boolean var63 = var13.insertsAreDetected(var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var64 = var13.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test279() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var8 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    java.util.Enumeration var36 = var35.keys();
    com.sqlmagic.tinysql.tinySQLException var37 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var38 = var37.iterator();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var46 = var35.put((java.lang.Object)var38, (java.lang.Object)var45);
    boolean var47 = var35.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var48 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var35);
    java.util.Set var49 = var35.entrySet();
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var56 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.UtilString.removeQuotes(var57);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isQuotedString(var58);
    boolean var60 = var35.equals((java.lang.Object)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var57.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var58.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test280() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsCoreSQLGrammar();
    boolean var23 = var13.supportsTransactions();
    boolean var24 = var13.supportsPositionedDelete();
    boolean var25 = var13.supportsSubqueriesInQuantifieds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test281() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    java.lang.String var3 = var0.toString();
    java.util.Vector var4 = var0.getTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var3.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test282() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsStoredFunctionsUsingCallSyntax();
    boolean var37 = var13.supportsSubqueriesInIns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var38 = var13.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test283() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    int var67 = var65.getQueryTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var68 = var65.getFetchDirection();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test284() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getFetchSize();
    int var2 = var0.size();
    int var3 = var0.getColumnCount();
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var14 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var16 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var15);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var17 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var16);
    boolean var19 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var20 = var17.supportsResultSetType(0);
    boolean var21 = var17.supportsOpenCursorsAcrossCommit();
    boolean var22 = var17.supportsCatalogsInDataManipulation();
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var36 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var37 = new com.sqlmagic.tinysql.SimpleXMLTag(var25, var27, var36);
    boolean var38 = var17.othersUpdatesAreVisible(var27);
    int var39 = var17.getMaxTablesInSelect();
    boolean var40 = var17.supportsStoredFunctionsUsingCallSyntax();
    boolean var41 = var17.supportsSubqueriesInIns();
    int var42 = var17.getDatabaseMinorVersion();
    var0.setType(var42);
    int var44 = var0.numcols();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test285() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.supportsExtendedSQLGrammar();
    boolean var20 = var13.supportsUnion();
    boolean var21 = var13.supportsMixedCaseIdentifiers();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var22 = var13.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test286() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var14 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var15 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var19 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var20 = var12.prepareStatement("hi!", var19);
    com.sqlmagic.tinysql.tinySQLStatement var21 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var12);
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var32 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var34 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var33);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var35 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var37 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var38 = var35.supportsResultSetType(0);
    boolean var39 = var35.supportsOpenCursorsAcrossCommit();
    boolean var40 = var35.supportsCatalogsInDataManipulation();
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var55 = new com.sqlmagic.tinysql.SimpleXMLTag(var43, var45, var54);
    boolean var56 = var35.othersUpdatesAreVisible(var45);
    int var57 = var35.getMaxTablesInSelect();
    boolean var58 = var35.supportsStoredFunctionsUsingCallSyntax();
    boolean var59 = var35.supportsSubqueriesInIns();
    boolean var60 = var35.supportsSubqueriesInIns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.setEscapeProcessing(var60);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test287() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    java.sql.SQLWarning var66 = var65.getWarnings();
    java.sql.Connection var67 = var65.getConnection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var68 = var65.getFetchDirection();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);

  }

  public void test288() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.supportsGetGeneratedKeys();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    int var16 = var13.getDriverMinorVersion();
    boolean var17 = var13.supportsSchemasInProcedureCalls();
    boolean var18 = var13.supportsTableCorrelationNames();
    boolean var19 = var13.supportsSubqueriesInIns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test289() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var8 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    java.util.Enumeration var36 = var35.keys();
    com.sqlmagic.tinysql.tinySQLException var37 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var38 = var37.iterator();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var46 = var35.put((java.lang.Object)var38, (java.lang.Object)var45);
    boolean var47 = var35.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var48 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var35);
    java.util.Set var49 = var35.entrySet();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var50 = var35.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test290() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsStoredFunctionsUsingCallSyntax();
    boolean var37 = var13.supportsSubqueriesInExists();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var50 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var49);
    java.sql.Clob var51 = var50.createClob();
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var61 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var62 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var64 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var65 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var64);
    boolean var67 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var68 = var65.supportsResultSetType(0);
    boolean var69 = var65.supportsOpenCursorsAcrossCommit();
    boolean var70 = var65.supportsCoreSQLGrammar();
    int var71 = var65.getMaxRowSize();
    int var72 = var65.getMaxIndexLength();
    boolean var73 = var50.isValid(var72);
    boolean var74 = var13.ownUpdatesAreVisible(var72);
    boolean var75 = var13.usesLocalFiles();
    boolean var76 = var13.supportsNamedParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test291() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    int var34 = var33.getHoldability();
    boolean var35 = var4.isDefinitelyWritable(var34);
    double var39 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var45 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var46 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var48 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var47);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var49 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var48);
    boolean var51 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var52 = var49.supportsResultSetType(0);
    int var53 = var49.getMaxIndexLength();
    boolean var54 = var4.isWritable(var53);
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var64 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var65 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var67 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var66);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var68 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var67);
    int var69 = var68.getMaxColumnsInIndex();
    int var70 = var68.getMaxColumnsInOrderBy();
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var78 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var80 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var81 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var82 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var83 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var82);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var84 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var83);
    boolean var85 = var84.nullsAreSortedAtEnd();
    int var86 = var84.getMaxTableNameLength();
    java.lang.String var87 = var84.getDatabaseProductName();
    boolean var89 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var90 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var91 = var84.ownInsertsAreVisible(0);
    boolean var92 = var68.supportsResultSetType(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var93 = var4.getColumnClassName(0);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "tinySQL"+ "'", var87.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test292() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    boolean var16 = var13.nullPlusNonNullIsNull();
    java.lang.String var17 = var13.getIdentifierQuoteString();
    com.sqlmagic.tinysql.dbfFile var18 = new com.sqlmagic.tinysql.dbfFile(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "\""+ "'", var17.equals("\""));

  }

  public void test293() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getMaxColumnsInIndex();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var31 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var32 = var29.supportsResultSetType(0);
    boolean var33 = var29.supportsOpenCursorsAcrossCommit();
    boolean var34 = var29.supportsCoreSQLGrammar();
    int var35 = var29.getMaxRowSize();
    int var36 = var29.getMaxIndexLength();
    int var37 = var29.getMaxProcedureNameLength();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var50 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var49);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var51 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var50);
    boolean var53 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var54 = var51.supportsResultSetType(0);
    boolean var55 = var51.supportsOpenCursorsAcrossCommit();
    boolean var56 = var51.supportsCatalogsInDataManipulation();
    int var57 = var51.getMaxColumnsInGroupBy();
    boolean var58 = var13.supportsResultSetConcurrency(var37, var57);
    boolean var59 = var13.supportsSubqueriesInIns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test294() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var37 = var34.supportsResultSetType(0);
    int var38 = var34.getMaxIndexLength();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var49 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var51 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var50);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var52 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var51);
    boolean var53 = var52.isCatalogAtStart();
    int var54 = var52.getMaxColumnsInIndex();
    boolean var55 = var34.ownUpdatesAreVisible(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var56 = var4.getTableName(var54);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test295() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var16 = var15.getMaxColumnsInTable();
    boolean var17 = var15.supportsStoredProcedures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test296() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    boolean var24 = var13.supportsSchemasInDataManipulation();
    boolean var25 = var13.supportsCoreSQLGrammar();
    int var26 = var13.getJDBCMajorVersion();
    boolean var27 = var13.supportsSubqueriesInComparisons();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test297() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    boolean var20 = var13.nullsAreSortedAtEnd();
    int var21 = var13.getResultSetHoldability();
    int var22 = var13.getMaxStatements();
    boolean var23 = var13.supportsOpenCursorsAcrossCommit();
    int var24 = var13.getSQLStateType();
    boolean var25 = var13.supportsDifferentTableCorrelationNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test298() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    boolean var15 = var13.supportsLikeEscapeClause();
    int var16 = var13.getMaxColumnsInIndex();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var26 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var27 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var29 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var28);
    java.sql.Clob var30 = var29.createClob();
    int var31 = var29.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var32 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var29);
    double var36 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var40 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var42 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var43 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var45 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var44);
    java.sql.Clob var46 = var45.createClob();
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var54 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var57 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var58 = var45.prepareStatement("hi!", 100);
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var69 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var71 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var70);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var72 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var71);
    boolean var73 = var72.nullsAreSortedAtEnd();
    int var74 = var72.getMaxTableNameLength();
    java.lang.String var75 = var72.getDatabaseProductName();
    boolean var77 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var78 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var79 = var72.ownInsertsAreVisible(0);
    int var80 = var72.getMaxTablesInSelect();
    int var81 = var72.getJDBCMajorVersion();
    boolean var82 = var45.isValid(var81);
    boolean var83 = var32.supportsTransactionIsolationLevel(var81);
    boolean var84 = var13.deletesAreDetected(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "tinySQL"+ "'", var75.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test299() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var29 = var28.getMaxColumnsInIndex();
    boolean var30 = var12.isValid(var29);
    java.sql.Statement var31 = var12.createStatement();
    boolean var32 = var12.getAutoClose();
    var12.disableAutoClose();
    double var37 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var41 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var43 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var44 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var46 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var45);
    java.lang.String var47 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var50 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.Utils.delFile(var47, "hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var79 = var12.prepareStatement(var47);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test300() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    java.lang.String var20 = var13.getDriverName();
    boolean var21 = var13.supportsLikeEscapeClause();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var20.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test301() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var40 = new com.sqlmagic.tinysql.SimpleXMLTag(var28, var30, var39);
    java.util.Enumeration var41 = var40.keys();
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.removeQuotes(var49);
    boolean var51 = var40.contains((java.lang.Object)var49);
    java.util.Enumeration var52 = var40.keys();
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var40);
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var49.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var50.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 4.9E-324d);

  }

  public void test302() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    int var13 = var12.getHoldability();
    int var14 = var12.getHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test303() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    boolean var20 = var13.nullsAreSortedAtEnd();
    int var21 = var13.getResultSetHoldability();
    int var22 = var13.getMaxTablesInSelect();
    java.lang.String var23 = var13.getSQLKeywords();
    boolean var24 = com.sqlmagic.tinysql.UtilString.isInteger(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test304() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var13 = var12.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test305() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    boolean var66 = var65.isPoolable();
    int var67 = var65.getQueryTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test306() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    java.util.Vector var1 = var0.getTables();
    double var5 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var9 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var14 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var13);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var14);
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var38 = new com.sqlmagic.tinysql.SimpleXMLTag(var26, var28, var37);
    java.util.Enumeration var39 = var38.keys();
    com.sqlmagic.tinysql.tinySQLException var40 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var41 = var40.iterator();
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var49 = var38.put((java.lang.Object)var41, (java.lang.Object)var48);
    java.lang.Object[] var50 = new java.lang.Object[] { var41};
    java.sql.Array var51 = var14.createArrayOf("hi!", var50);
    var14.clearWarnings();
    java.sql.Clob var53 = var14.createClob();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var54 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var14);
    java.sql.DatabaseMetaData var55 = var14.getMetaData();
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.lang.String var65 = var14.nativeSQL("hi!");
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var69 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var70);
    com.sqlmagic.tinysql.tinySQLException var72 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var73 = var72.getNextException();
    java.lang.String var74 = var72.toString();
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    double var77 = com.sqlmagic.tinysql.UtilString.doubleValue(var74, 100.0d);
    double var78 = com.sqlmagic.tinysql.UtilString.doubleValue(var70, 100.0d);
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", var78);
    com.sqlmagic.tinysql.Utils.setPriority(var1, "hi!");
    com.sqlmagic.tinysql.tinySQLException var81 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var82 = var81.getNextException();
    java.lang.String var83 = var81.toString();
    int var84 = com.sqlmagic.tinysql.UtilString.getValueType(var83);
    com.sqlmagic.tinysql.Utils.setPriority(var1, var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var74.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var83.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);

  }

  public void test307() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    int var20 = var13.getMaxCursorNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test308() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    java.sql.Clob var34 = var33.createClob();
    int var35 = var33.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var36 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    int var37 = var36.getMaxColumnsInTable();
    boolean var38 = var4.isCurrency(var37);
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var49 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var51 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var50);
    java.sql.Clob var52 = var51.createClob();
    int var53 = var51.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var54 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var51);
    boolean var55 = var54.supportsFullOuterJoins();
    int var56 = var54.getMaxCatalogNameLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var57 = var4.getScale(var56);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);

  }

  public void test309() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSubqueriesInIns();
    java.lang.String var16 = var13.getDriverVersion();
    boolean var17 = var13.supportsSubqueriesInQuantifieds();
    int var18 = var13.getMaxColumnsInSelect();
    int var19 = var13.getMaxSchemaNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2.26h"+ "'", var16.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test310() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsCoreSQLGrammar();
    int var22 = var13.getDatabaseMajorVersion();
    java.lang.String var23 = var13.getTimeDateFunctions();
    boolean var24 = var13.supportsMultipleOpenResults();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var25 = var13.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test311() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.isClosed();
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var77 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var78 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var79 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var80 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var79);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var81 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var80);
    boolean var82 = var81.nullsAreSortedAtEnd();
    int var83 = var81.getMaxTableNameLength();
    java.lang.String var84 = var81.getDatabaseProductName();
    boolean var86 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var87 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var88 = var81.ownInsertsAreVisible(0);
    boolean var89 = var81.supportsGroupByUnrelated();
    boolean var90 = var81.supportsSchemasInIndexDefinitions();
    byte[] var93 = new byte[] { (byte)1, (byte)10};
    int var94 = com.sqlmagic.tinysql.Utils.vax_to_short(var93);
    boolean var95 = var81.othersDeletesAreVisible(var94);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var65.setFetchDirection(var94);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "tinySQL"+ "'", var84.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 2561);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test312() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.storesLowerCaseIdentifiers();
    boolean var22 = var13.supportsCatalogsInProcedureCalls();
    int var23 = var13.getMaxRowSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test313() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.getMoreResults();
    java.sql.ResultSet var68 = var65.getResultSet();
    boolean var69 = var65.isClosed();
    int var70 = var65.getMaxFieldSize();
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var74 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.toYMD(var75);
    com.sqlmagic.tinysql.dbfFile var77 = new com.sqlmagic.tinysql.dbfFile(var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var78 = var65.execute(var76);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));

  }

  public void test314() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.removeQuotes(var23);
    boolean var25 = var14.contains((java.lang.Object)var23);
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var40 = new com.sqlmagic.tinysql.SimpleXMLTag(var28, var30, var39);
    java.util.Enumeration var41 = var40.keys();
    com.sqlmagic.tinysql.tinySQLException var42 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var43 = var42.iterator();
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var51 = var40.put((java.lang.Object)var43, (java.lang.Object)var50);
    java.util.Enumeration var52 = var40.elements();
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.removeQuotes(var60);
    java.lang.Object var62 = var14.put((java.lang.Object)var40, (java.lang.Object)var61);
    int var63 = var40.countTags();
    double var67 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var71 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var73 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var74 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var75 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var76 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var75);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var77 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var76);
    boolean var78 = var77.isCatalogAtStart();
    boolean var79 = var77.supportsSubqueriesInIns();
    java.lang.String var80 = var77.getDriverVersion();
    boolean var81 = var77.supportsSubqueriesInQuantifieds();
    int var82 = var77.getMaxColumnsInSelect();
    com.sqlmagic.tinysql.SimpleXMLTag var83 = var40.getTag(var82);
    boolean var84 = com.sqlmagic.tinysql.Utils.isDateColumn(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var60.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var61.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "2.26h"+ "'", var80.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test315() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    java.lang.String var18 = var13.getSQLKeywords();
    boolean var19 = var13.storesUpperCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test316() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    int var21 = var13.getJDBCMajorVersion();
    boolean var22 = var13.supportsCatalogsInProcedureCalls();
    int var23 = var13.getJDBCMinorVersion();
    boolean var24 = var13.nullsAreSortedAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test317() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    boolean var15 = var13.supportsLikeEscapeClause();
    int var16 = var13.getMaxUserNameLength();
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    boolean var25 = var13.updatesAreDetected(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test318() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    boolean var16 = var13.supportsNonNullableColumns();
    boolean var17 = var13.usesLocalFiles();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test319() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    boolean var16 = var13.nullPlusNonNullIsNull();
    int var17 = var13.getMaxTableNameLength();
    boolean var18 = var13.supportsGroupBy();
    boolean var19 = var13.supportsCatalogsInTableDefinitions();
    boolean var20 = var13.supportsNamedParameters();
    boolean var21 = var13.supportsAlterTableWithDropColumn();
    boolean var22 = var13.supportsSchemasInIndexDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test320() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var35 = var34.nullsAreSortedAtEnd();
    int var36 = var34.getMaxTableNameLength();
    java.lang.String var37 = var34.getDatabaseProductName();
    boolean var39 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var40 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var41 = var34.ownInsertsAreVisible(0);
    boolean var42 = var34.supportsGroupByUnrelated();
    boolean var43 = var34.supportsSchemasInIndexDefinitions();
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var53 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var54 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var56 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var55);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var57 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var56);
    boolean var59 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var60 = var57.supportsResultSetType(0);
    boolean var61 = var57.supportsOpenCursorsAcrossCommit();
    boolean var62 = var57.supportsCoreSQLGrammar();
    int var63 = var57.getMaxColumnsInSelect();
    int var64 = var57.getMaxBinaryLiteralLength();
    int var65 = var57.getMaxCursorNameLength();
    boolean var66 = var34.othersDeletesAreVisible(var65);
    boolean var67 = var13.insertsAreDetected(var65);
    java.lang.String var68 = var13.getUserName();
    int var69 = var13.getMaxIndexLength();
    double var73 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var79 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var80 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var81 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var82 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var81);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var83 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var82);
    boolean var85 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var86 = var83.supportsResultSetType(0);
    boolean var87 = var83.supportsOpenCursorsAcrossCommit();
    int var88 = var83.getMaxCharLiteralLength();
    boolean var89 = var83.supportsSchemasInProcedureCalls();
    boolean var90 = var83.nullsAreSortedAtEnd();
    int var91 = var83.getResultSetHoldability();
    boolean var92 = var13.supportsResultSetType(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "tinySQL"+ "'", var37.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test321() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var40 = new com.sqlmagic.tinysql.SimpleXMLTag(var28, var30, var39);
    java.util.Enumeration var41 = var40.keys();
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.removeQuotes(var49);
    boolean var51 = var40.contains((java.lang.Object)var49);
    java.util.Enumeration var52 = var40.keys();
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var40);
    com.sqlmagic.tinysql.dbfFile var54 = new com.sqlmagic.tinysql.dbfFile();
    com.sqlmagic.tinysql.tsResultSet var55 = new com.sqlmagic.tinysql.tsResultSet(var53, (com.sqlmagic.tinysql.tinySQL)var54);
    java.lang.String var56 = var53.toString();
    java.lang.String var57 = com.sqlmagic.tinysql.UtilString.toYMD(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var49.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var50.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "\n"+ "'", var56.equals("\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "\n"+ "'", var57.equals("\n"));

  }

  public void test322() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var37 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var41 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var53 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var59 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var67 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var68 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var69 = var16.getConnection("hi!", "hi!", (java.sql.Driver)var68);
    com.sqlmagic.tinysql.tinySQLStatement var70 = new com.sqlmagic.tinysql.tinySQLStatement(var69);
    int var71 = var70.getQueryTimeout();
    boolean var72 = var70.getMoreResults();
    java.sql.ResultSet var73 = var70.getResultSet();
    boolean var74 = var70.isClosed();
    int var75 = var70.getMaxFieldSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var76 = var4.getTableName(var75);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);

  }

  public void test323() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var14 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var15 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var19 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var20 = var12.prepareStatement("hi!", var19);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var21 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var12);
    boolean var22 = var21.supportsCatalogsInProcedureCalls();
    boolean var23 = var21.supportsLimitedOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test324() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var3 = var1.getWhereClause();
    int var4 = var1.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var5 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var1);
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var13 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var15 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var18 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var17);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var19 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var18);
    int var20 = var19.getMaxColumnsInIndex();
    boolean var21 = var5.isWritable(var20);
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var32 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var34 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var33);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var35 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var36 = var35.nullsAreSortedAtEnd();
    boolean var37 = var35.supportsLikeEscapeClause();
    int var38 = var35.getMaxColumnsInIndex();
    boolean var39 = var0.getMoreResults(var20, var38);
    int var40 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test325() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsSchemasInPrivilegeDefinitions();
    boolean var18 = var15.supportsOpenCursorsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test326() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    int var79 = var13.getDatabaseMajorVersion();
    boolean var80 = var13.supportsOrderByUnrelated();
    boolean var81 = var13.supportsSelectForUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test327() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var35 = var34.isCatalogAtStart();
    int var36 = var34.getSQLStateType();
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var44);
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var56 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var58 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var57);
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var67 = var34.getSuperTypes(var45, "", "hi!");
    int var68 = var34.getDatabaseMajorVersion();
    boolean var69 = var4.isWritable(var68);
    double var73 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var79 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var80 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var81 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var82 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var81);
    int var83 = var82.getHoldability();
    boolean var84 = var4.isCurrency(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var44.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var45.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var66.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test328() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsCoreSQLGrammar();
    boolean var23 = var13.supportsTransactions();
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var40 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var48);
    boolean var50 = com.sqlmagic.tinysql.UtilString.isInteger(var49);
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var61 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var62 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var64 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var65 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var64);
    boolean var66 = var65.isCatalogAtStart();
    boolean var68 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    boolean var69 = var65.othersInsertsAreVisible(100);
    boolean var70 = var65.supportsSubqueriesInExists();
    com.sqlmagic.tinysql.FieldTokenizer var71 = new com.sqlmagic.tinysql.FieldTokenizer(var49, ' ', var70);
    java.lang.String[] var72 = var71.getFields();
    int var73 = var71.countFields();
    boolean var74 = var13.ownUpdatesAreVisible(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test329() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsPositionedDelete();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test330() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.supportsExtendedSQLGrammar();
    boolean var20 = var13.supportsUnion();
    boolean var21 = var13.supportsPositionedDelete();
    java.lang.String var22 = var13.getNumericFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));

  }

  public void test331() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    boolean var65 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test332() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var8 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!");
    com.sqlmagic.tinysql.tinySQLException var9 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var10 = var9.toString();
    double var14 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var20 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var21 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var23 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var22);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.nullsAreSortedAtEnd();
    int var26 = var24.getMaxTableNameLength();
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var45 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var47 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var46);
    java.sql.Clob var48 = var47.createClob();
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var56 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var59 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var60 = var47.prepareStatement("hi!", 100);
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var73 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var79 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var84 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var85 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var86 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var87 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var88 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var87);
    java.sql.ResultSet var89 = var24.getAttributes("hi!", "hi!", "", var87);
    int var90 = var24.getMaxSchemaNameLength();
    java.lang.String var91 = var24.getUserName();
    java.lang.Object var92 = var8.put((java.lang.Object)var10, (java.lang.Object)var24);
    int var93 = var24.getResultSetHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var10.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!"+ "'", var85.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);

  }

  public void test333() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getSQLStateType();
    boolean var16 = var13.supportsNamedParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test334() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isClosed();
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    boolean var17 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var18 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    java.util.Enumeration var34 = var33.keys();
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var45 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var47 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var46);
    boolean var48 = var47.isReadOnly();
    java.lang.Object var50 = var33.put((java.lang.Object)var48, (java.lang.Object)true);
    double var53 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var59 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var68 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var77 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var80 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var82 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var84 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var85 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var86 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var85);
    boolean var87 = com.sqlmagic.tinysql.UtilString.isInteger(var86);
    var14.setState(100, (java.util.Hashtable)var33, "hi!", var87);
    var12.setAutoClose(var87);
    var12.commit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var91 = var12.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!"+ "'", var85.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi!"+ "'", var86.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test335() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    boolean var20 = var13.nullsAreSortedAtEnd();
    int var21 = var13.getResultSetHoldability();
    int var22 = var13.getMaxBinaryLiteralLength();
    boolean var23 = var13.supportsAlterTableWithAddColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test336() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var23 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var26 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var25);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var27 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var26);
    boolean var28 = var27.nullsAreSortedAtEnd();
    var12.setAutoCommit(var28);
    java.sql.SQLXML var30 = var12.createSQLXML();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);

  }

  public void test337() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    int var79 = var13.getMaxSchemaNameLength();
    boolean var80 = var13.storesUpperCaseQuotedIdentifiers();
    int var81 = var13.getMaxStatementLength();
    boolean var82 = var13.supportsCoreSQLGrammar();
    boolean var83 = var13.supportsCatalogsInPrivilegeDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test338() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    boolean var29 = var28.isReadOnly();
    java.lang.Object var31 = var14.put((java.lang.Object)var29, (java.lang.Object)true);
    java.util.Set var32 = var14.entrySet();
    double var36 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var40 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var42 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var43 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var45 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var44);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var46 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var45);
    boolean var47 = var46.nullsAreSortedAtEnd();
    int var48 = var46.getMaxTableNameLength();
    java.lang.String var49 = var46.getDatabaseProductName();
    boolean var51 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var52 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var53 = var46.ownInsertsAreVisible(0);
    boolean var54 = var46.supportsGroupByUnrelated();
    boolean var55 = var14.containsKey((java.lang.Object)var54);
    int var56 = var14.countTags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var57 = var14.nextTag();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "tinySQL"+ "'", var49.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2);

  }

  public void test339() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    boolean var16 = var13.supportsTransactions();
    boolean var17 = var13.locatorsUpdateCopy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test340() throws Throwable {

    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var3 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var5 = com.sqlmagic.tinysql.UtilString.toYMD(var4);
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile(var5);
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var19 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var18);
    boolean var21 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var22 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var26 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var27 = var19.prepareStatement("hi!", var26);
    com.sqlmagic.tinysql.tinySQLStatement var28 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var29 = var6.sqlexec(var28);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);

  }

  public void test341() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    int var13 = var12.getHoldability();
    java.sql.NClob var14 = var12.createNClob();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var22 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var38 = new com.sqlmagic.tinysql.SimpleXMLTag(var26, var28, var37);
    java.util.Enumeration var39 = var38.keys();
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.removeQuotes(var47);
    boolean var49 = var38.contains((java.lang.Object)var47);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var63 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag(var52, var54, var63);
    java.util.Enumeration var65 = var64.keys();
    com.sqlmagic.tinysql.tinySQLException var66 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var67 = var66.iterator();
    double var70 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var73 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var74 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var75 = var64.put((java.lang.Object)var67, (java.lang.Object)var74);
    java.util.Enumeration var76 = var64.elements();
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var83 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var84 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var85 = com.sqlmagic.tinysql.UtilString.removeQuotes(var84);
    java.lang.Object var86 = var38.put((java.lang.Object)var64, (java.lang.Object)var85);
    boolean var87 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var85);
    com.sqlmagic.tinysql.Utils.delFile("hi!", var85);
    java.lang.String var89 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var85);
    java.lang.String var90 = var12.getClientInfo(var89);
    boolean var91 = var12.getAutoCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var47.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var48.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var84.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var85.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var89.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);

  }

  public void test342() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    boolean var16 = var13.nullPlusNonNullIsNull();
    int var17 = var13.getMaxTableNameLength();
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var28 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var29);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var31 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var30);
    int var32 = var31.getMaxColumnsInIndex();
    int var33 = var31.getMaxColumnsInOrderBy();
    boolean var34 = var31.supportsPositionedDelete();
    int var35 = var31.getMaxTableNameLength();
    double var39 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var45 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var46 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var48 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var47);
    java.sql.Clob var49 = var48.createClob();
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var57 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var60 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var61 = var48.prepareStatement("hi!", 100);
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var72 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var74 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var73);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var75 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var74);
    boolean var77 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var78 = var75.supportsResultSetType(0);
    boolean var79 = var75.supportsOpenCursorsAcrossCommit();
    boolean var80 = var75.supportsCoreSQLGrammar();
    int var81 = var75.getMaxRowSize();
    java.lang.String var82 = var75.getDriverName();
    java.lang.String var83 = var48.getClientInfo(var82);
    int var84 = var48.getTransactionIsolation();
    boolean var85 = var13.supportsConvert(var35, var84);
    boolean var86 = var13.supportsCatalogsInTableDefinitions();
    int var87 = var13.getMaxUserNameLength();
    boolean var88 = var13.supportsDataDefinitionAndDataManipulationTransactions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var82.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test343() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var8 = new com.sqlmagic.tinysql.dbfFile("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.Utils.delFile("hi!");
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4.9E-324d);

  }

  public void test344() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.getMoreResults();
    java.sql.ResultSet var68 = var65.getResultSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var65.clearBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);

  }

  public void test345() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    int var67 = var65.getQueryTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var65.clearBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test346() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.supportsGetGeneratedKeys();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    int var16 = var13.getDriverMinorVersion();
    boolean var17 = var13.supportsSchemasInProcedureCalls();
    java.sql.ResultSet var18 = var13.getTypeInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);

  }

  public void test347() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    int var2 = var0.getColumnCount();
    double var6 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var9 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var12 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var13 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var15 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var14);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var16 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var15);
    boolean var17 = var16.nullsAreSortedAtEnd();
    int var18 = var16.getMaxTableNameLength();
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var36 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var37 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var39 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var38);
    java.sql.Clob var40 = var39.createClob();
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var48 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var51 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var52 = var39.prepareStatement("hi!", 100);
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var78 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var80 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var79);
    java.sql.ResultSet var81 = var16.getAttributes("hi!", "hi!", "", var79);
    int var82 = var16.getDatabaseMajorVersion();
    var0.setType(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);

  }

  public void test348() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    boolean var15 = var13.autoCommitFailureClosesAllResultSets();
    boolean var16 = var13.usesLocalFilePerTable();
    boolean var17 = var13.storesLowerCaseIdentifiers();
    boolean var18 = var13.storesMixedCaseQuotedIdentifiers();
    boolean var19 = var13.supportsOpenCursorsAcrossRollback();
    boolean var20 = var13.supportsOpenCursorsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test349() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getExtraNameCharacters();
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));

  }

  public void test350() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsStoredFunctionsUsingCallSyntax();
    boolean var37 = var13.supportsSubqueriesInIns();
    int var38 = var13.getJDBCMajorVersion();
    boolean var39 = var13.allTablesAreSelectable();
    boolean var40 = var13.supportsSchemasInProcedureCalls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test351() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var6 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var7);
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var21 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var20);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var22 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var21);
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var45 = new com.sqlmagic.tinysql.SimpleXMLTag(var33, var35, var44);
    java.util.Enumeration var46 = var45.keys();
    com.sqlmagic.tinysql.tinySQLException var47 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var48 = var47.iterator();
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var56 = var45.put((java.lang.Object)var48, (java.lang.Object)var55);
    java.lang.Object[] var57 = new java.lang.Object[] { var48};
    java.sql.Array var58 = var21.createArrayOf("hi!", var57);
    var21.clearWarnings();
    java.sql.Clob var60 = var21.createClob();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var61 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var21);
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var65 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    var21.setCatalog("");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles(var7, "");
    com.sqlmagic.tinysql.dbfFile var69 = new com.sqlmagic.tinysql.dbfFile("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var7.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var8.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var30.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);

  }

  public void test352() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsGetGeneratedKeys();
    boolean var18 = var15.supportsMinimumSQLGrammar();
    boolean var19 = var15.supportsCoreSQLGrammar();
    boolean var20 = var15.nullsAreSortedHigh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test353() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getMaxRows();
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var69 = var65.executeUpdate("hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);

  }

  public void test354() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var24);
    java.lang.String var26 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var25);
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var33 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var32);
    boolean var34 = com.sqlmagic.tinysql.UtilString.isInteger(var32);
    com.sqlmagic.tinysql.FieldTokenizer var35 = new com.sqlmagic.tinysql.FieldTokenizer(var25, 'a', var34);
    boolean var36 = var35.hasMoreFields();
    java.lang.String[] var37 = var35.getFields();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var50 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var49);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var51 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var50);
    boolean var52 = var51.nullsAreSortedAtEnd();
    int var53 = var51.getMaxTableNameLength();
    java.lang.String var54 = var51.getDatabaseProductName();
    boolean var56 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var57 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var58 = var51.ownInsertsAreVisible(0);
    boolean var59 = var51.supportsGroupByUnrelated();
    boolean var60 = var51.supportsSchemasInIndexDefinitions();
    double var64 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var67 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var68 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var70 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var71 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var73 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var72);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var74 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var73);
    boolean var76 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var77 = var74.supportsResultSetType(0);
    boolean var78 = var74.supportsOpenCursorsAcrossCommit();
    boolean var79 = var74.supportsCoreSQLGrammar();
    int var80 = var74.getMaxColumnsInSelect();
    int var81 = var74.getMaxBinaryLiteralLength();
    int var82 = var74.getMaxCursorNameLength();
    boolean var83 = var51.othersDeletesAreVisible(var82);
    java.lang.String var84 = var51.getNumericFunctions();
    boolean var85 = var51.supportsConvert();
    int var86 = var51.getDatabaseMinorVersion();
    java.lang.String var87 = var35.getField(var86);
    java.lang.String var88 = var35.nextField();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "tinySQL"+ "'", var54.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));

  }

  public void test355() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    boolean var16 = var13.supportsNonNullableColumns();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var26 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var27 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var29 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var28);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var30 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var29);
    boolean var31 = var30.nullsAreSortedAtEnd();
    int var32 = var30.getMaxTableNameLength();
    boolean var33 = var13.ownUpdatesAreVisible(var32);
    boolean var34 = var13.supportsDifferentTableCorrelationNames();
    java.sql.ResultSet var35 = var13.getTableTypes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var36 = var13.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test356() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var12.getAutoClose();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var26 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var27 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var29 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var28);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var30 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var29);
    boolean var32 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var33 = var30.supportsResultSetType(0);
    boolean var34 = var30.supportsOpenCursorsAcrossCommit();
    boolean var35 = var30.supportsMixedCaseIdentifiers();
    boolean var36 = var30.supportsStatementPooling();
    int var37 = var30.getMaxStatementLength();
    boolean var38 = var12.isValid(var37);
    java.sql.Savepoint var39 = var12.setSavepoint();
    var12.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test357() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.getMoreResults();
    boolean var69 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var70 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    var65.setMaxFieldSize(100);
    java.sql.SQLWarning var72 = var65.getWarnings();
    boolean var73 = var65.getMoreResults();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var74 = var65.getFetchDirection();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test358() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    int var2 = var0.getColumnCount();
    java.util.Hashtable var3 = var0.getTableState();
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var14 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var16 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var15);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var17 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var16);
    boolean var19 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var20 = var17.supportsResultSetType(0);
    boolean var21 = var17.supportsOpenCursorsAcrossCommit();
    boolean var22 = var17.supportsCoreSQLGrammar();
    int var23 = var17.getMaxColumnsInSelect();
    var0.setLevel(var23);
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var38 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var37);
    boolean var39 = var38.isCatalogAtStart();
    int var40 = var38.getSQLStateType();
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var48);
    double var53 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var59 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var60 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var62 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var61);
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var69 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var71 = var38.getSuperTypes(var49, "", "hi!");
    int var72 = var38.getDatabaseMajorVersion();
    var0.setLevel(var72);
    java.lang.String var74 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var48.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var49.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var70.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var74.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));

  }

  public void test359() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    java.sql.Blob var16 = var12.createBlob();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var38 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var37);
    boolean var40 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var41 = var38.supportsResultSetType(0);
    boolean var42 = var38.supportsOpenCursorsAcrossCommit();
    boolean var43 = var38.supportsCoreSQLGrammar();
    int var44 = var38.getMaxRowSize();
    java.lang.String var45 = var38.getDriverName();
    java.lang.String[] var46 = new java.lang.String[] { var45};
    java.sql.PreparedStatement var47 = var12.prepareStatement("hi!", var46);
    com.sqlmagic.tinysql.tinySQLStatement var48 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var49 = var48.getResultSetConcurrency();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var45.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);

  }

  public void test360() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    java.lang.String var35 = var13.getNumericFunctions();
    boolean var36 = com.sqlmagic.tinysql.UtilString.isInteger(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test361() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    java.sql.Clob var34 = var33.createClob();
    int var35 = var33.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var36 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    int var37 = var36.getMaxColumnsInTable();
    boolean var38 = var4.isCurrency(var37);
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var49 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var51 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var50);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var52 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var51);
    boolean var54 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var55 = var52.supportsResultSetType(0);
    boolean var56 = var52.supportsOpenCursorsAcrossCommit();
    boolean var57 = var52.supportsCoreSQLGrammar();
    int var58 = var52.getMaxRowSize();
    java.lang.String var59 = var52.getDriverName();
    boolean var60 = var52.storesUpperCaseQuotedIdentifiers();
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var68 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var72 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var74 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var75 = new com.sqlmagic.tinysql.SimpleXMLTag(var63, var65, var74);
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var83 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var85 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var86 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var88 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var87);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var89 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var88);
    boolean var91 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var92 = var89.supportsResultSetType(0);
    int var93 = var89.getMaxIndexLength();
    int var94 = var89.getMaxCatalogNameLength();
    boolean var95 = var89.supportsExtendedSQLGrammar();
    boolean var96 = var89.supportsGroupByBeyondSelect();
    int var97 = var89.getJDBCMajorVersion();
    boolean var98 = var52.supportsResultSetConcurrency(var65, var97);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var99 = var4.getColumnName(var97);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var59.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test362() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    com.sqlmagic.tinysql.tsResultSet var67 = new com.sqlmagic.tinysql.tsResultSet();
    int var68 = var67.getLevel();
    int var69 = var67.getColumnCount();
    java.util.Hashtable var70 = var67.getTableState();
    int var71 = var67.getType();
    var65.setQueryTimeout(var71);
    java.sql.SQLWarning var73 = var65.getWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);

  }

  public void test363() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("");
    com.sqlmagic.tinysql.dbfFile var2 = new com.sqlmagic.tinysql.dbfFile("");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var3 = var2.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test364() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    java.lang.String var20 = var13.getDatabaseProductName();
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var20);
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var32 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var34 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var33);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var35 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var36 = var35.nullsAreSortedAtEnd();
    int var37 = var35.getMaxTableNameLength();
    java.lang.String var38 = var35.getDatabaseProductName();
    boolean var40 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var41 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var42 = var35.ownInsertsAreVisible(0);
    int var43 = var35.getMaxTablesInSelect();
    boolean var44 = var35.supportsGroupByUnrelated();
    java.lang.String var45 = var35.getDatabaseProductName();
    com.sqlmagic.tinysql.tinySQLException var46 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var47 = var46.getNextException();
    java.lang.String var48 = var46.toString();
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType(var48);
    byte[] var50 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var49);
    int var51 = com.sqlmagic.tinysql.UtilString.intValue(var45, var49);
    double var52 = com.sqlmagic.tinysql.UtilString.doubleValue(var45);
    double var56 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var59 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var60 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var62 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var63 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var65 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var64);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var65);
    boolean var68 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var69 = var66.supportsResultSetType(0);
    boolean var70 = var66.supportsOpenCursorsAcrossCommit();
    int var71 = var66.getMaxCharLiteralLength();
    boolean var72 = var66.supportsSchemasInProcedureCalls();
    boolean var73 = var66.nullsAreSortedAtEnd();
    int var74 = var66.getResultSetHoldability();
    int var75 = var66.getMaxTablesInSelect();
    java.lang.String var76 = var66.getNumericFunctions();
    java.lang.String var77 = com.sqlmagic.tinysql.UtilString.removeQuotes(var76);
    java.lang.String var78 = com.sqlmagic.tinysql.UtilString.replaceAll(var20, var45, var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "tinySQL"+ "'", var20.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "tinySQL"+ "'", var38.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "tinySQL"+ "'", var45.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var48.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));

  }

  public void test365() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsCoreSQLGrammar();
    int var22 = var13.getJDBCMajorVersion();
    boolean var24 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var25 = var13.othersDeletesAreVisible(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test366() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    java.sql.Clob var34 = var33.createClob();
    int var35 = var33.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var36 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    int var37 = var36.getMaxColumnsInTable();
    boolean var38 = var4.isCurrency(var37);
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var49 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var51 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var50);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var52 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var51);
    boolean var54 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var55 = var52.supportsResultSetType(0);
    boolean var56 = var52.supportsOpenCursorsAcrossCommit();
    boolean var57 = var52.supportsCoreSQLGrammar();
    int var58 = var52.getMaxRowSize();
    int var59 = var52.getMaxIndexLength();
    int var60 = var52.getMaxProcedureNameLength();
    boolean var61 = var52.nullsAreSortedAtStart();
    int var62 = var52.getMaxUserNameLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var63 = var4.getScale(var62);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);

  }

  public void test367() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var32 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var34 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var33);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var35 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var36 = var35.nullsAreSortedAtEnd();
    int var37 = var35.getMaxTableNameLength();
    java.lang.String var38 = var35.getDatabaseProductName();
    boolean var39 = var21.acceptsURL(var38);
    int var40 = var21.getMajorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var41 = var4.getColumnClassName(var40);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "tinySQL"+ "'", var38.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test368() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxColumnsInSelect();
    int var20 = var13.getMaxBinaryLiteralLength();
    boolean var21 = var13.isReadOnly();
    boolean var22 = var13.nullsAreSortedHigh();
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.endsWithFunctionName("hi!");
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var41 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var42 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var44 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var43);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var45 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var44);
    boolean var47 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var48 = var45.supportsResultSetType(0);
    boolean var49 = var45.supportsOpenCursorsAcrossCommit();
    boolean var50 = var45.supportsCoreSQLGrammar();
    int var51 = var45.getMaxRowSize();
    int var52 = var45.getMaxIndexLength();
    boolean var53 = var45.supportsTransactions();
    java.lang.String var54 = var45.getDriverVersion();
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var61 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var62);
    java.lang.String var64 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName(var63);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var63);
    java.sql.ResultSet var66 = var13.getSuperTables("hi!", var54, var63);
    boolean var67 = var13.supportsOrderByUnrelated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "2.26h"+ "'", var54.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var62.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var63.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "COL00000"+ "'", var64.equals("COL00000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test369() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getMaxColumnsInIndex();
    boolean var16 = var13.supportsColumnAliasing();
    java.lang.String var17 = var13.getDatabaseProductVersion();
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var32 = new com.sqlmagic.tinysql.SimpleXMLTag(var20, var22, var31);
    java.util.Enumeration var33 = var32.keys();
    com.sqlmagic.tinysql.tinySQLException var34 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var35 = var34.iterator();
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var43 = var32.put((java.lang.Object)var35, (java.lang.Object)var42);
    java.util.Enumeration var44 = var32.elements();
    java.util.Set var45 = var32.entrySet();
    com.sqlmagic.tinysql.tinySQLWhere var46 = new com.sqlmagic.tinysql.tinySQLWhere(var17, (java.util.Hashtable)var32);
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var55 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var56 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var64 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var72 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var75 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var78 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var79 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var81 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag(var70, var72, var81);
    java.util.Enumeration var83 = var82.keys();
    com.sqlmagic.tinysql.tinySQLException var84 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var85 = var84.iterator();
    double var88 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var90 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var91 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var92 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var93 = var82.put((java.lang.Object)var85, (java.lang.Object)var92);
    boolean var94 = var82.isEmpty();
    com.sqlmagic.tinysql.tinySQLWhere var95 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var82);
    int var96 = var82.countTags();
    byte[] var98 = com.sqlmagic.tinysql.Utils.forceToSize(var17, var96, (byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "2.26h"+ "'", var17.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "hi!"+ "'", var91.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var98 == null);

  }

  public void test370() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var14 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var15 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var19 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var20 = var12.prepareStatement("hi!", var19);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var21 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var12);
    java.lang.String var22 = var21.getNumericFunctions();
    boolean var23 = com.sqlmagic.tinysql.Utils.endsWithFunctionName(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test371() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    boolean var29 = var28.isReadOnly();
    java.lang.Object var31 = var14.put((java.lang.Object)var29, (java.lang.Object)true);
    java.util.Set var32 = var14.entrySet();
    double var36 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var40 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var42 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var43 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var45 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var44);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var46 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var45);
    boolean var47 = var46.isCatalogAtStart();
    int var48 = var46.getSQLStateType();
    int var49 = var46.getMaxSchemaNameLength();
    java.lang.String var50 = var46.getURL();
    java.lang.Object var51 = var14.get((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);

  }

  public void test372() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    boolean var29 = var28.isReadOnly();
    java.lang.Object var31 = var14.put((java.lang.Object)var29, (java.lang.Object)true);
    java.util.Set var32 = var14.entrySet();
    java.lang.Object var33 = var14.clone();
    var14.clear();
    com.sqlmagic.tinysql.tsResultSet var35 = new com.sqlmagic.tinysql.tsResultSet();
    java.util.Vector var36 = var35.getTables();
    java.util.Vector var37 = var35.getTables();
    java.util.Vector var38 = var35.getTables();
    boolean var39 = var14.equals((java.lang.Object)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var40 = var14.nextTag();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test373() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    java.lang.String var21 = var13.getSQLKeywords();
    boolean var22 = var13.supportsCatalogsInProcedureCalls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test374() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var3 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var6 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var9 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var14 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var20 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.Utils.delFile("hi!");
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test375() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsGroupByUnrelated();
    boolean var22 = var13.supportsSchemasInIndexDefinitions();
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var33 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var35 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var34);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var36 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var35);
    boolean var38 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var39 = var36.supportsResultSetType(0);
    boolean var40 = var36.supportsOpenCursorsAcrossCommit();
    boolean var41 = var36.supportsCoreSQLGrammar();
    int var42 = var36.getMaxColumnsInSelect();
    int var43 = var36.getMaxBinaryLiteralLength();
    int var44 = var36.getMaxCursorNameLength();
    boolean var45 = var13.othersDeletesAreVisible(var44);
    java.lang.String var46 = var13.getNumericFunctions();
    int var47 = var13.getMaxColumnsInOrderBy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var48 = var13.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + ""+ "'", var46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);

  }

  public void test376() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsAlterTableWithAddColumn();
    boolean var31 = var13.allTablesAreSelectable();
    boolean var32 = var13.supportsGroupByUnrelated();
    boolean var33 = var13.supportsSubqueriesInQuantifieds();
    boolean var34 = var13.locatorsUpdateCopy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test377() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    double var68 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var72 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var73 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var78 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var80 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var81 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var82 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var84 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var85 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var86 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var87 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var86);
    java.sql.Clob var88 = var87.createClob();
    int var89 = var87.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var90 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var87);
    boolean var91 = var90.supportsFullOuterJoins();
    int var92 = var90.getMaxCatalogNameLength();
    boolean var93 = var65.execute("hi!", var92);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var94 = var65.getFetchDirection();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi!"+ "'", var81.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test378() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    double var69 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var72 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var75 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var76 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var77 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var78 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var77);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var79 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var78);
    boolean var80 = var79.nullsAreSortedAtEnd();
    int var81 = var79.getMaxTableNameLength();
    java.lang.String var82 = var79.getDatabaseProductName();
    boolean var84 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var85 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var86 = var79.ownInsertsAreVisible(0);
    int var87 = var79.getMaxTablesInSelect();
    boolean var88 = var79.supportsGroupByUnrelated();
    boolean var89 = var79.usesLocalFilePerTable();
    int var90 = var79.getMaxProcedureNameLength();
    var65.setMaxFieldSize(var90);
    var65.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var93 = var65.executeBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "tinySQL"+ "'", var82.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test379() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.getMoreResults();
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var77 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var78 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var79 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var80 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var79);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var81 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var80);
    boolean var83 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var84 = var81.supportsResultSetType(0);
    int var85 = var81.getMaxIndexLength();
    int var86 = var81.getMaxCatalogNameLength();
    boolean var87 = var81.locatorsUpdateCopy();
    boolean var88 = var81.nullsAreSortedAtStart();
    int var89 = var81.getJDBCMajorVersion();
    var65.setQueryTimeout(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test380() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var8 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!");
    com.sqlmagic.tinysql.tinySQLException var9 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var10 = var9.toString();
    double var14 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var16 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var20 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var21 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var23 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var22);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var24 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var23);
    boolean var25 = var24.nullsAreSortedAtEnd();
    int var26 = var24.getMaxTableNameLength();
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var45 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var47 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var46);
    java.sql.Clob var48 = var47.createClob();
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var56 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var59 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var60 = var47.prepareStatement("hi!", 100);
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var73 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var79 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var84 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var85 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var86 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var87 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var88 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var87);
    java.sql.ResultSet var89 = var24.getAttributes("hi!", "hi!", "", var87);
    int var90 = var24.getMaxSchemaNameLength();
    java.lang.String var91 = var24.getUserName();
    java.lang.Object var92 = var8.put((java.lang.Object)var10, (java.lang.Object)var24);
    java.util.Set var93 = var8.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var10.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!"+ "'", var85.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);

  }

  public void test381() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.supportsGetGeneratedKeys();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    int var16 = var13.getDriverMinorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var17 = var13.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);

  }

  public void test382() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    int var79 = var13.getDatabaseMajorVersion();
    int var80 = var13.getMaxCursorNameLength();
    boolean var81 = var13.supportsTransactions();
    boolean var82 = var13.storesUpperCaseIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);

  }

  public void test383() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var19 = var18.nullsAreSortedAtEnd();
    int var20 = var18.getMaxTableNameLength();
    java.lang.String var21 = var18.getDatabaseProductName();
    boolean var23 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var25 = var18.ownInsertsAreVisible(0);
    boolean var26 = var18.supportsGroupByUnrelated();
    boolean var27 = var18.supportsSchemasInIndexDefinitions();
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var41 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var40);
    boolean var43 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var44 = var41.supportsResultSetType(0);
    boolean var45 = var41.supportsOpenCursorsAcrossCommit();
    boolean var46 = var41.supportsCoreSQLGrammar();
    int var47 = var41.getMaxColumnsInSelect();
    int var48 = var41.getMaxBinaryLiteralLength();
    int var49 = var41.getMaxCursorNameLength();
    boolean var50 = var18.othersDeletesAreVisible(var49);
    java.lang.String var51 = var18.getNumericFunctions();
    int var52 = var18.getMaxColumnsInTable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var53 = var4.getColumnClassName(var52);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinySQL"+ "'", var21.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ""+ "'", var51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 10000);

  }

  public void test384() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsPositionedUpdate();
    int var37 = var13.getResultSetHoldability();
    boolean var38 = var13.supportsStatementPooling();
    int var39 = var13.getMaxConnections();
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var49 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var50 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var51 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var52 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var51);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var53 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var52);
    boolean var54 = var53.isCatalogAtStart();
    boolean var55 = var53.supportsSchemasInTableDefinitions();
    boolean var56 = var53.dataDefinitionCausesTransactionCommit();
    int var57 = var53.getMaxIndexLength();
    boolean var58 = var13.othersDeletesAreVisible(var57);
    boolean var59 = var13.locatorsUpdateCopy();
    boolean var60 = var13.supportsGetGeneratedKeys();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test385() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var29 = var28.getMaxColumnsInIndex();
    boolean var30 = var12.isValid(var29);
    java.sql.Statement var31 = var12.createStatement();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var32 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var12);
    boolean var33 = var32.supportsANSI92FullSQL();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var34 = var32.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test386() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var1 = var0.getSQLState();
    java.lang.String var2 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var2.equals("com.sqlmagic.tinysql.tinySQLException"));

  }

  public void test387() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    boolean var24 = var13.supportsSchemasInDataManipulation();
    boolean var25 = var13.supportsCoreSQLGrammar();
    int var26 = var13.getMaxColumnNameLength();
    byte[] var27 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);

  }

  public void test388() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var22 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var23 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var25 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var24);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var26 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var25);
    boolean var27 = var26.nullsAreSortedAtEnd();
    int var28 = var26.getMaxTableNameLength();
    java.lang.String var29 = var26.getDatabaseProductName();
    boolean var31 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var32 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var33 = var26.ownInsertsAreVisible(0);
    boolean var34 = var12.isValid(0);
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var45 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var47 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var46);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var48 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    boolean var50 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var51 = var48.supportsResultSetType(0);
    boolean var52 = var48.supportsOpenCursorsAcrossCommit();
    int var53 = var48.getMaxCharLiteralLength();
    boolean var54 = var48.supportsSchemasInProcedureCalls();
    boolean var55 = var48.nullsAreSortedAtEnd();
    boolean var56 = var48.supportsANSI92IntermediateSQL();
    var12.setAutoCommit(var56);
    java.sql.Blob var58 = var12.createBlob();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "tinySQL"+ "'", var29.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);

  }

  public void test389() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var10 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var12 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var16 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test390() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsAlterTableWithAddColumn();
    boolean var31 = var13.supportsSubqueriesInQuantifieds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test391() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    boolean var15 = var13.autoCommitFailureClosesAllResultSets();
    boolean var16 = var13.usesLocalFilePerTable();
    boolean var17 = var13.storesLowerCaseIdentifiers();
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var28 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var29);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var31 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var30);
    boolean var33 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var34 = var31.supportsResultSetType(0);
    boolean var35 = var31.supportsOpenCursorsAcrossCommit();
    boolean var36 = var31.supportsCatalogsInDataManipulation();
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var50 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag(var39, var41, var50);
    boolean var52 = var31.othersUpdatesAreVisible(var41);
    int var53 = var31.getMaxTablesInSelect();
    boolean var54 = var31.supportsStoredFunctionsUsingCallSyntax();
    boolean var55 = var31.supportsSubqueriesInExists();
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var65 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var66 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var67 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var68 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var67);
    java.sql.Clob var69 = var68.createClob();
    double var73 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var79 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var80 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var81 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var82 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var81);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var83 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var82);
    boolean var85 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var86 = var83.supportsResultSetType(0);
    boolean var87 = var83.supportsOpenCursorsAcrossCommit();
    boolean var88 = var83.supportsCoreSQLGrammar();
    int var89 = var83.getMaxRowSize();
    int var90 = var83.getMaxIndexLength();
    boolean var91 = var68.isValid(var90);
    boolean var92 = var31.ownUpdatesAreVisible(var90);
    boolean var93 = var13.ownDeletesAreVisible(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test392() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var19 = var18.nullsAreSortedAtEnd();
    int var20 = var18.getMaxTableNameLength();
    java.lang.String var21 = var18.getDatabaseProductName();
    boolean var23 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var25 = var18.ownInsertsAreVisible(0);
    int var26 = var18.getMaxTablesInSelect();
    int var27 = var18.getJDBCMajorVersion();
    boolean var28 = var4.isWritable(var27);
    int var29 = var4.getColumnCount();
    com.sqlmagic.tinysql.tsResultSet var30 = new com.sqlmagic.tinysql.tsResultSet();
    int var31 = var30.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var32 = var30.getWhereClause();
    int var33 = var30.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var34 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var30);
    int var35 = var30.getType();
    boolean var36 = com.sqlmagic.tinysql.Utils.isCharColumn(var35);
    boolean var37 = var4.isAutoIncrement(var35);
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var50 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var49);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var51 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var50);
    boolean var53 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var54 = var51.supportsResultSetType(0);
    boolean var55 = var51.supportsOpenCursorsAcrossCommit();
    boolean var56 = var51.supportsCoreSQLGrammar();
    int var57 = var51.getMaxRowSize();
    int var58 = var51.getMaxIndexLength();
    int var59 = var51.getMaxProcedureNameLength();
    boolean var60 = var51.nullsAreSortedAtStart();
    int var61 = var51.getMaxUserNameLength();
    boolean var62 = var51.supportsPositionedDelete();
    java.lang.String var63 = var51.getDriverVersion();
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType(var63);
    boolean var65 = var4.isSearchable(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinySQL"+ "'", var21.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "2.26h"+ "'", var63.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test393() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    int var79 = var13.getMaxSchemaNameLength();
    java.lang.String var80 = var13.getUserName();
    com.sqlmagic.tinysql.tinySQLException var81 = new com.sqlmagic.tinysql.tinySQLException(var80);
    java.lang.String var82 = var81.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "com.sqlmagic.tinysql.tinySQLException: "+ "'", var82.equals("com.sqlmagic.tinysql.tinySQLException: "));

  }

  public void test394() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    boolean var19 = var13.supportsMultipleResultSets();
    int var20 = var13.getMaxStatements();
    boolean var21 = var13.supportsOpenStatementsAcrossCommit();
    boolean var22 = var13.supportsSchemasInIndexDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test395() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var25 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.sql.ResultSet var57 = var15.getSuperTypes("hi!", var31, var56);
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var59 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var31);
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);

  }

  public void test396() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var2 = var1.iterator();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var4 = var1.getSQLState();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test397() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var14 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var15 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var19 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var20 = var12.prepareStatement("hi!", var19);
    com.sqlmagic.tinysql.tinySQLStatement var21 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var12);
    java.sql.SQLWarning var22 = var21.getWarnings();
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.addBatch("hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));

  }

  public void test398() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsGetGeneratedKeys();
    boolean var18 = var15.supportsMultipleResultSets();
    boolean var19 = var15.supportsMultipleTransactions();
    java.lang.String var20 = var15.getTimeDateFunctions();
    java.lang.String var21 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var20);
    com.sqlmagic.tinysql.tsResultSet var22 = new com.sqlmagic.tinysql.tsResultSet();
    int var23 = var22.getLevel();
    boolean var24 = var22.isGrouped();
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getFetchSize();
    int var27 = var25.size();
    int var28 = var25.getColumnCount();
    int var29 = var25.getFetchSize();
    var22.setFetchSize(var29);
    int var31 = com.sqlmagic.tinysql.UtilString.intValue(var21, var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test399() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.supportsExtendedSQLGrammar();
    boolean var20 = var13.supportsUnion();
    boolean var21 = var13.supportsPositionedDelete();
    boolean var22 = var13.supportsBatchUpdates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test400() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isClosed();
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    boolean var17 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var18 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    java.util.Enumeration var34 = var33.keys();
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var45 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var47 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var46);
    boolean var48 = var47.isReadOnly();
    java.lang.Object var50 = var33.put((java.lang.Object)var48, (java.lang.Object)true);
    double var53 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var59 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var68 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var77 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var80 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var82 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var84 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var85 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var86 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var85);
    boolean var87 = com.sqlmagic.tinysql.UtilString.isInteger(var86);
    var14.setState(100, (java.util.Hashtable)var33, "hi!", var87);
    var12.setAutoClose(var87);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var90 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var91 = var90.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!"+ "'", var85.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi!"+ "'", var86.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test401() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var19 = var18.nullsAreSortedAtEnd();
    int var20 = var18.getMaxTableNameLength();
    java.lang.String var21 = var18.getDatabaseProductName();
    boolean var23 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var25 = var18.ownInsertsAreVisible(0);
    int var26 = var18.getMaxTablesInSelect();
    int var27 = var18.getJDBCMajorVersion();
    boolean var28 = var4.isWritable(var27);
    int var29 = var4.getColumnCount();
    com.sqlmagic.tinysql.tsResultSet var30 = new com.sqlmagic.tinysql.tsResultSet();
    int var31 = var30.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var32 = var30.getWhereClause();
    int var33 = var30.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var34 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var30);
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var45 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var47 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var46);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var48 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    int var49 = var48.getMaxColumnsInIndex();
    boolean var50 = var34.isWritable(var49);
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var60 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var61 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var63 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var62);
    int var64 = var63.getHoldability();
    boolean var65 = var34.isDefinitelyWritable(var64);
    com.sqlmagic.tinysql.tsResultSet var66 = new com.sqlmagic.tinysql.tsResultSet();
    int var67 = var66.getLevel();
    int var68 = var66.getColumnCount();
    java.util.Hashtable var69 = var66.getTableState();
    int var70 = var66.getType();
    int var71 = var66.getType();
    boolean var72 = var34.isReadOnly(var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var73 = var4.getColumnLabel(var71);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinySQL"+ "'", var21.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test402() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsPositionedDelete();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test403() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var1 = var0.getNextException();
    java.lang.String var2 = var0.toString();
    com.sqlmagic.tinysql.tinySQLException var3 = new com.sqlmagic.tinysql.tinySQLException();
    var0.setNextException((java.sql.SQLException)var3);
    java.util.Iterator var5 = var3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var2.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test404() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var14 = var13.getMaxColumnsInIndex();
    int var15 = var13.getMaxColumnsInOrderBy();
    boolean var16 = var13.supportsPositionedDelete();
    int var17 = var13.getMaxTableNameLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.supportsNonNullableColumns();
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var30 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var39 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    java.sql.ResultSet var51 = var13.getSuperTypes(var27, "hi!", "hi!");
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var61 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var62 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var64 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var65 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var64);
    boolean var66 = var65.nullsAreSortedAtEnd();
    int var67 = var65.getMaxTableNameLength();
    java.lang.String var68 = var65.getDatabaseProductName();
    boolean var70 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var71 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var72 = var65.ownInsertsAreVisible(0);
    int var73 = var65.getMaxTablesInSelect();
    boolean var74 = var65.supportsGroupByUnrelated();
    java.lang.String var75 = var65.getDatabaseProductName();
    com.sqlmagic.tinysql.tinySQLException var76 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var77 = var76.getNextException();
    java.lang.String var78 = var76.toString();
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType(var78);
    byte[] var80 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var79);
    int var81 = com.sqlmagic.tinysql.UtilString.intValue(var75, var79);
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue(var75);
    boolean var83 = com.sqlmagic.tinysql.Utils.renameFile("hi!", var75);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var27.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "tinySQL"+ "'", var68.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "tinySQL"+ "'", var75.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var78.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test405() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getSQLStateType();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var23);
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var46 = var13.getSuperTypes(var24, "", "hi!");
    boolean var47 = var13.nullsAreSortedAtStart();
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var57 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var58 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var60 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var59);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    boolean var63 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var64 = var61.supportsResultSetType(0);
    boolean var65 = var61.supportsOpenCursorsAcrossCommit();
    boolean var66 = var61.supportsCatalogsInDataManipulation();
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var69 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var78 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var80 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var81 = new com.sqlmagic.tinysql.SimpleXMLTag(var69, var71, var80);
    boolean var82 = var61.othersUpdatesAreVisible(var71);
    int var83 = var61.getMaxTablesInSelect();
    boolean var84 = var61.supportsPositionedUpdate();
    int var85 = var61.getResultSetHoldability();
    boolean var86 = var13.insertsAreDetected(var85);
    boolean var87 = var13.supportsOpenStatementsAcrossRollback();
    int var88 = var13.getMaxProcedureNameLength();
    int var89 = var13.getMaxBinaryLiteralLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var45.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test406() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    int var18 = var13.getMaxCatalogNameLength();
    boolean var19 = var13.locatorsUpdateCopy();
    boolean var20 = var13.nullsAreSortedAtStart();
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var35 = var34.nullsAreSortedAtEnd();
    int var36 = var34.getMaxTableNameLength();
    java.lang.String var37 = var34.getDatabaseProductName();
    boolean var39 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var40 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var41 = var34.ownInsertsAreVisible(0);
    boolean var42 = var34.supportsGroupByUnrelated();
    boolean var43 = var34.supportsSchemasInIndexDefinitions();
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var53 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var54 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var56 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var55);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var57 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var56);
    boolean var59 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var60 = var57.supportsResultSetType(0);
    boolean var61 = var57.supportsOpenCursorsAcrossCommit();
    boolean var62 = var57.supportsCoreSQLGrammar();
    int var63 = var57.getMaxColumnsInSelect();
    int var64 = var57.getMaxBinaryLiteralLength();
    int var65 = var57.getMaxCursorNameLength();
    boolean var66 = var34.othersDeletesAreVisible(var65);
    boolean var67 = var13.insertsAreDetected(var65);
    java.lang.String var68 = var13.getUserName();
    com.sqlmagic.tinysql.Utils.delFile(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "tinySQL"+ "'", var37.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));

  }

  public void test407() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    java.sql.SQLXML var16 = var12.createSQLXML();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var17 = var12.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);

  }

  public void test408() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsFullOuterJoins();
    int var17 = var15.getDatabaseMinorVersion();
    boolean var18 = var15.supportsCatalogsInProcedureCalls();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var19 = var15.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test409() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    int var79 = var13.getDatabaseMajorVersion();
    int var80 = var13.getMaxCursorNameLength();
    boolean var81 = var13.supportsTransactions();
    int var82 = var13.getMaxRowSize();
    boolean var83 = var13.dataDefinitionCausesTransactionCommit();
    boolean var84 = var13.supportsPositionedUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test410() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    boolean var16 = var13.supportsLimitedOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test411() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    int var65 = var11.getMajorVersion();
    int var66 = var11.getMinorVersion();
    int var67 = var11.getMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test412() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxColumnsInSelect();
    java.lang.String var36 = var13.getDatabaseProductVersion();
    boolean var37 = var13.supportsOpenCursorsAcrossCommit();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var50 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var49);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var51 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var50);
    boolean var52 = var51.isCatalogAtStart();
    int var53 = var51.getMaxColumnsInIndex();
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var63 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var64 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var65 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var66 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var65);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var67 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var66);
    boolean var69 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var70 = var67.supportsResultSetType(0);
    boolean var71 = var67.supportsOpenCursorsAcrossCommit();
    boolean var72 = var67.supportsCoreSQLGrammar();
    int var73 = var67.getMaxRowSize();
    int var74 = var67.getMaxIndexLength();
    int var75 = var67.getMaxProcedureNameLength();
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var83 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var85 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var86 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var88 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var87);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var89 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var88);
    boolean var91 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var92 = var89.supportsResultSetType(0);
    boolean var93 = var89.supportsOpenCursorsAcrossCommit();
    boolean var94 = var89.supportsCatalogsInDataManipulation();
    int var95 = var89.getMaxColumnsInGroupBy();
    boolean var96 = var51.supportsResultSetConcurrency(var75, var95);
    boolean var97 = var13.othersDeletesAreVisible(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "2.26h"+ "'", var36.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test413() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.supportsGetGeneratedKeys();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    int var16 = var13.getDriverMinorVersion();
    boolean var17 = var13.supportsSchemasInProcedureCalls();
    boolean var18 = var13.supportsTableCorrelationNames();
    boolean var19 = var13.allTablesAreSelectable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test414() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    boolean var15 = var13.autoCommitFailureClosesAllResultSets();
    boolean var16 = var13.usesLocalFilePerTable();
    java.sql.RowIdLifetime var17 = var13.getRowIdLifetime();
    boolean var18 = var13.supportsSchemasInIndexDefinitions();
    boolean var19 = var13.locatorsUpdateCopy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test415() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var3 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var9 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var8);
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var13 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles(var8, "hi!");
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var57 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var64 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var68 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var70 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var71 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var72 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var82 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var85 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var87 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var88 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var89 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var90 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var91 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var92 = var39.getConnection("hi!", "hi!", (java.sql.Driver)var91);
    com.sqlmagic.tinysql.tinySQLConnection var93 = var0.getConnection(var8, "hi!", (java.sql.Driver)var91);
    java.sql.DatabaseMetaData var94 = var93.getMetaData();
    boolean var95 = var93.isReadOnly();
    var93.clearWarnings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var97 = var93.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var8.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var9.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test416() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    java.sql.SQLWarning var66 = var65.getWarnings();
    java.sql.Connection var67 = var65.getConnection();
    int var68 = var65.getUpdateCount();
    var65.cancel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));

  }

  public void test417() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.usesLocalFilePerTable();
    java.lang.String var15 = var13.getDatabaseProductVersion();
    com.sqlmagic.tinysql.tsResultSet var16 = new com.sqlmagic.tinysql.tsResultSet();
    int var17 = var16.getLevel();
    boolean var19 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var20 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    java.util.Enumeration var36 = var35.keys();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var46 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var47 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var49 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var48);
    boolean var50 = var49.isReadOnly();
    java.lang.Object var52 = var35.put((java.lang.Object)var50, (java.lang.Object)true);
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var61 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var73 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var79 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var84 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var85 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var86 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var87 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var88 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var87);
    boolean var89 = com.sqlmagic.tinysql.UtilString.isInteger(var88);
    var16.setState(100, (java.util.Hashtable)var35, "hi!", var89);
    java.util.Vector var91 = var16.getTables();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var92 = com.sqlmagic.tinysql.UtilString.findTableForAlias(var15, var91);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "2.26h"+ "'", var15.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!"+ "'", var85.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);

  }

  public void test418() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    boolean var20 = var13.nullsAreSortedAtEnd();
    boolean var21 = var13.supportsANSI92IntermediateSQL();
    java.sql.ResultSet var22 = var13.getTypeInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test419() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxUserNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test420() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsFullOuterJoins();
    int var17 = var15.getSQLStateType();
    boolean var18 = var15.supportsAlterTableWithDropColumn();
    boolean var19 = var15.supportsCatalogsInDataManipulation();
    boolean var20 = var15.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test421() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsCoreSQLGrammar();
    boolean var22 = var13.supportsStoredProcedures();
    int var23 = var13.getMaxStatements();
    boolean var24 = var13.supportsGroupByBeyondSelect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test422() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    com.sqlmagic.tinysql.tsResultSet var16 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var17 = new com.sqlmagic.tinysql.tsResultSet();
    int var18 = var17.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var19 = var17.getWhereClause();
    int var20 = var17.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var21 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var17);
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var32 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var34 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var33);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var35 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var36 = var35.getMaxColumnsInIndex();
    boolean var37 = var21.isWritable(var36);
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var50 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var49);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var51 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var50);
    boolean var52 = var51.nullsAreSortedAtEnd();
    boolean var53 = var51.supportsLikeEscapeClause();
    int var54 = var51.getMaxColumnsInIndex();
    boolean var55 = var16.getMoreResults(var36, var54);
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var65 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var66 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var67 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var68 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var67);
    java.sql.Clob var69 = var68.createClob();
    int var70 = var68.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var71 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var68);
    boolean var72 = var71.supportsGroupBy();
    boolean var73 = var71.supportsGetGeneratedKeys();
    com.sqlmagic.tinysql.tsResultSet var74 = new com.sqlmagic.tinysql.tsResultSet();
    int var75 = var74.getLevel();
    int var76 = var74.getColumnCount();
    java.util.Hashtable var77 = var74.getTableState();
    int var78 = var74.getLevel();
    boolean var79 = var71.othersInsertsAreVisible(var78);
    var16.setType(var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var81 = var14.getTag(var78);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test423() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.storesLowerCaseIdentifiers();
    java.sql.ResultSet var22 = var13.getTypeInfo();
    boolean var23 = var13.supportsStatementPooling();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test424() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    boolean var24 = var13.storesLowerCaseIdentifiers();
    boolean var25 = var13.storesLowerCaseIdentifiers();
    java.sql.ResultSet var26 = var13.getTableTypes();
    boolean var27 = var13.supportsTableCorrelationNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test425() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    boolean var19 = var13.supportsMultipleResultSets();
    boolean var20 = var13.dataDefinitionCausesTransactionCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test426() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var14 = var13.getMaxColumnsInIndex();
    int var15 = var13.getMaxColumnsInOrderBy();
    boolean var16 = var13.supportsPositionedDelete();
    boolean var17 = var13.supportsMixedCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test427() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    int var21 = var4.getColumnCount();
    com.sqlmagic.tinysql.tsResultSet var22 = new com.sqlmagic.tinysql.tsResultSet();
    int var23 = var22.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var24 = var22.getWhereClause();
    int var25 = var22.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var26 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var22);
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var36 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var37 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var39 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var38);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var40 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var39);
    int var41 = var40.getMaxColumnsInIndex();
    boolean var42 = var26.isWritable(var41);
    int var43 = var26.getColumnCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var44 = var4.getColumnLabel(var43);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);

  }

  public void test428() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag(var24, var26, var35);
    java.util.Enumeration var37 = var36.keys();
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var39 = var38.iterator();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var47 = var36.put((java.lang.Object)var39, (java.lang.Object)var46);
    java.lang.Object[] var48 = new java.lang.Object[] { var39};
    java.sql.Array var49 = var12.createArrayOf("hi!", var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var50 = com.sqlmagic.tinysql.UtilString.dateValue("hi!");
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var21.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test429() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    boolean var19 = var18.isCatalogAtStart();
    int var20 = var18.getMaxColumnsInIndex();
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var37 = var34.supportsResultSetType(0);
    boolean var38 = var34.supportsOpenCursorsAcrossCommit();
    boolean var39 = var34.supportsCoreSQLGrammar();
    int var40 = var34.getMaxRowSize();
    int var41 = var34.getMaxIndexLength();
    int var42 = var34.getMaxProcedureNameLength();
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var52 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var53 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var55 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var54);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var56 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var55);
    boolean var58 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var59 = var56.supportsResultSetType(0);
    boolean var60 = var56.supportsOpenCursorsAcrossCommit();
    boolean var61 = var56.supportsCatalogsInDataManipulation();
    int var62 = var56.getMaxColumnsInGroupBy();
    boolean var63 = var18.supportsResultSetConcurrency(var42, var62);
    boolean var64 = var4.isAutoIncrement(var62);
    com.sqlmagic.tinysql.tinySQLException var65 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var66 = var65.getNextException();
    java.lang.String var67 = var65.toString();
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType(var67);
    byte[] var69 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var68);
    boolean var70 = var4.isWritable(var68);
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var76 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var78 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var80 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var81 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var82 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var83 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var82);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var84 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var83);
    boolean var86 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var87 = var84.supportsResultSetType(0);
    boolean var88 = var84.supportsOpenCursorsAcrossCommit();
    int var89 = var84.getMaxCharLiteralLength();
    boolean var90 = var84.supportsSchemasInProcedureCalls();
    boolean var91 = var84.nullsAreSortedAtEnd();
    int var92 = var84.getResultSetHoldability();
    int var93 = var84.getMaxTablesInSelect();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var94 = var4.getColumnName(var93);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var67.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 1);

  }

  public void test430() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    java.lang.String var3 = var0.toString();
    int var4 = var0.getFetchSize();
    int var5 = var0.getColumnCount();
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var13 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var15 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var18 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var17);
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var60 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var69 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var70 = var17.getConnection("hi!", "hi!", (java.sql.Driver)var69);
    com.sqlmagic.tinysql.tinySQLStatement var71 = new com.sqlmagic.tinysql.tinySQLStatement(var70);
    java.sql.SQLWarning var72 = var71.getWarnings();
    boolean var73 = var71.isPoolable();
    int var74 = var71.getUpdateCount();
    com.sqlmagic.tinysql.tinySQLResultSet var75 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var75.insertRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var3.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));

  }

  public void test431() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    int var36 = var13.getMaxStatements();
    boolean var37 = var13.supportsCatalogsInProcedureCalls();
    boolean var38 = var13.storesUpperCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test432() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsStoredFunctionsUsingCallSyntax();
    boolean var37 = var13.supportsSubqueriesInIns();
    int var38 = var13.getJDBCMajorVersion();
    boolean var39 = var13.supportsSchemasInProcedureCalls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test433() throws Throwable {

    com.sqlmagic.tinysql.textFile var0 = new com.sqlmagic.tinysql.textFile();
    double var4 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var8 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var10 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var12 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var13 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var12);
    boolean var15 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var16 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var20 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var21 = var13.prepareStatement("hi!", var20);
    com.sqlmagic.tinysql.tinySQLStatement var22 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var13);
    java.sql.SQLWarning var23 = var22.getWarnings();
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var37 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var36);
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var51 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag(var40, var42, var51);
    boolean var53 = var37.ownDeletesAreVisible(var42);
    boolean var54 = var37.supportsSubqueriesInQuantifieds();
    boolean var55 = var37.supportsStoredProcedures();
    java.lang.String var56 = var37.getDatabaseProductName();
    int[] var57 = new int[] { };
    int var58 = var22.executeUpdate(var56, var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var59 = var0.sqlexec(var22);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "tinySQL"+ "'", var56.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test434() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    int var66 = var65.getQueryTimeout();
    boolean var67 = var65.getMoreResults();
    var65.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var65.clearBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test435() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    boolean var8 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test436() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var16 = var15.getMaxColumnsInTable();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var26 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var27 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var29 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var28);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var30 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var29);
    boolean var31 = var30.nullsAreSortedAtEnd();
    boolean var32 = var30.supportsLikeEscapeClause();
    int var33 = var30.getMaxUserNameLength();
    boolean var34 = var15.supportsResultSetHoldability(var33);
    boolean var35 = var15.supportsOpenCursorsAcrossCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test437() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    java.lang.String var3 = var0.toString();
    int var4 = var0.getFetchSize();
    int var5 = var0.getColumnCount();
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var13 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var15 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var18 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var17);
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var60 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var69 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var70 = var17.getConnection("hi!", "hi!", (java.sql.Driver)var69);
    com.sqlmagic.tinysql.tinySQLStatement var71 = new com.sqlmagic.tinysql.tinySQLStatement(var70);
    java.sql.SQLWarning var72 = var71.getWarnings();
    boolean var73 = var71.isPoolable();
    int var74 = var71.getUpdateCount();
    com.sqlmagic.tinysql.tinySQLResultSet var75 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var71);
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var78 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var84 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var83);
    java.lang.String var85 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName(var84);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var84);
    java.io.Reader var87 = var75.getCharacterStream(var84);
    var75.beforeFirst();
    com.sqlmagic.tinysql.tinySQLException var89 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var90 = var89.getNextException();
    java.lang.String var91 = var89.toString();
    com.sqlmagic.tinysql.tinySQLException var92 = new com.sqlmagic.tinysql.tinySQLException();
    var89.setNextException((java.sql.SQLException)var92);
    java.lang.String var94 = var92.getSQLState();
    java.lang.String var95 = var92.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var96 = var75.getInt(var95);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var3.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var83.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var84.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "COL00000"+ "'", var85.equals("COL00000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var91.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var95.equals("com.sqlmagic.tinysql.tinySQLException"));

  }

  public void test438() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    java.lang.String var20 = var13.getDatabaseProductName();
    boolean var21 = var13.supportsANSI92EntryLevelSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "tinySQL"+ "'", var20.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test439() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var14 = var13.getMaxColumnsInIndex();
    int var15 = var13.getMaxColumnsInOrderBy();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var30 = var29.nullsAreSortedAtEnd();
    int var31 = var29.getMaxTableNameLength();
    java.lang.String var32 = var29.getDatabaseProductName();
    boolean var34 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var35 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var36 = var29.ownInsertsAreVisible(0);
    boolean var37 = var13.supportsResultSetType(0);
    java.lang.String var38 = var13.getExtraNameCharacters();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var49 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var51 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var50);
    java.sql.Clob var52 = var51.createClob();
    int var53 = var51.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var54 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var51);
    boolean var55 = var54.supportsGroupBy();
    boolean var56 = var54.supportsGetGeneratedKeys();
    boolean var57 = var54.supportsMultipleResultSets();
    boolean var58 = var54.supportsLikeEscapeClause();
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var69 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var71 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var70);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var72 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var71);
    boolean var73 = var72.nullsAreSortedAtEnd();
    int var74 = var72.getMaxTableNameLength();
    java.lang.String var75 = var72.getDatabaseProductName();
    boolean var77 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var78 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var79 = var72.ownInsertsAreVisible(0);
    int var80 = var72.getMaxTablesInSelect();
    boolean var81 = var72.supportsGroupByUnrelated();
    java.lang.String var82 = var72.getDatabaseProductName();
    boolean var83 = var72.storesUpperCaseQuotedIdentifiers();
    boolean var84 = var72.supportsGroupBy();
    int var85 = var72.getMaxCursorNameLength();
    boolean var86 = var54.insertsAreDetected(var85);
    int var88 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var89 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var93 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var94 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var95 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var94);
    java.lang.String var96 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var95);
    java.lang.String var97 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var96);
    boolean var98 = com.sqlmagic.tinysql.Utils.clearFunction(var97);
    java.lang.String var99 = com.sqlmagic.tinysql.Utils.forceToSize(var38, var85, var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "tinySQL"+ "'", var32.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "tinySQL"+ "'", var75.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "tinySQL"+ "'", var82.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "hi!"+ "'", var89.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var94.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var95.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var96.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var97.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + ""+ "'", var99.equals(""));

  }

  public void test440() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var21 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var25 = var12.prepareStatement("hi!", 100);
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var40 = var39.nullsAreSortedAtEnd();
    int var41 = var39.getMaxTableNameLength();
    java.lang.String var42 = var39.getDatabaseProductName();
    boolean var44 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var45 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var46 = var39.ownInsertsAreVisible(0);
    int var47 = var39.getMaxTablesInSelect();
    int var48 = var39.getJDBCMajorVersion();
    boolean var49 = var12.isValid(var48);
    java.util.Properties var50 = var12.getClientInfo();
    java.sql.SQLXML var51 = var12.createSQLXML();
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var65 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var66 = new com.sqlmagic.tinysql.SimpleXMLTag(var54, var56, var65);
    java.util.Enumeration var67 = var66.keys();
    com.sqlmagic.tinysql.tinySQLException var68 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var69 = var68.iterator();
    double var72 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var76 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var77 = var66.put((java.lang.Object)var69, (java.lang.Object)var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.setReadOnly(var76);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "tinySQL"+ "'", var42.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);

  }

  public void test441() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    java.lang.String var3 = var0.toString();
    int var4 = var0.getFetchSize();
    int var5 = var0.getColumnCount();
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var13 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var15 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var18 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var17);
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var60 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var69 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var70 = var17.getConnection("hi!", "hi!", (java.sql.Driver)var69);
    com.sqlmagic.tinysql.tinySQLStatement var71 = new com.sqlmagic.tinysql.tinySQLStatement(var70);
    java.sql.SQLWarning var72 = var71.getWarnings();
    boolean var73 = var71.isPoolable();
    int var74 = var71.getUpdateCount();
    com.sqlmagic.tinysql.tinySQLResultSet var75 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var71);
    com.sqlmagic.tinysql.tsResultSet var76 = new com.sqlmagic.tinysql.tsResultSet();
    int var77 = var76.getFetchSize();
    int var78 = var76.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Ref var79 = var75.getRef(var78);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var3.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test442() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSubqueriesInIns();
    java.lang.String var16 = var13.getDriverVersion();
    boolean var17 = var13.supportsSubqueriesInQuantifieds();
    int var18 = var13.getMaxColumnsInSelect();
    boolean var19 = var13.supportsCatalogsInProcedureCalls();
    boolean var20 = var13.supportsSavepoints();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2.26h"+ "'", var16.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test443() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.removeQuotes(var23);
    boolean var25 = var14.contains((java.lang.Object)var23);
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var40 = new com.sqlmagic.tinysql.SimpleXMLTag(var28, var30, var39);
    java.util.Enumeration var41 = var40.keys();
    com.sqlmagic.tinysql.tinySQLException var42 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var43 = var42.iterator();
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var51 = var40.put((java.lang.Object)var43, (java.lang.Object)var50);
    java.util.Enumeration var52 = var40.elements();
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.removeQuotes(var60);
    java.lang.Object var62 = var14.put((java.lang.Object)var40, (java.lang.Object)var61);
    double var66 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var69 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var72 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var73 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var74 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var75 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var74);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var76 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var75);
    boolean var78 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var79 = var76.supportsResultSetType(0);
    boolean var80 = var76.supportsOpenCursorsAcrossCommit();
    int var81 = var76.getMaxCharLiteralLength();
    boolean var82 = var76.supportsSchemasInProcedureCalls();
    boolean var83 = var76.nullsAreSortedAtEnd();
    boolean var84 = var76.supportsUnion();
    boolean var85 = var76.supportsCatalogsInDataManipulation();
    boolean var86 = var14.equals((java.lang.Object)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var60.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var61.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test444() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var29 = var28.getMaxColumnsInIndex();
    boolean var30 = var12.isValid(var29);
    java.sql.Statement var31 = var12.createStatement();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var32 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);

  }

  public void test445() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    boolean var16 = var13.nullPlusNonNullIsNull();
    int var17 = var13.getMaxTableNameLength();
    boolean var18 = var13.supportsGroupBy();
    boolean var19 = var13.supportsCatalogsInTableDefinitions();
    boolean var20 = var13.supportsLimitedOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test446() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    java.util.Vector var1 = var0.getTables();
    double var5 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var9 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var14 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var13);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var14);
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var38 = new com.sqlmagic.tinysql.SimpleXMLTag(var26, var28, var37);
    java.util.Enumeration var39 = var38.keys();
    com.sqlmagic.tinysql.tinySQLException var40 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var41 = var40.iterator();
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var49 = var38.put((java.lang.Object)var41, (java.lang.Object)var48);
    java.lang.Object[] var50 = new java.lang.Object[] { var41};
    java.sql.Array var51 = var14.createArrayOf("hi!", var50);
    var14.clearWarnings();
    java.sql.Clob var53 = var14.createClob();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var54 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var14);
    java.sql.DatabaseMetaData var55 = var14.getMetaData();
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.lang.String var65 = var14.nativeSQL("hi!");
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var69 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.toYMD(var70);
    com.sqlmagic.tinysql.tinySQLException var72 = new com.sqlmagic.tinysql.tinySQLException();
    java.sql.SQLException var73 = var72.getNextException();
    java.lang.String var74 = var72.toString();
    int var75 = com.sqlmagic.tinysql.UtilString.getValueType(var74);
    double var77 = com.sqlmagic.tinysql.UtilString.doubleValue(var74, 100.0d);
    double var78 = com.sqlmagic.tinysql.UtilString.doubleValue(var70, 100.0d);
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", var78);
    com.sqlmagic.tinysql.Utils.setPriority(var1, "hi!");
    com.sqlmagic.tinysql.tinySQLException var81 = new com.sqlmagic.tinysql.tinySQLException("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var74.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 100.0d);

  }

  public void test447() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    boolean var15 = var12.getAutoClose();
    java.sql.Statement var16 = var12.createStatement();
    java.sql.SQLWarning var17 = var12.getWarnings();
    var12.clearWarnings();
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var24 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var28 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var29 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var31 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var30);
    double var34 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var64 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var67 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var71 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var73 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var76 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var78 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var80 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var81 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var82 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var83 = var30.getConnection("hi!", "hi!", (java.sql.Driver)var82);
    com.sqlmagic.tinysql.tinySQLStatement var84 = new com.sqlmagic.tinysql.tinySQLStatement(var83);
    int var85 = var84.getQueryTimeout();
    boolean var86 = var84.getMoreResults();
    var84.close();
    boolean var88 = var84.isClosed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var89 = var12.executetinySQL(var84);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "hi!"+ "'", var81.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test448() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSubqueriesInIns();
    java.lang.String var16 = var13.getDriverVersion();
    java.lang.String var17 = var13.getDatabaseProductVersion();
    boolean var18 = var13.doesMaxRowSizeIncludeBlobs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2.26h"+ "'", var16.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "2.26h"+ "'", var17.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test449() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var35 = var34.supportsGetGeneratedKeys();
    boolean var36 = var34.supportsDataManipulationTransactionsOnly();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var46 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var47 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var49 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var48);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var50 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var49);
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var53 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var64 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag(var53, var55, var64);
    boolean var66 = var50.ownDeletesAreVisible(var55);
    boolean var67 = var50.supportsAlterTableWithAddColumn();
    java.lang.String var68 = var50.getDatabaseProductVersion();
    int var69 = var50.getMaxCharLiteralLength();
    boolean var70 = var34.supportsTransactionIsolationLevel(var69);
    int var71 = var4.isNullable(var69);
    double var75 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var78 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var79 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var81 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var82 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var83 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var84 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var83);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var85 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var84);
    boolean var86 = var85.isCatalogAtStart();
    int var87 = var85.getMaxColumnsInIndex();
    int var88 = var85.getDriverMinorVersion();
    boolean var89 = var4.isWritable(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "2.26h"+ "'", var68.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test450() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var26 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var27 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var28 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var29 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var28);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var30 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var29);
    boolean var32 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var33 = var30.supportsResultSetType(0);
    boolean var34 = var30.supportsOpenCursorsAcrossCommit();
    boolean var35 = var30.supportsCatalogsInDataManipulation();
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var43 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var45 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var49 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var50 = new com.sqlmagic.tinysql.SimpleXMLTag(var38, var40, var49);
    boolean var51 = var30.othersUpdatesAreVisible(var40);
    java.sql.ResultSet var52 = var30.getClientInfoProperties();
    double var56 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var58 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var59 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var60 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var62 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var63 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var65 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var64);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var65);
    boolean var68 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var69 = var66.supportsResultSetType(0);
    boolean var70 = var66.supportsOpenCursorsAcrossCommit();
    int var71 = var66.getMaxCharLiteralLength();
    boolean var72 = var66.supportsSchemasInProcedureCalls();
    boolean var73 = var66.nullsAreSortedAtEnd();
    int var74 = var66.getResultSetHoldability();
    boolean var75 = var30.othersInsertsAreVisible(var74);
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var83 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var85 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var86 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var88 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var87);
    java.sql.Clob var89 = var88.createClob();
    int var90 = var88.getHoldability();
    boolean var91 = var13.supportsResultSetConcurrency(var74, var90);
    int var92 = var13.getMaxStatements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 10);

  }

  public void test451() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    boolean var29 = var28.isReadOnly();
    java.lang.Object var31 = var14.put((java.lang.Object)var29, (java.lang.Object)true);
    java.util.Set var32 = var14.entrySet();
    double var36 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var40 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var42 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var43 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var45 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var44);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var46 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var45);
    boolean var47 = var46.nullsAreSortedAtEnd();
    int var48 = var46.getMaxTableNameLength();
    java.lang.String var49 = var46.getDatabaseProductName();
    boolean var51 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var52 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var53 = var46.ownInsertsAreVisible(0);
    boolean var54 = var46.supportsGroupByUnrelated();
    boolean var55 = var14.containsKey((java.lang.Object)var54);
    java.util.Set var56 = var14.entrySet();
    java.util.Enumeration var57 = var14.keys();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "tinySQL"+ "'", var49.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);

  }

  public void test452() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getFetchSize();
    double var5 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var7 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var9 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var11 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var14 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var13);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var14);
    boolean var17 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var18 = var15.supportsResultSetType(0);
    boolean var19 = var15.supportsOpenCursorsAcrossCommit();
    boolean var20 = var15.supportsCatalogsInDataManipulation();
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag(var23, var25, var34);
    boolean var36 = var15.othersUpdatesAreVisible(var25);
    int var37 = var15.getMaxTablesInSelect();
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var47 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var51 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag(var40, var42, var51);
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var60 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var72 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var74 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var73);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var75 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var74);
    boolean var76 = var75.isCatalogAtStart();
    boolean var77 = var75.supportsSchemasInTableDefinitions();
    boolean var78 = var75.supportsAlterTableWithDropColumn();
    var0.setState(var37, (java.util.Hashtable)var52, var61, var78);
    boolean var80 = var52.isEmpty();
    java.lang.Object var81 = var52.clone();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var82 = com.sqlmagic.tinysql.UtilString.actionToString((java.util.Hashtable)var52);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test453() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsGetGeneratedKeys();
    boolean var18 = var15.supportsMinimumSQLGrammar();
    boolean var19 = var15.allTablesAreSelectable();
    boolean var20 = var15.supportsSubqueriesInQuantifieds();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = var15.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test454() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getDatabaseProductName();
    boolean var24 = var13.storesUpperCaseQuotedIdentifiers();
    java.lang.String var25 = var13.getSystemFunctions();
    boolean var26 = var13.supportsTransactions();
    int var27 = var13.getDatabaseMajorVersion();
    boolean var28 = var13.supportsAlterTableWithAddColumn();
    boolean var29 = var13.nullsAreSortedHigh();
    boolean var30 = var13.nullsAreSortedAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "tinySQL"+ "'", var23.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test455() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var14 = var13.getMaxColumnsInIndex();
    int var15 = var13.getMaxColumnsInOrderBy();
    boolean var16 = var13.supportsSchemasInTableDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test456() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    java.lang.String var3 = var0.toString();
    int var4 = var0.getFetchSize();
    int var5 = var0.getColumnCount();
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var13 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var15 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var18 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var17);
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var60 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var69 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var70 = var17.getConnection("hi!", "hi!", (java.sql.Driver)var69);
    com.sqlmagic.tinysql.tinySQLStatement var71 = new com.sqlmagic.tinysql.tinySQLStatement(var70);
    java.sql.SQLWarning var72 = var71.getWarnings();
    boolean var73 = var71.isPoolable();
    int var74 = var71.getUpdateCount();
    com.sqlmagic.tinysql.tinySQLResultSet var75 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var71);
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var78 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var84 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var83);
    double var87 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var88 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.util.Vector var89 = com.sqlmagic.tinysql.Utils.getAllFiles(var83, "hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var90 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var91 = var75.getLong("hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var3.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var83.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var84.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);

  }

  public void test457() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    boolean var15 = var13.supportsSchemasInTableDefinitions();
    boolean var16 = var13.supportsNonNullableColumns();
    java.lang.String var17 = var13.getDatabaseProductVersion();
    com.sqlmagic.tinysql.tsResultSet var18 = new com.sqlmagic.tinysql.tsResultSet();
    int var19 = var18.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var20 = var18.getWhereClause();
    int var21 = var18.size();
    double var25 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var31 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var32 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var34 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var33);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var35 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var37 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var38 = var35.supportsResultSetType(0);
    boolean var39 = var35.supportsOpenCursorsAcrossCommit();
    int var40 = var35.getMaxCharLiteralLength();
    boolean var41 = var35.supportsSchemasInProcedureCalls();
    boolean var42 = var35.nullsAreSortedAtEnd();
    int var43 = var35.getResultSetHoldability();
    int var44 = var35.getMaxTablesInSelect();
    java.lang.String var45 = var35.getSQLKeywords();
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType(var45);
    var18.setType(var46);
    java.lang.String var48 = var18.toString();
    int var49 = var18.numcols();
    boolean var50 = var13.supportsResultSetType(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "2.26h"+ "'", var17.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var48.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test458() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    boolean var16 = var13.supportsSubqueriesInQuantifieds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test459() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var3 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var4 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var19 = new com.sqlmagic.tinysql.SimpleXMLTag(var7, var9, var18);
    java.util.Enumeration var20 = var19.keys();
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    boolean var34 = var33.isReadOnly();
    java.lang.Object var36 = var19.put((java.lang.Object)var34, (java.lang.Object)true);
    double var39 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var54 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var63 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var66 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var69 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var72 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var71);
    boolean var73 = com.sqlmagic.tinysql.UtilString.isInteger(var72);
    var0.setState(100, (java.util.Hashtable)var19, "hi!", var73);
    java.util.Vector var75 = var0.getTables();
    java.util.Hashtable var76 = var0.getTableState();
    int var77 = var0.getLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 100);

  }

  public void test460() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var14 = var13.getMaxColumnsInIndex();
    int var15 = var13.getMaxColumnsInOrderBy();
    boolean var16 = var13.supportsPositionedDelete();
    int var17 = var13.getDriverMinorVersion();
    boolean var18 = var13.supportsSavepoints();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test461() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    com.sqlmagic.tinysql.tinySQLException var16 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var17 = var16.iterator();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var25 = var14.put((java.lang.Object)var17, (java.lang.Object)var24);
    java.util.Enumeration var26 = var14.elements();
    java.util.Set var27 = var14.entrySet();
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    java.sql.Clob var41 = var40.createClob();
    int var42 = var40.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var43 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var40);
    boolean var44 = var43.supportsGroupBy();
    boolean var45 = var43.supportsGetGeneratedKeys();
    boolean var46 = var43.supportsMultipleResultSets();
    int var47 = var43.getDriverMajorVersion();
    boolean var48 = var14.containsKey((java.lang.Object)var43);
    int var49 = var14.size();
    int var50 = var14.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);

  }

  public void test462() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    java.lang.String[] var43 = new java.lang.String[] { "hi!"};
    java.sql.PreparedStatement var44 = var12.prepareStatement(var38, var43);
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);

  }

  public void test463() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.removeQuotes(var23);
    boolean var25 = var14.contains((java.lang.Object)var23);
    int var27 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var39 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var40 = new com.sqlmagic.tinysql.SimpleXMLTag(var28, var30, var39);
    java.util.Enumeration var41 = var40.keys();
    com.sqlmagic.tinysql.tinySQLException var42 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var43 = var42.iterator();
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var51 = var40.put((java.lang.Object)var43, (java.lang.Object)var50);
    java.util.Enumeration var52 = var40.elements();
    int var54 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.UtilString.removeQuotes(var60);
    java.lang.Object var62 = var14.put((java.lang.Object)var40, (java.lang.Object)var61);
    int var63 = var40.countTags();
    boolean var65 = var40.contains((java.lang.Object)10.0d);
    boolean var66 = var40.hasMoreTags();
    boolean var67 = var40.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var60.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var61.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test464() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    boolean var14 = var12.getAutoClose();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var24 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var25 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var27 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var26);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var28 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var27);
    int var29 = var28.getMaxColumnsInIndex();
    boolean var30 = var12.isValid(var29);
    java.lang.String var31 = var12.getCatalog();
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var41 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var42 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var44 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var43);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var45 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var44);
    boolean var46 = var45.nullsAreSortedAtEnd();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.setReadOnly(var46);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test465() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCatalogsInDataManipulation();
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var32 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag(var21, var23, var32);
    boolean var34 = var13.othersUpdatesAreVisible(var23);
    int var35 = var13.getMaxTablesInSelect();
    boolean var36 = var13.supportsStoredFunctionsUsingCallSyntax();
    boolean var37 = var13.supportsSubqueriesInExists();
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var47 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var50 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var49);
    java.sql.Clob var51 = var50.createClob();
    double var55 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var57 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var61 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var62 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var64 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var65 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var64);
    boolean var67 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var68 = var65.supportsResultSetType(0);
    boolean var69 = var65.supportsOpenCursorsAcrossCommit();
    boolean var70 = var65.supportsCoreSQLGrammar();
    int var71 = var65.getMaxRowSize();
    int var72 = var65.getMaxIndexLength();
    boolean var73 = var50.isValid(var72);
    boolean var74 = var13.ownUpdatesAreVisible(var72);
    boolean var75 = var13.usesLocalFiles();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var76 = var13.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!"+ "'", var58.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test466() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    boolean var29 = var28.isReadOnly();
    java.lang.Object var31 = var14.put((java.lang.Object)var29, (java.lang.Object)true);
    java.util.Set var32 = var14.entrySet();
    java.lang.Object var33 = var14.clone();
    int var34 = var14.countTags();
    java.util.Set var35 = var14.entrySet();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var36 = com.sqlmagic.tinysql.UtilString.actionToString((java.util.Hashtable)var14);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test467() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    int var2 = var0.getColumnCount();
    java.util.Hashtable var3 = var0.getTableState();
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var14 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var16 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var15);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var17 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var16);
    boolean var19 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var20 = var17.supportsResultSetType(0);
    boolean var21 = var17.supportsOpenCursorsAcrossCommit();
    boolean var22 = var17.supportsCoreSQLGrammar();
    int var23 = var17.getMaxColumnsInSelect();
    var0.setLevel(var23);
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var38 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var37);
    boolean var39 = var38.isCatalogAtStart();
    int var40 = var38.getSQLStateType();
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var48);
    double var53 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var55 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var59 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var60 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var62 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var61);
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var69 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var70 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var71 = var38.getSuperTypes(var49, "", "hi!");
    int var72 = var38.getDatabaseMajorVersion();
    var0.setLevel(var72);
    java.util.Hashtable var74 = var0.getTableState();
    int var75 = var0.getLevel();
    int var76 = var0.numcols();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var48.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var49.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var70.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);

  }

  public void test468() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    java.lang.String var3 = var0.toString();
    int var4 = var0.getFetchSize();
    int var5 = var0.getColumnCount();
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var13 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var15 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var18 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var17);
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var60 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var69 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var70 = var17.getConnection("hi!", "hi!", (java.sql.Driver)var69);
    com.sqlmagic.tinysql.tinySQLStatement var71 = new com.sqlmagic.tinysql.tinySQLStatement(var70);
    java.sql.SQLWarning var72 = var71.getWarnings();
    boolean var73 = var71.isPoolable();
    int var74 = var71.getUpdateCount();
    com.sqlmagic.tinysql.tinySQLResultSet var75 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var71);
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var78 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var84 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var83);
    java.lang.String var85 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName(var84);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var84);
    java.io.Reader var87 = var75.getCharacterStream(var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var75.cancelRowUpdates();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var3.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var83.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var84.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "COL00000"+ "'", var85.equals("COL00000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);

  }

  public void test469() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    boolean var23 = var13.supportsSubqueriesInExists();
    boolean var25 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    double var37 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    boolean var64 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var65 = com.sqlmagic.tinysql.Utils.isFunctionName("hi!");
    java.sql.ResultSet var66 = var13.getSuperTables("hi!", var34, "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var67 = var13.getProcedureTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var34.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test470() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    int var20 = var13.getMaxIndexLength();
    int var21 = var13.getMaxStatements();
    int var22 = var13.getSQLStateType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test471() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    java.lang.String var3 = var0.toString();
    int var4 = var0.getFetchSize();
    int var5 = var0.getColumnCount();
    double var9 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var11 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var13 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var15 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var18 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var17);
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var26 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var48 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var60 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var63 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var69 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var70 = var17.getConnection("hi!", "hi!", (java.sql.Driver)var69);
    com.sqlmagic.tinysql.tinySQLStatement var71 = new com.sqlmagic.tinysql.tinySQLStatement(var70);
    java.sql.SQLWarning var72 = var71.getWarnings();
    boolean var73 = var71.isPoolable();
    int var74 = var71.getUpdateCount();
    com.sqlmagic.tinysql.tinySQLResultSet var75 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var71);
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var78 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var82 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var84 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var83);
    java.lang.String var85 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName(var84);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var84);
    java.io.Reader var87 = var75.getCharacterStream(var84);
    int var89 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var90 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var91 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Blob var92 = var75.getBlob(var91);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var3.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "hi!"+ "'", var78.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var83.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var84.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "COL00000"+ "'", var85.equals("COL00000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "hi!"+ "'", var91.equals("hi!"));

  }

  public void test472() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsFullOuterJoins();
    int var17 = var15.getDatabaseMinorVersion();
    int var18 = var15.getMaxIndexLength();
    java.lang.String var19 = var15.getDatabaseProductVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "2.26h"+ "'", var19.equals("2.26h"));

  }

  public void test473() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.supportsGetGeneratedKeys();
    boolean var15 = var13.supportsDataManipulationTransactionsOnly();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var30 = var29.nullsAreSortedAtEnd();
    int var31 = var29.getMaxTableNameLength();
    java.lang.String var32 = var29.getDatabaseProductName();
    boolean var34 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var35 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var36 = var29.ownInsertsAreVisible(0);
    int var37 = var29.getMaxTablesInSelect();
    boolean var38 = var29.supportsGroupByUnrelated();
    java.lang.String var39 = var29.getDatabaseProductName();
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var50 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var52 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var53 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var54 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var56 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var64 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName("hi!");
    java.sql.ResultSet var67 = var13.getSuperTypes(var39, "hi!", "");
    java.sql.ResultSet var68 = var13.getTableTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "tinySQL"+ "'", var32.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "tinySQL"+ "'", var39.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "COL00000"+ "'", var65.equals("COL00000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);

  }

  public void test474() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isClosed();
    double var17 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var19 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var23 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var26 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var25);
    java.sql.Clob var27 = var26.createClob();
    double var30 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var35 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var38 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var39 = var26.prepareStatement("hi!", 100);
    var12.setTransactionIsolation(100);
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var46 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var50 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var51 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var52 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var53 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var52);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var54 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var53);
    boolean var56 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var57 = var54.supportsResultSetType(0);
    boolean var58 = var54.supportsOpenCursorsAcrossCommit();
    int var59 = var54.getMaxCharLiteralLength();
    boolean var60 = var54.supportsSchemasInProcedureCalls();
    boolean var61 = var54.nullsAreSortedAtEnd();
    int var62 = var54.getResultSetHoldability();
    int var63 = var54.getMaxBinaryLiteralLength();
    var12.setTransactionIsolation(var63);
    int var66 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var67 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var69 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var72 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var76 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var78 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var79 = new com.sqlmagic.tinysql.SimpleXMLTag(var67, var69, var78);
    java.util.Enumeration var80 = var79.keys();
    int var82 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var87 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var88 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var89 = com.sqlmagic.tinysql.UtilString.removeQuotes(var88);
    boolean var90 = var79.contains((java.lang.Object)var88);
    var12.setCatalog(var88);
    boolean var92 = var12.getAutoClose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var88.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var89.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test475() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    double var18 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var20 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var22 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var27 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var31 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var33 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var34 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var35);
    java.sql.Clob var37 = var36.createClob();
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var48 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var49 = var36.prepareStatement("hi!", 100);
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("");
    double var54 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var59 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var68 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var76 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var76);
    java.sql.ResultSet var78 = var13.getAttributes("hi!", "hi!", "", var76);
    int var79 = var13.getDatabaseMajorVersion();
    int var80 = var13.getMaxCursorNameLength();
    boolean var81 = var13.supportsTransactions();
    java.lang.String var82 = var13.getExtraNameCharacters();
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "hi!"+ "'", var76.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "hi!"+ "'", var77.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ""+ "'", var82.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + ""+ "'", var83.equals(""));

  }

  public void test476() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    double var4 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var8 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var10 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var12 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var13 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var12);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var65 = var12.getConnection("hi!", "hi!", (java.sql.Driver)var64);
    com.sqlmagic.tinysql.tinySQLStatement var66 = new com.sqlmagic.tinysql.tinySQLStatement(var65);
    int var67 = var66.getQueryTimeout();
    boolean var68 = var66.getMoreResults();
    boolean var70 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var71 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    var66.setMaxFieldSize(100);
    com.sqlmagic.tinysql.tinySQLResultSet var73 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var66);
    int var74 = var73.getType();
    int var77 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var78 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var79 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    java.lang.String var80 = com.sqlmagic.tinysql.UtilString.toYMD(var79);
    java.lang.String var81 = com.sqlmagic.tinysql.UtilString.toYMD(var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var82 = var73.getString(var80);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));

  }

  public void test477() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    int var17 = var13.getMaxIndexLength();
    java.lang.String var18 = var13.getSQLKeywords();
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));

  }

  public void test478() throws Throwable {

    double var2 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var5 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var6 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var7 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int var8 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var21 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var20);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var22 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var21);
    boolean var24 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var25 = var22.supportsResultSetType(0);
    boolean var26 = var22.supportsOpenCursorsAcrossCommit();
    boolean var27 = var22.supportsCoreSQLGrammar();
    int var28 = var22.getMaxRowSize();
    java.lang.String var29 = var22.getDriverName();
    boolean var30 = var22.storesUpperCaseQuotedIdentifiers();
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var33 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var38 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var40 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var44 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var45 = new com.sqlmagic.tinysql.SimpleXMLTag(var33, var35, var44);
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var56 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var57 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var58 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var57);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var59 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var58);
    boolean var61 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var62 = var59.supportsResultSetType(0);
    int var63 = var59.getMaxIndexLength();
    int var64 = var59.getMaxCatalogNameLength();
    boolean var65 = var59.supportsExtendedSQLGrammar();
    boolean var66 = var59.supportsGroupByBeyondSelect();
    int var67 = var59.getJDBCMajorVersion();
    boolean var68 = var22.supportsResultSetConcurrency(var35, var67);
    double var72 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var76 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var78 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var79 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var80 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var81 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var80);
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", var67, "hi!");
    double var85 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    double var86 = com.sqlmagic.tinysql.UtilString.doubleValue(var82, var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var29.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ""+ "'", var82.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == (-1.0d));

  }

  public void test479() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    boolean var18 = var13.supportsCoreSQLGrammar();
    int var19 = var13.getMaxRowSize();
    java.lang.String var20 = var13.getDriverName();
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var36 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var37 = var34.supportsResultSetType(0);
    boolean var38 = var34.supportsOpenCursorsAcrossCommit();
    boolean var39 = var34.supportsCatalogsInDataManipulation();
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var53 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag(var42, var44, var53);
    boolean var55 = var34.othersUpdatesAreVisible(var44);
    int var56 = var34.getMaxTablesInSelect();
    int var57 = var34.getMaxStatements();
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var62 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var67 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var68 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var71 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var72 = new com.sqlmagic.tinysql.SimpleXMLTag(var60, var62, var71);
    com.sqlmagic.tinysql.SimpleXMLTag var73 = new com.sqlmagic.tinysql.SimpleXMLTag(var20, var57, var71);
    java.util.Collection var74 = var73.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var20.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);

  }

  public void test480() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    double var4 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var8 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var10 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var12 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var13 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var12);
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var35 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var43 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var55 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var63 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var65 = var12.getConnection("hi!", "hi!", (java.sql.Driver)var64);
    com.sqlmagic.tinysql.tinySQLStatement var66 = new com.sqlmagic.tinysql.tinySQLStatement(var65);
    int var67 = var66.getQueryTimeout();
    boolean var68 = var66.getMoreResults();
    boolean var70 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var71 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    var66.setMaxFieldSize(100);
    com.sqlmagic.tinysql.tinySQLResultSet var73 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var66);
    int var74 = var73.getType();
    double var77 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var79 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var80 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var81 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var82 = var73.getBoolean("hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!"+ "'", var80.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test481() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    double var15 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var23 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var25 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var29 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var32 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var34 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var35 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    double var40 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var42 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var48 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var50 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var54 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.tinySQLConnection var64 = var11.getConnection("hi!", "hi!", (java.sql.Driver)var63);
    com.sqlmagic.tinysql.tinySQLStatement var65 = new com.sqlmagic.tinysql.tinySQLStatement(var64);
    java.sql.SQLWarning var66 = var65.getWarnings();
    java.sql.ResultSet var67 = var65.getGeneratedKeys();
    boolean var68 = var65.getMoreResults();
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var73 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var74 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var76 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var83 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var85 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var88 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var90 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var91 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var92 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var93 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var94 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var93);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var65.addBatch(var93);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "hi!"+ "'", var91.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "hi!"+ "'", var93.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi!"+ "'", var94.equals("hi!"));

  }

  public void test482() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    com.sqlmagic.tinysql.tinySQLException var16 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var17 = var16.iterator();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var25 = var14.put((java.lang.Object)var17, (java.lang.Object)var24);
    boolean var26 = var14.isEmpty();
    int var27 = var14.countTags();
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var41 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var40);
    boolean var42 = var41.nullsAreSortedAtEnd();
    int var43 = var41.getMaxTableNameLength();
    java.lang.String var44 = var41.getDatabaseProductName();
    boolean var46 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var47 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var48 = var41.ownInsertsAreVisible(0);
    int var49 = var41.getMaxTablesInSelect();
    boolean var50 = var41.supportsGroupByUnrelated();
    java.lang.String var51 = var41.getDatabaseProductName();
    boolean var52 = var41.storesUpperCaseQuotedIdentifiers();
    boolean var53 = var41.supportsGroupBy();
    int var54 = var41.getMaxCursorNameLength();
    double var58 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var60 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var64 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var65 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var67 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var66);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var68 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var67);
    boolean var69 = var68.isCatalogAtStart();
    int var70 = var68.getMaxColumnsInIndex();
    boolean var71 = var68.supportsColumnAliasing();
    boolean var72 = var68.doesMaxRowSizeIncludeBlobs();
    int var73 = var68.getMaxColumnNameLength();
    java.lang.Object var74 = var14.put((java.lang.Object)var54, (java.lang.Object)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "tinySQL"+ "'", var44.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "tinySQL"+ "'", var51.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "hi!"+ "'", var61.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);

  }

  public void test483() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var3 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var4 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var6 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var12 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var14 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var18 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var19 = new com.sqlmagic.tinysql.SimpleXMLTag(var7, var9, var18);
    java.util.Enumeration var20 = var19.keys();
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    boolean var34 = var33.isReadOnly();
    java.lang.Object var36 = var19.put((java.lang.Object)var34, (java.lang.Object)true);
    double var39 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var41 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var49 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var51 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var53 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var54 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var59 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var63 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var66 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var68 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var69 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var71 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var72 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var71);
    boolean var73 = com.sqlmagic.tinysql.UtilString.isInteger(var72);
    var0.setState(100, (java.util.Hashtable)var19, "hi!", var73);
    byte[] var75 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);

  }

  public void test484() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.removeQuotes(var23);
    boolean var25 = var14.contains((java.lang.Object)var23);
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var41 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var42 = var39.supportsResultSetType(0);
    boolean var43 = var39.supportsOpenCursorsAcrossCommit();
    boolean var44 = var39.supportsCoreSQLGrammar();
    boolean var45 = var39.autoCommitFailureClosesAllResultSets();
    boolean var46 = var39.supportsDataManipulationTransactionsOnly();
    boolean var47 = var14.containsValue((java.lang.Object)var46);
    java.util.Enumeration var48 = var14.keys();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);

  }

  public void test485() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    int var21 = var13.getMaxTablesInSelect();
    boolean var22 = var13.supportsGroupByUnrelated();
    java.lang.String var23 = var13.getDatabaseProductName();
    double var26 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var28 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var32 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var33 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var36 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var38 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var39 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var40 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var41 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    com.sqlmagic.tinysql.Utils.delFile("hi!", "hi!");
    double var45 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", 1.0d);
    double var46 = com.sqlmagic.tinysql.UtilString.doubleValue(var23, 1.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.Utils.delFile(var23);
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "tinySQL"+ "'", var23.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1.0d);

  }

  public void test486() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var15 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var16 = var13.supportsResultSetType(0);
    boolean var17 = var13.supportsOpenCursorsAcrossCommit();
    int var18 = var13.getMaxCharLiteralLength();
    boolean var19 = var13.supportsSchemasInProcedureCalls();
    boolean var20 = var13.nullsAreSortedAtEnd();
    int var21 = var13.getResultSetHoldability();
    int var22 = var13.getMaxTablesInSelect();
    java.lang.String var23 = var13.getSQLKeywords();
    java.lang.String var24 = var13.getStringFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var25 = var13.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));

  }

  public void test487() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tinySQLWhere var2 = var0.getWhereClause();
    int var3 = var0.size();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var4 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    double var8 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var10 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var14 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var17 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var16);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var18 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var17);
    int var19 = var18.getMaxColumnsInIndex();
    boolean var20 = var4.isWritable(var19);
    double var24 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var26 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var30 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var33 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var32);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var34 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var33);
    boolean var35 = var34.isCatalogAtStart();
    boolean var36 = var34.supportsSubqueriesInIns();
    java.lang.String var37 = var34.getDriverVersion();
    boolean var38 = var34.supportsSubqueriesInQuantifieds();
    int var39 = var34.getMaxColumnsInSelect();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var40 = var4.getCatalogName(var39);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "2.26h"+ "'", var37.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 10000);

  }

  public void test488() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    boolean var17 = var15.supportsGetGeneratedKeys();
    boolean var18 = var15.supportsMinimumSQLGrammar();
    boolean var19 = var15.allTablesAreSelectable();
    boolean var20 = var15.supportsSubqueriesInQuantifieds();
    boolean var21 = var15.supportsStatementPooling();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test489() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var13 = var12.isReadOnly();
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getFetchSize();
    double var19 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var21 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var25 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var26 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var28 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var27);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var29 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var28);
    boolean var31 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var32 = var29.supportsResultSetType(0);
    boolean var33 = var29.supportsOpenCursorsAcrossCommit();
    boolean var34 = var29.supportsCatalogsInDataManipulation();
    int var36 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var37 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var42 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var44 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var48 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var49 = new com.sqlmagic.tinysql.SimpleXMLTag(var37, var39, var48);
    boolean var50 = var29.othersUpdatesAreVisible(var39);
    int var51 = var29.getMaxTablesInSelect();
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var56 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var59 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var61 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var62 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var65 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var66 = new com.sqlmagic.tinysql.SimpleXMLTag(var54, var56, var65);
    double var69 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var71 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var72 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var74 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    double var79 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var81 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var83 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var85 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var86 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var88 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var87);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var89 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var88);
    boolean var90 = var89.isCatalogAtStart();
    boolean var91 = var89.supportsSchemasInTableDefinitions();
    boolean var92 = var89.supportsAlterTableWithDropColumn();
    var14.setState(var51, (java.util.Hashtable)var66, var75, var92);
    boolean var94 = var66.hasMoreTags();
    var12.setTypeMap((java.util.Map)var66);
    java.util.Set var96 = var66.entrySet();
    boolean var97 = var66.hasMoreTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "hi!"+ "'", var62.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test490() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var15 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var21 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var23 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var25 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var27 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag(var16, var18, var27);
    boolean var29 = var13.ownDeletesAreVisible(var18);
    boolean var30 = var13.supportsAlterTableWithAddColumn();
    java.lang.String var31 = var13.getDatabaseProductVersion();
    int var32 = var13.getMaxCharLiteralLength();
    boolean var33 = var13.supportsSubqueriesInExists();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "2.26h"+ "'", var31.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test491() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.isCatalogAtStart();
    int var15 = var13.getSQLStateType();
    int var17 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var22 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var23);
    double var28 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var30 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var32 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var34 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var37 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var36);
    int var39 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    double var44 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    java.lang.String var45 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 100, "hi!");
    java.sql.ResultSet var46 = var13.getSuperTypes(var24, "", "hi!");
    int var47 = var13.getDatabaseMajorVersion();
    java.lang.String var48 = var13.getSearchStringEscape();
    java.lang.String var49 = var13.getNumericFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var23.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var24.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"+ "'", var45.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "\\"+ "'", var48.equals("\\"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));

  }

  public void test492() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var16 = var12.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test493() throws Throwable {

    int var2 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.util.Vector var3 = com.sqlmagic.tinysql.Utils.getAllFiles("", "hi!");
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.Utils.delFile(var4, "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var14 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var4);
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test494() throws Throwable {

    int var1 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var2 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var4 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var7 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var9 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var13 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag(var2, var4, var13);
    java.util.Enumeration var15 = var14.keys();
    com.sqlmagic.tinysql.tinySQLException var16 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var17 = var16.iterator();
    double var20 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var22 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var24 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.Object var25 = var14.put((java.lang.Object)var17, (java.lang.Object)var24);
    java.util.Enumeration var26 = var14.elements();
    java.util.Set var27 = var14.entrySet();
    double var31 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var33 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var34 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var35 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var37 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var38 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var40 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var39);
    java.sql.Clob var41 = var40.createClob();
    int var42 = var40.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var43 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var40);
    boolean var44 = var43.supportsGroupBy();
    boolean var45 = var43.supportsGetGeneratedKeys();
    boolean var46 = var43.supportsMultipleResultSets();
    int var47 = var43.getDriverMajorVersion();
    boolean var48 = var14.containsKey((java.lang.Object)var43);
    java.lang.String var49 = var43.getDatabaseProductName();
    boolean var50 = var43.doesMaxRowSizeIncludeBlobs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "tinySQL"+ "'", var49.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test495() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var14 = var13.nullsAreSortedAtEnd();
    int var15 = var13.getMaxTableNameLength();
    java.lang.String var16 = var13.getDatabaseProductName();
    boolean var18 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    byte[] var19 = com.sqlmagic.tinysql.Utils.intToLittleEndian(0);
    boolean var20 = var13.ownInsertsAreVisible(0);
    boolean var21 = var13.supportsCoreSQLGrammar();
    boolean var22 = var13.supportsStoredProcedures();
    com.sqlmagic.tinysql.tsResultSet var23 = new com.sqlmagic.tinysql.tsResultSet();
    int var24 = var23.getLevel();
    boolean var26 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var27 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    int var29 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var30 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    int var32 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    double var35 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var37 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var41 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    com.sqlmagic.tinysql.SimpleXMLTag var42 = new com.sqlmagic.tinysql.SimpleXMLTag(var30, var32, var41);
    java.util.Enumeration var43 = var42.keys();
    double var47 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var49 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var53 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var54 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var56 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var55);
    boolean var57 = var56.isReadOnly();
    java.lang.Object var59 = var42.put((java.lang.Object)var57, (java.lang.Object)true);
    double var62 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var64 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var65 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var66 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    double var67 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFile var68 = new com.sqlmagic.tinysql.dbfFile("hi!");
    double var69 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    double var72 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var74 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var76 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    boolean var77 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    double var80 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var82 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var84 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var86 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    double var89 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var91 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var92 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var93 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.lang.String var94 = com.sqlmagic.tinysql.UtilString.replaceAll("hi!", "hi!", "hi!");
    java.lang.String var95 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var94);
    boolean var96 = com.sqlmagic.tinysql.UtilString.isInteger(var95);
    var23.setState(100, (java.util.Hashtable)var42, "hi!", var96);
    boolean var98 = var13.supportsResultSetType(100);
    java.sql.RowIdLifetime var99 = var13.getRowIdLifetime();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "tinySQL"+ "'", var16.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi!"+ "'", var83.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "hi!"+ "'", var92.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "hi!"+ "'", var94.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "hi!"+ "'", var95.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == null);

  }

  public void test496() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    int var14 = var12.getHoldability();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var15 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    boolean var16 = var15.supportsGroupBy();
    int var17 = var15.getMaxColumnNameLength();
    boolean var18 = var15.supportsCatalogsInPrivilegeDefinitions();
    boolean var19 = var15.supportsSchemasInTableDefinitions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var20 = var15.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test497() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    boolean var14 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    com.sqlmagic.tinysql.dbfFile var15 = new com.sqlmagic.tinysql.dbfFile("hi!");
    int[] var19 = new int[] { 10, 10, 10};
    java.sql.PreparedStatement var20 = var12.prepareStatement("hi!", var19);
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var21 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var12);
    java.lang.String var22 = var12.getCatalog();
    boolean var23 = var12.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test498() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    java.sql.Clob var13 = var12.createClob();
    double var16 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var18 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var19 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    com.sqlmagic.tinysql.dbfFile var21 = new com.sqlmagic.tinysql.dbfFile("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.isDateColumn(100);
    byte[] var24 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    java.sql.PreparedStatement var25 = var12.prepareStatement("hi!", 100);
    double var29 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var31 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var33 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var35 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var36 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var38 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var37);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var39 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var41 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var42 = var39.supportsResultSetType(0);
    boolean var43 = var39.supportsOpenCursorsAcrossCommit();
    boolean var44 = var39.supportsCoreSQLGrammar();
    int var45 = var39.getMaxRowSize();
    java.lang.String var46 = var39.getDriverName();
    java.lang.String var47 = var12.getClientInfo(var46);
    double var51 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var53 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var54 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var57 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var58 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var60 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var59);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var61 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var60);
    boolean var63 = com.sqlmagic.tinysql.Utils.isNumberColumn(0);
    boolean var64 = var61.supportsResultSetType(0);
    boolean var65 = var61.supportsOpenCursorsAcrossCommit();
    boolean var66 = var61.supportsMixedCaseIdentifiers();
    boolean var67 = var61.supportsOpenStatementsAcrossCommit();
    var12.setAutoCommit(var67);
    boolean var69 = var12.getAutoClose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var46.equals("com.sqlmagic.tinysql.dbfFileDriver"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test499() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var1 = var0.getSQLState();
    int var2 = var0.getErrorCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test500() throws Throwable {

    double var3 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!", (-1.0d));
    int var5 = com.sqlmagic.tinysql.UtilString.getValueType("hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var7 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "hi!");
    java.util.Vector var9 = com.sqlmagic.tinysql.Utils.getAllFiles("hi!", "");
    boolean var10 = com.sqlmagic.tinysql.Utils.isFunctionName("");
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.textFileConnection var12 = new com.sqlmagic.tinysql.textFileConnection("hi!", "", (java.sql.Driver)var11);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var13 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var12);
    int var14 = var13.getMaxColumnsInIndex();
    boolean var15 = com.sqlmagic.tinysql.Utils.isDateColumn(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

}
