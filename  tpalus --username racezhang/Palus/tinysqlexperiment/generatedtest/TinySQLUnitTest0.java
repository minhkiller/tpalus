package generatedtest;

import junit.framework.*;

public class TinySQLUnitTest0 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(TinySQLUnitTest0.class);
  }

  public void test1() throws Throwable {

    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName("");
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test2() throws Throwable {

    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLGlobals.writeLongNames();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test3() throws Throwable {

    byte[] var1 = new byte[] { (byte)10};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var2 = com.sqlmagic.tinysql.Utils.vax_to_long(var1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test4() throws Throwable {

    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.sqlmagic.tinysql.UtilString.toStandardDate("hi!");
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }

  }

  public void test5() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var16 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", (-1), (byte)10);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);

  }

  public void test6() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var13 = com.sqlmagic.tinysql.UtilString.findTableAlias(var1, var11);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);

  }

  public void test7() throws Throwable {

    byte[] var3 = new byte[] { (byte)1, (byte)0, (byte)0};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var4 = com.sqlmagic.tinysql.Utils.vax_to_long(var3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test8() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var25 = com.sqlmagic.tinysql.UtilString.findTableForAlias("hi!", var22);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test9() throws Throwable {

    com.sqlmagic.tinysql.textFile var0 = new com.sqlmagic.tinysql.textFile();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var1 = var0.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test10() throws Throwable {

    com.sqlmagic.tinysql.UtilString var0 = new com.sqlmagic.tinysql.UtilString();

  }

  public void test11() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var10 = var8.getColumnClassName(1);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test12() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var9 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var11 = var9.acceptsURL("");
    boolean var13 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var14 = var9.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var16 = new com.sqlmagic.tinysql.tsResultSet();
    int var17 = var16.getLevel();
    java.util.Vector var18 = var16.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var19 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var18);
    com.sqlmagic.tinysql.SimpleXMLTag var20 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var18);
    boolean var22 = var20.contains((java.lang.Object)(byte)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var23 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", (-1), (byte)0);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test13() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var0.updateColumns("hi!", "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var20 = com.sqlmagic.tinysql.UtilString.toStandardDate("");
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test14() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    int var11 = var10.size();
    com.sqlmagic.tinysql.dbfFileDriver var12 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var14 = var12.acceptsURL("");
    boolean var16 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var17 = var12.acceptsURL("hi!");
    int var18 = var12.getMinorVersion();
    java.lang.Object var20 = var10.put((java.lang.Object)var12, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var30 = new com.sqlmagic.tinysql.tsResultSet();
    int var31 = var30.getLevel();
    java.util.Vector var32 = var30.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var32);
    com.sqlmagic.tinysql.SimpleXMLTag var34 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var32);
    boolean var36 = var34.contains((java.lang.Object)(byte)0);
    boolean var37 = var34.hasMoreTags();
    java.lang.Object var38 = var10.get((java.lang.Object)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test15() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
//    try {
//      com.sqlmagic.tinysql.tsColumn var7 = var0.columnAtIndex((-1));
//      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//      // Expected exception.
//    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test16() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var3 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.tsResultSet var4 = new com.sqlmagic.tinysql.tsResultSet();
    int var5 = var4.getLevel();
    java.util.Vector var6 = var4.getTables();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = com.sqlmagic.tinysql.UtilString.findTableAlias("hi!", var6);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test17() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    com.sqlmagic.tinysql.dbfFile var7 = new com.sqlmagic.tinysql.dbfFile("hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var8 = var7.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test18() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    int var14 = var11.getLevel();
    boolean var17 = var11.getMoreResults(100, 0);
    boolean var18 = var8.isSearchable(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var20 = var8.getColumnName(10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test19() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    java.util.Vector var3 = var1.getTables();
    int var4 = var1.getLevel();
    boolean var7 = var1.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var15 = new com.sqlmagic.tinysql.tsResultSet();
    int var16 = var15.getLevel();
    java.util.Vector var17 = var15.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var18 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var17);
    java.util.Collection var19 = var18.values();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    int var23 = var20.getLevel();
    boolean var24 = var18.containsValue((java.lang.Object)var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var0.setState(100, (java.util.Hashtable)var18, "hi!", var39);
    boolean var41 = var0.isGrouped();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test20() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = com.sqlmagic.tinysql.UtilString.toStandardDate("hi!");
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test21() throws Throwable {

    com.sqlmagic.tinysql.tinySQLGlobals var0 = new com.sqlmagic.tinysql.tinySQLGlobals();

  }

  public void test22() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    com.sqlmagic.tinysql.dbfFile var3 = new com.sqlmagic.tinysql.dbfFile("");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var4 = var3.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test23() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    java.util.Vector var5 = var3.getTables();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var6 = com.sqlmagic.tinysql.UtilString.findTableForAlias("", var5);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test24() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tinySQLException var9 = new com.sqlmagic.tinysql.tinySQLException();
    int var10 = var9.getErrorCode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var11 = var8.getPrecision(var10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test25() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var12 = var8.getColumnTypeName(0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test26() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    int var14 = var11.getLevel();
    boolean var17 = var11.getMoreResults(100, 0);
    int var18 = var11.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var19 = var8.getColumnType(var18);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test27() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var7 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName("hi!");
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test28() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    java.util.Vector var3 = var1.getTables();
    int var4 = var1.getLevel();
    boolean var7 = var1.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var15 = new com.sqlmagic.tinysql.tsResultSet();
    int var16 = var15.getLevel();
    java.util.Vector var17 = var15.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var18 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var17);
    java.util.Collection var19 = var18.values();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    int var23 = var20.getLevel();
    boolean var24 = var18.containsValue((java.lang.Object)var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var0.setState(100, (java.util.Hashtable)var18, "hi!", var39);
    com.sqlmagic.tinysql.tsResultSet var41 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var42 = new com.sqlmagic.tinysql.tsResultSet();
    int var43 = var42.getLevel();
    boolean var45 = var41.getMoreResults(var43, (-1));
    com.sqlmagic.tinysql.tsResultSet var46 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    int var50 = var47.getLevel();
    boolean var53 = var47.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    java.util.Vector var63 = var61.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var63);
    java.util.Collection var65 = var64.values();
    com.sqlmagic.tinysql.tsResultSet var66 = new com.sqlmagic.tinysql.tsResultSet();
    int var67 = var66.getLevel();
    java.util.Vector var68 = var66.getTables();
    int var69 = var66.getLevel();
    boolean var70 = var64.containsValue((java.lang.Object)var66);
    com.sqlmagic.tinysql.dbfFileDriver var71 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var73 = var71.acceptsURL("");
    boolean var75 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var76 = var71.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var78 = new com.sqlmagic.tinysql.tsResultSet();
    int var79 = var78.getLevel();
    java.util.Vector var80 = var78.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var81 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var80);
    boolean var84 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var85 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var46.setState(100, (java.util.Hashtable)var64, "hi!", var85);
    com.sqlmagic.tinysql.tinySQLException var87 = new com.sqlmagic.tinysql.tinySQLException();
    int var88 = var87.getErrorCode();
    byte[] var89 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var88);
    //com.sqlmagic.tinysql.tsRow var90 = var46.rowAt(var88);
    boolean var91 = var0.getMoreResults(var43, var88);
    int var92 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    //assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test29() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    int var3 = var0.getMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);

  }

  public void test30() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    java.util.Vector var3 = var1.getTables();
    int var4 = var1.getLevel();
    boolean var7 = var1.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var15 = new com.sqlmagic.tinysql.tsResultSet();
    int var16 = var15.getLevel();
    java.util.Vector var17 = var15.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var18 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var17);
    java.util.Collection var19 = var18.values();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    int var23 = var20.getLevel();
    boolean var24 = var18.containsValue((java.lang.Object)var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var0.setState(100, (java.util.Hashtable)var18, "hi!", var39);
    java.lang.String var41 = var0.toString();
    java.lang.String var42 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var41.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var42.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));

  }

  public void test31() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var3 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var5 = var3.acceptsURL("");
    boolean var7 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var8 = var3.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var10 = new com.sqlmagic.tinysql.tsResultSet();
    int var11 = var10.getLevel();
    java.util.Vector var12 = var10.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var12);
    int var14 = var13.size();
    int var15 = var13.size();
    com.sqlmagic.tinysql.tsResultSet var16 = new com.sqlmagic.tinysql.tsResultSet();
    int var17 = var16.getLevel();
    java.util.Vector var18 = var16.getTables();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var19 = new com.sqlmagic.tinysql.SimpleXMLTag("", var15, var18);
      fail("Expected exception of type java.lang.Exception");
    } catch (java.lang.Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);

  }

  public void test32() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.setCursorName("hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);

  }

  public void test33() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    boolean var58 = com.sqlmagic.tinysql.UtilString.isInteger("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test34() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var18 = var17.getStatus();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test35() throws Throwable {

    com.sqlmagic.tinysql.tinySQLCmd var0 = new com.sqlmagic.tinysql.tinySQLCmd();

  }

  public void test36() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var22);
    boolean var25 = var8.isCurrency(1);
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    int var29 = var26.getLevel();
    boolean var32 = var26.getMoreResults(100, 0);
    int var33 = var26.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var34 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var26);
    int var36 = var34.isNullable(10);
    boolean var37 = var8.isWritable(10);
    com.sqlmagic.tinysql.tsResultSet var38 = new com.sqlmagic.tinysql.tsResultSet();
    int var39 = var38.getLevel();
    java.util.Vector var40 = var38.getTables();
    int var41 = var38.getLevel();
    boolean var44 = var38.getMoreResults(100, 0);
    int var45 = var38.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var46 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var38);
    int var48 = var46.isNullable(10);
    boolean var49 = var8.isReadOnly(var48);
    com.sqlmagic.tinysql.tsResultSet var50 = new com.sqlmagic.tinysql.tsResultSet();
    int var51 = var50.getLevel();
    java.util.Vector var52 = var50.getTables();
    int var53 = var50.getLevel();
    boolean var56 = var50.getMoreResults(100, 0);
    int var57 = var50.getColumnCount();
    boolean var58 = var8.isCurrency(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test37() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    boolean var38 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var39 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var40 = new com.sqlmagic.tinysql.tsResultSet();
    int var41 = var40.getLevel();
    boolean var43 = var39.getMoreResults(var41, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var46 = var44.acceptsURL("");
    boolean var48 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var49 = var44.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var51 = new com.sqlmagic.tinysql.tsResultSet();
    int var52 = var51.getLevel();
    java.util.Vector var53 = var51.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var53);
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var39.updateColumns("hi!", "");
    java.lang.String var59 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var59);
    boolean var63 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var68 = var66.acceptsURL("");
    boolean var70 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var71 = var66.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var73 = new com.sqlmagic.tinysql.tsResultSet();
    int var74 = var73.getLevel();
    java.util.Vector var75 = var73.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var76 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var75);
    com.sqlmagic.tinysql.SimpleXMLTag var77 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var75);
    com.sqlmagic.tinysql.tinySQLWhere var78 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var77);
    com.sqlmagic.tinysql.dbfFileDriver var81 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var83 = var81.acceptsURL("");
    boolean var85 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var86 = var81.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var88 = new com.sqlmagic.tinysql.tsResultSet();
    int var89 = var88.getLevel();
    java.util.Vector var90 = var88.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var91 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var90);
    com.sqlmagic.tinysql.SimpleXMLTag var92 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var90);
    var77.putAll((java.util.Map)var92);
    java.lang.Object[] var94 = new java.lang.Object[] { var77};
    java.sql.Struct var95 = var34.createStruct("hi!", var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);

  }

  public void test38() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var36 = var34.isClosed();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var39 = var37.acceptsURL("");
    boolean var41 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var42 = var37.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var43 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var49 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var52 = var50.acceptsURL("");
    boolean var54 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var55 = var50.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var57 = new com.sqlmagic.tinysql.tsResultSet();
    int var58 = var57.getLevel();
    java.util.Vector var59 = var57.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var59);
    int var61 = var60.size();
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var64 = var62.acceptsURL("");
    boolean var66 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var67 = var62.acceptsURL("hi!");
    int var68 = var62.getMinorVersion();
    java.lang.Object var70 = var60.put((java.lang.Object)var62, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var71 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var49, (java.sql.Driver)var62);
    com.sqlmagic.tinysql.tinySQLStatement var72 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var71);
    int var73 = var72.getResultSetHoldability();
    com.sqlmagic.tinysql.dbfFileDriver var74 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var76 = var74.acceptsURL("");
    boolean var78 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var79 = var74.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var80 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var82 = var80.acceptsURL("");
    boolean var84 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var85 = var80.acceptsURL("hi!");
    int var86 = var80.getMajorVersion();
    int var87 = var72.executeUpdate("hi!", var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var88 = var34.executetinySQL(var72);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);

  }

  public void test39() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    java.lang.String var37 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var38 = var35.execute("hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));

  }

  public void test40() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var13 = var11.acceptsURL("");
    boolean var15 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var16 = var11.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var18 = new com.sqlmagic.tinysql.tsResultSet();
    int var19 = var18.getLevel();
    java.util.Vector var20 = var18.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var21 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var20);
    com.sqlmagic.tinysql.SimpleXMLTag var22 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var23 = var8.getTableName(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test41() throws Throwable {

    byte[] var1 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test42() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var22);
    boolean var25 = var8.isCurrency(1);
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    java.util.Hashtable var29 = var26.getTableState();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMajorVersion();
    var26.setFetchSize(var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var38 = var8.getCatalogName(var36);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test43() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.clearBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);

  }

  public void test44() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var39 = var37.acceptsURL("");
    boolean var41 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var42 = var37.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var45 = var43.acceptsURL("");
    boolean var47 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var48 = var43.acceptsURL("hi!");
    int var49 = var43.getMajorVersion();
    int var50 = var35.executeUpdate("hi!", var49);
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var55 = var53.acceptsURL("");
    boolean var57 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var58 = var53.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var60 = new com.sqlmagic.tinysql.tsResultSet();
    int var61 = var60.getLevel();
    java.util.Vector var62 = var60.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var63 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var62);
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var62);
    double var65 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var66 = var35.execute("hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 4.9E-324d);

  }

  public void test45() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.sqlmagic.tinysql.UtilString.toStandardDate(var1);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));

  }

  public void test46() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    double var14 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var27);
    boolean var31 = var29.contains((java.lang.Object)(byte)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var32 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", (-1), (byte)0);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test47() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    int var11 = var10.size();
    com.sqlmagic.tinysql.dbfFileDriver var12 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var14 = var12.acceptsURL("");
    boolean var16 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var17 = var12.acceptsURL("hi!");
    int var18 = var12.getMinorVersion();
    java.lang.Object var20 = var10.put((java.lang.Object)var12, (java.lang.Object)(-1.0d));
    boolean var21 = var12.jdbcCompliant();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test48() throws Throwable {

    com.sqlmagic.tinysql.dbfFile var0 = new com.sqlmagic.tinysql.dbfFile();
    com.sqlmagic.tinysql.dbfFileDriver var1 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var3 = var1.acceptsURL("");
    boolean var5 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var6 = var1.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var7 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var11 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var12 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var16 = var14.acceptsURL("");
    boolean var18 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var19 = var14.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var21 = new com.sqlmagic.tinysql.tsResultSet();
    int var22 = var21.getLevel();
    java.util.Vector var23 = var21.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var23);
    int var25 = var24.size();
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var28 = var26.acceptsURL("");
    boolean var30 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var31 = var26.acceptsURL("hi!");
    int var32 = var26.getMinorVersion();
    java.lang.Object var34 = var24.put((java.lang.Object)var26, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var35 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var13, (java.sql.Driver)var26);
    com.sqlmagic.tinysql.tinySQLStatement var36 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var35);
    int var37 = var36.getResultSetHoldability();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var38 = var0.sqlexec(var36);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test49() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    com.sqlmagic.tinysql.tsResultSet var18 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var19 = new com.sqlmagic.tinysql.tsResultSet();
    int var20 = var19.getLevel();
    boolean var22 = var18.getMoreResults(var20, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var30 = new com.sqlmagic.tinysql.tsResultSet();
    int var31 = var30.getLevel();
    java.util.Vector var32 = var30.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var33 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var32);
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var18.updateColumns("hi!", "");
    java.lang.String var38 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    java.lang.String var40 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var41 = var17.evaluate("", var40);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));

  }

  public void test50() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var62 = var58.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);

  }

  public void test51() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    boolean var31 = com.sqlmagic.tinysql.UtilString.isInteger(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test52() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var3 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var6 = var4.acceptsURL("");
    boolean var8 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var9 = var4.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var13);
    int var15 = var14.size();
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var18 = var16.acceptsURL("");
    boolean var20 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var21 = var16.acceptsURL("hi!");
    int var22 = var16.getMinorVersion();
    java.lang.Object var24 = var14.put((java.lang.Object)var16, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var25 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var26 = var25.getStatus();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);

  }

  public void test53() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    boolean var61 = var58.supportsUnionAll();
    java.lang.String var62 = var58.getIdentifierQuoteString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var63 = var58.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "\""+ "'", var62.equals("\""));

  }

  public void test54() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var22);
    boolean var25 = var8.isCurrency(1);
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    int var29 = var26.getLevel();
    boolean var32 = var26.getMoreResults(100, 0);
    int var33 = var26.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var34 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var26);
    int var36 = var34.isNullable(10);
    boolean var37 = var8.isWritable(10);
    com.sqlmagic.tinysql.tinySQLException var38 = new com.sqlmagic.tinysql.tinySQLException();
    int var39 = var38.getErrorCode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var40 = var8.getColumnDisplaySize(var39);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test55() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var22);
    boolean var25 = var8.isCurrency(1);
    int var26 = var8.getColumnCount();
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet();
    int var28 = var27.getLevel();
    java.util.Vector var29 = var27.getTables();
    int var30 = var27.getLevel();
    boolean var33 = var27.getMoreResults(100, 0);
    int var34 = var27.getColumnCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var35 = var8.getColumnTypeName(var34);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);

  }

  public void test56() throws Throwable {

    com.sqlmagic.tinysql.Utils var0 = new com.sqlmagic.tinysql.Utils();

  }

  public void test57() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    int var3 = var0.getFetchSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test58() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var38 = var36.acceptsURL("");
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var41 = var36.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var42 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var47 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    int var60 = var59.size();
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var63 = var61.acceptsURL("");
    boolean var65 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var66 = var61.acceptsURL("hi!");
    int var67 = var61.getMinorVersion();
    java.lang.Object var69 = var59.put((java.lang.Object)var61, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var70 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var48, (java.sql.Driver)var61);
    com.sqlmagic.tinysql.tinySQLStatement var71 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var70);
    int var72 = var71.getResultSetHoldability();
    java.sql.ResultSet var73 = var71.getResultSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.tsResultSet var74 = var34.executetinySQL(var71);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);

  }

  public void test59() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var3 = com.sqlmagic.tinysql.UtilString.isInteger("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test60() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    int var38 = var35.getMaxRows();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var39 = var35.getResultSetConcurrency();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);

  }

  public void test61() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    int var37 = var35.getQueryTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var38 = var35.getResultSetConcurrency();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test62() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    byte[] var7 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    boolean var8 = com.sqlmagic.tinysql.Utils.isNumberColumn(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test63() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    int var2 = var1.getErrorCode();
    var0.setNextException((java.sql.SQLException)var1);
    int var4 = var1.getErrorCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test64() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.supportsMixedCaseIdentifiers();
    boolean var62 = var58.supportsSavepoints();
    java.lang.String var63 = var58.getSystemFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));

  }

  public void test65() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var61 = var58.getCatalogs();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test66() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var38 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var39 = new com.sqlmagic.tinysql.tsResultSet();
    int var40 = var39.getLevel();
    boolean var42 = var38.getMoreResults(var40, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var45 = var43.acceptsURL("");
    boolean var47 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var48 = var43.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var50 = new com.sqlmagic.tinysql.tsResultSet();
    int var51 = var50.getLevel();
    java.util.Vector var52 = var50.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var53 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var52);
    boolean var56 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var38.updateColumns("hi!", "");
    java.lang.String var58 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var58);
    java.lang.String var60 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    java.util.Vector var63 = var61.getTables();
    java.lang.String var65 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var63, "hi!");
    java.lang.String[] var67 = new java.lang.String[] { "hi!"};
    java.sql.PreparedStatement var68 = var34.prepareStatement(var60, var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);

  }

  public void test67() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var60 = var58.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test68() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var39 = var37.acceptsURL("");
    boolean var41 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var42 = var37.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var45 = var43.acceptsURL("");
    boolean var47 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var48 = var43.acceptsURL("hi!");
    int var49 = var43.getMajorVersion();
    int var50 = var35.executeUpdate("hi!", var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.clearBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test69() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    int var37 = var35.getQueryTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var38 = var35.getResultSetType();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test70() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    var34.setCatalog("hi!");
    com.sqlmagic.tinysql.tinySQL var42 = var34.get_tinySQL();
    var34.clearWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);

  }

  public void test71() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.util.Iterator var1 = var0.iterator();
    java.util.Iterator var2 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test72() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var14 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var23 = var21.acceptsURL("");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var26 = var21.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var28 = new com.sqlmagic.tinysql.tsResultSet();
    int var29 = var28.getLevel();
    java.util.Vector var30 = var28.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var31 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var30);
    int var32 = var31.size();
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    int var39 = var33.getMinorVersion();
    java.lang.Object var41 = var31.put((java.lang.Object)var33, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var42 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var20, (java.sql.Driver)var33);
    com.sqlmagic.tinysql.tinySQLStatement var43 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var42);
    int var44 = var43.getResultSetHoldability();
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var52 = var50.acceptsURL("");
    boolean var54 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var55 = var50.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var57 = new com.sqlmagic.tinysql.tsResultSet();
    int var58 = var57.getLevel();
    java.util.Vector var59 = var57.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var59);
    boolean var63 = var61.contains((java.lang.Object)(byte)0);
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var66 = var64.acceptsURL("");
    boolean var68 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var69 = var64.acceptsURL("hi!");
    java.lang.Object var70 = var61.remove((java.lang.Object)var69);
    com.sqlmagic.tinysql.tsResultSet var71 = new com.sqlmagic.tinysql.tsResultSet();
    int var72 = var71.getLevel();
    java.util.Vector var73 = var71.getTables();
    int var74 = var71.getLevel();
    boolean var77 = var71.getMoreResults(100, 0);
    com.sqlmagic.tinysql.SimpleXMLTag var78 = var61.getTag(0);
    boolean var79 = var43.execute("hi!", 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
//    try {
//      com.sqlmagic.tinysql.tsColumn var80 = var0.columnAtIndex(0);
//      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//      // Expected exception.
//    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test73() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var3 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var6 = var4.acceptsURL("");
    boolean var8 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var9 = var4.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var13);
    int var15 = var14.size();
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var18 = var16.acceptsURL("");
    boolean var20 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var21 = var16.acceptsURL("hi!");
    int var22 = var16.getMinorVersion();
    java.lang.Object var24 = var14.put((java.lang.Object)var16, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var25 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var14);
    com.sqlmagic.tinysql.textFile var26 = new com.sqlmagic.tinysql.textFile();
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var25, (com.sqlmagic.tinysql.tinySQL)var26);
    java.lang.String var28 = var25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "\n"+ "'", var28.equals("\n"));

  }

  public void test74() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    var35.cancel();
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    int var40 = var37.getLevel();
    boolean var43 = var37.getMoreResults(100, 0);
    var35.setMaxRows(100);
    int var45 = var35.getUpdateCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));

  }

  public void test75() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    boolean var64 = var62.supportsSubqueriesInExists();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test76() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    int var12 = var9.getLevel();
    boolean var15 = var9.getMoreResults(100, 0);
    int var16 = var9.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var17 = var8.getPrecision(var16);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test77() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    java.util.Vector var3 = var1.getTables();
    int var4 = var1.getLevel();
    boolean var7 = var1.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var15 = new com.sqlmagic.tinysql.tsResultSet();
    int var16 = var15.getLevel();
    java.util.Vector var17 = var15.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var18 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var17);
    java.util.Collection var19 = var18.values();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    int var23 = var20.getLevel();
    boolean var24 = var18.containsValue((java.lang.Object)var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var0.setState(100, (java.util.Hashtable)var18, "hi!", var39);
    com.sqlmagic.tinysql.tinySQLException var41 = new com.sqlmagic.tinysql.tinySQLException();
    int var42 = var41.getErrorCode();
    byte[] var43 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var42);
    //com.sqlmagic.tinysql.tsRow var44 = var0.rowAt(var42);
    java.util.Vector var45 = var0.getTables();
    java.util.Vector var46 = var0.getTables();
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    int var50 = var47.getLevel();
    boolean var53 = var47.getMoreResults(100, 0);
    int var54 = var47.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var55 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var47);
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    int var59 = var56.getLevel();
    boolean var62 = var56.getMoreResults(100, 0);
    boolean var63 = var55.isWritable(100);
    //com.sqlmagic.tinysql.tsRow var64 = var0.rowAt(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    //assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    //assertTrue(var64 == null);

  }

  public void test78() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    java.lang.String var2 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var3 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var5 = var3.acceptsURL("");
    boolean var7 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var8 = var3.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var9 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var10);
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var13 = new com.sqlmagic.tinysql.tsResultSet();
    int var14 = var13.getLevel();
    java.util.Vector var15 = var13.getTables();
    int var16 = var13.getLevel();
    boolean var19 = var13.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var22 = var20.acceptsURL("");
    boolean var24 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var25 = var20.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet();
    int var28 = var27.getLevel();
    java.util.Vector var29 = var27.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var30 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var29);
    java.util.Collection var31 = var30.values();
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    int var35 = var32.getLevel();
    boolean var36 = var30.containsValue((java.lang.Object)var32);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var39 = var37.acceptsURL("");
    boolean var41 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var42 = var37.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var44 = new com.sqlmagic.tinysql.tsResultSet();
    int var45 = var44.getLevel();
    java.util.Vector var46 = var44.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var47 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var46);
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var12.setState(100, (java.util.Hashtable)var30, "hi!", var51);
    com.sqlmagic.tinysql.tinySQLException var53 = new com.sqlmagic.tinysql.tinySQLException();
    int var54 = var53.getErrorCode();
    byte[] var55 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var54);
    //com.sqlmagic.tinysql.tsRow var56 = var12.rowAt(var54);
    java.util.Vector var57 = var12.getTables();
    com.sqlmagic.tinysql.tinySQLWhere var58 = var12.getWhereClause();
    int var59 = var12.getColumnCount();
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var63 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var66 = var64.acceptsURL("");
    boolean var68 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var69 = var64.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var71 = new com.sqlmagic.tinysql.tsResultSet();
    int var72 = var71.getLevel();
    java.util.Vector var73 = var71.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var74 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var73);
    int var75 = var74.size();
    com.sqlmagic.tinysql.dbfFileDriver var76 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var78 = var76.acceptsURL("");
    boolean var80 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var81 = var76.acceptsURL("hi!");
    int var82 = var76.getMinorVersion();
    java.lang.Object var84 = var74.put((java.lang.Object)var76, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var85 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var74);
    java.lang.String var86 = com.sqlmagic.tinysql.Utils.forceToSize(var10, var59, "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileDriver var88 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var90 = var88.acceptsURL("");
    boolean var92 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var93 = var88.acceptsURL("hi!");
    boolean var94 = var87.acceptsURL("hi!");
    com.sqlmagic.tinysql.tinySQLConnection var95 = var0.getConnection("hi!", var86, (java.sql.Driver)var87);
    int var96 = var0.getMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    //assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + ""+ "'", var86.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test79() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var13 = var11.acceptsURL("");
    boolean var15 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var16 = var11.acceptsURL("hi!");
    int var17 = var11.getMinorVersion();
    boolean var18 = var8.isSearchable(var17);
    com.sqlmagic.tinysql.tsResultSet var19 = new com.sqlmagic.tinysql.tsResultSet();
    int var20 = var19.getLevel();
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var23 = var21.acceptsURL("");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var26 = var21.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var28 = new com.sqlmagic.tinysql.tsResultSet();
    int var29 = var28.getLevel();
    java.util.Vector var30 = var28.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var31 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var30);
    int var32 = var31.size();
    //com.sqlmagic.tinysql.tsRow var33 = var19.rowAt(var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var34 = var8.getColumnDisplaySize(var32);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    //assertTrue(var33 == null);

  }

  public void test80() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var41 = var39.acceptsURL("");
    boolean var43 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var44 = var39.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var46 = new com.sqlmagic.tinysql.tsResultSet();
    int var47 = var46.getLevel();
    java.util.Vector var48 = var46.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var49 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var48);
    com.sqlmagic.tinysql.SimpleXMLTag var50 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.setCursorName("hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);

  }

  public void test81() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    int var40 = var37.getLevel();
    boolean var43 = var37.getMoreResults(100, 0);
    int var44 = var37.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var45 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var37);
    com.sqlmagic.tinysql.tsResultSet var46 = new com.sqlmagic.tinysql.tsResultSet();
    int var47 = var46.getLevel();
    java.util.Vector var48 = var46.getTables();
    int var49 = var46.getLevel();
    boolean var52 = var46.getMoreResults(100, 0);
    boolean var53 = var45.isWritable(100);
    int var54 = var45.getColumnCount();
    var34.setTransactionIsolation(var54);
    boolean var56 = var34.getAutoCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);

  }

  public void test82() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var42 = var40.acceptsURL("");
    boolean var44 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var45 = var40.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var50 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var49);
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var49);
    com.sqlmagic.tinysql.tinySQLWhere var52 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var51);
    java.lang.String var53 = var52.toString();
    int[] var57 = new int[] { 100, 1, (-1)};
    java.sql.PreparedStatement var58 = var34.prepareStatement(var53, var57);
    boolean var59 = com.sqlmagic.tinysql.Utils.isFunctionName(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "\n"+ "'", var53.equals("\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test83() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var3 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var5 = var3.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var6 = new com.sqlmagic.tinysql.FieldTokenizer(var1, 'a', var5);
    boolean var7 = var6.hasMoreFields();
    int var8 = var6.countFields();
    boolean var9 = var6.hasMoreFields();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test84() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    boolean var62 = var58.supportsMultipleResultSets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test85() throws Throwable {

    byte[] var3 = new byte[] { (byte)0, (byte)(-1), (byte)10};
    int var4 = com.sqlmagic.tinysql.Utils.vax_to_short(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 65280);

  }

  public void test86() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    java.sql.Connection var60 = var58.getConnection();
    boolean var61 = var58.supportsPositionedUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test87() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var1 = var0.getSQLState();
    java.lang.String var2 = var0.getSQLState();
    java.sql.SQLException var3 = var0.getNextException();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test88() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    int var61 = var58.getMaxStatements();
    java.lang.String var62 = var58.getUserName();
    boolean var63 = var58.supportsOpenCursorsAcrossCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test89() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    int var6 = var0.getMajorVersion();
    boolean var8 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var10 = new com.sqlmagic.tinysql.tsResultSet();
    int var11 = var10.getLevel();
    boolean var13 = var9.getMoreResults(var11, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var14 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var16 = var14.acceptsURL("");
    boolean var18 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var19 = var14.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var21 = new com.sqlmagic.tinysql.tsResultSet();
    int var22 = var21.getLevel();
    java.util.Vector var23 = var21.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var23);
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var9.updateColumns("hi!", "");
    java.lang.String var29 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var29);
    boolean var31 = var0.acceptsURL("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.toYMD("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));

  }

  public void test90() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    int var60 = var58.getMaxCatalogNameLength();
    boolean var61 = var58.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test91() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    int var63 = var58.getMaxUserNameLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var64 = var58.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test92() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var1 = new com.sqlmagic.tinysql.tinySQLException();
    int var2 = var1.getErrorCode();
    var0.setNextException((java.sql.SQLException)var1);
    java.lang.String var4 = var0.getSQLState();
    java.util.Iterator var5 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test93() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    java.sql.ResultSet var64 = var58.getClientInfoProperties();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var65 = var58.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);

  }

  public void test94() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    boolean var61 = var58.supportsUnionAll();
    boolean var62 = var58.storesMixedCaseIdentifiers();
    int var63 = var58.getMaxConnections();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);

  }

  public void test95() throws Throwable {

    byte[] var2 = new byte[] { (byte)0, (byte)100};
    int var3 = com.sqlmagic.tinysql.Utils.vax_to_short(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 25600);

  }

  public void test96() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    com.sqlmagic.tinysql.tinySQL var32 = var30.get_tinySQL();
    java.sql.Clob var33 = var30.createClob();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);

  }

  public void test97() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    int var11 = var10.size();
    int var12 = var10.countTags();
    java.util.Collection var13 = var10.values();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var14 = var10.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test98() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    boolean var61 = var58.supportsUnionAll();
    java.lang.String var62 = var58.getIdentifierQuoteString();
    boolean var63 = var58.supportsMultipleOpenResults();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "\""+ "'", var62.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test99() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    java.sql.DatabaseMetaData var59 = var34.getMetaData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);

  }

  public void test100() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.isReadOnly();
    java.lang.String var62 = var58.getSQLKeywords();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));

  }

  public void test101() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var36 = var34.isClosed();
    int var37 = var34.getHoldability();
    boolean var38 = var34.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test102() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    int var12 = var9.getLevel();
    boolean var15 = var9.getMoreResults(100, 0);
    boolean var16 = var8.isWritable(100);
    com.sqlmagic.tinysql.tsResultSet var17 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var18 = new com.sqlmagic.tinysql.tsResultSet();
    int var19 = var18.getLevel();
    java.util.Vector var20 = var18.getTables();
    int var21 = var18.getLevel();
    boolean var24 = var18.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var34);
    java.util.Collection var36 = var35.values();
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    int var40 = var37.getLevel();
    boolean var41 = var35.containsValue((java.lang.Object)var37);
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var44 = var42.acceptsURL("");
    boolean var46 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var47 = var42.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var49 = new com.sqlmagic.tinysql.tsResultSet();
    int var50 = var49.getLevel();
    java.util.Vector var51 = var49.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var51);
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var56 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var17.setState(100, (java.util.Hashtable)var35, "hi!", var56);
    com.sqlmagic.tinysql.tinySQLException var58 = new com.sqlmagic.tinysql.tinySQLException();
    int var59 = var58.getErrorCode();
    byte[] var60 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var59);
    //com.sqlmagic.tinysql.tsRow var61 = var17.rowAt(var59);
    java.util.Vector var62 = var17.getTables();
    int var63 = var17.numcols();
    boolean var64 = var8.isReadOnly(var63);
    com.sqlmagic.tinysql.dbfFileDriver var65 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var67 = var65.acceptsURL("");
    boolean var69 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var70 = var65.acceptsURL("hi!");
    int var71 = var65.getMajorVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var72 = var8.getScale(var71);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
   // assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test103() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.dbfFileDriver var9 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var11 = var9.acceptsURL("");
    boolean var13 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var14 = var9.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var15 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var24 = var22.acceptsURL("");
    boolean var26 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var27 = var22.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var29 = new com.sqlmagic.tinysql.tsResultSet();
    int var30 = var29.getLevel();
    java.util.Vector var31 = var29.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var32 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var31);
    int var33 = var32.size();
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var36 = var34.acceptsURL("");
    boolean var38 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var39 = var34.acceptsURL("hi!");
    int var40 = var34.getMinorVersion();
    java.lang.Object var42 = var32.put((java.lang.Object)var34, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var43 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var21, (java.sql.Driver)var34);
    int var44 = var43.getTransactionIsolation();
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var52 = var50.acceptsURL("");
    boolean var54 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var55 = var50.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var57 = new com.sqlmagic.tinysql.tsResultSet();
    int var58 = var57.getLevel();
    java.util.Vector var59 = var57.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var59);
    com.sqlmagic.tinysql.tinySQLWhere var62 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var61);
    int[] var65 = new int[] { 1, 0};
    java.sql.PreparedStatement var66 = var43.prepareStatement("hi!", var65);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var67 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var43);
    boolean var68 = var67.supportsDataManipulationTransactionsOnly();
    boolean var69 = var67.supportsOpenStatementsAcrossRollback();
    int var70 = var67.getMaxRowSize();
    boolean var71 = var8.isWritable(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test104() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsSubqueriesInComparisons();
    java.lang.String var61 = var58.getTimeDateFunctions();
    boolean var62 = com.sqlmagic.tinysql.UtilString.isQuotedString(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test105() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    int var61 = var58.getMaxStatements();
    java.lang.String var62 = var58.getUserName();
    boolean var63 = var58.supportsFullOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test106() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsOpenStatementsAcrossRollback();
    int var61 = var58.getMaxRowSize();
    int var62 = var58.getMaxTablesInSelect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);

  }

  public void test107() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getColumnCount();
    java.lang.String var8 = var0.toString();
    com.sqlmagic.tinysql.dbfFileDriver var9 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var11 = var9.acceptsURL("");
    boolean var13 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var14 = var9.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var15 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var19 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var20 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var21 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var24 = var22.acceptsURL("");
    boolean var26 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var27 = var22.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var29 = new com.sqlmagic.tinysql.tsResultSet();
    int var30 = var29.getLevel();
    java.util.Vector var31 = var29.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var32 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var31);
    int var33 = var32.size();
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var36 = var34.acceptsURL("");
    boolean var38 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var39 = var34.acceptsURL("hi!");
    int var40 = var34.getMinorVersion();
    java.lang.Object var42 = var32.put((java.lang.Object)var34, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var43 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var21, (java.sql.Driver)var34);
    int var44 = var43.getTransactionIsolation();
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var52 = var50.acceptsURL("");
    boolean var54 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var55 = var50.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var57 = new com.sqlmagic.tinysql.tsResultSet();
    int var58 = var57.getLevel();
    java.util.Vector var59 = var57.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var59);
    com.sqlmagic.tinysql.tinySQLWhere var62 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var61);
    int[] var65 = new int[] { 1, 0};
    java.sql.PreparedStatement var66 = var43.prepareStatement("hi!", var65);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var67 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var43);
    boolean var68 = var67.supportsDataManipulationTransactionsOnly();
    boolean var69 = var67.storesLowerCaseIdentifiers();
    int var70 = var67.getMaxCursorNameLength();
    var0.setType(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "\nColumns in ResultSet\n\nRows in tsResultSet\n"+ "'", var8.equals("\nColumns in ResultSet\n\nRows in tsResultSet\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);

  }

  public void test108() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsCatalogsInIndexDefinitions();
    boolean var60 = var58.nullsAreSortedHigh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test109() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsOpenStatementsAcrossCommit();
    java.lang.String var63 = var58.getURL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));

  }

  public void test110() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var33 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var34 = new com.sqlmagic.tinysql.tsResultSet();
    int var35 = var34.getLevel();
    boolean var37 = var33.getMoreResults(var35, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var48 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var47);
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var33.updateColumns("hi!", "");
    java.lang.String var53 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var53);
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var61 = var59.acceptsURL("");
    boolean var63 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var64 = var59.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var66 = new com.sqlmagic.tinysql.tsResultSet();
    int var67 = var66.getLevel();
    java.util.Vector var68 = var66.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var68);
    com.sqlmagic.tinysql.SimpleXMLTag var70 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var68);
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String[] var72 = new java.lang.String[] { "hi!"};
    java.sql.PreparedStatement var73 = var30.prepareStatement(var55, var72);
    boolean var74 = var30.getAutoCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test111() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    int var14 = var11.getLevel();
    boolean var17 = var11.getMoreResults(100, 0);
    boolean var18 = var8.isSearchable(100);
    com.sqlmagic.tinysql.tsResultSet var19 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    boolean var23 = var19.getMoreResults(var21, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var24 = var8.getColumnName(var21);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test112() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    var35.cancel();
    java.lang.String var38 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var42 = var40.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var43 = new com.sqlmagic.tinysql.FieldTokenizer(var38, 'a', var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var44 = var35.execute(var38);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test113() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var33 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var34 = new com.sqlmagic.tinysql.tsResultSet();
    int var35 = var34.getLevel();
    boolean var37 = var33.getMoreResults(var35, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var48 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var47);
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var33.updateColumns("hi!", "");
    java.lang.String var53 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var53);
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var61 = var59.acceptsURL("");
    boolean var63 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var64 = var59.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var66 = new com.sqlmagic.tinysql.tsResultSet();
    int var67 = var66.getLevel();
    java.util.Vector var68 = var66.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var68);
    com.sqlmagic.tinysql.SimpleXMLTag var70 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var68);
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String[] var72 = new java.lang.String[] { "hi!"};
    java.sql.PreparedStatement var73 = var30.prepareStatement(var55, var72);
    com.sqlmagic.tinysql.tinySQL var74 = var30.get_tinySQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);

  }

  public void test114() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsGroupByUnrelated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test115() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    boolean var7 = var0.isGrouped();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test116() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    boolean var15 = var13.contains((java.lang.Object)(byte)0);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var18 = var16.acceptsURL("");
    boolean var20 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var21 = var16.acceptsURL("hi!");
    java.lang.Object var22 = var13.remove((java.lang.Object)var21);
    com.sqlmagic.tinysql.tsResultSet var23 = new com.sqlmagic.tinysql.tsResultSet();
    int var24 = var23.getLevel();
    java.util.Vector var25 = var23.getTables();
    int var26 = var23.getLevel();
    boolean var29 = var23.getMoreResults(100, 0);
    com.sqlmagic.tinysql.SimpleXMLTag var30 = var13.getTag(0);
    java.util.Collection var31 = var13.values();
    int var32 = var13.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test117() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    int var60 = var58.getMaxColumnsInTable();
    boolean var61 = var58.supportsSubqueriesInIns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test118() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    int var63 = var58.getMaxStatements();
    java.sql.ResultSet var64 = var58.getTypeInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);

  }

  public void test119() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var3 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var5 = var3.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var6 = new com.sqlmagic.tinysql.FieldTokenizer(var1, 'a', var5);
    boolean var7 = var6.hasMoreFields();
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var14 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var23 = var21.acceptsURL("");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var26 = var21.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var28 = new com.sqlmagic.tinysql.tsResultSet();
    int var29 = var28.getLevel();
    java.util.Vector var30 = var28.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var31 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var30);
    int var32 = var31.size();
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    int var39 = var33.getMinorVersion();
    java.lang.Object var41 = var31.put((java.lang.Object)var33, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var42 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var20, (java.sql.Driver)var33);
    int var43 = var42.getTransactionIsolation();
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var58);
    com.sqlmagic.tinysql.tinySQLWhere var61 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var60);
    int[] var64 = new int[] { 1, 0};
    java.sql.PreparedStatement var65 = var42.prepareStatement("hi!", var64);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var42);
    boolean var67 = var66.supportsDataManipulationTransactionsOnly();
    boolean var68 = var66.storesLowerCaseIdentifiers();
    java.sql.ResultSet var69 = var66.getTypeInfo();
    boolean var70 = var66.supportsSavepoints();
    boolean var71 = var66.supportsExtendedSQLGrammar();
    int var72 = var66.getDatabaseMajorVersion();
    java.lang.String var73 = var6.getField(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));

  }

  public void test120() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var5 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var6 = new com.sqlmagic.tinysql.tsResultSet();
    int var7 = var6.getLevel();
    boolean var9 = var5.getMoreResults(var7, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var10 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var12 = var10.acceptsURL("");
    boolean var14 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var15 = var10.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var17 = new com.sqlmagic.tinysql.tsResultSet();
    int var18 = var17.getLevel();
    java.util.Vector var19 = var17.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var20 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var19);
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var5.updateColumns("hi!", "");
    java.lang.String var25 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var25);
    java.lang.String var27 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    boolean var28 = var0.acceptsURL(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test121() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    int var11 = var10.size();
    int var12 = var10.countTags();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var19 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var28 = var26.acceptsURL("");
    boolean var30 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var31 = var26.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var33 = new com.sqlmagic.tinysql.tsResultSet();
    int var34 = var33.getLevel();
    java.util.Vector var35 = var33.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var35);
    int var37 = var36.size();
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    int var44 = var38.getMinorVersion();
    java.lang.Object var46 = var36.put((java.lang.Object)var38, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var47 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var25, (java.sql.Driver)var38);
    int var48 = var47.getTransactionIsolation();
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    java.util.Vector var63 = var61.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var63);
    com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var63);
    com.sqlmagic.tinysql.tinySQLWhere var66 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var65);
    int[] var69 = new int[] { 1, 0};
    java.sql.PreparedStatement var70 = var47.prepareStatement("hi!", var69);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var71 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    boolean var72 = var71.supportsDataManipulationTransactionsOnly();
    java.lang.String var73 = var71.getDatabaseProductName();
    boolean var74 = var71.supportsMixedCaseIdentifiers();
    boolean var75 = var71.supportsDifferentTableCorrelationNames();
    boolean var76 = var71.supportsCatalogsInProcedureCalls();
    java.lang.Object var77 = var10.remove((java.lang.Object)var71);
    boolean var78 = var71.supportsIntegrityEnhancementFacility();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "tinySQL"+ "'", var73.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test122() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    byte[] var15 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)0);
    java.lang.Object var16 = var13.get((java.lang.Object)var15);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var17 = var13.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test123() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    int var61 = var58.getJDBCMajorVersion();
    boolean var63 = var58.supportsResultSetType(100);
    boolean var64 = var58.supportsOpenCursorsAcrossCommit();
    int var65 = var58.getResultSetHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test124() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    boolean var63 = var58.supportsGroupByBeyondSelect();
    boolean var64 = var58.nullsAreSortedAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test125() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    boolean var15 = var11.getMoreResults(var13, (-1));
    boolean var16 = var8.isCaseSensitive(var13);
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var19 = var17.acceptsURL("");
    boolean var21 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var22 = var17.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var23 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var24 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var27 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var28 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var29 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var40 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var39);
    int var41 = var40.size();
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var44 = var42.acceptsURL("");
    boolean var46 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var47 = var42.acceptsURL("hi!");
    int var48 = var42.getMinorVersion();
    java.lang.Object var50 = var40.put((java.lang.Object)var42, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var51 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var29, (java.sql.Driver)var42);
    com.sqlmagic.tinysql.tinySQLStatement var52 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var51);
    int var53 = var52.getResultSetHoldability();
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var62 = var60.acceptsURL("");
    boolean var64 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var65 = var60.acceptsURL("hi!");
    int var66 = var60.getMajorVersion();
    int var67 = var52.executeUpdate("hi!", var66);
    boolean var68 = var8.isCaseSensitive(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);

  }

  public void test126() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var38 = var36.acceptsURL("");
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var41 = var36.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var42 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var47 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    int var60 = var59.size();
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var63 = var61.acceptsURL("");
    boolean var65 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var66 = var61.acceptsURL("hi!");
    int var67 = var61.getMinorVersion();
    java.lang.Object var69 = var59.put((java.lang.Object)var61, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var70 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var48, (java.sql.Driver)var61);
    int var71 = var70.getTransactionIsolation();
    boolean var74 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var77 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var79 = var77.acceptsURL("");
    boolean var81 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var82 = var77.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var84 = new com.sqlmagic.tinysql.tsResultSet();
    int var85 = var84.getLevel();
    java.util.Vector var86 = var84.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var87 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var86);
    com.sqlmagic.tinysql.SimpleXMLTag var88 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var86);
    com.sqlmagic.tinysql.tinySQLWhere var89 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var88);
    int[] var92 = new int[] { 1, 0};
    java.sql.PreparedStatement var93 = var70.prepareStatement("hi!", var92);
    java.lang.String var94 = var34.getClientInfo("hi!");
    com.sqlmagic.tinysql.tinySQL var95 = var34.get_tinySQL();
    java.sql.Savepoint var96 = var34.setSavepoint();
    java.sql.DatabaseMetaData var97 = var34.getMetaData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var97 == null);

  }

  public void test127() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    boolean var59 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var60 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    boolean var64 = var60.getMoreResults(var62, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var65 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var67 = var65.acceptsURL("");
    boolean var69 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var70 = var65.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var72 = new com.sqlmagic.tinysql.tsResultSet();
    int var73 = var72.getLevel();
    java.util.Vector var74 = var72.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var75 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var74);
    boolean var78 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var60.updateColumns("hi!", "");
    java.lang.String var80 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var80);
    com.sqlmagic.tinysql.dbfFileDriver var82 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var84 = var82.acceptsURL("");
    java.lang.String var85 = com.sqlmagic.tinysql.UtilString.removeQuotes("");
    java.lang.Object[] var86 = new java.lang.Object[] { var85};
    java.sql.Array var87 = var34.createArrayOf("hi!", var86);
    com.sqlmagic.tinysql.tsResultSet var88 = new com.sqlmagic.tinysql.tsResultSet();
    int var89 = var88.getLevel();
    java.util.Vector var90 = var88.getTables();
    java.lang.String var92 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var90, "hi!");
    java.lang.String var94 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFile var95 = new com.sqlmagic.tinysql.dbfFile(var94);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var96 = var34.prepareStatement(var94);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test128() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    boolean var62 = var58.dataDefinitionCausesTransactionCommit();
    boolean var63 = var58.dataDefinitionCausesTransactionCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test129() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    int var38 = var35.getMaxRows();
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var41 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var42 = new com.sqlmagic.tinysql.tsResultSet();
    int var43 = var42.getLevel();
    boolean var45 = var41.getMoreResults(var43, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var48 = var46.acceptsURL("");
    boolean var50 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var51 = var46.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var53 = new com.sqlmagic.tinysql.tsResultSet();
    int var54 = var53.getLevel();
    java.util.Vector var55 = var53.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var55);
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var41.updateColumns("hi!", "");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var61);
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag(var63);
    boolean var66 = var35.execute(var63, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var67 = var35.getResultSetConcurrency();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test130() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    java.util.Properties var32 = var30.getClientInfo();
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var35 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var37 = var35.acceptsURL("");
    boolean var39 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var40 = var35.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var41 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var46 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var50 = var48.acceptsURL("");
    boolean var52 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var53 = var48.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var55 = new com.sqlmagic.tinysql.tsResultSet();
    int var56 = var55.getLevel();
    java.util.Vector var57 = var55.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var58 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var57);
    int var59 = var58.size();
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var62 = var60.acceptsURL("");
    boolean var64 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var65 = var60.acceptsURL("hi!");
    int var66 = var60.getMinorVersion();
    java.lang.Object var68 = var58.put((java.lang.Object)var60, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var69 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var47, (java.sql.Driver)var60);
    int var70 = var69.getTransactionIsolation();
    var69.commit();
    com.sqlmagic.tinysql.tsResultSet var72 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var73 = new com.sqlmagic.tinysql.tsResultSet();
    int var74 = var73.getLevel();
    boolean var76 = var72.getMoreResults(var74, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var77 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var79 = var77.acceptsURL("");
    boolean var81 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var82 = var77.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var84 = new com.sqlmagic.tinysql.tsResultSet();
    int var85 = var84.getLevel();
    java.util.Vector var86 = var84.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var87 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var86);
    boolean var90 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var72.updateColumns("hi!", "");
    java.sql.Savepoint var92 = var69.setSavepoint("");
    var30.setClientInfo("hi!", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);

  }

  public void test131() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    java.util.Vector var3 = var1.getTables();
    int var4 = var1.getLevel();
    boolean var7 = var1.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var15 = new com.sqlmagic.tinysql.tsResultSet();
    int var16 = var15.getLevel();
    java.util.Vector var17 = var15.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var18 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var17);
    java.util.Collection var19 = var18.values();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    int var23 = var20.getLevel();
    boolean var24 = var18.containsValue((java.lang.Object)var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var0.setState(100, (java.util.Hashtable)var18, "hi!", var39);
    com.sqlmagic.tinysql.tinySQLException var41 = new com.sqlmagic.tinysql.tinySQLException();
    int var42 = var41.getErrorCode();
    byte[] var43 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var42);
    //com.sqlmagic.tinysql.tsRow var44 = var0.rowAt(var42);
    java.util.Vector var45 = var0.getTables();
    com.sqlmagic.tinysql.tinySQLWhere var46 = var0.getWhereClause();
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    int var50 = var47.getLevel();
    boolean var53 = var47.getMoreResults(100, 0);
    int var54 = var47.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var55 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var47);
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    int var59 = var56.getLevel();
    boolean var62 = var56.getMoreResults(100, 0);
    boolean var63 = var55.isWritable(100);
    int var64 = var55.getColumnCount();
    var0.setType(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    //assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);

  }

  public void test132() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    boolean var63 = var58.supportsIntegrityEnhancementFacility();
    boolean var64 = var58.supportsGroupByUnrelated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test133() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    boolean var61 = var58.supportsUnionAll();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var62 = var58.getCatalogSeparator();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test134() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.supportsSchemasInTableDefinitions();
    boolean var62 = var58.supportsCatalogsInPrivilegeDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test135() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var36 = var34.isClosed();
    int var37 = var34.getHoldability();
    boolean var38 = var34.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test136() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsOpenStatementsAcrossRollback();
    boolean var61 = var58.supportsExpressionsInOrderBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test137() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    int var38 = var35.getMaxRows();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var39 = var35.executeBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);

  }

  public void test138() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var13 = var11.acceptsURL("");
    boolean var15 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var16 = var11.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var17 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var21 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var22 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var23 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var26 = var24.acceptsURL("");
    boolean var28 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var29 = var24.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var31 = new com.sqlmagic.tinysql.tsResultSet();
    int var32 = var31.getLevel();
    java.util.Vector var33 = var31.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var34 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var33);
    int var35 = var34.size();
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var38 = var36.acceptsURL("");
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var41 = var36.acceptsURL("hi!");
    int var42 = var36.getMinorVersion();
    java.lang.Object var44 = var34.put((java.lang.Object)var36, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var45 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var23, (java.sql.Driver)var36);
    int var46 = var45.getTransactionIsolation();
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var52 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var54 = var52.acceptsURL("");
    boolean var56 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var57 = var52.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var59 = new com.sqlmagic.tinysql.tsResultSet();
    int var60 = var59.getLevel();
    java.util.Vector var61 = var59.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var62 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var61);
    com.sqlmagic.tinysql.SimpleXMLTag var63 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var61);
    com.sqlmagic.tinysql.tinySQLWhere var64 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var63);
    int[] var67 = new int[] { 1, 0};
    java.sql.PreparedStatement var68 = var45.prepareStatement("hi!", var67);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var69 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var45);
    boolean var70 = var69.supportsDataManipulationTransactionsOnly();
    boolean var71 = var69.supportsStoredFunctionsUsingCallSyntax();
    int var72 = var69.getMaxIndexLength();
    java.sql.ResultSet var73 = var69.getTypeInfo();
    int var74 = var69.getMaxStatements();
    boolean var75 = var8.isCaseSensitive(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test139() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsOpenStatementsAcrossCommit();
    boolean var63 = var58.supportsStoredProcedures();
    boolean var64 = var58.supportsLikeEscapeClause();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test140() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    boolean var63 = var58.supportsGroupByBeyondSelect();
    int var64 = var58.getMaxSchemaNameLength();
    java.sql.ResultSet var65 = var58.getTableTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);

  }

  public void test141() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    java.sql.ResultSet var64 = var58.getClientInfoProperties();
    int var65 = var58.getDriverMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2);

  }

  public void test142() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    var34.setCatalog("hi!");
    boolean var43 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var44 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    boolean var48 = var44.getMoreResults(var46, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var44.updateColumns("hi!", "");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var64);
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var67 = var34.getClientInfo("hi!");
    java.sql.Savepoint var68 = var34.setSavepoint();
    boolean var69 = var34.getAutoClose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test143() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getSQLStateType();
    boolean var64 = var58.supportsGroupByUnrelated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test144() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    boolean var64 = var62.supportsConvert();
    int var65 = var62.getMaxColumnsInIndex();
    boolean var66 = var62.supportsPositionedDelete();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test145() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    boolean var63 = var58.supportsIntegrityEnhancementFacility();
    boolean var64 = var58.nullsAreSortedAtStart();
    int var65 = var58.getMaxColumnsInSelect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 10000);

  }

  public void test146() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    int var5 = var0.size();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var8 = var6.acceptsURL("");
    boolean var10 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var11 = var6.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var28);
    int var30 = var29.size();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    int var37 = var31.getMinorVersion();
    java.lang.Object var39 = var29.put((java.lang.Object)var31, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var40 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var18, (java.sql.Driver)var31);
    int var41 = var40.getTransactionIsolation();
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var49 = var47.acceptsURL("");
    boolean var51 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var52 = var47.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var54 = new com.sqlmagic.tinysql.tsResultSet();
    int var55 = var54.getLevel();
    java.util.Vector var56 = var54.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var56);
    com.sqlmagic.tinysql.SimpleXMLTag var58 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var56);
    com.sqlmagic.tinysql.tinySQLWhere var59 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var58);
    int[] var62 = new int[] { 1, 0};
    java.sql.PreparedStatement var63 = var40.prepareStatement("hi!", var62);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var64 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var40);
    boolean var65 = var64.supportsOpenCursorsAcrossCommit();
    java.lang.String var66 = var64.getNumericFunctions();
    int var67 = var64.getMaxColumnsInSelect();
    int var68 = var64.getMaxTableNameLength();
    var0.setLevel(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 32);

  }

  public void test147() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    java.util.Set var14 = var13.entrySet();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = var13.nextTag();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test148() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var1 = var0.getSQLState();
    java.util.Iterator var2 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test149() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    com.sqlmagic.tinysql.tinySQLStatement var32 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var30);
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var39 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var32.addBatch("hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));

  }

  public void test150() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    java.util.Set var14 = var13.entrySet();
    java.util.Enumeration var15 = var13.elements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);

  }

  public void test151() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    var35.clearWarnings();
    int var38 = var35.getMaxRows();
    int var39 = var35.getMaxRows();
    java.sql.Connection var40 = var35.getConnection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);

  }

  public void test152() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    java.lang.String var8 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var7);
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var13 = var11.acceptsURL("");
    boolean var15 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var16 = var11.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var18 = new com.sqlmagic.tinysql.tsResultSet();
    int var19 = var18.getLevel();
    java.util.Vector var20 = var18.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var21 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var20);
    com.sqlmagic.tinysql.SimpleXMLTag var22 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var23 = com.sqlmagic.tinysql.UtilString.findTableAlias(var8, var20);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test153() throws Throwable {

    byte[] var0 = new byte[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var1 = com.sqlmagic.tinysql.Utils.vax_to_short(var0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test154() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    boolean var63 = var58.supportsMixedCaseQuotedIdentifiers();
    boolean var64 = var58.supportsANSI92EntryLevelSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test155() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    int var12 = var9.getLevel();
    boolean var15 = var9.getMoreResults(100, 0);
    boolean var16 = var8.isWritable(100);
    boolean var18 = var8.isCaseSensitive(0);
    com.sqlmagic.tinysql.tsResultSet var19 = new com.sqlmagic.tinysql.tsResultSet();
    int var20 = var19.getLevel();
    java.util.Vector var21 = var19.getTables();
    int var22 = var19.getLevel();
    boolean var25 = var19.getMoreResults(100, 0);
    int var26 = var19.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var27 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var19);
    int var29 = var27.isNullable(10);
    boolean var30 = var8.isReadOnly(10);
    com.sqlmagic.tinysql.tsResultSet var31 = new com.sqlmagic.tinysql.tsResultSet();
    int var32 = var31.getLevel();
    java.util.Vector var33 = var31.getTables();
    int var34 = var31.getLevel();
    boolean var37 = var31.getMoreResults(100, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var38 = var8.getColumnName(0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test156() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var61 = var58.getDefaultTransactionIsolation();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));

  }

  public void test157() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    int var11 = var10.size();
    int var12 = var10.size();
    boolean var13 = var10.isEmpty();
    int var14 = var10.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test158() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsOpenStatementsAcrossRollback();
    boolean var61 = var58.supportsOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test159() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var3 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var6 = var4.acceptsURL("");
    boolean var8 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var9 = var4.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var13);
    int var15 = var14.size();
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var18 = var16.acceptsURL("");
    boolean var20 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var21 = var16.acceptsURL("hi!");
    int var22 = var16.getMinorVersion();
    java.lang.Object var24 = var14.put((java.lang.Object)var16, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var25 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var14);
    com.sqlmagic.tinysql.tinySQLException var26 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var27 = var26.getSQLState();
    java.lang.String var28 = var26.getSQLState();
    java.lang.String var29 = var26.toString();
    java.util.Iterator var30 = var26.iterator();
    java.lang.Object var31 = var14.remove((java.lang.Object)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var29.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);

  }

  public void test160() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var42 = var40.acceptsURL("");
    boolean var44 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var45 = var40.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var50 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var49);
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var49);
    boolean var53 = var51.contains((java.lang.Object)(byte)0);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    java.lang.Object var60 = var51.remove((java.lang.Object)var59);
    var35.setPoolable(var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var62 = var35.getFetchDirection();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);

  }

  public void test161() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getColumnCount();
    com.sqlmagic.tinysql.tinySQLException var8 = new com.sqlmagic.tinysql.tinySQLException();
    com.sqlmagic.tinysql.tinySQLException var9 = new com.sqlmagic.tinysql.tinySQLException();
    int var10 = var9.getErrorCode();
    var8.setNextException((java.sql.SQLException)var9);
    java.lang.String var12 = var8.getSQLState();
    int var13 = var8.getErrorCode();
    var0.setFetchSize(var13);
    int var15 = var0.numcols();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test162() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    boolean var38 = var35.getMoreResults();
    com.sqlmagic.tinysql.tsResultSet var39 = new com.sqlmagic.tinysql.tsResultSet();
    int var40 = var39.getLevel();
    java.util.Vector var41 = var39.getTables();
    int var42 = var39.getLevel();
    boolean var45 = var39.getMoreResults(100, 0);
    int var46 = var39.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var47 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var39);
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    int var51 = var48.getLevel();
    boolean var54 = var48.getMoreResults(100, 0);
    boolean var55 = var47.isWritable(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.setFetchDirection(100);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test163() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    int var40 = var37.getLevel();
    boolean var43 = var37.getMoreResults(100, 0);
    int var44 = var37.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var45 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var37);
    com.sqlmagic.tinysql.tsResultSet var46 = new com.sqlmagic.tinysql.tsResultSet();
    int var47 = var46.getLevel();
    java.util.Vector var48 = var46.getTables();
    int var49 = var46.getLevel();
    boolean var52 = var46.getMoreResults(100, 0);
    boolean var53 = var45.isWritable(100);
    int var54 = var45.getColumnCount();
    var34.setTransactionIsolation(var54);
    boolean var56 = com.sqlmagic.tinysql.Utils.isDateColumn(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test164() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    boolean var61 = var58.supportsSchemasInProcedureCalls();
    boolean var62 = var58.supportsLikeEscapeClause();
    boolean var63 = var58.supportsAlterTableWithAddColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test165() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    var34.setCatalog("hi!");
    boolean var43 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var44 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    boolean var48 = var44.getMoreResults(var46, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var44.updateColumns("hi!", "");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var64);
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var67 = var34.getClientInfo("hi!");
    java.sql.Savepoint var68 = var34.setSavepoint();
    com.sqlmagic.tinysql.tsResultSet var69 = new com.sqlmagic.tinysql.tsResultSet();
    int var70 = var69.getLevel();
    java.util.Vector var71 = var69.getTables();
    int var72 = var69.getLevel();
    boolean var75 = var69.getMoreResults(100, 0);
    int var76 = var69.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var77 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var69);
    int var79 = var77.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var80 = new com.sqlmagic.tinysql.tsResultSet();
    int var81 = var80.getLevel();
    java.util.Vector var82 = var80.getTables();
    int var83 = var80.getLevel();
    boolean var86 = var80.getMoreResults(100, 0);
    boolean var87 = var77.isSearchable(100);
    var34.setAutoClose(var87);
    java.sql.SQLXML var89 = var34.createSQLXML();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);

  }

  public void test166() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.supportsSchemasInTableDefinitions();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));

  }

  public void test167() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    int var61 = var58.getMaxCursorNameLength();
    java.sql.ResultSet var62 = var58.getTableTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);

  }

  public void test168() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    boolean var63 = var58.nullPlusNonNullIsNull();
    boolean var64 = var58.supportsGroupByBeyondSelect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test169() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    var35.clearWarnings();
    int var38 = var35.getMaxRows();
    int var39 = var35.getMaxRows();
    int var40 = var35.getUpdateCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));

  }

  public void test170() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var2, "hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var8 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    boolean var12 = var8.getMoreResults(var10, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    boolean var26 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var8.updateColumns("hi!", "");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var31 = var29.acceptsURL("");
    boolean var33 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var34 = var29.acceptsURL("hi!");
    int var35 = var29.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var36 = new com.sqlmagic.tinysql.textFileConnection(var7, "", (java.sql.Driver)var29);
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var38 = new com.sqlmagic.tinysql.tsResultSet();
    int var39 = var38.getLevel();
    boolean var41 = var37.getMoreResults(var39, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var44 = var42.acceptsURL("");
    boolean var46 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var47 = var42.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var49 = new com.sqlmagic.tinysql.tsResultSet();
    int var50 = var49.getLevel();
    java.util.Vector var51 = var49.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var51);
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var37.updateColumns("hi!", "");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.tsResultSet var58 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var59 = new com.sqlmagic.tinysql.tsResultSet();
    int var60 = var59.getLevel();
    boolean var62 = var58.getMoreResults(var60, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var65 = var63.acceptsURL("");
    boolean var67 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var68 = var63.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var70 = new com.sqlmagic.tinysql.tsResultSet();
    int var71 = var70.getLevel();
    java.util.Vector var72 = var70.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var73 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var72);
    boolean var76 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var58.updateColumns("hi!", "");
    boolean var78 = com.sqlmagic.tinysql.Utils.endsWithFunctionName("");
    java.lang.Object[] var79 = new java.lang.Object[] { ""};
    java.sql.Struct var80 = var36.createStruct(var57, var79);
    com.sqlmagic.tinysql.Utils.setPriority(var2, var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + ""+ "'", var57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);

  }

  public void test171() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var65 = var63.acceptsURL("");
    boolean var67 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var68 = var63.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var69 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var70 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var73 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var74 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var76 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var78 = var76.acceptsURL("");
    boolean var80 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var81 = var76.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var83 = new com.sqlmagic.tinysql.tsResultSet();
    int var84 = var83.getLevel();
    java.util.Vector var85 = var83.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var86 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var85);
    int var87 = var86.size();
    com.sqlmagic.tinysql.dbfFileDriver var88 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var90 = var88.acceptsURL("");
    boolean var92 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var93 = var88.acceptsURL("hi!");
    int var94 = var88.getMinorVersion();
    java.lang.Object var96 = var86.put((java.lang.Object)var88, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var97 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var75, (java.sql.Driver)var88);
    com.sqlmagic.tinysql.textFileDriver var98 = new com.sqlmagic.tinysql.textFileDriver();
    com.sqlmagic.tinysql.dbfFileConnection var99 = new com.sqlmagic.tinysql.dbfFileConnection(var62, "hi!", (java.sql.Driver)var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);

  }

  public void test172() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    int var61 = var58.getMaxStatements();
    boolean var62 = var58.supportsConvert();
    java.sql.Connection var63 = var58.getConnection();
    boolean var64 = var58.supportsNamedParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test173() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    boolean var18 = com.sqlmagic.tinysql.Utils.endsWithFunctionName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test174() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var11 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var13 = var11.acceptsURL("");
    boolean var15 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var16 = var11.acceptsURL("hi!");
    int var17 = var11.getMinorVersion();
    boolean var18 = var8.isSearchable(var17);
    com.sqlmagic.tinysql.tsResultSet var19 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    boolean var23 = var19.getMoreResults(var21, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var24 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var26 = var24.acceptsURL("");
    boolean var28 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var29 = var24.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var31 = new com.sqlmagic.tinysql.tsResultSet();
    int var32 = var31.getLevel();
    java.util.Vector var33 = var31.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var34 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var33);
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var19.updateColumns("hi!", "");
    int var39 = var19.getLevel();
    boolean var40 = var8.isWritable(var39);
    java.lang.String var42 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var46 = var44.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var47 = new com.sqlmagic.tinysql.FieldTokenizer(var42, 'a', var46);
    boolean var48 = var47.hasMoreFields();
    boolean var49 = var47.hasMoreFields();
    int var50 = var47.countFields();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var51 = var8.getCatalogName(var50);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);

  }

  public void test175() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    java.util.Properties var32 = var30.getClientInfo();
    java.sql.Savepoint var33 = var30.setSavepoint();
    boolean var36 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var37 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var41 = var39.acceptsURL("");
    boolean var43 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var44 = var39.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var45 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var49 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var50 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var51 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var52 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var54 = var52.acceptsURL("");
    boolean var56 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var57 = var52.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var59 = new com.sqlmagic.tinysql.tsResultSet();
    int var60 = var59.getLevel();
    java.util.Vector var61 = var59.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var62 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var61);
    int var63 = var62.size();
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var66 = var64.acceptsURL("");
    boolean var68 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var69 = var64.acceptsURL("hi!");
    int var70 = var64.getMinorVersion();
    java.lang.Object var72 = var62.put((java.lang.Object)var64, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var73 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var51, (java.sql.Driver)var64);
    com.sqlmagic.tinysql.tinySQLStatement var74 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var73);
    int var75 = var74.getResultSetHoldability();
    com.sqlmagic.tinysql.dbfFileDriver var76 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var78 = var76.acceptsURL("");
    boolean var80 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var81 = var76.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var82 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var84 = var82.acceptsURL("");
    boolean var86 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var87 = var82.acceptsURL("hi!");
    int var88 = var82.getMajorVersion();
    int var89 = var74.executeUpdate("hi!", var88);
    java.lang.String var91 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    java.lang.String var92 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    java.lang.String var93 = com.sqlmagic.tinysql.Utils.forceToSize(var38, var89, var92);
    com.sqlmagic.tinysql.tsResultSet var94 = new com.sqlmagic.tinysql.tsResultSet();
    int var95 = var94.getLevel();
    java.util.Vector var96 = var94.getTables();
    int var97 = var94.getLevel();
    java.lang.Object[] var98 = new java.lang.Object[] { var97};
    java.sql.Struct var99 = var30.createStruct(var93, var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "hi!"+ "'", var91.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "hi!"+ "'", var92.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var98 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == null);

  }

  public void test176() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    var34.setCatalog("hi!");
    boolean var43 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var44 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    boolean var48 = var44.getMoreResults(var46, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var44.updateColumns("hi!", "");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var64);
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var67 = var34.getClientInfo("hi!");
    java.sql.Savepoint var68 = var34.setSavepoint();
    java.sql.Clob var69 = var34.createClob();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);

  }

  public void test177() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    byte[] var5 = com.sqlmagic.tinysql.Utils.intToLittleEndian((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test178() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    boolean var61 = var58.supportsSchemasInProcedureCalls();
    boolean var62 = var58.supportsMixedCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test179() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);

  }

  public void test180() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    boolean var61 = var58.supportsDataDefinitionAndDataManipulationTransactions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test181() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var42 = var40.acceptsURL("");
    boolean var44 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var45 = var40.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var50 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var49);
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var49);
    boolean var53 = var51.contains((java.lang.Object)(byte)0);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    java.lang.Object var60 = var51.remove((java.lang.Object)var59);
    var35.setPoolable(var59);
    var35.close();
    int var63 = var35.getUpdateCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));

  }

  public void test182() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseQuotedIdentifiers();
    boolean var61 = var58.supportsStatementPooling();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test183() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsSubqueriesInComparisons();
    boolean var61 = var58.supportsCatalogsInProcedureCalls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test184() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    java.sql.ResultSet var63 = var58.getTypeInfo();
    int var64 = var58.getDatabaseMajorVersion();
    int var65 = var58.getMaxCatalogNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test185() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    java.util.Set var14 = var13.entrySet();
    java.util.Set var15 = var13.entrySet();
    java.util.Set var16 = var13.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);

  }

  public void test186() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    com.sqlmagic.tinysql.SimpleXMLTag var18 = var16.nextTag();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);

  }

  public void test187() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    boolean var63 = var58.supportsExtendedSQLGrammar();
    int var64 = var58.getDatabaseMajorVersion();
    boolean var65 = var58.supportsMultipleOpenResults();
    java.lang.String var66 = var58.getSystemFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));

  }

  public void test188() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    int var62 = var58.getMaxColumnsInGroupBy();
    boolean var63 = var58.supportsLimitedOuterJoins();
    boolean var64 = var58.dataDefinitionCausesTransactionCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test189() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    boolean var64 = var62.supportsConvert();
    java.lang.String var65 = var62.getDatabaseProductVersion();
    boolean var66 = var62.isCatalogAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "2.26h"+ "'", var65.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test190() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    boolean var61 = var58.supportsGroupByBeyondSelect();
    java.lang.String var62 = var58.getDriverVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));

  }

  public void test191() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    int var60 = var58.getMaxColumnsInTable();
    java.sql.ResultSet var61 = var58.getClientInfoProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);

  }

  public void test192() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    java.sql.ResultSet var64 = var58.getClientInfoProperties();
    boolean var65 = var58.doesMaxRowSizeIncludeBlobs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test193() throws Throwable {

    byte[] var1 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test194() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    int var60 = var58.getMaxColumnsInTable();
    int var61 = var58.getMaxStatements();
    com.sqlmagic.tinysql.tsResultSet var62 = new com.sqlmagic.tinysql.tsResultSet();
    int var63 = var62.getLevel();
    java.util.Vector var64 = var62.getTables();
    int var65 = var62.getLevel();
    boolean var66 = var58.othersUpdatesAreVisible(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test195() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    java.util.Vector var3 = var1.getTables();
    int var4 = var1.getLevel();
    boolean var7 = var1.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var15 = new com.sqlmagic.tinysql.tsResultSet();
    int var16 = var15.getLevel();
    java.util.Vector var17 = var15.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var18 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var17);
    java.util.Collection var19 = var18.values();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    int var23 = var20.getLevel();
    boolean var24 = var18.containsValue((java.lang.Object)var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var0.setState(100, (java.util.Hashtable)var18, "hi!", var39);
    java.util.Set var41 = var18.entrySet();
    java.util.Set var42 = var18.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);

  }

  public void test196() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    var35.clearWarnings();
    int var38 = var35.getMaxRows();
    int var39 = var35.getFetchSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 4096);

  }

  public void test197() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    java.lang.String var64 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var68 = var66.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var69 = new com.sqlmagic.tinysql.FieldTokenizer(var64, 'a', var68);
    boolean var70 = var69.hasMoreFields();
    java.lang.String var71 = var69.nextField();
    int var72 = var69.countFields();
    boolean var73 = var58.updatesAreDetected(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test198() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var22);
    boolean var25 = var8.isCurrency(1);
    int var26 = var8.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var29 = var27.acceptsURL("");
    boolean var31 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var32 = var27.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var34 = new com.sqlmagic.tinysql.tsResultSet();
    int var35 = var34.getLevel();
    java.util.Vector var36 = var34.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var37 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var36);
    int var38 = var37.size();
    int var39 = var37.countTags();
    boolean var40 = var8.isCaseSensitive(var39);
    int var41 = var8.getColumnCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test199() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    int var12 = var9.getLevel();
    boolean var15 = var9.getMoreResults(100, 0);
    boolean var16 = var8.isWritable(100);
    boolean var18 = var8.isCaseSensitive(0);
    com.sqlmagic.tinysql.tsResultSet var19 = new com.sqlmagic.tinysql.tsResultSet();
    int var20 = var19.getLevel();
    java.util.Vector var21 = var19.getTables();
    int var22 = var19.getLevel();
    boolean var25 = var19.getMoreResults(100, 0);
    boolean var26 = var8.isReadOnly(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test200() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.lang.String var60 = var58.getNumericFunctions();
    int var61 = var58.getDriverMajorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2);

  }

  public void test201() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    int var61 = var58.getMaxCursorNameLength();
    boolean var62 = var58.supportsGroupByBeyondSelect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test202() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    var35.clearWarnings();
    java.sql.SQLWarning var38 = var35.getWarnings();
    boolean var40 = com.sqlmagic.tinysql.Utils.clearFunction("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.addBatch("");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test203() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsSubqueriesInComparisons();
    java.lang.String var61 = var58.getTimeDateFunctions();
    boolean var62 = var58.allProceduresAreCallable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test204() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    boolean var64 = var62.supportsConvert();
    int var65 = var62.getMaxColumnsInIndex();
    boolean var66 = var62.supportsAlterTableWithAddColumn();
    java.lang.String var67 = var62.getSQLKeywords();
    int var68 = var62.getMaxProcedureNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);

  }

  public void test205() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    int var14 = var11.getLevel();
    boolean var17 = var11.getMoreResults(100, 0);
    int var18 = var11.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var19 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var11);
    int var21 = var19.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var24 = var22.acceptsURL("");
    boolean var26 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var27 = var22.acceptsURL("hi!");
    int var28 = var22.getMinorVersion();
    boolean var29 = var19.isSearchable(var28);
    boolean var30 = var8.isCurrency(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var32 = var8.getColumnClassName(10);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test206() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    int var40 = var37.getLevel();
    boolean var43 = var37.getMoreResults(100, 0);
    int var44 = var37.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var45 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var37);
    int var47 = var45.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var52 = var50.acceptsURL("");
    boolean var54 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var55 = var50.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var57 = new com.sqlmagic.tinysql.tsResultSet();
    int var58 = var57.getLevel();
    java.util.Vector var59 = var57.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var59);
    boolean var62 = var45.isCurrency(1);
    com.sqlmagic.tinysql.tsResultSet var63 = new com.sqlmagic.tinysql.tsResultSet();
    int var64 = var63.getLevel();
    java.util.Vector var65 = var63.getTables();
    int var66 = var63.getLevel();
    boolean var69 = var63.getMoreResults(100, 0);
    int var70 = var63.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var71 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var63);
    int var73 = var71.isNullable(10);
    boolean var74 = var45.isWritable(10);
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.sql.Struct var76 = var30.createStruct("hi!", var75);
    java.sql.Savepoint var77 = var30.setSavepoint();
    int var78 = var30.getHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test207() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var38 = var36.acceptsURL("");
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var41 = var36.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var42 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var47 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    int var60 = var59.size();
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var63 = var61.acceptsURL("");
    boolean var65 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var66 = var61.acceptsURL("hi!");
    int var67 = var61.getMinorVersion();
    java.lang.Object var69 = var59.put((java.lang.Object)var61, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var70 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var48, (java.sql.Driver)var61);
    int var71 = var70.getTransactionIsolation();
    boolean var74 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var77 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var79 = var77.acceptsURL("");
    boolean var81 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var82 = var77.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var84 = new com.sqlmagic.tinysql.tsResultSet();
    int var85 = var84.getLevel();
    java.util.Vector var86 = var84.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var87 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var86);
    com.sqlmagic.tinysql.SimpleXMLTag var88 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var86);
    com.sqlmagic.tinysql.tinySQLWhere var89 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var88);
    int[] var92 = new int[] { 1, 0};
    java.sql.PreparedStatement var93 = var70.prepareStatement("hi!", var92);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var94 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var70);
    boolean var95 = var94.supportsDataManipulationTransactionsOnly();
    java.lang.String var96 = var94.getDatabaseProductName();
    boolean var97 = var94.supportsMixedCaseIdentifiers();
    boolean var98 = var94.supportsSavepoints();
    var35.setPoolable(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "tinySQL"+ "'", var96.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test208() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var3 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tsResultSet var4 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var5 = new com.sqlmagic.tinysql.tsResultSet();
    int var6 = var5.getLevel();
    java.util.Vector var7 = var5.getTables();
    int var8 = var5.getLevel();
    boolean var11 = var5.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var12 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var14 = var12.acceptsURL("");
    boolean var16 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var17 = var12.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var19 = new com.sqlmagic.tinysql.tsResultSet();
    int var20 = var19.getLevel();
    java.util.Vector var21 = var19.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var22 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var21);
    java.util.Collection var23 = var22.values();
    com.sqlmagic.tinysql.tsResultSet var24 = new com.sqlmagic.tinysql.tsResultSet();
    int var25 = var24.getLevel();
    java.util.Vector var26 = var24.getTables();
    int var27 = var24.getLevel();
    boolean var28 = var22.containsValue((java.lang.Object)var24);
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var31 = var29.acceptsURL("");
    boolean var33 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var34 = var29.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var36 = new com.sqlmagic.tinysql.tsResultSet();
    int var37 = var36.getLevel();
    java.util.Vector var38 = var36.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var39 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var38);
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var43 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var4.setState(100, (java.util.Hashtable)var22, "hi!", var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var45 = var3.getColumnLabel(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test209() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getSQLStateType();
    boolean var64 = var58.supportsConvert();
    boolean var65 = var58.supportsSelectForUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test210() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    var35.cancel();
    boolean var37 = var35.isPoolable();
    java.lang.String var38 = var35.getSQLString();
    boolean var39 = var35.getMoreResults();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test211() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.lang.String var60 = var58.getNumericFunctions();
    boolean var61 = var58.supportsAlterTableWithDropColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test212() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var42 = var40.acceptsURL("");
    boolean var44 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var45 = var40.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var50 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var49);
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var49);
    com.sqlmagic.tinysql.tinySQLWhere var52 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var51);
    java.lang.String var53 = var52.toString();
    int[] var57 = new int[] { 100, 1, (-1)};
    java.sql.PreparedStatement var58 = var34.prepareStatement(var53, var57);
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var62 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var65 = var63.acceptsURL("");
    boolean var67 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var68 = var63.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var70 = new com.sqlmagic.tinysql.tsResultSet();
    int var71 = var70.getLevel();
    java.util.Vector var72 = var70.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var73 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var72);
    int var74 = var73.size();
    com.sqlmagic.tinysql.dbfFileDriver var75 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var77 = var75.acceptsURL("");
    boolean var79 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var80 = var75.acceptsURL("hi!");
    int var81 = var75.getMinorVersion();
    java.lang.Object var83 = var73.put((java.lang.Object)var75, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var84 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var73);
    var34.setTypeMap((java.util.Map)var73);
    java.lang.String var86 = var34.getCatalog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "\n"+ "'", var53.equals("\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);

  }

  public void test213() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    boolean var61 = var58.supportsUnionAll();
    java.lang.String var62 = var58.getIdentifierQuoteString();
    boolean var63 = var58.supportsLimitedOuterJoins();
    boolean var64 = var58.supportsCatalogsInPrivilegeDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "\""+ "'", var62.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test214() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var0.updateColumns("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var22 = var20.acceptsURL("");
    boolean var24 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var25 = var20.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var40 = new com.sqlmagic.tinysql.tsResultSet();
    int var41 = var40.getLevel();
    java.util.Vector var42 = var40.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var43 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var42);
    int var44 = var43.size();
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var47 = var45.acceptsURL("");
    boolean var49 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var50 = var45.acceptsURL("hi!");
    int var51 = var45.getMinorVersion();
    java.lang.Object var53 = var43.put((java.lang.Object)var45, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var54 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var32, (java.sql.Driver)var45);
    int var55 = var54.getTransactionIsolation();
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var63 = var61.acceptsURL("");
    boolean var65 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var66 = var61.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var68 = new com.sqlmagic.tinysql.tsResultSet();
    int var69 = var68.getLevel();
    java.util.Vector var70 = var68.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var70);
    com.sqlmagic.tinysql.SimpleXMLTag var72 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var70);
    com.sqlmagic.tinysql.tinySQLWhere var73 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var72);
    int[] var76 = new int[] { 1, 0};
    java.sql.PreparedStatement var77 = var54.prepareStatement("hi!", var76);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var78 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var54);
    int var79 = var78.getMaxIndexLength();
    com.sqlmagic.tinysql.dbfFileDriver var80 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var82 = var80.acceptsURL("");
    boolean var84 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var85 = var80.acceptsURL("hi!");
    java.lang.String var86 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", var79, "hi!");
    boolean var87 = com.sqlmagic.tinysql.Utils.isCharColumn(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + ""+ "'", var86.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test215() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    java.lang.String var1 = var0.getSQLState();
    java.lang.String var2 = var0.getSQLState();
    java.lang.String var3 = var0.toString();
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var6 = var4.acceptsURL("");
    boolean var8 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var9 = var4.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var10 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var19 = var17.acceptsURL("");
    boolean var21 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var22 = var17.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var24 = new com.sqlmagic.tinysql.tsResultSet();
    int var25 = var24.getLevel();
    java.util.Vector var26 = var24.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var27 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var26);
    int var28 = var27.size();
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var31 = var29.acceptsURL("");
    boolean var33 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var34 = var29.acceptsURL("hi!");
    int var35 = var29.getMinorVersion();
    java.lang.Object var37 = var27.put((java.lang.Object)var29, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var38 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var16, (java.sql.Driver)var29);
    int var39 = var38.getTransactionIsolation();
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var47 = var45.acceptsURL("");
    boolean var49 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var50 = var45.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var52 = new com.sqlmagic.tinysql.tsResultSet();
    int var53 = var52.getLevel();
    java.util.Vector var54 = var52.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var55 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var54);
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var54);
    com.sqlmagic.tinysql.tinySQLWhere var57 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var56);
    int[] var60 = new int[] { 1, 0};
    java.sql.PreparedStatement var61 = var38.prepareStatement("hi!", var60);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var63 = var62.supportsDataManipulationTransactionsOnly();
    boolean var64 = var62.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var65 = var62.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var65);
    int var67 = var66.getMaxSchemaNameLength();
    boolean var68 = var66.supportsConvert();
    int var69 = var66.getMaxColumnsInIndex();
    boolean var70 = var66.supportsAlterTableWithAddColumn();
    int var71 = var66.getJDBCMajorVersion();
    java.lang.String var72 = var66.getIdentifierQuoteString();
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var75 = var73.acceptsURL("");
    boolean var77 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var78 = var73.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var79 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var80 = com.sqlmagic.tinysql.UtilString.replaceAll(var3, var72, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var3.equals("com.sqlmagic.tinysql.tinySQLException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "\""+ "'", var72.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "com.sqlmagic.tinysql.tinySQLException"+ "'", var80.equals("com.sqlmagic.tinysql.tinySQLException"));

  }

  public void test216() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var36 = var34.isClosed();
    int var37 = var34.getHoldability();
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var44 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.Utils.delFile(var45);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.sql.PreparedStatement var47 = var34.prepareStatement(var45);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test217() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    boolean var63 = var58.nullPlusNonNullIsNull();
    boolean var64 = var58.supportsFullOuterJoins();
    int var65 = var58.getMaxColumnsInGroupBy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test218() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    int var40 = var37.getLevel();
    boolean var43 = var37.getMoreResults(100, 0);
    int var44 = var37.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var45 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var37);
    int var47 = var45.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var52 = var50.acceptsURL("");
    boolean var54 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var55 = var50.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var57 = new com.sqlmagic.tinysql.tsResultSet();
    int var58 = var57.getLevel();
    java.util.Vector var59 = var57.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var59);
    boolean var62 = var45.isCurrency(1);
    com.sqlmagic.tinysql.tsResultSet var63 = new com.sqlmagic.tinysql.tsResultSet();
    int var64 = var63.getLevel();
    java.util.Vector var65 = var63.getTables();
    int var66 = var63.getLevel();
    boolean var69 = var63.getMoreResults(100, 0);
    int var70 = var63.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var71 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var63);
    int var73 = var71.isNullable(10);
    boolean var74 = var45.isWritable(10);
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.sql.Struct var76 = var30.createStruct("hi!", var75);
    java.sql.SQLXML var77 = var30.createSQLXML();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);

  }

  public void test219() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.supportsSchemasInTableDefinitions();
    boolean var62 = var58.supportsSchemasInDataManipulation();
    int var63 = var58.getMaxUserNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test220() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getSQLStateType();
    boolean var64 = var58.supportsUnionAll();
    boolean var65 = var58.isCatalogAtStart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test221() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    java.sql.SQLWarning var36 = var35.getWarnings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.clearBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);

  }

  public void test222() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var22);
    boolean var25 = var8.isCurrency(1);
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    int var29 = var26.getLevel();
    boolean var32 = var26.getMoreResults(100, 0);
    int var33 = var26.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var34 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var26);
    int var36 = var34.isNullable(10);
    boolean var37 = var8.isWritable(10);
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var44 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var45 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var48 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var49 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var50 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var51 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var53 = var51.acceptsURL("");
    boolean var55 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var56 = var51.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var58 = new com.sqlmagic.tinysql.tsResultSet();
    int var59 = var58.getLevel();
    java.util.Vector var60 = var58.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var60);
    int var62 = var61.size();
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var65 = var63.acceptsURL("");
    boolean var67 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var68 = var63.acceptsURL("hi!");
    int var69 = var63.getMinorVersion();
    java.lang.Object var71 = var61.put((java.lang.Object)var63, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var72 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var50, (java.sql.Driver)var63);
    int var73 = var72.getTransactionIsolation();
    boolean var76 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var79 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var81 = var79.acceptsURL("");
    boolean var83 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var84 = var79.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var86 = new com.sqlmagic.tinysql.tsResultSet();
    int var87 = var86.getLevel();
    java.util.Vector var88 = var86.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var89 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var88);
    com.sqlmagic.tinysql.SimpleXMLTag var90 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var88);
    com.sqlmagic.tinysql.tinySQLWhere var91 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var90);
    int[] var94 = new int[] { 1, 0};
    java.sql.PreparedStatement var95 = var72.prepareStatement("hi!", var94);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var96 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var72);
    boolean var97 = var96.supportsDataManipulationTransactionsOnly();
    int var98 = var96.getMaxColumnsInTable();
    java.lang.String var99 = var8.getSchemaName(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + ""+ "'", var99.equals(""));

  }

  public void test223() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var38 = new com.sqlmagic.tinysql.tsResultSet();
    int var39 = var38.getLevel();
    boolean var41 = var37.getMoreResults(var39, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var44 = var42.acceptsURL("");
    boolean var46 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var47 = var42.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var49 = new com.sqlmagic.tinysql.tsResultSet();
    int var50 = var49.getLevel();
    java.util.Vector var51 = var49.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var51);
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var37.updateColumns("hi!", "");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    java.lang.String var58 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName("");
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var62 = var60.acceptsURL("");
    boolean var64 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var65 = var60.acceptsURL("hi!");
    boolean var66 = var59.acceptsURL("hi!");
    var34.setClientInfo("", "hi!");
    com.sqlmagic.tinysql.tsResultSet var68 = new com.sqlmagic.tinysql.tsResultSet();
    int var69 = var68.getLevel();
    java.util.Vector var70 = var68.getTables();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var71 = com.sqlmagic.tinysql.UtilString.findTableAlias("hi!", var70);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + ""+ "'", var57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);

  }

  public void test224() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    var35.close();
    int var39 = var35.getResultSetHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test225() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    boolean var64 = var58.usesLocalFilePerTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);

  }

  public void test226() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var2, "hi!");
    java.lang.String var6 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFile var7 = new com.sqlmagic.tinysql.dbfFile(var6);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var14 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var23 = var21.acceptsURL("");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var26 = var21.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var28 = new com.sqlmagic.tinysql.tsResultSet();
    int var29 = var28.getLevel();
    java.util.Vector var30 = var28.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var31 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var30);
    int var32 = var31.size();
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    int var39 = var33.getMinorVersion();
    java.lang.Object var41 = var31.put((java.lang.Object)var33, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var42 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var20, (java.sql.Driver)var33);
    int var43 = var42.getTransactionIsolation();
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var58);
    com.sqlmagic.tinysql.tinySQLWhere var61 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var60);
    int[] var64 = new int[] { 1, 0};
    java.sql.PreparedStatement var65 = var42.prepareStatement("hi!", var64);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var42);
    boolean var67 = var66.supportsDataManipulationTransactionsOnly();
    boolean var68 = var66.supportsStoredFunctionsUsingCallSyntax();
    int var69 = var66.getMaxIndexLength();
    boolean var70 = var66.supportsANSI92FullSQL();
    java.lang.String var71 = var66.getExtraNameCharacters();
    com.sqlmagic.tinysql.Utils.delFile(var6, var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));

  }

  public void test227() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    java.sql.ResultSet var64 = var58.getClientInfoProperties();
    boolean var65 = var58.supportsSubqueriesInComparisons();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test228() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    int var60 = var58.getMaxColumnsInTable();
    int var61 = var58.getMaxStatements();
    int var62 = var58.getDatabaseMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);

  }

  public void test229() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsOpenStatementsAcrossRollback();
    boolean var61 = var58.storesLowerCaseIdentifiers();
    boolean var62 = var58.supportsSchemasInTableDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test230() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    boolean var62 = var58.dataDefinitionCausesTransactionCommit();
    boolean var63 = var58.storesLowerCaseQuotedIdentifiers();
    boolean var65 = var58.supportsResultSetHoldability(1);
    int var66 = var58.getMaxSchemaNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test231() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    boolean var63 = var62.supportsAlterTableWithDropColumn();
    boolean var64 = var62.supportsSchemasInPrivilegeDefinitions();
    boolean var65 = var62.supportsANSI92IntermediateSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test232() throws Throwable {

    short var1 = com.sqlmagic.tinysql.Utils.fixByte((byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (short)255);

  }

  public void test233() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var3 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var6 = var4.acceptsURL("");
    boolean var8 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var9 = var4.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var13);
    int var15 = var14.size();
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var18 = var16.acceptsURL("");
    boolean var20 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var21 = var16.acceptsURL("hi!");
    int var22 = var16.getMinorVersion();
    java.lang.Object var24 = var14.put((java.lang.Object)var16, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var25 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var14);
    com.sqlmagic.tinysql.textFile var26 = new com.sqlmagic.tinysql.textFile();
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet(var25, (com.sqlmagic.tinysql.tinySQL)var26);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var28 = var26.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test234() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    com.sqlmagic.tinysql.dbfFile var21 = new com.sqlmagic.tinysql.dbfFile("");
    com.sqlmagic.tinysql.tsResultSet var22 = new com.sqlmagic.tinysql.tsResultSet(var17, (com.sqlmagic.tinysql.tinySQL)var21);
    int var23 = var22.getLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test235() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    var30.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test236() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.supportsMixedCaseIdentifiers();
    boolean var62 = var58.supportsDifferentTableCorrelationNames();
    boolean var63 = var58.supportsCatalogsInProcedureCalls();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var64 = var58.getSchemaTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test237() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    boolean var64 = var62.supportsConvert();
    int var65 = var62.getMaxColumnsInIndex();
    int var66 = var62.getDriverMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);

  }

  public void test238() throws Throwable {

    boolean var1 = com.sqlmagic.tinysql.dbfFileTable.isDeleted("hi!");
    com.sqlmagic.tinysql.tinySQLException var2 = new com.sqlmagic.tinysql.tinySQLException("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test239() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    var34.clearWarnings();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLPreparedStatement var37 = new com.sqlmagic.tinysql.tinySQLPreparedStatement((com.sqlmagic.tinysql.tinySQLConnection)var34, "");
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test240() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    int var40 = var37.getLevel();
    boolean var43 = var37.getMoreResults(100, 0);
    int var44 = var37.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var45 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var37);
    com.sqlmagic.tinysql.tsResultSet var46 = new com.sqlmagic.tinysql.tsResultSet();
    int var47 = var46.getLevel();
    java.util.Vector var48 = var46.getTables();
    int var49 = var46.getLevel();
    boolean var52 = var46.getMoreResults(100, 0);
    boolean var53 = var45.isWritable(100);
    int var54 = var45.getColumnCount();
    var34.setTransactionIsolation(var54);
    java.sql.Blob var56 = var34.createBlob();
    com.sqlmagic.tinysql.tsResultSet var57 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var58 = new com.sqlmagic.tinysql.tsResultSet();
    int var59 = var58.getLevel();
    boolean var61 = var57.getMoreResults(var59, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var64 = var62.acceptsURL("");
    boolean var66 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var67 = var62.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var69 = new com.sqlmagic.tinysql.tsResultSet();
    int var70 = var69.getLevel();
    java.util.Vector var71 = var69.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var72 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var71);
    boolean var75 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var57.updateColumns("hi!", "");
    java.lang.String var77 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    java.lang.String var78 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName("");
    int[] var79 = new int[] { };
    java.sql.PreparedStatement var80 = var34.prepareStatement(var78, var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == null);

  }

  public void test241() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    int var38 = var35.getMaxRows();
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var41 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var42 = new com.sqlmagic.tinysql.tsResultSet();
    int var43 = var42.getLevel();
    boolean var45 = var41.getMoreResults(var43, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var48 = var46.acceptsURL("");
    boolean var50 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var51 = var46.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var53 = new com.sqlmagic.tinysql.tsResultSet();
    int var54 = var53.getLevel();
    java.util.Vector var55 = var53.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var55);
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var41.updateColumns("hi!", "");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var61);
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag(var63);
    boolean var66 = var35.execute(var63, 1);
    java.lang.String var68 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var69 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var70 = new com.sqlmagic.tinysql.tsResultSet();
    int var71 = var70.getLevel();
    boolean var73 = var69.getMoreResults(var71, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var74 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var76 = var74.acceptsURL("");
    boolean var78 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var79 = var74.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var81 = new com.sqlmagic.tinysql.tsResultSet();
    int var82 = var81.getLevel();
    java.util.Vector var83 = var81.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var84 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var83);
    boolean var87 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var69.updateColumns("hi!", "");
    java.lang.String var89 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var90 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var92 = var90.acceptsURL("");
    boolean var94 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var95 = var90.acceptsURL("hi!");
    int var96 = var90.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var97 = new com.sqlmagic.tinysql.textFileConnection(var68, "", (java.sql.Driver)var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var98 = var35.execute(var68);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test242() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    var35.cancel();
    var35.clearWarnings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var38 = var35.getFetchDirection();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);

  }

  public void test243() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    int var60 = var58.getResultSetHoldability();
    int var61 = var58.getMaxColumnsInTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10000);

  }

  public void test244() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsOpenStatementsAcrossRollback();
    int var61 = var58.getMaxRowSize();
    boolean var62 = var58.supportsSchemasInDataManipulation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test245() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    boolean var18 = var16.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test246() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getSQLStateType();
    boolean var64 = var58.allProceduresAreCallable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test247() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var0.updateColumns("hi!", "");
    boolean var20 = com.sqlmagic.tinysql.Utils.endsWithFunctionName("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = com.sqlmagic.tinysql.dbfFileTable.isDeleted("");
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test248() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    java.util.Vector var3 = var1.getTables();
    int var4 = var1.getLevel();
    boolean var7 = var1.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var15 = new com.sqlmagic.tinysql.tsResultSet();
    int var16 = var15.getLevel();
    java.util.Vector var17 = var15.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var18 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var17);
    java.util.Collection var19 = var18.values();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    int var23 = var20.getLevel();
    boolean var24 = var18.containsValue((java.lang.Object)var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var0.setState(100, (java.util.Hashtable)var18, "hi!", var39);
    int var41 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test249() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.nullsAreSortedAtStart();
    java.lang.String var61 = var58.getDatabaseProductVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "2.26h"+ "'", var61.equals("2.26h"));

  }

  public void test250() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    int var40 = var37.getLevel();
    boolean var43 = var37.getMoreResults(100, 0);
    int var44 = var37.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var45 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var37);
    int var47 = var45.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var52 = var50.acceptsURL("");
    boolean var54 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var55 = var50.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var57 = new com.sqlmagic.tinysql.tsResultSet();
    int var58 = var57.getLevel();
    java.util.Vector var59 = var57.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var59);
    boolean var62 = var45.isCurrency(1);
    com.sqlmagic.tinysql.tsResultSet var63 = new com.sqlmagic.tinysql.tsResultSet();
    int var64 = var63.getLevel();
    java.util.Vector var65 = var63.getTables();
    int var66 = var63.getLevel();
    boolean var69 = var63.getMoreResults(100, 0);
    int var70 = var63.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var71 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var63);
    int var73 = var71.isNullable(10);
    boolean var74 = var45.isWritable(10);
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.sql.Struct var76 = var30.createStruct("hi!", var75);
    java.sql.Blob var77 = var30.createBlob();
    boolean var78 = var30.getAutoCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test251() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    boolean var63 = var58.doesMaxRowSizeIncludeBlobs();
    boolean var64 = var58.supportsSubqueriesInIns();
    boolean var65 = var58.supportsOrderByUnrelated();
    boolean var66 = var58.supportsUnion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test252() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var8 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var9 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var12 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var13 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var14 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var15 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var17 = var15.acceptsURL("");
    boolean var19 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var20 = var15.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var22 = new com.sqlmagic.tinysql.tsResultSet();
    int var23 = var22.getLevel();
    java.util.Vector var24 = var22.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var25 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var24);
    int var26 = var25.size();
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var29 = var27.acceptsURL("");
    boolean var31 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var32 = var27.acceptsURL("hi!");
    int var33 = var27.getMinorVersion();
    java.lang.Object var35 = var25.put((java.lang.Object)var27, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var36 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var14, (java.sql.Driver)var27);
    int var37 = var36.getTransactionIsolation();
    boolean var40 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var45 = var43.acceptsURL("");
    boolean var47 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var48 = var43.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var50 = new com.sqlmagic.tinysql.tsResultSet();
    int var51 = var50.getLevel();
    java.util.Vector var52 = var50.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var53 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var52);
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var52);
    com.sqlmagic.tinysql.tinySQLWhere var55 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var54);
    int[] var58 = new int[] { 1, 0};
    java.sql.PreparedStatement var59 = var36.prepareStatement("hi!", var58);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var60 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var36);
    boolean var61 = var60.supportsOpenCursorsAcrossCommit();
    int var62 = var60.getMaxStatementLength();
    boolean var65 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var68 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var70 = var68.acceptsURL("");
    boolean var72 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var73 = var68.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var75 = new com.sqlmagic.tinysql.tsResultSet();
    int var76 = var75.getLevel();
    java.util.Vector var77 = var75.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var78 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var77);
    com.sqlmagic.tinysql.SimpleXMLTag var79 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var77);
    com.sqlmagic.tinysql.tinySQLWhere var80 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var79);
    java.lang.String var81 = var80.toString();
    java.lang.String var82 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", var62, var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "\n"+ "'", var81.equals("\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ""+ "'", var82.equals(""));

  }

  public void test253() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    java.sql.ResultSet var61 = var58.getTableTypes();
    int var62 = var58.getMaxTableNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 32);

  }

  public void test254() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    int var14 = var11.getLevel();
    boolean var17 = var11.getMoreResults(100, 0);
    boolean var18 = var8.isSearchable(100);
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var25 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var30 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var34 = var32.acceptsURL("");
    boolean var36 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var37 = var32.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var39 = new com.sqlmagic.tinysql.tsResultSet();
    int var40 = var39.getLevel();
    java.util.Vector var41 = var39.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var42 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var41);
    int var43 = var42.size();
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var46 = var44.acceptsURL("");
    boolean var48 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var49 = var44.acceptsURL("hi!");
    int var50 = var44.getMinorVersion();
    java.lang.Object var52 = var42.put((java.lang.Object)var44, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var53 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var31, (java.sql.Driver)var44);
    int var54 = var53.getTransactionIsolation();
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var62 = var60.acceptsURL("");
    boolean var64 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var65 = var60.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var67 = new com.sqlmagic.tinysql.tsResultSet();
    int var68 = var67.getLevel();
    java.util.Vector var69 = var67.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var70 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var69);
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var69);
    com.sqlmagic.tinysql.tinySQLWhere var72 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var71);
    int[] var75 = new int[] { 1, 0};
    java.sql.PreparedStatement var76 = var53.prepareStatement("hi!", var75);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var77 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var53);
    boolean var78 = var77.supportsDataManipulationTransactionsOnly();
    boolean var79 = var77.supportsStoredFunctionsUsingCallSyntax();
    int var80 = var77.getMaxIndexLength();
    boolean var81 = var8.isSigned(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test255() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    java.lang.String var18 = var17.toString();
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    int var25 = var19.getMajorVersion();
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var28 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var29 = new com.sqlmagic.tinysql.tsResultSet();
    int var30 = var29.getLevel();
    boolean var32 = var28.getMoreResults(var30, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var40 = new com.sqlmagic.tinysql.tsResultSet();
    int var41 = var40.getLevel();
    java.util.Vector var42 = var40.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var43 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var42);
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var28.updateColumns("hi!", "");
    java.lang.String var48 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var48);
    boolean var50 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.Utils.delFile(var18, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "\n"+ "'", var18.equals("\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test256() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.supportsMixedCaseIdentifiers();
    boolean var62 = var58.supportsDifferentTableCorrelationNames();
    int var63 = var58.getDatabaseMinorVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test257() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    boolean var63 = var62.supportsColumnAliasing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test258() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    boolean var64 = var62.supportsConvert();
    int var65 = var62.getMaxColumnsInIndex();
    boolean var66 = var62.supportsAlterTableWithAddColumn();
    int var67 = var62.getJDBCMajorVersion();
    java.lang.String var68 = var62.getIdentifierQuoteString();
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "\""+ "'", var68.equals("\""));

  }

  public void test259() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    java.sql.Clob var37 = var34.createClob();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);

  }

  public void test260() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    int var63 = var58.getMaxCursorNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test261() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxColumnsInTable();
    boolean var64 = var62.supportsMultipleTransactions();
    boolean var65 = var62.supportsUnionAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test262() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxColumnsInIndex();
    boolean var64 = var62.supportsOpenStatementsAcrossCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test263() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var33 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var34 = new com.sqlmagic.tinysql.tsResultSet();
    int var35 = var34.getLevel();
    boolean var37 = var33.getMoreResults(var35, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var48 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var47);
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var33.updateColumns("hi!", "");
    java.lang.String var53 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var53);
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var61 = var59.acceptsURL("");
    boolean var63 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var64 = var59.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var66 = new com.sqlmagic.tinysql.tsResultSet();
    int var67 = var66.getLevel();
    java.util.Vector var68 = var66.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var68);
    com.sqlmagic.tinysql.SimpleXMLTag var70 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var68);
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String[] var72 = new java.lang.String[] { "hi!"};
    java.sql.PreparedStatement var73 = var30.prepareStatement(var55, var72);
    java.sql.Blob var74 = var30.createBlob();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);

  }

  public void test264() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsCatalogsInIndexDefinitions();
    boolean var60 = var58.supportsColumnAliasing();
    int var61 = var58.getMaxColumnNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10);

  }

  public void test265() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    boolean var62 = var58.supportsANSI92FullSQL();
    java.lang.String var63 = var58.getExtraNameCharacters();
    boolean var64 = var58.supportsMixedCaseIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test266() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    boolean var64 = var62.supportsConvert();
    int var65 = var62.getMaxColumnsInIndex();
    boolean var66 = var62.supportsAlterTableWithAddColumn();
    int var67 = var62.getJDBCMajorVersion();
    java.lang.String var68 = var62.getIdentifierQuoteString();
    int var69 = var62.getMaxCharLiteralLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "\""+ "'", var68.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);

  }

  public void test267() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var7);
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var10 = new com.sqlmagic.tinysql.tsResultSet();
    int var11 = var10.getLevel();
    java.util.Vector var12 = var10.getTables();
    int var13 = var10.getLevel();
    boolean var16 = var10.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var19 = var17.acceptsURL("");
    boolean var21 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var22 = var17.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var24 = new com.sqlmagic.tinysql.tsResultSet();
    int var25 = var24.getLevel();
    java.util.Vector var26 = var24.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var27 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var26);
    java.util.Collection var28 = var27.values();
    com.sqlmagic.tinysql.tsResultSet var29 = new com.sqlmagic.tinysql.tsResultSet();
    int var30 = var29.getLevel();
    java.util.Vector var31 = var29.getTables();
    int var32 = var29.getLevel();
    boolean var33 = var27.containsValue((java.lang.Object)var29);
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var36 = var34.acceptsURL("");
    boolean var38 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var39 = var34.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var41 = new com.sqlmagic.tinysql.tsResultSet();
    int var42 = var41.getLevel();
    java.util.Vector var43 = var41.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var44 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var43);
    boolean var47 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var48 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var9.setState(100, (java.util.Hashtable)var27, "hi!", var48);
    com.sqlmagic.tinysql.tinySQLException var50 = new com.sqlmagic.tinysql.tinySQLException();
    int var51 = var50.getErrorCode();
    byte[] var52 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var51);
    //com.sqlmagic.tinysql.tsRow var53 = var9.rowAt(var51);
    java.util.Vector var54 = var9.getTables();
    com.sqlmagic.tinysql.tinySQLWhere var55 = var9.getWhereClause();
    int var56 = var9.getColumnCount();
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var60 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var63 = var61.acceptsURL("");
    boolean var65 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var66 = var61.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var68 = new com.sqlmagic.tinysql.tsResultSet();
    int var69 = var68.getLevel();
    java.util.Vector var70 = var68.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var70);
    int var72 = var71.size();
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var75 = var73.acceptsURL("");
    boolean var77 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var78 = var73.acceptsURL("hi!");
    int var79 = var73.getMinorVersion();
    java.lang.Object var81 = var71.put((java.lang.Object)var73, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var82 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var71);
    java.lang.String var83 = com.sqlmagic.tinysql.Utils.forceToSize(var7, var56, "hi!");
    java.lang.String var84 = com.sqlmagic.tinysql.UtilString.removeQuotes(var7);
    com.sqlmagic.tinysql.SimpleXMLTag var85 = new com.sqlmagic.tinysql.SimpleXMLTag(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    //assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + ""+ "'", var83.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "hi!"+ "'", var84.equals("hi!"));

  }

  public void test268() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    boolean var63 = var58.supportsExtendedSQLGrammar();
    java.lang.String var64 = var58.getDatabaseProductVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "2.26h"+ "'", var64.equals("2.26h"));

  }

  public void test269() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    java.sql.ResultSet var61 = var58.getTableTypes();
    boolean var62 = var58.usesLocalFilePerTable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);

  }

  public void test270() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    boolean var44 = var37.acceptsURL("hi!");
    java.sql.Savepoint var45 = var34.setSavepoint("hi!");
    int var46 = var34.getTransactionIsolation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var47 = var34.getTypeMap();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);

  }

  public void test271() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var36 = var34.isClosed();
    var34.commit();
    java.util.Properties var38 = var34.getClientInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test272() throws Throwable {

    short var1 = com.sqlmagic.tinysql.Utils.fixByte((byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (short)10);

  }

  public void test273() throws Throwable {

    boolean var1 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var22);
    com.sqlmagic.tinysql.dbfFile var24 = new com.sqlmagic.tinysql.dbfFile("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var29 = var27.acceptsURL("");
    boolean var31 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var32 = var27.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var34 = new com.sqlmagic.tinysql.tsResultSet();
    int var35 = var34.getLevel();
    java.util.Vector var36 = var34.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var37 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var36);
    com.sqlmagic.tinysql.SimpleXMLTag var38 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var39 = com.sqlmagic.tinysql.UtilString.findTableAlias("hi!", var36);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test274() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    int var11 = var10.size();
    int var12 = var10.size();
    boolean var13 = com.sqlmagic.tinysql.Utils.isDateColumn(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test275() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    boolean var38 = var35.getMoreResults();
    boolean var39 = var35.isClosed();
    var35.cancel();
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var47 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var52 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var53 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    java.util.Vector var63 = var61.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var63);
    int var65 = var64.size();
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var68 = var66.acceptsURL("");
    boolean var70 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var71 = var66.acceptsURL("hi!");
    int var72 = var66.getMinorVersion();
    java.lang.Object var74 = var64.put((java.lang.Object)var66, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var75 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var53, (java.sql.Driver)var66);
    int var76 = var75.getTransactionIsolation();
    var35.setMaxRows(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);

  }

  public void test276() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tinySQLWhere var1 = var0.getWhereClause();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test277() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var0.updateColumns("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var22 = var20.acceptsURL("");
    boolean var24 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var25 = var20.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var40 = new com.sqlmagic.tinysql.tsResultSet();
    int var41 = var40.getLevel();
    java.util.Vector var42 = var40.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var43 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var42);
    int var44 = var43.size();
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var47 = var45.acceptsURL("");
    boolean var49 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var50 = var45.acceptsURL("hi!");
    int var51 = var45.getMinorVersion();
    java.lang.Object var53 = var43.put((java.lang.Object)var45, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var54 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var32, (java.sql.Driver)var45);
    int var55 = var54.getTransactionIsolation();
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var63 = var61.acceptsURL("");
    boolean var65 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var66 = var61.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var68 = new com.sqlmagic.tinysql.tsResultSet();
    int var69 = var68.getLevel();
    java.util.Vector var70 = var68.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var70);
    com.sqlmagic.tinysql.SimpleXMLTag var72 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var70);
    com.sqlmagic.tinysql.tinySQLWhere var73 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var72);
    int[] var76 = new int[] { 1, 0};
    java.sql.PreparedStatement var77 = var54.prepareStatement("hi!", var76);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var78 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var54);
    int var79 = var78.getMaxIndexLength();
    com.sqlmagic.tinysql.dbfFileDriver var80 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var82 = var80.acceptsURL("");
    boolean var84 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var85 = var80.acceptsURL("hi!");
    java.lang.String var86 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", var79, "hi!");
    java.lang.String var87 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + ""+ "'", var86.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));

  }

  public void test278() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    int var37 = var35.getQueryTimeout();
    com.sqlmagic.tinysql.tsResultSet var38 = new com.sqlmagic.tinysql.tsResultSet();
    int var39 = var38.getLevel();
    java.util.Vector var40 = var38.getTables();
    int var41 = var38.getLevel();
    boolean var44 = var38.getMoreResults(100, 0);
    int var45 = var38.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var46 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var38);
    int var48 = var46.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var49 = new com.sqlmagic.tinysql.tsResultSet();
    int var50 = var49.getLevel();
    java.util.Vector var51 = var49.getTables();
    int var52 = var49.getLevel();
    boolean var55 = var49.getMoreResults(100, 0);
    boolean var56 = var46.isSearchable(100);
    var35.setQueryTimeout(100);
    java.lang.String var59 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var60 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    boolean var64 = var60.getMoreResults(var62, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var65 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var67 = var65.acceptsURL("");
    boolean var69 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var70 = var65.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var72 = new com.sqlmagic.tinysql.tsResultSet();
    int var73 = var72.getLevel();
    java.util.Vector var74 = var72.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var75 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var74);
    boolean var78 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var60.updateColumns("hi!", "");
    java.lang.String var80 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var81 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var83 = var81.acceptsURL("");
    boolean var85 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var86 = var81.acceptsURL("hi!");
    int var87 = var81.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var88 = new com.sqlmagic.tinysql.textFileConnection(var59, "", (java.sql.Driver)var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.addBatch(var59);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);

  }

  public void test279() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    boolean var61 = var58.supportsSchemasInProcedureCalls();
    boolean var62 = var58.supportsTableCorrelationNames();
    boolean var63 = var58.supportsSubqueriesInQuantifieds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test280() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    com.sqlmagic.tinysql.tinySQL var36 = var34.get_tinySQL();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tsResultSet var37 = var36.sqlexec();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test281() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    boolean var63 = var58.doesMaxRowSizeIncludeBlobs();
    boolean var64 = var58.supportsSubqueriesInIns();
    boolean var65 = var58.supportsOrderByUnrelated();
    boolean var66 = var58.supportsGroupByBeyondSelect();
    int var67 = var58.getMaxSchemaNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test282() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var0.updateColumns("hi!", "");
    int var20 = var0.getLevel();
    int var21 = var0.numcols();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test283() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    int var64 = var58.getMaxColumnNameLength();
    int var65 = var58.getResultSetHoldability();
    int var66 = var58.getMaxColumnNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 10);

  }

  public void test284() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    int var37 = var35.getQueryTimeout();
    java.sql.ResultSet var38 = var35.getGeneratedKeys();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test285() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    boolean var62 = var58.dataDefinitionCausesTransactionCommit();
    boolean var63 = var58.storesLowerCaseQuotedIdentifiers();
    boolean var65 = var58.supportsResultSetHoldability(1);
    boolean var66 = var58.supportsCatalogsInDataManipulation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test286() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    boolean var38 = var35.getMoreResults();
    boolean var39 = var35.isClosed();
    var35.cancel();
    com.sqlmagic.tinysql.tsResultSet var41 = new com.sqlmagic.tinysql.tsResultSet();
    int var42 = var41.getLevel();
    java.util.Vector var43 = var41.getTables();
    int var44 = var41.getLevel();
    boolean var47 = var41.getMoreResults(100, 0);
    int var48 = var41.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var49 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var41);
    int var51 = var49.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    java.util.Vector var63 = var61.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var63);
    com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var63);
    boolean var66 = var49.isCurrency(1);
    com.sqlmagic.tinysql.tsResultSet var67 = new com.sqlmagic.tinysql.tsResultSet();
    int var68 = var67.getLevel();
    java.util.Vector var69 = var67.getTables();
    int var70 = var67.getLevel();
    boolean var73 = var67.getMoreResults(100, 0);
    int var74 = var67.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var75 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var67);
    int var77 = var75.isNullable(10);
    boolean var78 = var49.isWritable(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.setFetchDirection(10);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test287() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    int var38 = var35.getMaxRows();
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var41 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var42 = new com.sqlmagic.tinysql.tsResultSet();
    int var43 = var42.getLevel();
    boolean var45 = var41.getMoreResults(var43, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var48 = var46.acceptsURL("");
    boolean var50 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var51 = var46.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var53 = new com.sqlmagic.tinysql.tsResultSet();
    int var54 = var53.getLevel();
    java.util.Vector var55 = var53.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var55);
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var41.updateColumns("hi!", "");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var61);
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag(var63);
    boolean var66 = var35.execute(var63, 1);
    int var67 = var35.getMaxRows();
    int var68 = var35.getFetchSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 4096);

  }

  public void test288() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var22);
    boolean var25 = var8.isCurrency(1);
    int var26 = var8.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var27 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var29 = var27.acceptsURL("");
    boolean var31 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var32 = var27.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var34 = new com.sqlmagic.tinysql.tsResultSet();
    int var35 = var34.getLevel();
    java.util.Vector var36 = var34.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var37 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var36);
    int var38 = var37.size();
    int var39 = var37.countTags();
    boolean var40 = var8.isCaseSensitive(var39);
    com.sqlmagic.tinysql.tsResultSet var41 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var42 = new com.sqlmagic.tinysql.tsResultSet();
    int var43 = var42.getLevel();
    java.util.Vector var44 = var42.getTables();
    int var45 = var42.getLevel();
    boolean var48 = var42.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    java.util.Collection var60 = var59.values();
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    java.util.Vector var63 = var61.getTables();
    int var64 = var61.getLevel();
    boolean var65 = var59.containsValue((java.lang.Object)var61);
    com.sqlmagic.tinysql.dbfFileDriver var66 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var68 = var66.acceptsURL("");
    boolean var70 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var71 = var66.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var73 = new com.sqlmagic.tinysql.tsResultSet();
    int var74 = var73.getLevel();
    java.util.Vector var75 = var73.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var76 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var75);
    boolean var79 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var80 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var41.setState(100, (java.util.Hashtable)var59, "hi!", var80);
    com.sqlmagic.tinysql.tinySQLException var82 = new com.sqlmagic.tinysql.tinySQLException();
    int var83 = var82.getErrorCode();
    byte[] var84 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var83);
    //com.sqlmagic.tinysql.tsRow var85 = var41.rowAt(var83);
    java.util.Vector var86 = var41.getTables();
    com.sqlmagic.tinysql.tinySQLWhere var87 = var41.getWhereClause();
    int var88 = var41.getColumnCount();
    byte[] var89 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var88);
    boolean var90 = var8.isSearchable(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    //assertTrue(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);

  }

  public void test289() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    boolean var62 = var58.dataDefinitionCausesTransactionCommit();
    boolean var63 = var58.supportsOpenCursorsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test290() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    java.util.Properties var32 = var30.getClientInfo();
    java.sql.SQLXML var33 = var30.createSQLXML();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);

  }

  public void test291() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.tinySQLWhere var5 = var0.getWhereClause();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var8 = var6.acceptsURL("");
    boolean var10 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var11 = var6.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var28);
    int var30 = var29.size();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    int var37 = var31.getMinorVersion();
    java.lang.Object var39 = var29.put((java.lang.Object)var31, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var40 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var18, (java.sql.Driver)var31);
    com.sqlmagic.tinysql.tinySQLStatement var41 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var40);
    java.sql.SQLWarning var42 = var41.getWarnings();
    com.sqlmagic.tinysql.tinySQLResultSet var43 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var43.updateRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);

  }

  public void test292() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var42 = var40.acceptsURL("");
    boolean var44 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var45 = var40.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var50 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var49);
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var49);
    boolean var53 = var51.contains((java.lang.Object)(byte)0);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    java.lang.Object var60 = var51.remove((java.lang.Object)var59);
    var35.setPoolable(var59);
    var35.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var63 = var35.getResultSetType();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);

  }

  public void test293() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    int var62 = var58.getMaxColumnsInGroupBy();
    int var63 = var58.getMaxRowSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test294() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    boolean var63 = var58.supportsGroupByBeyondSelect();
    int var64 = var58.getMaxSchemaNameLength();
    boolean var65 = var58.supportsPositionedDelete();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test295() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getSQLStateType();
    boolean var64 = var58.supportsUnionAll();
    boolean var65 = var58.supportsMultipleResultSets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test296() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    boolean var64 = var62.supportsConvert();
    java.lang.String var65 = var62.getDatabaseProductVersion();
    boolean var66 = var62.supportsOpenStatementsAcrossCommit();
    boolean var67 = var62.supportsSchemasInTableDefinitions();
    java.lang.String var68 = var62.getUserName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "2.26h"+ "'", var65.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));

  }

  public void test297() throws Throwable {

    boolean var1 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var22);
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var25 = new com.sqlmagic.tinysql.SimpleXMLTag(var24);
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames("hi!");
    java.lang.String var28 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var31 = var29.acceptsURL("");
    boolean var33 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var34 = var29.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var35 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var39 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var40 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var44 = var42.acceptsURL("");
    boolean var46 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var47 = var42.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var49 = new com.sqlmagic.tinysql.tsResultSet();
    int var50 = var49.getLevel();
    java.util.Vector var51 = var49.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var51);
    int var53 = var52.size();
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    int var60 = var54.getMinorVersion();
    java.lang.Object var62 = var52.put((java.lang.Object)var54, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var63 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var41, (java.sql.Driver)var54);
    int var64 = var63.getTransactionIsolation();
    boolean var67 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var72 = var70.acceptsURL("");
    boolean var74 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var75 = var70.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var77 = new com.sqlmagic.tinysql.tsResultSet();
    int var78 = var77.getLevel();
    java.util.Vector var79 = var77.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var80 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var79);
    com.sqlmagic.tinysql.SimpleXMLTag var81 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var79);
    com.sqlmagic.tinysql.tinySQLWhere var82 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var81);
    int[] var85 = new int[] { 1, 0};
    java.sql.PreparedStatement var86 = var63.prepareStatement("hi!", var85);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var87 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var63);
    boolean var88 = var87.supportsDataManipulationTransactionsOnly();
    boolean var89 = var87.storesLowerCaseIdentifiers();
    java.sql.ResultSet var90 = var87.getTypeInfo();
    boolean var91 = var87.supportsSavepoints();
    com.sqlmagic.tinysql.tinySQLException var92 = new com.sqlmagic.tinysql.tinySQLException();
    int var93 = var92.getErrorCode();
    boolean var94 = var87.othersInsertsAreVisible(var93);
    java.lang.String var95 = var87.getSystemFunctions();
    java.lang.String var96 = com.sqlmagic.tinysql.UtilString.replaceAll(var24, "hi!", var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + ""+ "'", var95.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + ""+ "'", var96.equals(""));

  }

  public void test298() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var44.moveToCurrentRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);

  }

  public void test299() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    int var63 = var58.getMaxUserNameLength();
    boolean var64 = var58.supportsCoreSQLGrammar();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test300() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.tinySQLWhere var5 = var0.getWhereClause();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var8 = var6.acceptsURL("");
    boolean var10 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var11 = var6.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var28);
    int var30 = var29.size();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    int var37 = var31.getMinorVersion();
    java.lang.Object var39 = var29.put((java.lang.Object)var31, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var40 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var18, (java.sql.Driver)var31);
    com.sqlmagic.tinysql.tinySQLStatement var41 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var40);
    java.sql.SQLWarning var42 = var41.getWarnings();
    com.sqlmagic.tinysql.tinySQLResultSet var43 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var41);
    java.sql.ResultSetMetaData var44 = var43.getMetaData();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var43.deleteRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);

  }

  public void test301() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    boolean var63 = var58.doesMaxRowSizeIncludeBlobs();
    boolean var64 = var58.supportsDifferentTableCorrelationNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test302() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.supportsMixedCaseIdentifiers();
    int var62 = var58.getMaxSchemaNameLength();
    boolean var63 = var58.supportsSchemasInTableDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test303() throws Throwable {

    byte[] var1 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test304() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.supportsMixedCaseIdentifiers();
    boolean var62 = var58.supportsDifferentTableCorrelationNames();
    boolean var63 = var58.supportsCatalogsInProcedureCalls();
    int var64 = var58.getDatabaseMinorVersion();
    java.sql.ResultSet var65 = var58.getTableTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);

  }

  public void test305() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getColumnCount();
    java.util.Hashtable var8 = var0.getTableState();
    com.sqlmagic.tinysql.tinySQLWhere var9 = var0.getWhereClause();
    int var10 = var0.getLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test306() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.supportsMixedCaseIdentifiers();
    boolean var62 = var58.storesUpperCaseIdentifiers();
    int var63 = var58.getMaxColumnsInIndex();
    boolean var64 = var58.locatorsUpdateCopy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test307() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var42 = var40.acceptsURL("");
    boolean var44 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var45 = var40.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var50 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var49);
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var49);
    boolean var53 = var51.contains((java.lang.Object)(byte)0);
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    java.lang.Object var60 = var51.remove((java.lang.Object)var59);
    var35.setPoolable(var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var62 = var35.getResultSetType();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == null);

  }

  public void test308() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var38 = new com.sqlmagic.tinysql.tsResultSet();
    int var39 = var38.getLevel();
    boolean var41 = var37.getMoreResults(var39, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var44 = var42.acceptsURL("");
    boolean var46 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var47 = var42.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var49 = new com.sqlmagic.tinysql.tsResultSet();
    int var50 = var49.getLevel();
    java.util.Vector var51 = var49.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var51);
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var37.updateColumns("hi!", "");
    java.sql.Savepoint var57 = var34.setSavepoint("");
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var62 = var60.acceptsURL("");
    boolean var64 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var65 = var60.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var66 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var67 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var70 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var71 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var72 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var73 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var75 = var73.acceptsURL("");
    boolean var77 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var78 = var73.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var80 = new com.sqlmagic.tinysql.tsResultSet();
    int var81 = var80.getLevel();
    java.util.Vector var82 = var80.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var83 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var82);
    int var84 = var83.size();
    com.sqlmagic.tinysql.dbfFileDriver var85 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var87 = var85.acceptsURL("");
    boolean var89 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var90 = var85.acceptsURL("hi!");
    int var91 = var85.getMinorVersion();
    java.lang.Object var93 = var83.put((java.lang.Object)var85, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var94 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var72, (java.sql.Driver)var85);
    com.sqlmagic.tinysql.tinySQLStatement var95 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var94);
    int var96 = var95.getResultSetHoldability();
    var95.clearWarnings();
    int var98 = var95.getMaxRows();
    java.sql.PreparedStatement var99 = var34.prepareStatement("hi!", var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == null);

  }

  public void test309() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.supportsSchemasInTableDefinitions();
    boolean var62 = var58.supportsCoreSQLGrammar();
    int var63 = var58.getMaxColumnsInTable();
    java.lang.String var64 = var58.getDriverVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "2.26h"+ "'", var64.equals("2.26h"));

  }

  public void test310() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var3 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var6 = var4.acceptsURL("");
    boolean var8 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var9 = var4.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var10 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var11 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var14 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var15 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var16 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var17 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var19 = var17.acceptsURL("");
    boolean var21 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var22 = var17.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var24 = new com.sqlmagic.tinysql.tsResultSet();
    int var25 = var24.getLevel();
    java.util.Vector var26 = var24.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var27 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var26);
    int var28 = var27.size();
    com.sqlmagic.tinysql.dbfFileDriver var29 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var31 = var29.acceptsURL("");
    boolean var33 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var34 = var29.acceptsURL("hi!");
    int var35 = var29.getMinorVersion();
    java.lang.Object var37 = var27.put((java.lang.Object)var29, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var38 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var16, (java.sql.Driver)var29);
    int var39 = var38.getTransactionIsolation();
    boolean var42 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var47 = var45.acceptsURL("");
    boolean var49 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var50 = var45.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var52 = new com.sqlmagic.tinysql.tsResultSet();
    int var53 = var52.getLevel();
    java.util.Vector var54 = var52.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var55 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var54);
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var54);
    com.sqlmagic.tinysql.tinySQLWhere var57 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var56);
    int[] var60 = new int[] { 1, 0};
    java.sql.PreparedStatement var61 = var38.prepareStatement("hi!", var60);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var38);
    boolean var63 = var62.supportsDataManipulationTransactionsOnly();
    boolean var64 = var62.storesLowerCaseIdentifiers();
    java.sql.ResultSet var65 = var62.getTypeInfo();
    boolean var66 = var62.supportsSavepoints();
    boolean var67 = var62.supportsExtendedSQLGrammar();
    int var68 = var62.getDatabaseMajorVersion();
    boolean var69 = var62.supportsMultipleOpenResults();
    int var70 = var62.getDatabaseMajorVersion();
    boolean var71 = var3.isCurrency(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test311() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    boolean var61 = var58.supportsSchemasInProcedureCalls();
    com.sqlmagic.tinysql.tsResultSet var62 = new com.sqlmagic.tinysql.tsResultSet();
    int var63 = var62.getLevel();
    java.util.Vector var64 = var62.getTables();
    int var65 = var62.getLevel();
    boolean var68 = var62.getMoreResults(100, 0);
    int var69 = var62.getType();
    boolean var70 = var58.ownUpdatesAreVisible(var69);
    boolean var71 = var58.supportsConvert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test312() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    int var48 = var45.getLevel();
    boolean var51 = var45.getMoreResults(100, 0);
    byte[] var55 = new byte[] { (byte)1, (byte)0, (byte)10};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var44.updateBytes(0, var55);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);

  }

  public void test313() throws Throwable {

    boolean var1 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var22);
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var25 = new com.sqlmagic.tinysql.SimpleXMLTag(var24);
    java.lang.String var26 = com.sqlmagic.tinysql.Utils.stripPathAndExtension(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));

  }

  public void test314() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    boolean var60 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileDriver var62 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var64 = var62.acceptsURL("");
    boolean var66 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var67 = var62.acceptsURL("hi!");
    boolean var68 = var61.acceptsURL("hi!");
    java.lang.String[] var69 = new java.lang.String[] { "hi!"};
    java.sql.PreparedStatement var70 = var34.prepareStatement("", var69);
    java.sql.DatabaseMetaData var71 = var34.getMetaData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);

  }

  public void test315() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    int var61 = var58.getMaxStatements();
    boolean var62 = var58.supportsConvert();
    boolean var63 = var58.dataDefinitionCausesTransactionCommit();
    java.lang.String var64 = var58.getDriverName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "com.sqlmagic.tinysql.dbfFileDriver"+ "'", var64.equals("com.sqlmagic.tinysql.dbfFileDriver"));

  }

  public void test316() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    int var12 = var9.getLevel();
    boolean var15 = var9.getMoreResults(100, 0);
    boolean var16 = var8.isWritable(100);
    boolean var18 = var8.isCaseSensitive(0);
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var25 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var26 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var29 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var30 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var31 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var34 = var32.acceptsURL("");
    boolean var36 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var37 = var32.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var39 = new com.sqlmagic.tinysql.tsResultSet();
    int var40 = var39.getLevel();
    java.util.Vector var41 = var39.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var42 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var41);
    int var43 = var42.size();
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var46 = var44.acceptsURL("");
    boolean var48 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var49 = var44.acceptsURL("hi!");
    int var50 = var44.getMinorVersion();
    java.lang.Object var52 = var42.put((java.lang.Object)var44, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var53 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var31, (java.sql.Driver)var44);
    int var54 = var53.getTransactionIsolation();
    boolean var57 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var62 = var60.acceptsURL("");
    boolean var64 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var65 = var60.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var67 = new com.sqlmagic.tinysql.tsResultSet();
    int var68 = var67.getLevel();
    java.util.Vector var69 = var67.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var70 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var69);
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var69);
    com.sqlmagic.tinysql.tinySQLWhere var72 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var71);
    int[] var75 = new int[] { 1, 0};
    java.sql.PreparedStatement var76 = var53.prepareStatement("hi!", var75);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var77 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var53);
    boolean var78 = var77.supportsDataManipulationTransactionsOnly();
    boolean var79 = var77.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var80 = var77.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var81 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var80);
    int var82 = var81.getMaxSchemaNameLength();
    boolean var83 = var81.supportsConvert();
    java.lang.String var84 = var81.getDatabaseProductVersion();
    boolean var85 = var81.supportsOpenStatementsAcrossCommit();
    boolean var86 = var81.supportsSchemasInTableDefinitions();
    int var87 = var81.getMaxStatementLength();
    boolean var88 = var8.isSearchable(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "2.26h"+ "'", var84.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test317() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    java.lang.String var64 = var62.getSystemFunctions();
    boolean var65 = var62.supportsMultipleResultSets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test318() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    boolean var63 = var58.supportsExtendedSQLGrammar();
    boolean var64 = var58.dataDefinitionCausesTransactionCommit();
    boolean var65 = var58.supportsGroupByUnrelated();
    boolean var66 = var58.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test319() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    boolean var60 = var58.supportsSchemasInPrivilegeDefinitions();
    boolean var61 = var58.supportsPositionedDelete();
    int var62 = var58.getJDBCMajorVersion();
    boolean var63 = var58.supportsSubqueriesInQuantifieds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test320() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    com.sqlmagic.tinysql.tinySQLStatement var32 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var30);
    int var33 = var32.getUpdateCount();
    boolean var34 = var32.isPoolable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test321() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var38 = new com.sqlmagic.tinysql.tsResultSet();
    int var39 = var38.getLevel();
    boolean var41 = var37.getMoreResults(var39, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var44 = var42.acceptsURL("");
    boolean var46 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var47 = var42.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var49 = new com.sqlmagic.tinysql.tsResultSet();
    int var50 = var49.getLevel();
    java.util.Vector var51 = var49.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var51);
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var37.updateColumns("hi!", "");
    java.sql.Savepoint var57 = var34.setSavepoint("");
    java.sql.SQLXML var58 = var34.createSQLXML();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);

  }

  public void test322() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    int var61 = var58.getMaxStatements();
    boolean var62 = var58.supportsConvert();
    boolean var63 = var58.dataDefinitionCausesTransactionCommit();
    boolean var64 = var58.nullsAreSortedAtEnd();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);

  }

  public void test323() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    int var11 = var8.getColumnCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test324() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    boolean var63 = var58.supportsAlterTableWithAddColumn();
    java.lang.String var64 = var58.getSQLKeywords();
    int var65 = com.sqlmagic.tinysql.UtilString.getValueType(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);

  }

  public void test325() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.lang.String var60 = var58.getNumericFunctions();
    int var61 = var58.getMaxColumnsInSelect();
    int var62 = var58.getMaxTableNameLength();
    boolean var63 = var58.supportsGroupByBeyondSelect();
    java.lang.String var64 = var58.getDatabaseProductName();
    int var65 = var58.getMaxStatementLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "tinySQL"+ "'", var64.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test326() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxSchemaNameLength();
    boolean var64 = var62.supportsConvert();
    java.lang.String var65 = var62.getDatabaseProductVersion();
    java.sql.ResultSet var66 = var62.getTypeInfo();
    com.sqlmagic.tinysql.dbfFileDriver var67 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var69 = var67.acceptsURL("");
    java.lang.String var70 = com.sqlmagic.tinysql.UtilString.toYMD("");
    boolean var73 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var74 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var75 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var77 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var78 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var80 = var78.acceptsURL("");
    boolean var82 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var83 = var78.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var85 = new com.sqlmagic.tinysql.tsResultSet();
    int var86 = var85.getLevel();
    java.util.Vector var87 = var85.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var88 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var87);
    byte[] var90 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", 0, (byte)100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var91 = var62.getTablePrivileges("", "hi!", "hi!");
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "2.26h"+ "'", var65.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "hi!"+ "'", var75.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);

  }

  public void test327() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    boolean var61 = var58.supportsSchemasInProcedureCalls();
    java.sql.ResultSet var62 = var58.getClientInfoProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);

  }

  public void test328() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    boolean var61 = var58.supportsSchemasInProcedureCalls();
    com.sqlmagic.tinysql.tsResultSet var62 = new com.sqlmagic.tinysql.tsResultSet();
    int var63 = var62.getLevel();
    java.util.Vector var64 = var62.getTables();
    int var65 = var62.getLevel();
    boolean var68 = var62.getMoreResults(100, 0);
    int var69 = var62.getType();
    boolean var70 = var58.ownUpdatesAreVisible(var69);
    boolean var71 = var58.supportsMinimumSQLGrammar();
    boolean var72 = var58.supportsCatalogsInTableDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test329() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var37 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var41 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var42 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var46 = var44.acceptsURL("");
    boolean var48 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var49 = var44.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var51 = new com.sqlmagic.tinysql.tsResultSet();
    int var52 = var51.getLevel();
    java.util.Vector var53 = var51.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var53);
    int var55 = var54.size();
    com.sqlmagic.tinysql.dbfFileDriver var56 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var58 = var56.acceptsURL("");
    boolean var60 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var61 = var56.acceptsURL("hi!");
    int var62 = var56.getMinorVersion();
    java.lang.Object var64 = var54.put((java.lang.Object)var56, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var65 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var43, (java.sql.Driver)var56);
    int var66 = var65.getTransactionIsolation();
    var65.commit();
    com.sqlmagic.tinysql.tsResultSet var68 = new com.sqlmagic.tinysql.tsResultSet();
    int var69 = var68.getLevel();
    java.util.Vector var70 = var68.getTables();
    int var71 = var68.getLevel();
    boolean var74 = var68.getMoreResults(100, 0);
    int var75 = var68.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var76 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var68);
    com.sqlmagic.tinysql.tsResultSet var77 = new com.sqlmagic.tinysql.tsResultSet();
    int var78 = var77.getLevel();
    java.util.Vector var79 = var77.getTables();
    int var80 = var77.getLevel();
    boolean var83 = var77.getMoreResults(100, 0);
    boolean var84 = var76.isWritable(100);
    int var85 = var76.getColumnCount();
    var65.setTransactionIsolation(var85);
    com.sqlmagic.tinysql.tsResultSet var87 = new com.sqlmagic.tinysql.tsResultSet();
    int var88 = var87.getLevel();
    var65.setTransactionIsolation(var88);
    var30.setHoldability(var88);
    java.sql.SQLXML var91 = var30.createSQLXML();
    com.sqlmagic.tinysql.tinySQL var92 = var30.get_tinySQL();
    com.sqlmagic.tinysql.tinySQLException var94 = new com.sqlmagic.tinysql.tinySQLException();
    int var95 = var94.getErrorCode();
    java.lang.Object[] var96 = new java.lang.Object[] { var94};
    java.sql.Struct var97 = var30.createStruct("", var96);
    java.sql.Clob var98 = var30.createClob();
    var30.clearWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == null);

  }

  public void test330() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.tinySQLWhere var5 = var0.getWhereClause();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var8 = var6.acceptsURL("");
    boolean var10 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var11 = var6.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var28);
    int var30 = var29.size();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    int var37 = var31.getMinorVersion();
    java.lang.Object var39 = var29.put((java.lang.Object)var31, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var40 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var18, (java.sql.Driver)var31);
    com.sqlmagic.tinysql.tinySQLStatement var41 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var40);
    java.sql.SQLWarning var42 = var41.getWarnings();
    com.sqlmagic.tinysql.tinySQLResultSet var43 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var41);
    java.sql.ResultSetMetaData var44 = var43.getMetaData();
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    java.util.Hashtable var48 = var45.getTableState();
    int var49 = var45.getFetchSize();
    int var50 = var45.numcols();
    float var51 = var43.getFloat(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.0f);

  }

  public void test331() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    var35.cancel();
    boolean var37 = var35.isPoolable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var38 = var35.executeBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test332() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    int var64 = var58.getMaxColumnNameLength();
    int var65 = var58.getResultSetHoldability();
    int var66 = var58.getMaxRowSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test333() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    int var64 = var58.getMaxColumnNameLength();
    int var65 = var58.getResultSetHoldability();
    boolean var66 = var58.supportsSubqueriesInIns();
    boolean var67 = var58.storesLowerCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test334() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    boolean var60 = var58.supportsSchemasInPrivilegeDefinitions();
    boolean var61 = var58.supportsPositionedDelete();
    boolean var62 = var58.supportsExpressionsInOrderBy();
    boolean var63 = var58.nullsAreSortedLow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test335() throws Throwable {

    com.sqlmagic.tinysql.tinySQLException var0 = new com.sqlmagic.tinysql.tinySQLException();
    int var1 = var0.getErrorCode();
    java.lang.String var2 = var0.getSQLState();
    java.util.Iterator var3 = var0.iterator();
    int var4 = var0.getErrorCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test336() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    java.sql.ResultSet var64 = var58.getClientInfoProperties();
    int var65 = var58.getMaxColumnsInIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test337() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsOpenStatementsAcrossCommit();
    boolean var63 = var58.supportsCoreSQLGrammar();
    boolean var64 = var58.supportsSubqueriesInExists();
    boolean var65 = var58.supportsMixedCaseQuotedIdentifiers();
    boolean var66 = var58.supportsIntegrityEnhancementFacility();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test338() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    boolean var32 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var33 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var34 = new com.sqlmagic.tinysql.tsResultSet();
    int var35 = var34.getLevel();
    boolean var37 = var33.getMoreResults(var35, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var48 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var47);
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var33.updateColumns("hi!", "");
    java.lang.String var53 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var53);
    java.lang.String var55 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag(var55);
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var61 = var59.acceptsURL("");
    boolean var63 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var64 = var59.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var66 = new com.sqlmagic.tinysql.tsResultSet();
    int var67 = var66.getLevel();
    java.util.Vector var68 = var66.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var68);
    com.sqlmagic.tinysql.SimpleXMLTag var70 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var68);
    double var71 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    java.lang.String[] var72 = new java.lang.String[] { "hi!"};
    java.sql.PreparedStatement var73 = var30.prepareStatement(var55, var72);
    java.sql.Savepoint var74 = var30.setSavepoint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.rollback();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == null);

  }

  public void test339() throws Throwable {

    byte[] var2 = new byte[] { (byte)1, (byte)10};
    int var3 = com.sqlmagic.tinysql.Utils.vax_to_short(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2561);

  }

  public void test340() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var39 = var37.acceptsURL("");
    boolean var41 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var42 = var37.acceptsURL("hi!");
    boolean var43 = var36.acceptsURL("hi!");
    java.lang.String var44 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      com.sqlmagic.tinysql.tinySQLPreparedStatement var45 = new com.sqlmagic.tinysql.tinySQLPreparedStatement((com.sqlmagic.tinysql.tinySQLConnection)var34, "hi!");
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test341() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    int var14 = var11.getLevel();
    boolean var17 = var11.getMoreResults(100, 0);
    int var18 = var11.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var19 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var11);
    int var21 = var19.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var22 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var24 = var22.acceptsURL("");
    boolean var26 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var27 = var22.acceptsURL("hi!");
    int var28 = var22.getMinorVersion();
    boolean var29 = var19.isSearchable(var28);
    boolean var30 = var8.isCurrency(var28);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var37 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var41 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var42 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var46 = var44.acceptsURL("");
    boolean var48 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var49 = var44.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var51 = new com.sqlmagic.tinysql.tsResultSet();
    int var52 = var51.getLevel();
    java.util.Vector var53 = var51.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var53);
    int var55 = var54.size();
    com.sqlmagic.tinysql.dbfFileDriver var56 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var58 = var56.acceptsURL("");
    boolean var60 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var61 = var56.acceptsURL("hi!");
    int var62 = var56.getMinorVersion();
    java.lang.Object var64 = var54.put((java.lang.Object)var56, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var65 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var43, (java.sql.Driver)var56);
    int var66 = var65.getTransactionIsolation();
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var74 = var72.acceptsURL("");
    boolean var76 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var77 = var72.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var79 = new com.sqlmagic.tinysql.tsResultSet();
    int var80 = var79.getLevel();
    java.util.Vector var81 = var79.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var81);
    com.sqlmagic.tinysql.SimpleXMLTag var83 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var81);
    com.sqlmagic.tinysql.tinySQLWhere var84 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var83);
    int[] var87 = new int[] { 1, 0};
    java.sql.PreparedStatement var88 = var65.prepareStatement("hi!", var87);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var89 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var65);
    boolean var90 = var89.supportsDataManipulationTransactionsOnly();
    boolean var91 = var89.storesLowerCaseIdentifiers();
    java.sql.ResultSet var92 = var89.getTypeInfo();
    boolean var93 = var89.supportsSavepoints();
    int var94 = var89.getMaxTableNameLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var95 = var8.getColumnTypeName(var94);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 32);

  }

  public void test342() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxColumnsInIndex();
    boolean var60 = var58.supportsCoreSQLGrammar();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test343() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    var44.afterLast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var44.updateObject("", (java.lang.Object)(byte)1);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);

  }

  public void test344() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    java.sql.ResultSet var64 = var58.getClientInfoProperties();
    java.lang.String var65 = var58.getStringFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));

  }

  public void test345() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    int var63 = var58.getMaxTableNameLength();
    boolean var64 = var58.supportsSchemasInProcedureCalls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test346() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var38 = var36.acceptsURL("");
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var41 = var36.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var42 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var47 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var48 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    int var60 = var59.size();
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var63 = var61.acceptsURL("");
    boolean var65 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var66 = var61.acceptsURL("hi!");
    int var67 = var61.getMinorVersion();
    java.lang.Object var69 = var59.put((java.lang.Object)var61, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var70 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var48, (java.sql.Driver)var61);
    int var71 = var70.getTransactionIsolation();
    boolean var74 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var77 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var79 = var77.acceptsURL("");
    boolean var81 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var82 = var77.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var84 = new com.sqlmagic.tinysql.tsResultSet();
    int var85 = var84.getLevel();
    java.util.Vector var86 = var84.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var87 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var86);
    com.sqlmagic.tinysql.SimpleXMLTag var88 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var86);
    com.sqlmagic.tinysql.tinySQLWhere var89 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var88);
    int[] var92 = new int[] { 1, 0};
    java.sql.PreparedStatement var93 = var70.prepareStatement("hi!", var92);
    java.lang.String var94 = var34.getClientInfo("hi!");
    com.sqlmagic.tinysql.tinySQL var95 = var34.get_tinySQL();
    var34.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);

  }

  public void test347() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var61 = var59.acceptsURL("");
    java.lang.String var62 = com.sqlmagic.tinysql.UtilString.toYMD("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.CallableStatement var63 = var34.prepareCall(var62);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));

  }

  public void test348() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    java.util.Properties var32 = var30.getClientInfo();
    boolean var33 = var30.getAutoCommit();
    var30.commit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test349() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    int var38 = var35.getMaxRows();
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var41 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var42 = new com.sqlmagic.tinysql.tsResultSet();
    int var43 = var42.getLevel();
    boolean var45 = var41.getMoreResults(var43, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var48 = var46.acceptsURL("");
    boolean var50 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var51 = var46.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var53 = new com.sqlmagic.tinysql.tsResultSet();
    int var54 = var53.getLevel();
    java.util.Vector var55 = var53.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var55);
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var41.updateColumns("hi!", "");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var61);
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag(var63);
    boolean var66 = var35.execute(var63, 1);
    int var67 = var35.getMaxRows();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var68 = var35.getResultSetType();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 65536);

  }

  public void test350() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    java.lang.String var63 = var58.getDatabaseProductName();
    java.lang.String var64 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "tinySQL"+ "'", var63.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "tinySQL"+ "'", var64.equals("tinySQL"));

  }

  public void test351() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    boolean var63 = var58.supportsExtendedSQLGrammar();
    boolean var64 = var58.dataDefinitionCausesTransactionCommit();
    boolean var65 = var58.allTablesAreSelectable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test352() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    boolean var14 = var13.hasMoreTags();
    boolean var15 = var13.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test353() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    int var61 = var58.getJDBCMajorVersion();
    boolean var63 = var58.supportsResultSetType(100);
    boolean var64 = var58.supportsSchemasInIndexDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test354() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var3 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var5 = var3.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var6 = new com.sqlmagic.tinysql.FieldTokenizer(var1, 'a', var5);
    java.lang.String[] var7 = var6.getFields();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test355() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsAlterTableWithDropColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);

  }

  public void test356() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    int var38 = var35.getMaxRows();
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var41 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var42 = new com.sqlmagic.tinysql.tsResultSet();
    int var43 = var42.getLevel();
    boolean var45 = var41.getMoreResults(var43, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var48 = var46.acceptsURL("");
    boolean var50 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var51 = var46.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var53 = new com.sqlmagic.tinysql.tsResultSet();
    int var54 = var53.getLevel();
    java.util.Vector var55 = var53.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var55);
    boolean var59 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var41.updateColumns("hi!", "");
    java.lang.String var61 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var61);
    java.lang.String var63 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag(var63);
    boolean var66 = var35.execute(var63, 1);
    java.lang.String var67 = var35.getSQLString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.clearBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!"+ "'", var63.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);

  }

  public void test357() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.tinySQLWhere var5 = var0.getWhereClause();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var8 = var6.acceptsURL("");
    boolean var10 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var11 = var6.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var28);
    int var30 = var29.size();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    int var37 = var31.getMinorVersion();
    java.lang.Object var39 = var29.put((java.lang.Object)var31, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var40 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var18, (java.sql.Driver)var31);
    com.sqlmagic.tinysql.tinySQLStatement var41 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var40);
    java.sql.SQLWarning var42 = var41.getWarnings();
    com.sqlmagic.tinysql.tinySQLResultSet var43 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var41);
    java.sql.ResultSetMetaData var44 = var43.getMetaData();
    java.sql.ResultSetMetaData var45 = var43.getMetaData();
    com.sqlmagic.tinysql.tsResultSet var46 = new com.sqlmagic.tinysql.tsResultSet();
    int var47 = var46.getLevel();
    java.util.Vector var48 = var46.getTables();
    java.lang.String var50 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var48, "hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.tsResultSet var53 = new com.sqlmagic.tinysql.tsResultSet();
    int var54 = var53.getLevel();
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var57 = var55.acceptsURL("");
    boolean var59 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var60 = var55.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var62 = new com.sqlmagic.tinysql.tsResultSet();
    int var63 = var62.getLevel();
    java.util.Vector var64 = var62.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var64);
    int var66 = var65.size();
    //com.sqlmagic.tinysql.tsRow var67 = var53.rowAt(var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var43.updateInt("hi!", var66);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    //assertTrue(var67 == null);

  }

  public void test358() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    var35.clearWarnings();
    int var38 = var35.getMaxRows();
    int var39 = var35.getMaxRows();
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var42 = var40.acceptsURL("");
    boolean var44 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var45 = var40.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var46 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var47 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var53 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var55 = var53.acceptsURL("");
    boolean var57 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var58 = var53.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var60 = new com.sqlmagic.tinysql.tsResultSet();
    int var61 = var60.getLevel();
    java.util.Vector var62 = var60.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var63 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var62);
    int var64 = var63.size();
    com.sqlmagic.tinysql.dbfFileDriver var65 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var67 = var65.acceptsURL("");
    boolean var69 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var70 = var65.acceptsURL("hi!");
    int var71 = var65.getMinorVersion();
    java.lang.Object var73 = var63.put((java.lang.Object)var65, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var74 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var52, (java.sql.Driver)var65);
    com.sqlmagic.tinysql.tinySQLStatement var75 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var74);
    int var76 = var75.getResultSetHoldability();
    var75.clearWarnings();
    int var78 = var75.getMaxRows();
    com.sqlmagic.tinysql.tsResultSet var79 = new com.sqlmagic.tinysql.tsResultSet();
    int var80 = var79.getLevel();
    java.util.Vector var81 = var79.getTables();
    int var82 = var79.getLevel();
    boolean var85 = var79.getMoreResults(100, 0);
    byte[] var86 = com.sqlmagic.tinysql.Utils.intToLittleEndian(100);
    var75.setQueryTimeout(100);
    var35.setQueryTimeout(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var89 = var35.getFetchDirection();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);

  }

  public void test359() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    int var62 = var58.getMaxColumnsInGroupBy();
    boolean var63 = var58.supportsLimitedOuterJoins();
    int var64 = var58.getMaxColumnsInSelect();
    boolean var65 = var58.supportsConvert();
    boolean var66 = var58.supportsMultipleTransactions();
    boolean var67 = var58.allProceduresAreCallable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test360() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.supportsSchemasInIndexDefinitions();
    int var61 = var58.getMaxStatements();
    boolean var62 = var58.supportsConvert();
    java.sql.Connection var63 = var58.getConnection();
    int var64 = var58.getSQLStateType();
    int var65 = var58.getMaxRowSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var66 = var58.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test361() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    boolean var62 = var58.dataDefinitionCausesTransactionCommit();
    boolean var63 = var58.storesLowerCaseQuotedIdentifiers();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.ResultSet var64 = var58.getSchemas();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test362() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var2, "hi!");
    double var6 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var14 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var23 = var21.acceptsURL("");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var26 = var21.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var28 = new com.sqlmagic.tinysql.tsResultSet();
    int var29 = var28.getLevel();
    java.util.Vector var30 = var28.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var31 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var30);
    int var32 = var31.size();
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    int var39 = var33.getMinorVersion();
    java.lang.Object var41 = var31.put((java.lang.Object)var33, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var42 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var20, (java.sql.Driver)var33);
    int var43 = var42.getTransactionIsolation();
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var58);
    com.sqlmagic.tinysql.tinySQLWhere var61 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var60);
    int[] var64 = new int[] { 1, 0};
    java.sql.PreparedStatement var65 = var42.prepareStatement("hi!", var64);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var42);
    boolean var67 = var66.supportsDataManipulationTransactionsOnly();
    java.lang.String var68 = var66.getDatabaseProductName();
    boolean var69 = var66.supportsMixedCaseIdentifiers();
    boolean var70 = var66.supportsSavepoints();
    com.sqlmagic.tinysql.FieldTokenizer var71 = new com.sqlmagic.tinysql.FieldTokenizer("hi!", ' ', var70);
    java.lang.String var72 = var71.nextField();
    boolean var73 = com.sqlmagic.tinysql.dbfFileTable.isDeleted(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "tinySQL"+ "'", var68.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test363() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var62 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var61);
    int var63 = var62.getMaxColumnsInTable();
    boolean var64 = var62.supportsCatalogsInProcedureCalls();
    boolean var65 = var62.usesLocalFiles();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test364() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    var34.clearWarnings();
    com.sqlmagic.tinysql.dbfFileDriver var36 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var38 = var36.acceptsURL("");
    boolean var40 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var41 = var36.acceptsURL("hi!");
    var34.setAutoClose(var41);
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var47 = var45.acceptsURL("");
    boolean var49 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var50 = var45.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var52 = new com.sqlmagic.tinysql.tsResultSet();
    int var53 = var52.getLevel();
    java.util.Vector var54 = var52.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var55 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var54);
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var54);
    boolean var58 = var56.contains((java.lang.Object)(byte)0);
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var61 = var59.acceptsURL("");
    boolean var63 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var64 = var59.acceptsURL("hi!");
    java.lang.Object var65 = var56.remove((java.lang.Object)var64);
    com.sqlmagic.tinysql.tsResultSet var66 = new com.sqlmagic.tinysql.tsResultSet();
    int var67 = var66.getLevel();
    java.util.Vector var68 = var66.getTables();
    int var69 = var66.getLevel();
    boolean var72 = var66.getMoreResults(100, 0);
    com.sqlmagic.tinysql.SimpleXMLTag var73 = var56.getTag(0);
    var34.setTransactionIsolation(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == null);

  }

  public void test365() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    int var64 = var58.getMaxColumnNameLength();
    boolean var65 = var58.storesUpperCaseQuotedIdentifiers();
    boolean var66 = var58.doesMaxRowSizeIncludeBlobs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test366() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.tinySQLWhere var5 = var0.getWhereClause();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var8 = var6.acceptsURL("");
    boolean var10 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var11 = var6.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var28);
    int var30 = var29.size();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    int var37 = var31.getMinorVersion();
    java.lang.Object var39 = var29.put((java.lang.Object)var31, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var40 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var18, (java.sql.Driver)var31);
    com.sqlmagic.tinysql.tinySQLStatement var41 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var40);
    java.sql.SQLWarning var42 = var41.getWarnings();
    com.sqlmagic.tinysql.tinySQLResultSet var43 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var44 = var41.getResultSetConcurrency();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);

  }

  public void test367() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.supportsMixedCaseIdentifiers();
    boolean var62 = var58.storesUpperCaseIdentifiers();
    boolean var63 = var58.supportsSubqueriesInComparisons();
    boolean var64 = var58.supportsMultipleResultSets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test368() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    int var48 = var45.getLevel();
    boolean var51 = var45.getMoreResults(100, 0);
    int var52 = var45.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var53 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var45);
    int var55 = var53.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var60 = var58.acceptsURL("");
    boolean var62 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var63 = var58.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var65 = new com.sqlmagic.tinysql.tsResultSet();
    int var66 = var65.getLevel();
    java.util.Vector var67 = var65.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var68 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var67);
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var67);
    boolean var70 = var53.isCurrency(1);
    int var71 = var53.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var74 = var72.acceptsURL("");
    boolean var76 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var77 = var72.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var79 = new com.sqlmagic.tinysql.tsResultSet();
    int var80 = var79.getLevel();
    java.util.Vector var81 = var79.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var81);
    int var83 = var82.size();
    int var84 = var82.countTags();
    boolean var85 = var53.isCaseSensitive(var84);
    java.io.Reader var86 = var44.getCharacterStream(var84);
    boolean var87 = com.sqlmagic.tinysql.Utils.isDateColumn(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test369() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    boolean var61 = var58.supportsUnionAll();
    java.lang.String var62 = var58.getIdentifierQuoteString();
    boolean var63 = var58.supportsLimitedOuterJoins();
    java.sql.Connection var64 = var58.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var65 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var64);
    boolean var66 = var65.supportsOpenCursorsAcrossCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "\""+ "'", var62.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test370() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    com.sqlmagic.tinysql.tinySQLException var63 = new com.sqlmagic.tinysql.tinySQLException();
    int var64 = var63.getErrorCode();
    boolean var65 = var58.othersInsertsAreVisible(var64);
    boolean var66 = var58.doesMaxRowSizeIncludeBlobs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test371() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    int var12 = var9.getLevel();
    boolean var15 = var9.getMoreResults(100, 0);
    boolean var16 = var8.isWritable(100);
    boolean var18 = var8.isCaseSensitive(0);
    com.sqlmagic.tinysql.tsResultSet var19 = new com.sqlmagic.tinysql.tsResultSet();
    int var20 = var19.getLevel();
    java.util.Vector var21 = var19.getTables();
    int var22 = var19.getLevel();
    boolean var25 = var19.getMoreResults(100, 0);
    int var26 = var19.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var27 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var19);
    int var29 = var27.isNullable(10);
    boolean var30 = var8.isReadOnly(10);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var37 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var38 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var41 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var42 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var43 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var46 = var44.acceptsURL("");
    boolean var48 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var49 = var44.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var51 = new com.sqlmagic.tinysql.tsResultSet();
    int var52 = var51.getLevel();
    java.util.Vector var53 = var51.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var53);
    int var55 = var54.size();
    com.sqlmagic.tinysql.dbfFileDriver var56 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var58 = var56.acceptsURL("");
    boolean var60 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var61 = var56.acceptsURL("hi!");
    int var62 = var56.getMinorVersion();
    java.lang.Object var64 = var54.put((java.lang.Object)var56, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var65 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var43, (java.sql.Driver)var56);
    int var66 = var65.getTransactionIsolation();
    boolean var69 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var74 = var72.acceptsURL("");
    boolean var76 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var77 = var72.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var79 = new com.sqlmagic.tinysql.tsResultSet();
    int var80 = var79.getLevel();
    java.util.Vector var81 = var79.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var81);
    com.sqlmagic.tinysql.SimpleXMLTag var83 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var81);
    com.sqlmagic.tinysql.tinySQLWhere var84 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var83);
    int[] var87 = new int[] { 1, 0};
    java.sql.PreparedStatement var88 = var65.prepareStatement("hi!", var87);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var89 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var65);
    boolean var90 = var89.supportsDataManipulationTransactionsOnly();
    boolean var91 = var89.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var92 = var89.getConnection();
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var93 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData(var92);
    boolean var94 = var93.supportsAlterTableWithDropColumn();
    int var95 = var93.getMaxStatementLength();
    int var96 = var93.getMaxProcedureNameLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var97 = var8.getColumnClassName(var96);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test372() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var22 = var20.acceptsURL("");
    boolean var24 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var25 = var20.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet();
    int var28 = var27.getLevel();
    java.util.Vector var29 = var27.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var30 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var29);
    com.sqlmagic.tinysql.SimpleXMLTag var31 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var29);
    var16.putAll((java.util.Map)var31);
    int var33 = var31.size();
    com.sqlmagic.tinysql.dbfFileDriver var34 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var36 = var34.acceptsURL("");
    boolean var38 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var39 = var34.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var40 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var41 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var44 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var45 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var46 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var47 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var49 = var47.acceptsURL("");
    boolean var51 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var52 = var47.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var54 = new com.sqlmagic.tinysql.tsResultSet();
    int var55 = var54.getLevel();
    java.util.Vector var56 = var54.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var56);
    int var58 = var57.size();
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var61 = var59.acceptsURL("");
    boolean var63 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var64 = var59.acceptsURL("hi!");
    int var65 = var59.getMinorVersion();
    java.lang.Object var67 = var57.put((java.lang.Object)var59, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var68 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var46, (java.sql.Driver)var59);
    int var69 = var68.getTransactionIsolation();
    boolean var72 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var75 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var77 = var75.acceptsURL("");
    boolean var79 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var80 = var75.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var82 = new com.sqlmagic.tinysql.tsResultSet();
    int var83 = var82.getLevel();
    java.util.Vector var84 = var82.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var85 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var84);
    com.sqlmagic.tinysql.SimpleXMLTag var86 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var84);
    com.sqlmagic.tinysql.tinySQLWhere var87 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var86);
    int[] var90 = new int[] { 1, 0};
    java.sql.PreparedStatement var91 = var68.prepareStatement("hi!", var90);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var92 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var68);
    boolean var93 = var92.supportsDataManipulationTransactionsOnly();
    java.lang.String var94 = var92.getDatabaseProductName();
    boolean var95 = var31.contains((java.lang.Object)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "tinySQL"+ "'", var94.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test373() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseQuotedIdentifiers();
    boolean var61 = var58.supportsColumnAliasing();
    boolean var62 = var58.supportsGetGeneratedKeys();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test374() throws Throwable {

    byte[] var3 = new byte[] { (byte)(-1), (byte)1, (byte)(-1)};
    int var4 = com.sqlmagic.tinysql.Utils.vax_to_short(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 511);

  }

  public void test375() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    java.util.Set var14 = var13.entrySet();
    java.util.Set var15 = var13.entrySet();
    java.util.Collection var16 = var13.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);

  }

  public void test376() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    boolean var14 = var13.hasMoreTags();
    com.sqlmagic.tinysql.tsResultSet var15 = new com.sqlmagic.tinysql.tsResultSet();
    int var16 = var15.getLevel();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = var13.getTag(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);

  }

  public void test377() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    int var48 = var45.getLevel();
    boolean var51 = var45.getMoreResults(100, 0);
    int var52 = var45.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var53 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var45);
    int var55 = var53.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var60 = var58.acceptsURL("");
    boolean var62 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var63 = var58.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var65 = new com.sqlmagic.tinysql.tsResultSet();
    int var66 = var65.getLevel();
    java.util.Vector var67 = var65.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var68 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var67);
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var67);
    boolean var70 = var53.isCurrency(1);
    int var71 = var53.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var74 = var72.acceptsURL("");
    boolean var76 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var77 = var72.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var79 = new com.sqlmagic.tinysql.tsResultSet();
    int var80 = var79.getLevel();
    java.util.Vector var81 = var79.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var81);
    int var83 = var82.size();
    int var84 = var82.countTags();
    boolean var85 = var53.isCaseSensitive(var84);
    java.io.Reader var86 = var44.getCharacterStream(var84);
    var44.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var44.refreshRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);

  }

  public void test378() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsOpenCursorsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test379() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    var34.setCatalog("hi!");
    boolean var43 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var44 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    boolean var48 = var44.getMoreResults(var46, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var44.updateColumns("hi!", "");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var64);
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var67 = var34.getClientInfo("hi!");
    java.sql.Savepoint var68 = var34.setSavepoint();
    com.sqlmagic.tinysql.tsResultSet var69 = new com.sqlmagic.tinysql.tsResultSet();
    int var70 = var69.getLevel();
    java.util.Vector var71 = var69.getTables();
    int var72 = var69.getLevel();
    boolean var75 = var69.getMoreResults(100, 0);
    int var76 = var69.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var77 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var69);
    int var79 = var77.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var80 = new com.sqlmagic.tinysql.tsResultSet();
    int var81 = var80.getLevel();
    java.util.Vector var82 = var80.getTables();
    int var83 = var80.getLevel();
    boolean var86 = var80.getMoreResults(100, 0);
    boolean var87 = var77.isSearchable(100);
    var34.setAutoClose(var87);
    var34.commit();
    com.sqlmagic.tinysql.tinySQLDatabaseMetaData var90 = new com.sqlmagic.tinysql.tinySQLDatabaseMetaData((java.sql.Connection)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test380() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    int var11 = var10.size();
    int var12 = var10.countTags();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var19 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var28 = var26.acceptsURL("");
    boolean var30 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var31 = var26.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var33 = new com.sqlmagic.tinysql.tsResultSet();
    int var34 = var33.getLevel();
    java.util.Vector var35 = var33.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var35);
    int var37 = var36.size();
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    int var44 = var38.getMinorVersion();
    java.lang.Object var46 = var36.put((java.lang.Object)var38, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var47 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var25, (java.sql.Driver)var38);
    int var48 = var47.getTransactionIsolation();
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    java.util.Vector var63 = var61.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var63);
    com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var63);
    com.sqlmagic.tinysql.tinySQLWhere var66 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var65);
    int[] var69 = new int[] { 1, 0};
    java.sql.PreparedStatement var70 = var47.prepareStatement("hi!", var69);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var71 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    boolean var72 = var71.supportsDataManipulationTransactionsOnly();
    java.lang.String var73 = var71.getDatabaseProductName();
    boolean var74 = var71.supportsMixedCaseIdentifiers();
    boolean var75 = var71.supportsDifferentTableCorrelationNames();
    boolean var76 = var71.supportsCatalogsInProcedureCalls();
    java.lang.Object var77 = var10.remove((java.lang.Object)var71);
    java.util.Set var78 = var10.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "tinySQL"+ "'", var73.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);

  }

  public void test381() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    java.sql.ResultSet var37 = var35.getResultSet();
    var35.close();
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var41 = var39.acceptsURL("");
    java.lang.String var42 = com.sqlmagic.tinysql.UtilString.toYMD("");
    com.sqlmagic.tinysql.tsResultSet var43 = new com.sqlmagic.tinysql.tsResultSet();
    int var44 = var43.getLevel();
    java.util.Vector var45 = var43.getTables();
    int var46 = var43.getLevel();
    boolean var49 = var43.getMoreResults(100, 0);
    int var50 = var43.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var51 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var43);
    com.sqlmagic.tinysql.tsResultSet var52 = new com.sqlmagic.tinysql.tsResultSet();
    int var53 = var52.getLevel();
    java.util.Vector var54 = var52.getTables();
    int var55 = var52.getLevel();
    boolean var58 = var52.getMoreResults(100, 0);
    boolean var59 = var51.isWritable(100);
    boolean var61 = var51.isCaseSensitive(0);
    boolean var62 = var35.execute("", 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test382() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.tinySQLWhere var5 = var0.getWhereClause();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var8 = var6.acceptsURL("");
    boolean var10 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var11 = var6.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var28);
    int var30 = var29.size();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    int var37 = var31.getMinorVersion();
    java.lang.Object var39 = var29.put((java.lang.Object)var31, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var40 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var18, (java.sql.Driver)var31);
    com.sqlmagic.tinysql.tinySQLStatement var41 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var40);
    java.sql.SQLWarning var42 = var41.getWarnings();
    com.sqlmagic.tinysql.tinySQLResultSet var43 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var41);
    java.sql.ResultSetMetaData var44 = var43.getMetaData();
    java.sql.ResultSetMetaData var45 = var43.getMetaData();
    com.sqlmagic.tinysql.tsResultSet var46 = new com.sqlmagic.tinysql.tsResultSet();
    int var47 = var46.getLevel();
    java.util.Vector var48 = var46.getTables();
    java.lang.String var50 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var48, "hi!");
    java.lang.String var52 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFile var53 = new com.sqlmagic.tinysql.dbfFile(var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var43.updateNull(var52);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));

  }

  public void test383() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    com.sqlmagic.tinysql.SimpleXMLTag var24 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var22);
    boolean var25 = var8.isCurrency(1);
    int var26 = var8.getColumnCount();
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var28 = new com.sqlmagic.tinysql.tsResultSet();
    int var29 = var28.getLevel();
    boolean var31 = var27.getMoreResults(var29, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var32 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var34 = var32.acceptsURL("");
    boolean var36 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var37 = var32.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var39 = new com.sqlmagic.tinysql.tsResultSet();
    int var40 = var39.getLevel();
    java.util.Vector var41 = var39.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var42 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var41);
    boolean var45 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var27.updateColumns("hi!", "");
    int var47 = var27.size();
    int var48 = var27.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var49 = var8.getColumnLabel(var48);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);

  }

  public void test384() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    int var3 = var0.getLevel();
    boolean var6 = var0.getMoreResults(100, 0);
    int var7 = var0.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var8 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var0);
    int var10 = var8.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    int var14 = var11.getLevel();
    boolean var17 = var11.getMoreResults(100, 0);
    boolean var18 = var8.isSearchable(100);
    com.sqlmagic.tinysql.tsResultSet var19 = new com.sqlmagic.tinysql.tsResultSet();
    int var20 = var19.getLevel();
    java.util.Vector var21 = var19.getTables();
    int var22 = var19.getLevel();
    boolean var25 = var19.getMoreResults(100, 0);
    int var26 = var19.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var27 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var19);
    int var29 = var27.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    boolean var37 = var27.isSearchable(var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var38 = var8.getColumnTypeName(var36);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test385() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    boolean var61 = var58.supportsMixedCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test386() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    java.util.Vector var3 = var1.getTables();
    int var4 = var1.getLevel();
    boolean var7 = var1.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var15 = new com.sqlmagic.tinysql.tsResultSet();
    int var16 = var15.getLevel();
    java.util.Vector var17 = var15.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var18 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var17);
    java.util.Collection var19 = var18.values();
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    int var23 = var20.getLevel();
    boolean var24 = var18.containsValue((java.lang.Object)var20);
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var35 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var0.setState(100, (java.util.Hashtable)var18, "hi!", var39);
    java.util.Set var41 = var18.entrySet();
    com.sqlmagic.tinysql.dbfFileDriver var44 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var46 = var44.acceptsURL("");
    boolean var48 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var49 = var44.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var51 = new com.sqlmagic.tinysql.tsResultSet();
    int var52 = var51.getLevel();
    java.util.Vector var53 = var51.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var54 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var53);
    com.sqlmagic.tinysql.SimpleXMLTag var55 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var53);
    java.util.Set var56 = var55.entrySet();
    int var57 = var55.countTags();
    boolean var58 = var18.contains((java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test387() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    int var36 = var35.getResultSetHoldability();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var39 = var37.acceptsURL("");
    boolean var41 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var42 = var37.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var43 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var45 = var43.acceptsURL("");
    boolean var47 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var48 = var43.acceptsURL("hi!");
    int var49 = var43.getMajorVersion();
    int var50 = var35.executeUpdate("hi!", var49);
    com.sqlmagic.tinysql.tsResultSet var51 = new com.sqlmagic.tinysql.tsResultSet();
    int var52 = var51.getLevel();
    java.util.Vector var53 = var51.getTables();
    java.lang.String var55 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var53, "hi!");
    double var57 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    int[] var59 = new int[] { 10};
    int var60 = var35.executeUpdate("hi!", var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test388() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.tinySQLWhere var5 = var0.getWhereClause();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var8 = var6.acceptsURL("");
    boolean var10 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var11 = var6.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var28);
    int var30 = var29.size();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    int var37 = var31.getMinorVersion();
    java.lang.Object var39 = var29.put((java.lang.Object)var31, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var40 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var18, (java.sql.Driver)var31);
    com.sqlmagic.tinysql.tinySQLStatement var41 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var40);
    java.sql.SQLWarning var42 = var41.getWarnings();
    com.sqlmagic.tinysql.tinySQLResultSet var43 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var41);
    java.sql.ResultSetMetaData var44 = var43.getMetaData();
    boolean var45 = var43.isLast();
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var48 = var46.acceptsURL("");
    boolean var50 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var51 = var46.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var53 = new com.sqlmagic.tinysql.tsResultSet();
    int var54 = var53.getLevel();
    java.util.Vector var55 = var53.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var55);
    int var57 = var56.size();
    int var58 = var56.size();
    com.sqlmagic.tinysql.tsResultSet var59 = new com.sqlmagic.tinysql.tsResultSet();
    int var60 = var59.getLevel();
    java.util.Vector var61 = var59.getTables();
    int var62 = var59.getLevel();
    boolean var65 = var59.getMoreResults(100, 0);
    com.sqlmagic.tinysql.SimpleXMLTag var66 = var56.getTag(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.sql.Array var67 = var43.getArray(0);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);

  }

  public void test389() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    com.sqlmagic.tinysql.dbfFile var21 = new com.sqlmagic.tinysql.dbfFile("");
    com.sqlmagic.tinysql.tsResultSet var22 = new com.sqlmagic.tinysql.tsResultSet(var17, (com.sqlmagic.tinysql.tinySQL)var21);
    java.lang.String var24 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var28 = var26.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var29 = new com.sqlmagic.tinysql.FieldTokenizer(var24, 'a', var28);
    boolean var30 = var29.hasMoreFields();
    boolean var31 = var29.hasMoreFields();
    int var32 = var29.countFields();
    var22.setFetchSize(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);

  }

  public void test390() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    com.sqlmagic.tinysql.tinySQLStatement var32 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var30);
    int var33 = var32.getUpdateCount();
    int var34 = var32.getFetchSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 4096);

  }

  public void test391() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    boolean var63 = var58.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test392() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    boolean var44 = var37.acceptsURL("hi!");
    java.sql.Savepoint var45 = var34.setSavepoint("hi!");
    int var46 = var34.getTransactionIsolation();
    var34.disableAutoClose();
    com.sqlmagic.tinysql.dbfFileDriver var48 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var50 = var48.acceptsURL("");
    boolean var52 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var53 = var48.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var54 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var55 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    java.lang.String var56 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName(var55);
    java.lang.String var57 = var34.getClientInfo(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "hi!"+ "'", var56.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);

  }

  public void test393() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    boolean var2 = var0.isGrouped();
    int var3 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test394() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    int var61 = var58.getMaxIndexLength();
    java.sql.ResultSet var62 = var58.getTypeInfo();
    boolean var63 = var58.doesMaxRowSizeIncludeBlobs();
    boolean var64 = var58.supportsSubqueriesInIns();
    boolean var65 = var58.supportsColumnAliasing();
    int var66 = var58.getMaxStatementLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test395() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    java.lang.String var45 = var44.getCursorName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var44.moveToCurrentRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));

  }

  public void test396() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    var34.setCatalog("hi!");
    boolean var43 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var44 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    boolean var48 = var44.getMoreResults(var46, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var44.updateColumns("hi!", "");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var64);
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var67 = var34.getClientInfo("hi!");
    java.sql.Savepoint var68 = var34.setSavepoint();
    com.sqlmagic.tinysql.tsResultSet var69 = new com.sqlmagic.tinysql.tsResultSet();
    int var70 = var69.getLevel();
    java.util.Vector var71 = var69.getTables();
    int var72 = var69.getLevel();
    boolean var75 = var69.getMoreResults(100, 0);
    int var76 = var69.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var77 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var69);
    int var79 = var77.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var80 = new com.sqlmagic.tinysql.tsResultSet();
    int var81 = var80.getLevel();
    java.util.Vector var82 = var80.getTables();
    int var83 = var80.getLevel();
    boolean var86 = var80.getMoreResults(100, 0);
    boolean var87 = var77.isSearchable(100);
    var34.setAutoClose(var87);
    var34.commit();
    java.lang.String var91 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var93 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var95 = var93.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var96 = new com.sqlmagic.tinysql.FieldTokenizer(var91, 'a', var95);
    boolean var97 = var96.hasMoreFields();
    java.lang.String var98 = var96.nextField();
    java.sql.Savepoint var99 = var34.setSavepoint(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "hi!"+ "'", var91.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "hi!"+ "'", var98.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == null);

  }

  public void test397() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.SQLXML var31 = var30.createSQLXML();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);

  }

  public void test398() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    java.sql.ResultSet var63 = var58.getTypeInfo();
    boolean var64 = var58.supportsMixedCaseQuotedIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test399() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var3 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var5 = var3.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var6 = new com.sqlmagic.tinysql.FieldTokenizer(var1, 'a', var5);
    boolean var7 = var6.hasMoreFields();
    java.lang.String var8 = var6.nextField();
    int var9 = var6.countFields();
    java.lang.String var10 = var6.nextField();
    int var11 = var6.countFields();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);

  }

  public void test400() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var2 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var4 = var2.acceptsURL("");
    boolean var6 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var7 = var2.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var9 = new com.sqlmagic.tinysql.tsResultSet();
    int var10 = var9.getLevel();
    java.util.Vector var11 = var9.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var12 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var11);
    com.sqlmagic.tinysql.SimpleXMLTag var13 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var11);
    boolean var15 = var13.contains((java.lang.Object)(byte)0);
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var18 = var16.acceptsURL("");
    boolean var20 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var21 = var16.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var23 = new com.sqlmagic.tinysql.tsResultSet();
    int var24 = var23.getLevel();
    java.util.Vector var25 = var23.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var26 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var25);
    java.util.Collection var27 = var26.values();
    var26.clear();
    com.sqlmagic.tinysql.textFileDriver var29 = new com.sqlmagic.tinysql.textFileDriver();
    boolean var30 = var26.containsKey((java.lang.Object)var29);
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var38 = new com.sqlmagic.tinysql.tsResultSet();
    int var39 = var38.getLevel();
    java.util.Vector var40 = var38.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var41 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var40);
    int var42 = var41.size();
    int var43 = var41.countTags();
    java.util.Set var44 = var41.entrySet();
    boolean var45 = var26.contains((java.lang.Object)var41);
    var13.putAll((java.util.Map)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test401() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    int var48 = var45.getLevel();
    boolean var51 = var45.getMoreResults(100, 0);
    int var52 = var45.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var53 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var45);
    int var55 = var53.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var60 = var58.acceptsURL("");
    boolean var62 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var63 = var58.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var65 = new com.sqlmagic.tinysql.tsResultSet();
    int var66 = var65.getLevel();
    java.util.Vector var67 = var65.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var68 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var67);
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var67);
    boolean var70 = var53.isCurrency(1);
    int var71 = var53.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var74 = var72.acceptsURL("");
    boolean var76 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var77 = var72.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var79 = new com.sqlmagic.tinysql.tsResultSet();
    int var80 = var79.getLevel();
    java.util.Vector var81 = var79.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var81);
    int var83 = var82.size();
    int var84 = var82.countTags();
    boolean var85 = var53.isCaseSensitive(var84);
    java.io.Reader var86 = var44.getCharacterStream(var84);
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var89 = var87.acceptsURL("");
    boolean var91 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var92 = var87.acceptsURL("hi!");
    int var93 = var87.getMinorVersion();
    byte[] var94 = new byte[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var44.updateBytes(var93, var94);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);

  }

  public void test402() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsOpenStatementsAcrossRollback();
    boolean var61 = var58.supportsCatalogsInProcedureCalls();
    boolean var62 = var58.supportsOpenCursorsAcrossRollback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test403() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    boolean var61 = var58.supportsUnionAll();
    java.lang.String var62 = var58.getIdentifierQuoteString();
    boolean var64 = com.sqlmagic.tinysql.Utils.isDateColumn(10);
    boolean var65 = var58.othersDeletesAreVisible(10);
    boolean var66 = var58.supportsMixedCaseIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "\""+ "'", var62.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test404() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsFullOuterJoins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test405() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    int var48 = var45.getLevel();
    boolean var51 = var45.getMoreResults(100, 0);
    int var52 = var45.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var53 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var45);
    int var55 = var53.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var60 = var58.acceptsURL("");
    boolean var62 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var63 = var58.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var65 = new com.sqlmagic.tinysql.tsResultSet();
    int var66 = var65.getLevel();
    java.util.Vector var67 = var65.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var68 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var67);
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var67);
    boolean var70 = var53.isCurrency(1);
    int var71 = var53.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var74 = var72.acceptsURL("");
    boolean var76 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var77 = var72.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var79 = new com.sqlmagic.tinysql.tsResultSet();
    int var80 = var79.getLevel();
    java.util.Vector var81 = var79.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var81);
    int var83 = var82.size();
    int var84 = var82.countTags();
    boolean var85 = var53.isCaseSensitive(var84);
    java.io.Reader var86 = var44.getCharacterStream(var84);
    boolean var89 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    java.sql.NClob var90 = var44.getNClob("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);

  }

  public void test406() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    var44.afterLast();
    boolean var46 = var44.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test407() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    int var62 = var58.getMaxColumnsInGroupBy();
    boolean var63 = var58.supportsLimitedOuterJoins();
    int var64 = var58.getMaxColumnsInSelect();
    boolean var65 = var58.supportsConvert();
    boolean var66 = var58.supportsMultipleTransactions();
    boolean var67 = var58.supportsANSI92EntryLevelSQL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test408() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    boolean var37 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var40 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var42 = var40.acceptsURL("");
    boolean var44 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var45 = var40.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var47 = new com.sqlmagic.tinysql.tsResultSet();
    int var48 = var47.getLevel();
    java.util.Vector var49 = var47.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var50 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var49);
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var49);
    com.sqlmagic.tinysql.tinySQLWhere var52 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var51);
    java.lang.String var53 = var52.toString();
    int[] var57 = new int[] { 100, 1, (-1)};
    java.sql.PreparedStatement var58 = var34.prepareStatement(var53, var57);
    boolean var61 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var62 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var63 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var65 = var63.acceptsURL("");
    boolean var67 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var68 = var63.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var70 = new com.sqlmagic.tinysql.tsResultSet();
    int var71 = var70.getLevel();
    java.util.Vector var72 = var70.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var73 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var72);
    int var74 = var73.size();
    com.sqlmagic.tinysql.dbfFileDriver var75 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var77 = var75.acceptsURL("");
    boolean var79 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var80 = var75.acceptsURL("hi!");
    int var81 = var75.getMinorVersion();
    java.lang.Object var83 = var73.put((java.lang.Object)var75, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var84 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var73);
    var34.setTypeMap((java.util.Map)var73);
    byte[] var87 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)0);
    boolean var88 = var73.contains((java.lang.Object)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "\n"+ "'", var53.equals("\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test409() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsOpenStatementsAcrossCommit();
    boolean var63 = var58.supportsStoredProcedures();
    boolean var64 = var58.supportsNamedParameters();
    boolean var65 = var58.supportsSubqueriesInQuantifieds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test410() throws Throwable {

    com.sqlmagic.tinysql.textFileDriver var0 = new com.sqlmagic.tinysql.textFileDriver();
    java.lang.String var2 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var3 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var5 = var3.acceptsURL("");
    boolean var7 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var8 = var3.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var9 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var10 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames(var10);
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var13 = new com.sqlmagic.tinysql.tsResultSet();
    int var14 = var13.getLevel();
    java.util.Vector var15 = var13.getTables();
    int var16 = var13.getLevel();
    boolean var19 = var13.getMoreResults(100, 0);
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var22 = var20.acceptsURL("");
    boolean var24 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var25 = var20.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var27 = new com.sqlmagic.tinysql.tsResultSet();
    int var28 = var27.getLevel();
    java.util.Vector var29 = var27.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var30 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var29);
    java.util.Collection var31 = var30.values();
    com.sqlmagic.tinysql.tsResultSet var32 = new com.sqlmagic.tinysql.tsResultSet();
    int var33 = var32.getLevel();
    java.util.Vector var34 = var32.getTables();
    int var35 = var32.getLevel();
    boolean var36 = var30.containsValue((java.lang.Object)var32);
    com.sqlmagic.tinysql.dbfFileDriver var37 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var39 = var37.acceptsURL("");
    boolean var41 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var42 = var37.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var44 = new com.sqlmagic.tinysql.tsResultSet();
    int var45 = var44.getLevel();
    java.util.Vector var46 = var44.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var47 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var46);
    boolean var50 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var51 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    var12.setState(100, (java.util.Hashtable)var30, "hi!", var51);
    com.sqlmagic.tinysql.tinySQLException var53 = new com.sqlmagic.tinysql.tinySQLException();
    int var54 = var53.getErrorCode();
    byte[] var55 = com.sqlmagic.tinysql.Utils.intToLittleEndian(var54);
   // com.sqlmagic.tinysql.tsRow var56 = var12.rowAt(var54);
    java.util.Vector var57 = var12.getTables();
    com.sqlmagic.tinysql.tinySQLWhere var58 = var12.getWhereClause();
    int var59 = var12.getColumnCount();
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var63 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var64 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var66 = var64.acceptsURL("");
    boolean var68 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var69 = var64.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var71 = new com.sqlmagic.tinysql.tsResultSet();
    int var72 = var71.getLevel();
    java.util.Vector var73 = var71.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var74 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var73);
    int var75 = var74.size();
    com.sqlmagic.tinysql.dbfFileDriver var76 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var78 = var76.acceptsURL("");
    boolean var80 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var81 = var76.acceptsURL("hi!");
    int var82 = var76.getMinorVersion();
    java.lang.Object var84 = var74.put((java.lang.Object)var76, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var85 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var74);
    java.lang.String var86 = com.sqlmagic.tinysql.Utils.forceToSize(var10, var59, "hi!");
    com.sqlmagic.tinysql.dbfFileDriver var87 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileDriver var88 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var90 = var88.acceptsURL("");
    boolean var92 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var93 = var88.acceptsURL("hi!");
    boolean var94 = var87.acceptsURL("hi!");
    com.sqlmagic.tinysql.tinySQLConnection var95 = var0.getConnection("hi!", var86, (java.sql.Driver)var87);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var96 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
   // assertTrue(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + ""+ "'", var86.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var95 == null);

  }

  public void test411() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    boolean var63 = var58.supportsAlterTableWithDropColumn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test412() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    java.lang.String var37 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var39 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var41 = var39.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var42 = new com.sqlmagic.tinysql.FieldTokenizer(var37, 'a', var41);
    var34.setAutoCommit(var41);
    java.util.Properties var44 = var34.getClientInfo();
    boolean var45 = var34.getAutoCommit();
    int var46 = var34.getHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);

  }

  public void test413() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    int var64 = var58.getMaxColumnNameLength();
    int var65 = var58.getResultSetHoldability();
    boolean var66 = var58.supportsSubqueriesInIns();
    boolean var67 = var58.supportsUnion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test414() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    java.sql.NClob var32 = var30.createNClob();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);

  }

  public void test415() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    var35.cancel();
    boolean var37 = var35.isPoolable();
    java.lang.String var38 = var35.getSQLString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.clearBatch();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test416() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    java.lang.String var45 = var44.getCursorName();
    java.lang.String var46 = com.sqlmagic.tinysql.tinySQLGlobals.addLongName(var45);
    com.sqlmagic.tinysql.tinySQLException var47 = new com.sqlmagic.tinysql.tinySQLException(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "COL00000"+ "'", var46.equals("COL00000"));

  }

  public void test417() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.supportsStoredFunctionsUsingCallSyntax();
    java.sql.Connection var61 = var58.getConnection();
    boolean var62 = var58.supportsCatalogsInIndexDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test418() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.supportsMixedCaseIdentifiers();
    boolean var62 = var58.supportsSavepoints();
    com.sqlmagic.tinysql.tsResultSet var63 = new com.sqlmagic.tinysql.tsResultSet();
    int var64 = var63.getLevel();
    java.util.Vector var65 = var63.getTables();
    int var66 = var63.getLevel();
    boolean var69 = var63.getMoreResults(100, 0);
    boolean var70 = var58.updatesAreDetected(0);
    boolean var71 = var58.storesMixedCaseIdentifiers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test419() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    boolean var63 = var58.supportsAlterTableWithAddColumn();
    java.lang.String var64 = var58.getSQLKeywords();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag(var64);
      fail("Expected exception of type java.lang.Exception");
    } catch (java.lang.Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));

  }

  public void test420() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var0.updateColumns("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var20 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var22 = var20.acceptsURL("");
    boolean var24 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var25 = var20.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var27 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var30 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var31 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var32 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var40 = new com.sqlmagic.tinysql.tsResultSet();
    int var41 = var40.getLevel();
    java.util.Vector var42 = var40.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var43 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var42);
    int var44 = var43.size();
    com.sqlmagic.tinysql.dbfFileDriver var45 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var47 = var45.acceptsURL("");
    boolean var49 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var50 = var45.acceptsURL("hi!");
    int var51 = var45.getMinorVersion();
    java.lang.Object var53 = var43.put((java.lang.Object)var45, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var54 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var32, (java.sql.Driver)var45);
    int var55 = var54.getTransactionIsolation();
    boolean var58 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var61 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var63 = var61.acceptsURL("");
    boolean var65 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var66 = var61.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var68 = new com.sqlmagic.tinysql.tsResultSet();
    int var69 = var68.getLevel();
    java.util.Vector var70 = var68.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var71 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var70);
    com.sqlmagic.tinysql.SimpleXMLTag var72 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var70);
    com.sqlmagic.tinysql.tinySQLWhere var73 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var72);
    int[] var76 = new int[] { 1, 0};
    java.sql.PreparedStatement var77 = var54.prepareStatement("hi!", var76);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var78 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var54);
    int var79 = var78.getMaxIndexLength();
    com.sqlmagic.tinysql.dbfFileDriver var80 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var82 = var80.acceptsURL("");
    boolean var84 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var85 = var80.acceptsURL("hi!");
    java.lang.String var86 = com.sqlmagic.tinysql.Utils.forceToSize("hi!", var79, "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var87 = com.sqlmagic.tinysql.UtilString.dateValue(var86);
      fail("Expected exception of type com.sqlmagic.tinysql.tinySQLException");
    } catch (com.sqlmagic.tinysql.tinySQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + ""+ "'", var86.equals(""));

  }

  public void test421() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    java.lang.String var62 = var58.getDatabaseProductVersion();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var63 = var58.getCatalogTerm();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "2.26h"+ "'", var62.equals("2.26h"));

  }

  public void test422() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    int var63 = var58.getMaxTablesInSelect();
    java.sql.ResultSet var64 = var58.getClientInfoProperties();
    boolean var65 = var58.supportsStoredProcedures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test423() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    boolean var63 = var58.supportsSubqueriesInQuantifieds();
    boolean var64 = var58.supportsLikeEscapeClause();
    boolean var65 = var58.supportsSchemasInProcedureCalls();
    int var66 = var58.getMaxProcedureNameLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test424() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var2, "hi!");
    double var6 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var14 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var23 = var21.acceptsURL("");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var26 = var21.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var28 = new com.sqlmagic.tinysql.tsResultSet();
    int var29 = var28.getLevel();
    java.util.Vector var30 = var28.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var31 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var30);
    int var32 = var31.size();
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    int var39 = var33.getMinorVersion();
    java.lang.Object var41 = var31.put((java.lang.Object)var33, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var42 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var20, (java.sql.Driver)var33);
    int var43 = var42.getTransactionIsolation();
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var58);
    com.sqlmagic.tinysql.tinySQLWhere var61 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var60);
    int[] var64 = new int[] { 1, 0};
    java.sql.PreparedStatement var65 = var42.prepareStatement("hi!", var64);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var42);
    boolean var67 = var66.supportsDataManipulationTransactionsOnly();
    java.lang.String var68 = var66.getDatabaseProductName();
    boolean var69 = var66.supportsMixedCaseIdentifiers();
    boolean var70 = var66.supportsSavepoints();
    com.sqlmagic.tinysql.FieldTokenizer var71 = new com.sqlmagic.tinysql.FieldTokenizer("hi!", ' ', var70);
    java.lang.String[] var72 = var71.getFields();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "tinySQL"+ "'", var68.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);

  }

  public void test425() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    java.lang.String var45 = var44.getCursorName();
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var48 = var46.acceptsURL("");
    com.sqlmagic.tinysql.dbfFile var49 = new com.sqlmagic.tinysql.dbfFile("");
    boolean var52 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var55 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var57 = var55.acceptsURL("");
    boolean var59 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var60 = var55.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var62 = new com.sqlmagic.tinysql.tsResultSet();
    int var63 = var62.getLevel();
    java.util.Vector var64 = var62.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var64);
    com.sqlmagic.tinysql.SimpleXMLTag var66 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var64);
    com.sqlmagic.tinysql.tinySQLWhere var67 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var66);
    java.lang.String var68 = var67.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var44.updateObject("", (java.lang.Object)var67);
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "\n"+ "'", var68.equals("\n"));

  }

  public void test426() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    int var48 = var45.getLevel();
    boolean var51 = var45.getMoreResults(100, 0);
    int var52 = var45.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var53 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var45);
    int var55 = var53.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var60 = var58.acceptsURL("");
    boolean var62 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var63 = var58.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var65 = new com.sqlmagic.tinysql.tsResultSet();
    int var66 = var65.getLevel();
    java.util.Vector var67 = var65.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var68 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var67);
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var67);
    boolean var70 = var53.isCurrency(1);
    int var71 = var53.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var74 = var72.acceptsURL("");
    boolean var76 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var77 = var72.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var79 = new com.sqlmagic.tinysql.tsResultSet();
    int var80 = var79.getLevel();
    java.util.Vector var81 = var79.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var81);
    int var83 = var82.size();
    int var84 = var82.countTags();
    boolean var85 = var53.isCaseSensitive(var84);
    java.io.Reader var86 = var44.getCharacterStream(var84);
    boolean var87 = var44.isBeforeFirst();
    com.sqlmagic.tinysql.tinySQLGlobals.readLongNames("hi!");
    java.sql.NClob var90 = var44.getNClob("hi!");
    java.lang.String var91 = var44.getCursorName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + ""+ "'", var91.equals(""));

  }

  public void test427() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var12 = new com.sqlmagic.tinysql.tsResultSet();
    int var13 = var12.getLevel();
    java.util.Vector var14 = var12.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var15 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var14);
    com.sqlmagic.tinysql.SimpleXMLTag var16 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var14);
    com.sqlmagic.tinysql.tinySQLWhere var17 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var16);
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    com.sqlmagic.tinysql.dbfFile var21 = new com.sqlmagic.tinysql.dbfFile("");
    com.sqlmagic.tinysql.tsResultSet var22 = new com.sqlmagic.tinysql.tsResultSet(var17, (com.sqlmagic.tinysql.tinySQL)var21);
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    com.sqlmagic.tinysql.dbfFile var26 = new com.sqlmagic.tinysql.dbfFile("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var17.clearValues("");
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test428() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    boolean var36 = var35.isPoolable();
    int var37 = var35.getMaxRows();
    int var38 = var35.getMaxRows();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 65536);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65536);

  }

  public void test429() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    java.lang.String var60 = var58.getDatabaseProductName();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsStatementPooling();
    boolean var63 = var58.supportsNamedParameters();
    java.lang.String var64 = var58.getDatabaseProductName();
    boolean var65 = var58.supportsSubqueriesInIns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "tinySQL"+ "'", var60.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "tinySQL"+ "'", var64.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test430() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsOpenCursorsAcrossCommit();
    java.sql.ResultSet var60 = var58.getTypeInfo();
    boolean var61 = var58.isReadOnly();
    boolean var62 = var58.supportsOpenStatementsAcrossCommit();
    java.lang.String var63 = var58.getExtraNameCharacters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));

  }

  public void test431() throws Throwable {

    byte[] var1 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)0);
    byte[] var2 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)0);
    byte[] var3 = com.sqlmagic.tinysql.Utils.shortToLittleEndian((short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test432() throws Throwable {

    boolean var1 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var22);
    java.lang.String var24 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    com.sqlmagic.tinysql.SimpleXMLTag var25 = new com.sqlmagic.tinysql.SimpleXMLTag(var24);
    int var26 = var25.countTags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);

  }

  public void test433() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    java.sql.ResultSet var61 = var58.getTypeInfo();
    boolean var62 = var58.supportsSavepoints();
    boolean var63 = var58.supportsAlterTableWithAddColumn();
    java.lang.String var64 = var58.getSQLKeywords();
    com.sqlmagic.tinysql.tinySQLException var65 = new com.sqlmagic.tinysql.tinySQLException(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));

  }

  public void test434() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var7 = new com.sqlmagic.tinysql.tsResultSet();
    int var8 = var7.getLevel();
    java.util.Vector var9 = var7.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var10 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var9);
    int var11 = var10.size();
    int var12 = var10.countTags();
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var19 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var23 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var24 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var25 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var26 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var28 = var26.acceptsURL("");
    boolean var30 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var31 = var26.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var33 = new com.sqlmagic.tinysql.tsResultSet();
    int var34 = var33.getLevel();
    java.util.Vector var35 = var33.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var36 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var35);
    int var37 = var36.size();
    com.sqlmagic.tinysql.dbfFileDriver var38 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var40 = var38.acceptsURL("");
    boolean var42 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var43 = var38.acceptsURL("hi!");
    int var44 = var38.getMinorVersion();
    java.lang.Object var46 = var36.put((java.lang.Object)var38, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var47 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var25, (java.sql.Driver)var38);
    int var48 = var47.getTransactionIsolation();
    boolean var51 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var54 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var56 = var54.acceptsURL("");
    boolean var58 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var59 = var54.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var61 = new com.sqlmagic.tinysql.tsResultSet();
    int var62 = var61.getLevel();
    java.util.Vector var63 = var61.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var64 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var63);
    com.sqlmagic.tinysql.SimpleXMLTag var65 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var63);
    com.sqlmagic.tinysql.tinySQLWhere var66 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var65);
    int[] var69 = new int[] { 1, 0};
    java.sql.PreparedStatement var70 = var47.prepareStatement("hi!", var69);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var71 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var47);
    boolean var72 = var71.supportsDataManipulationTransactionsOnly();
    java.lang.String var73 = var71.getDatabaseProductName();
    boolean var74 = var71.supportsMixedCaseIdentifiers();
    boolean var75 = var71.supportsDifferentTableCorrelationNames();
    boolean var76 = var71.supportsCatalogsInProcedureCalls();
    java.lang.Object var77 = var10.remove((java.lang.Object)var71);
    int var78 = var71.getResultSetHoldability();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "tinySQL"+ "'", var73.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test435() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.tinySQLWhere var5 = var0.getWhereClause();
    com.sqlmagic.tinysql.dbfFileDriver var6 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var8 = var6.acceptsURL("");
    boolean var10 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var11 = var6.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var12 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var13 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var16 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var17 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var18 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var19 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var21 = var19.acceptsURL("");
    boolean var23 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var24 = var19.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var26 = new com.sqlmagic.tinysql.tsResultSet();
    int var27 = var26.getLevel();
    java.util.Vector var28 = var26.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var29 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var28);
    int var30 = var29.size();
    com.sqlmagic.tinysql.dbfFileDriver var31 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var33 = var31.acceptsURL("");
    boolean var35 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var36 = var31.acceptsURL("hi!");
    int var37 = var31.getMinorVersion();
    java.lang.Object var39 = var29.put((java.lang.Object)var31, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var40 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var18, (java.sql.Driver)var31);
    com.sqlmagic.tinysql.tinySQLStatement var41 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var40);
    java.sql.SQLWarning var42 = var41.getWarnings();
    com.sqlmagic.tinysql.tinySQLResultSet var43 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var41);
    java.sql.ResultSetMetaData var44 = var43.getMetaData();
    boolean var45 = var43.isLast();
    int var46 = var43.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);

  }

  public void test436() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    boolean var60 = var58.storesLowerCaseIdentifiers();
    boolean var61 = var58.supportsUnionAll();
    java.lang.String var62 = var58.getIdentifierQuoteString();
    boolean var63 = var58.supportsExtendedSQLGrammar();
    boolean var64 = var58.nullsAreSortedLow();
    java.lang.String var65 = var58.getExtraNameCharacters();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "\""+ "'", var62.equals("\""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));

  }

  public void test437() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    int var59 = var58.getMaxIndexLength();
    boolean var60 = var58.nullsAreSortedAtStart();
    boolean var61 = var58.supportsSchemasInTableDefinitions();
    boolean var62 = var58.supportsSchemasInTableDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test438() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    var35.cancel();
    int var37 = var35.getUpdateCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));

  }

  public void test439() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var3 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var4 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var6 = var4.acceptsURL("");
    boolean var8 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var9 = var4.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var11 = new com.sqlmagic.tinysql.tsResultSet();
    int var12 = var11.getLevel();
    java.util.Vector var13 = var11.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var14 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var13);
    int var15 = var14.size();
    com.sqlmagic.tinysql.dbfFileDriver var16 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var18 = var16.acceptsURL("");
    boolean var20 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var21 = var16.acceptsURL("hi!");
    int var22 = var16.getMinorVersion();
    java.lang.Object var24 = var14.put((java.lang.Object)var16, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.tinySQLWhere var25 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var14);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.String var26 = var14.toString();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test440() throws Throwable {

    java.lang.String var1 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.tsResultSet var2 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var3 = new com.sqlmagic.tinysql.tsResultSet();
    int var4 = var3.getLevel();
    boolean var6 = var2.getMoreResults(var4, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var7 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var9 = var7.acceptsURL("");
    boolean var11 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var12 = var7.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var14 = new com.sqlmagic.tinysql.tsResultSet();
    int var15 = var14.getLevel();
    java.util.Vector var16 = var14.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var17 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var16);
    boolean var20 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var2.updateColumns("hi!", "");
    java.lang.String var22 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.dbfFileDriver var23 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var25 = var23.acceptsURL("");
    boolean var27 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var28 = var23.acceptsURL("hi!");
    int var29 = var23.getMajorVersion();
    com.sqlmagic.tinysql.textFileConnection var30 = new com.sqlmagic.tinysql.textFileConnection(var1, "", (java.sql.Driver)var23);
    java.sql.Savepoint var31 = var30.setSavepoint();
    boolean var34 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var35 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var36 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    int var38 = var37.getLevel();
    java.util.Vector var39 = var37.getTables();
    int var40 = var37.getLevel();
    boolean var43 = var37.getMoreResults(100, 0);
    int var44 = var37.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var45 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var37);
    int var47 = var45.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var50 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var52 = var50.acceptsURL("");
    boolean var54 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var55 = var50.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var57 = new com.sqlmagic.tinysql.tsResultSet();
    int var58 = var57.getLevel();
    java.util.Vector var59 = var57.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var59);
    com.sqlmagic.tinysql.SimpleXMLTag var61 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var59);
    boolean var62 = var45.isCurrency(1);
    com.sqlmagic.tinysql.tsResultSet var63 = new com.sqlmagic.tinysql.tsResultSet();
    int var64 = var63.getLevel();
    java.util.Vector var65 = var63.getTables();
    int var66 = var63.getLevel();
    boolean var69 = var63.getMoreResults(100, 0);
    int var70 = var63.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var71 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var63);
    int var73 = var71.isNullable(10);
    boolean var74 = var45.isWritable(10);
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.sql.Struct var76 = var30.createStruct("hi!", var75);
    var30.commit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);

  }

  public void test441() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var41 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var43 = var41.acceptsURL("");
    boolean var45 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var46 = var41.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var48 = new com.sqlmagic.tinysql.tsResultSet();
    int var49 = var48.getLevel();
    java.util.Vector var50 = var48.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var51 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var50);
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var50);
    com.sqlmagic.tinysql.tinySQLWhere var53 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var52);
    int[] var56 = new int[] { 1, 0};
    java.sql.PreparedStatement var57 = var34.prepareStatement("hi!", var56);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var58 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var34);
    boolean var59 = var58.supportsDataManipulationTransactionsOnly();
    int var60 = var58.getMaxColumnsInTable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var61 = var58.dataDefinitionIgnoredInTransactions();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10000);

  }

  public void test442() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    var44.afterLast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var44.refreshRow();
      fail("Expected exception of type java.sql.SQLException");
    } catch (java.sql.SQLException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);

  }

  public void test443() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var1 = new com.sqlmagic.tinysql.tsResultSet();
    int var2 = var1.getLevel();
    boolean var4 = var0.getMoreResults(var2, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    com.sqlmagic.tinysql.tinySQLStatement var40 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var39);
    int var41 = var40.getResultSetHoldability();
    java.sql.ResultSet var42 = var40.getResultSet();
    var40.close();
    com.sqlmagic.tinysql.tinySQLResultSet var44 = new com.sqlmagic.tinysql.tinySQLResultSet(var0, var40);
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    java.util.Vector var47 = var45.getTables();
    int var48 = var45.getLevel();
    boolean var51 = var45.getMoreResults(100, 0);
    int var52 = var45.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var53 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var45);
    int var55 = var53.isNullable(10);
    com.sqlmagic.tinysql.dbfFileDriver var58 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var60 = var58.acceptsURL("");
    boolean var62 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var63 = var58.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var65 = new com.sqlmagic.tinysql.tsResultSet();
    int var66 = var65.getLevel();
    java.util.Vector var67 = var65.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var68 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var67);
    com.sqlmagic.tinysql.SimpleXMLTag var69 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var67);
    boolean var70 = var53.isCurrency(1);
    int var71 = var53.getColumnCount();
    com.sqlmagic.tinysql.dbfFileDriver var72 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var74 = var72.acceptsURL("");
    boolean var76 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var77 = var72.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var79 = new com.sqlmagic.tinysql.tsResultSet();
    int var80 = var79.getLevel();
    java.util.Vector var81 = var79.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var82 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var81);
    int var83 = var82.size();
    int var84 = var82.countTags();
    boolean var85 = var53.isCaseSensitive(var84);
    java.io.Reader var86 = var44.getCharacterStream(var84);
    boolean var87 = var44.isBeforeFirst();
    int var88 = var44.getHoldability();
    boolean var91 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    java.sql.NClob var92 = var44.getNClob("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == null);

  }

  public void test444() throws Throwable {

    boolean var2 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var3 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var4 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var5 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var7 = var5.acceptsURL("");
    boolean var9 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var10 = var5.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var11 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var15 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var16 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var17 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var18 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var20 = var18.acceptsURL("");
    boolean var22 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var23 = var18.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var25 = new com.sqlmagic.tinysql.tsResultSet();
    int var26 = var25.getLevel();
    java.util.Vector var27 = var25.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var28 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var27);
    int var29 = var28.size();
    com.sqlmagic.tinysql.dbfFileDriver var30 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var32 = var30.acceptsURL("");
    boolean var34 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var35 = var30.acceptsURL("hi!");
    int var36 = var30.getMinorVersion();
    java.lang.Object var38 = var28.put((java.lang.Object)var30, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var39 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var17, (java.sql.Driver)var30);
    int var40 = var39.getTransactionIsolation();
    boolean var43 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var46 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var48 = var46.acceptsURL("");
    boolean var50 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var51 = var46.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var53 = new com.sqlmagic.tinysql.tsResultSet();
    int var54 = var53.getLevel();
    java.util.Vector var55 = var53.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var56 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var55);
    com.sqlmagic.tinysql.SimpleXMLTag var57 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var55);
    com.sqlmagic.tinysql.tinySQLWhere var58 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var57);
    int[] var61 = new int[] { 1, 0};
    java.sql.PreparedStatement var62 = var39.prepareStatement("hi!", var61);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var63 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var39);
    int var64 = var63.getMaxIndexLength();
    boolean var65 = var63.supportsSchemasInIndexDefinitions();
    int var66 = var63.getJDBCMajorVersion();
    boolean var68 = var63.supportsResultSetType(100);
    java.lang.String var69 = var63.getDatabaseProductName();
    com.sqlmagic.tinysql.dbfFileDriver var70 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var72 = var70.acceptsURL("");
    boolean var74 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var75 = var70.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var77 = new com.sqlmagic.tinysql.tsResultSet();
    int var78 = var77.getLevel();
    java.util.Vector var79 = var77.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var80 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var79);
    int var81 = var80.size();
    int var82 = var80.size();
    boolean var83 = var80.isEmpty();
    java.util.Collection var84 = var80.values();
    com.sqlmagic.tinysql.tinySQLWhere var85 = new com.sqlmagic.tinysql.tinySQLWhere(var69, (java.util.Hashtable)var80);
    com.sqlmagic.tinysql.dbfFileDriver var86 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var88 = var86.acceptsURL("");
    boolean var90 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var91 = var86.acceptsURL("hi!");
    boolean var92 = var86.jdbcCompliant();
    com.sqlmagic.tinysql.textFileConnection var93 = new com.sqlmagic.tinysql.textFileConnection(var4, var69, (java.sql.Driver)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "tinySQL"+ "'", var69.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test445() throws Throwable {

    com.sqlmagic.tinysql.tsResultSet var0 = new com.sqlmagic.tinysql.tsResultSet();
    int var1 = var0.getLevel();
    java.util.Vector var2 = var0.getTables();
    java.lang.String var4 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.Utils.setPriority(var2, "hi!");
    double var6 = com.sqlmagic.tinysql.UtilString.doubleValue("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var8 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var10 = var8.acceptsURL("");
    boolean var12 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var13 = var8.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var14 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var15 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var18 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var19 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var20 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var21 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var23 = var21.acceptsURL("");
    boolean var25 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var26 = var21.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var28 = new com.sqlmagic.tinysql.tsResultSet();
    int var29 = var28.getLevel();
    java.util.Vector var30 = var28.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var31 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var30);
    int var32 = var31.size();
    com.sqlmagic.tinysql.dbfFileDriver var33 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var35 = var33.acceptsURL("");
    boolean var37 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var38 = var33.acceptsURL("hi!");
    int var39 = var33.getMinorVersion();
    java.lang.Object var41 = var31.put((java.lang.Object)var33, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var42 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var20, (java.sql.Driver)var33);
    int var43 = var42.getTransactionIsolation();
    boolean var46 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    com.sqlmagic.tinysql.SimpleXMLTag var60 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 1, var58);
    com.sqlmagic.tinysql.tinySQLWhere var61 = new com.sqlmagic.tinysql.tinySQLWhere("hi!", (java.util.Hashtable)var60);
    int[] var64 = new int[] { 1, 0};
    java.sql.PreparedStatement var65 = var42.prepareStatement("hi!", var64);
    com.sqlmagic.tinysql.dbfFileDatabaseMetaData var66 = new com.sqlmagic.tinysql.dbfFileDatabaseMetaData((java.sql.Connection)var42);
    boolean var67 = var66.supportsDataManipulationTransactionsOnly();
    java.lang.String var68 = var66.getDatabaseProductName();
    boolean var69 = var66.supportsMixedCaseIdentifiers();
    boolean var70 = var66.supportsSavepoints();
    com.sqlmagic.tinysql.FieldTokenizer var71 = new com.sqlmagic.tinysql.FieldTokenizer("hi!", ' ', var70);
    java.lang.String var72 = var71.nextField();
    boolean var73 = var71.hasMoreFields();
    int var74 = var71.countFields();
    java.lang.String var75 = var71.nextField();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 4.9E-324d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "tinySQL"+ "'", var68.equals("tinySQL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);

  }

  public void test446() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    int var35 = var34.getTransactionIsolation();
    var34.commit();
    com.sqlmagic.tinysql.tsResultSet var37 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var38 = new com.sqlmagic.tinysql.tsResultSet();
    int var39 = var38.getLevel();
    boolean var41 = var37.getMoreResults(var39, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var42 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var44 = var42.acceptsURL("");
    boolean var46 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var47 = var42.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var49 = new com.sqlmagic.tinysql.tsResultSet();
    int var50 = var49.getLevel();
    java.util.Vector var51 = var49.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var52 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var51);
    boolean var55 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var37.updateColumns("hi!", "");
    java.lang.String var57 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    java.lang.String var58 = com.sqlmagic.tinysql.tinySQLGlobals.getLongName("");
    com.sqlmagic.tinysql.dbfFileDriver var59 = new com.sqlmagic.tinysql.dbfFileDriver();
    com.sqlmagic.tinysql.dbfFileDriver var60 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var62 = var60.acceptsURL("");
    boolean var64 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var65 = var60.acceptsURL("hi!");
    boolean var66 = var59.acceptsURL("hi!");
    var34.setClientInfo("", "hi!");
    java.lang.String var68 = var34.getCatalog();
    boolean var69 = var34.isReadOnly();
    var34.commit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + ""+ "'", var57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test447() throws Throwable {

    byte[] var3 = new byte[] { (byte)0, (byte)100, (byte)0};
    int var4 = com.sqlmagic.tinysql.Utils.vax_to_short(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 25600);

  }

  public void test448() throws Throwable {

    com.sqlmagic.tinysql.dbfFileDriver var0 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var2 = var0.acceptsURL("");
    boolean var4 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var5 = var0.acceptsURL("hi!");
    com.sqlmagic.tinysql.dbfFile var6 = new com.sqlmagic.tinysql.dbfFile("hi!");
    java.lang.String var7 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    boolean var10 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var11 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var12 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var13 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var15 = var13.acceptsURL("");
    boolean var17 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var18 = var13.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var20 = new com.sqlmagic.tinysql.tsResultSet();
    int var21 = var20.getLevel();
    java.util.Vector var22 = var20.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var23 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var22);
    int var24 = var23.size();
    com.sqlmagic.tinysql.dbfFileDriver var25 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var27 = var25.acceptsURL("");
    boolean var29 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var30 = var25.acceptsURL("hi!");
    int var31 = var25.getMinorVersion();
    java.lang.Object var33 = var23.put((java.lang.Object)var25, (java.lang.Object)(-1.0d));
    com.sqlmagic.tinysql.dbfFileConnection var34 = new com.sqlmagic.tinysql.dbfFileConnection("hi!", var12, (java.sql.Driver)var25);
    com.sqlmagic.tinysql.tinySQLStatement var35 = new com.sqlmagic.tinysql.tinySQLStatement((com.sqlmagic.tinysql.tinySQLConnection)var34);
    boolean var38 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    boolean var39 = com.sqlmagic.tinysql.Utils.clearFunction("hi!");
    java.lang.String var40 = com.sqlmagic.tinysql.UtilString.removeQuotes("hi!");
    var34.setCatalog("hi!");
    boolean var43 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    com.sqlmagic.tinysql.tsResultSet var44 = new com.sqlmagic.tinysql.tsResultSet();
    com.sqlmagic.tinysql.tsResultSet var45 = new com.sqlmagic.tinysql.tsResultSet();
    int var46 = var45.getLevel();
    boolean var48 = var44.getMoreResults(var46, (-1));
    com.sqlmagic.tinysql.dbfFileDriver var49 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var51 = var49.acceptsURL("");
    boolean var53 = com.sqlmagic.tinysql.UtilString.isQuotedString("hi!");
    boolean var54 = var49.acceptsURL("hi!");
    com.sqlmagic.tinysql.tsResultSet var56 = new com.sqlmagic.tinysql.tsResultSet();
    int var57 = var56.getLevel();
    java.util.Vector var58 = var56.getTables();
    com.sqlmagic.tinysql.SimpleXMLTag var59 = new com.sqlmagic.tinysql.SimpleXMLTag("hi!", 0, var58);
    boolean var62 = com.sqlmagic.tinysql.Utils.renameFile("hi!", "");
    var44.updateColumns("hi!", "");
    java.lang.String var64 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("");
    com.sqlmagic.tinysql.Utils.delFile("hi!", var64);
    java.lang.String var66 = com.sqlmagic.tinysql.Utils.stripPathAndExtension("hi!");
    java.lang.String var67 = var34.getClientInfo("hi!");
    java.sql.Savepoint var68 = var34.setSavepoint();
    com.sqlmagic.tinysql.tsResultSet var69 = new com.sqlmagic.tinysql.tsResultSet();
    int var70 = var69.getLevel();
    java.util.Vector var71 = var69.getTables();
    int var72 = var69.getLevel();
    boolean var75 = var69.getMoreResults(100, 0);
    int var76 = var69.getType();
    com.sqlmagic.tinysql.tinySQLResultSetMetaData var77 = new com.sqlmagic.tinysql.tinySQLResultSetMetaData(var69);
    int var79 = var77.isNullable(10);
    com.sqlmagic.tinysql.tsResultSet var80 = new com.sqlmagic.tinysql.tsResultSet();
    int var81 = var80.getLevel();
    java.util.Vector var82 = var80.getTables();
    int var83 = var80.getLevel();
    boolean var86 = var80.getMoreResults(100, 0);
    boolean var87 = var77.isSearchable(100);
    var34.setAutoClose(var87);
    java.lang.String var90 = com.sqlmagic.tinysql.tinySQLGlobals.getShortName("hi!");
    com.sqlmagic.tinysql.dbfFileDriver var92 = new com.sqlmagic.tinysql.dbfFileDriver();
    boolean var94 = var92.acceptsURL("");
    com.sqlmagic.tinysql.FieldTokenizer var95 = new com.sqlmagic.tinysql.FieldTokenizer(var90, 'a', var94);
    boolean var96 = var95.hasMoreFields();
    java.lang.String var97 = var95.nextField();
    java.sql.Savepoint var98 = var34.setSavepoint(var97);
    boolean var99 = var34.getAutoCommit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "hi!"+ "'", var66.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "hi!"+ "'", var97.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

}
