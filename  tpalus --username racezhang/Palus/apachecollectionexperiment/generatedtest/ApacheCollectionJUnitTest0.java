package generatedtest;

import junit.framework.*;

public class ApacheCollectionJUnitTest0 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(ApacheCollectionJUnitTest0.class);
  }

  public void test1() throws Throwable {

    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.ResettableIterator var3 = org.apache.commons.collections.IteratorUtils.arrayIterator((java.lang.Object)(byte)0, 0, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test2() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestArrayIterator.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test3() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    java.lang.Object[] var2 = var1.getFullNonNullElements();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test4() throws Throwable {

    org.apache.commons.collections.Predicate var0 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var1 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.PredicateUtils.orPredicate(var0, var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.ResettableListIterator var3 = org.apache.commons.collections.IteratorUtils.arrayListIterator((java.lang.Object)var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test5() throws Throwable {

    org.apache.commons.collections.Predicate var0 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate[] var1 = new org.apache.commons.collections.Predicate[] { var0};
    org.apache.commons.collections.functors.AnyPredicate var2 = new org.apache.commons.collections.functors.AnyPredicate(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);

  }

  public void test6() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test7() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    org.apache.commons.collections.iterators.ObjectArrayListIterator var4 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var3);
    org.apache.commons.collections.Predicate var5 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var6 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var7 = org.apache.commons.collections.PredicateUtils.orPredicate(var5, var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.set((java.lang.Object)var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test8() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.map.DefaultedMap var4 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var5 = var4.entrySet();
    boolean var7 = var4.containsKey((java.lang.Object)1.0d);
    boolean var8 = org.apache.commons.collections.MapUtils.isEmpty((java.util.Map)var4);
    org.apache.commons.collections.BinaryHeap var10 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var11 = org.apache.commons.collections.CollectionUtils.isNotEmpty((java.util.Collection)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.assertEquals(var2, var8, var11);
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test9() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.bidimap.TestAbstractOrderedBidiMapDecorator.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test10() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestSingletonIterator2.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test11() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.list.TestCursorableLinkedList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test12() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    boolean var4 = var1.containsKey((java.lang.Object)1.0d);
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test13() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.comparators.TestAll.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test14() throws Throwable {

    org.apache.commons.collections.bidimap.DualHashBidiMap var0 = new org.apache.commons.collections.bidimap.DualHashBidiMap();
    boolean var1 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test15() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    int var6 = var0.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = var0.lastKey();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test16() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestAllPackages.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test17() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var2 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.util.Iterator var3 = var2.makeFullIterator();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test18() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var3.verify();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test19() throws Throwable {

    org.apache.commons.collections.map.TestListOrderedMap2 var1 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    org.apache.commons.collections.BulkTest var2 = var1.bulkTestOrderedMapIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test20() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    int var6 = var0.size();
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.map.DefaultedMap var10 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var11 = var10.entrySet();
    boolean var13 = var10.containsKey((java.lang.Object)1.0d);
    boolean var14 = org.apache.commons.collections.MapUtils.isEmpty((java.util.Map)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.map.ReferenceIdentityMap var15 = new org.apache.commons.collections.map.ReferenceIdentityMap(var6, 10, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test21() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestMapUtils.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test22() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var2 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.buffer.BoundedFifoBuffer var3 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test23() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestArrayListIterator.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test24() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    var2.testEntrySetContains3();

  }

  public void test25() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestHashBag.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test26() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var3 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var4 = var3.supportsSet();
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    org.apache.commons.collections.MultiHashMap var17 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var18 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var19 = var11.remove((java.lang.Object)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.assertEquals(var4, var19);
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test27() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.list.TestTypedList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test28() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    java.lang.Object[] var5 = new java.lang.Object[] { true};
    org.apache.commons.collections.ResettableListIterator var6 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test29() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var2.verifyValues();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test30() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.buffer.TestUnmodifiableBuffer.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test31() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    java.util.Collection var16 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    boolean var32 = var25.containsAll((java.util.Collection)var28);
    java.util.Collection var33 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var25);
    boolean var34 = var3.retainAll((java.util.Collection)var25);
    org.apache.commons.collections.collection.TestSynchronizedCollection var36 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var37 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var40 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var41 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var43 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var44 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var45 = var44.isEmpty();
    org.apache.commons.collections.MultiHashMap var47 = new org.apache.commons.collections.MultiHashMap(0);
    float var50 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var47, (java.lang.Object)100L, 100.0f);
    boolean var51 = var47.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var45, var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.assertEquals(var34, var45);
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);

  }

  public void test32() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    boolean var7 = var6.isEqualsCheckable();
    var6.testComparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test33() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    boolean var2 = var0.sortsTrueFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test34() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.Closure var2 = org.apache.commons.collections.ClosureUtils.chainedClosure((java.util.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test35() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    junit.framework.Test var5 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    org.apache.commons.collections.ResettableListIterator var7 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var6);
    org.apache.commons.collections.Transformer var8 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var9 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var7, var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.util.Collection var15 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var3, var8, (java.util.Collection)var11);
    org.apache.commons.collections.comparators.TransformingComparator var16 = new org.apache.commons.collections.comparators.TransformingComparator(var8);
    org.apache.commons.collections.Transformer var17 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.Predicate var20 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var21 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var22 = org.apache.commons.collections.PredicateUtils.orPredicate(var20, var21);
    int var23 = org.apache.commons.collections.CollectionUtils.countMatches((java.util.Collection)var19, var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var24 = var16.compare((java.lang.Object)var17, (java.lang.Object)var19);
      fail("Expected exception of type org.apache.commons.collections.FunctorException");
    } catch (org.apache.commons.collections.FunctorException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test36() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.bidimap.TestAll.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test37() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestBeanMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test38() throws Throwable {

    org.apache.commons.collections.ListUtils var0 = new org.apache.commons.collections.ListUtils();

  }

  public void test39() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var6 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var8 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var9 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var11 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var12 = var11.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var13 = org.apache.commons.collections.set.ListOrderedSet.decorate(var12);
    org.apache.commons.collections.map.SingletonMap var14 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var9, (java.lang.Object)var12);
    boolean var16 = var14.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var18 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var19 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var20 = var14.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var21 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    org.apache.commons.collections.MultiHashMap var23 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var24 = new org.apache.commons.collections.MultiHashMap(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.iterators.ArrayIterator var25 = var8.makeArrayIterator((java.lang.Object)var21, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);

  }

  public void test40() throws Throwable {

    org.apache.commons.collections.EnumerationUtils var0 = new org.apache.commons.collections.EnumerationUtils();

  }

  public void test41() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestUnmodifiableOrderedMapIterator.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test42() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.bag.TestHashBag.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test43() throws Throwable {

    org.apache.commons.collections.iterators.ProxyListIterator var0 = new org.apache.commons.collections.iterators.ProxyListIterator();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      boolean var1 = var0.hasNext();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test44() throws Throwable {

    org.apache.commons.collections.BufferUtils var0 = new org.apache.commons.collections.BufferUtils();

  }

  public void test45() throws Throwable {

    org.apache.commons.collections.bidimap.DualHashBidiMap var0 = new org.apache.commons.collections.bidimap.DualHashBidiMap();
    org.apache.commons.collections.collection.TestSynchronizedCollection var2 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var3 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var4 = var0.removeValue((java.lang.Object)"hi!");
    org.apache.commons.collections.Predicate var5 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Transformer var6 = org.apache.commons.collections.TransformerUtils.asTransformer(var5);
    org.apache.commons.collections.map.DefaultedMap var8 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var9 = var8.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var10 = org.apache.commons.collections.set.ListOrderedSet.decorate(var9);
    java.lang.Object[] var11 = var10.toArray();
    org.apache.commons.collections.Transformer var12 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((java.util.Collection)var10);
    java.util.Map var13 = org.apache.commons.collections.map.TransformedMap.decorateTransform((java.util.Map)var0, var6, var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test46() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.fail(var4);
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test47() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.comparators.TestReverseComparator.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test48() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.map.TestUnmodifiableOrderedMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test49() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var1 = new java.lang.Object[] { var0};
    org.apache.commons.collections.ResettableListIterator var2 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var1);
    org.apache.commons.collections.Transformer var3 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var4 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var2, var3);
    java.util.Iterator var5 = var4.getIterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object[] var6 = org.apache.commons.collections.IteratorUtils.toArray((java.util.Iterator)var4);
      fail("Expected exception of type org.apache.commons.collections.FunctorException");
    } catch (org.apache.commons.collections.FunctorException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test50() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var12 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.failSame("hi!");
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test51() throws Throwable {

    org.apache.commons.collections.map.TestListOrderedMap2 var1 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    org.apache.commons.collections.Factory var2 = org.apache.commons.collections.FactoryUtils.prototypeFactory((java.lang.Object)"hi!");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    org.apache.commons.collections.bidimap.DualTreeBidiMap var6 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var7 = var6.isEmpty();
    org.apache.commons.collections.map.LRUMap var8 = new org.apache.commons.collections.map.LRUMap(100, 1.0f, var7);
    org.apache.commons.collections.keyvalue.MultiKey var9 = new org.apache.commons.collections.keyvalue.MultiKey(var3, var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test52() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.map.TestFixedSizeMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test53() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var4 = var3.isEqualsCheckable();
    boolean var5 = var3.isEqualsCheckable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test54() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestBoundedFifoBuffer.suite();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var1 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var3 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var4 = var3.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var5 = org.apache.commons.collections.set.ListOrderedSet.decorate(var4);
    org.apache.commons.collections.map.SingletonMap var6 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.Properties var7 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var1);
    java.lang.Object var8 = org.apache.commons.collections.CollectionUtils.index((java.lang.Object)var0, (java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test55() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var1 = var0.isEmpty();
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var4 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var4.testComparator();
    org.apache.commons.collections.keyvalue.MultiKey var6 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var0, (java.lang.Object)var4);
    var4.testMapGet();
    boolean var8 = var4.isSubMapViewsSerializable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test56() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestUnmodifiableIterator.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test57() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestCursorableLinkedList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test58() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    java.util.Collection var2 = var1.makeConfirmedFullCollection();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test59() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    org.apache.commons.collections.Predicate var6 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var7 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var8 = org.apache.commons.collections.PredicateUtils.orPredicate(var6, var7);
    org.apache.commons.collections.Closure var9 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var10 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var11 = org.apache.commons.collections.functors.IfClosure.getInstance(var7, var9, var10);
    org.apache.commons.collections.functors.NullIsTruePredicate var12 = new org.apache.commons.collections.functors.NullIsTruePredicate(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = var0.get((java.lang.Object)var12);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);

  }

  public void test60() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var3 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var4 = var3.supportsSet();
    var3.testIterator();
    var3.testEqualsNull();
    java.util.Iterator var7 = var3.makeFullIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test61() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var8 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    boolean var9 = var8.isFailFastSupported();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var8.verify();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test62() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    var3.testListIteratorAdd();
    var3.testListAddByIndexBoundsChecking2();

  }

  public void test63() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestLRUMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test64() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.list.TestTransformedList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test65() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.assertFalse(var10);
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test66() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var2 = var1.countTestCases();
    org.apache.commons.collections.Predicate var3 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var2);
    org.apache.commons.collections.Predicate[] var4 = new org.apache.commons.collections.Predicate[] { var3};
    org.apache.commons.collections.Predicate var5 = org.apache.commons.collections.PredicateUtils.nonePredicate(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test67() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    boolean var3 = var1.equals((java.lang.Object)1L);
    org.apache.commons.collections.BinaryHeap var5 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var8 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var5, (java.util.Collection)var7);
    org.apache.commons.collections.map.DefaultedMap var10 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var11 = var10.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var12 = org.apache.commons.collections.set.ListOrderedSet.decorate(var11);
    java.lang.Object[] var13 = var12.toArray();
    org.apache.commons.collections.list.TreeList var14 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var12);
    java.util.List var15 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var7, (java.util.Collection)var14);
    org.apache.commons.collections.list.SetUniqueList var16 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var14);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var17 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var19 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var20 = var19.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var21 = org.apache.commons.collections.set.ListOrderedSet.decorate(var20);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var17, (java.lang.Object)var20);
    int var23 = var17.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var25 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var26 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var29 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var30 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var32 = var16.subList(var23, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.ResettableListIterator var33 = org.apache.commons.collections.IteratorUtils.arrayListIterator((java.lang.Object)var1, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);

  }

  public void test68() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.MultiHashMap var14 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var15 = new org.apache.commons.collections.MultiHashMap(0);
    java.lang.Object[] var16 = new java.lang.Object[] { 0};
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    boolean var27 = var20.containsAll((java.util.Collection)var23);
    int var28 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var20);
    org.apache.commons.collections.iterators.ObjectArrayListIterator var29 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var16, var28);
    int var30 = var29.getStartIndex();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var31 = var12.remove(var30);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);

  }

  public void test69() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.BeanMap var16 = new org.apache.commons.collections.BeanMap((java.lang.Object)var15);
    java.util.Set var17 = var16.entrySet();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var18 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var20 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var21 = var20.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var22 = org.apache.commons.collections.set.ListOrderedSet.decorate(var21);
    org.apache.commons.collections.map.SingletonMap var23 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var18, (java.lang.Object)var21);
    boolean var24 = org.apache.commons.collections.CollectionUtils.isNotEmpty((java.util.Collection)var21);
    boolean var25 = org.apache.commons.collections.CollectionUtils.isSubCollection((java.util.Collection)var17, (java.util.Collection)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test70() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    boolean var16 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test71() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    org.apache.commons.collections.iterators.ObjectArrayListIterator var4 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var3);
    java.lang.Object[] var5 = var4.getArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test72() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestIteratorChain.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test73() throws Throwable {

    org.apache.commons.collections.iterators.FilterListIterator var0 = new org.apache.commons.collections.iterators.FilterListIterator();
    java.util.ListIterator var1 = var0.getListIterator();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.Object var2 = var0.next();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test74() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    org.apache.commons.collections.comparators.ComparatorChain var2 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var1);
    org.apache.commons.collections.comparators.ComparatorChain var3 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var2);
    org.apache.commons.collections.comparators.BooleanComparator var4 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var5 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var4);
    org.apache.commons.collections.collection.TestSynchronizedCollection var7 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var8 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var11 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var12 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var14 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var15 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var16 = var15.isEmpty();
    org.apache.commons.collections.MultiHashMap var18 = new org.apache.commons.collections.MultiHashMap(0);
    float var21 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var18, (java.lang.Object)100L, 100.0f);
    boolean var22 = var18.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var16, var22);
    var2.addComparator((java.util.Comparator)var4, var22);
    org.apache.commons.collections.map.DefaultedMap var26 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var29 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var26, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.Predicate var30 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var31 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var32 = org.apache.commons.collections.PredicateUtils.orPredicate(var30, var31);
    org.apache.commons.collections.Closure var33 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var34 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var35 = org.apache.commons.collections.functors.IfClosure.getInstance(var31, var33, var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var36 = var2.compare((java.lang.Object)var29, (java.lang.Object)var31);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + (-1.0d)+ "'", var29.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);

  }

  public void test75() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    boolean var2 = var1.isEmpty();
    org.apache.commons.collections.BinaryHeap var4 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.Predicate var5 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var6 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var7 = org.apache.commons.collections.PredicateUtils.orPredicate(var5, var6);
    int var8 = org.apache.commons.collections.CollectionUtils.countMatches((java.util.Collection)var4, var6);
    java.lang.Object var9 = var1.get((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1L)+ "'", var9.equals((-1L)));

  }

  public void test76() throws Throwable {

    org.apache.commons.collections.TransformerUtils var0 = new org.apache.commons.collections.TransformerUtils();

  }

  public void test77() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    org.apache.commons.collections.OrderedMapIterator var6 = org.apache.commons.collections.IteratorUtils.emptyOrderedMapIterator();
    org.apache.commons.collections.OrderedMapIterator var7 = org.apache.commons.collections.iterators.UnmodifiableOrderedMapIterator.decorate(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = var5.remove((java.lang.Object)var7);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test78() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.BulkTest var3 = var2.bulkTestSubMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test79() throws Throwable {

    org.apache.commons.collections.iterators.ObjectArrayIterator var0 = new org.apache.commons.collections.iterators.ObjectArrayIterator();

  }

  public void test80() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var8 = new org.apache.commons.collections.Transformer[] { var7};
    org.apache.commons.collections.functors.ChainedTransformer var9 = new org.apache.commons.collections.functors.ChainedTransformer(var8);
    java.util.List var10 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var5, (org.apache.commons.collections.Transformer)var9);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var14 = var13.isEmpty();
    org.apache.commons.collections.map.LRUMap var15 = new org.apache.commons.collections.map.LRUMap(100, 1.0f, var14);
    org.apache.commons.collections.BinaryHeap var17 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var20 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var17, (java.util.Collection)var19);
    org.apache.commons.collections.Predicate var21 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var22 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var23 = org.apache.commons.collections.PredicateUtils.orPredicate(var21, var22);
    org.apache.commons.collections.Closure var24 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var25 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var26 = org.apache.commons.collections.functors.IfClosure.getInstance(var22, var24, var25);
    org.apache.commons.collections.Buffer var27 = org.apache.commons.collections.buffer.PredicatedBuffer.decorate((org.apache.commons.collections.Buffer)var17, var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.add(100, (java.lang.Object)var22);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);

  }

  public void test81() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestUnboundedFifoBuffer.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test82() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.list.TestFixedSizeList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test83() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.map.TestMultiKeyMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test84() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var2 = new org.apache.commons.collections.MultiHashMap(0);
    java.lang.Object[] var3 = new java.lang.Object[] { 0};
    org.apache.commons.collections.BinaryHeap var5 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var8 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var5, (java.util.Collection)var7);
    org.apache.commons.collections.BinaryHeap var10 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var12 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var13 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var10, (java.util.Collection)var12);
    boolean var14 = var7.containsAll((java.util.Collection)var10);
    int var15 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var7);
    org.apache.commons.collections.iterators.ObjectArrayListIterator var16 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var3, var15);
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var22 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var19, (java.util.Collection)var21);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var27 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var24, (java.util.Collection)var26);
    boolean var28 = var21.containsAll((java.util.Collection)var24);
    int var29 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var21);
    org.apache.commons.collections.MultiHashMap var30 = new org.apache.commons.collections.MultiHashMap(var29);
    org.apache.commons.collections.map.MultiKeyMap var31 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var32 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var31);
    org.apache.commons.collections.collection.TestSynchronizedCollection var34 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var35 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var36 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var37 = var36.isEqualsCheckable();
    var36.testListIndexOf();
    java.lang.Short var40 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var31, (java.lang.Object)var36, (java.lang.Short)(short)10);
    int var41 = var31.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.iterators.ObjectArrayIterator var42 = new org.apache.commons.collections.iterators.ObjectArrayIterator(var17, var29, var41);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + (short)10+ "'", var40.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test85() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    var2.testRemovingElementsAndIteratingForward();

  }

  public void test86() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.comparators.BooleanComparator var13 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var14 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var13);
    org.apache.commons.collections.comparators.ComparatorChain var15 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var14);
    org.apache.commons.collections.buffer.PriorityBuffer var16 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var14);
    boolean var17 = var12.retainAll((java.util.Collection)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var18 = var16.remove();
      fail("Expected exception of type org.apache.commons.collections.BufferUnderflowException");
    } catch (org.apache.commons.collections.BufferUnderflowException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test87() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var8 = new org.apache.commons.collections.Transformer[] { var7};
    org.apache.commons.collections.functors.ChainedTransformer var9 = new org.apache.commons.collections.functors.ChainedTransformer(var8);
    java.util.List var10 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var5, (org.apache.commons.collections.Transformer)var9);
    org.apache.commons.collections.Transformer[] var11 = var9.getTransformers();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);

  }

  public void test88() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestArrayListIterator var3 = new org.apache.commons.collections.iterators.TestArrayListIterator("hi!");

  }

  public void test89() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    java.lang.Object[] var5 = var4.toArray();
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var8 = var7.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var9 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var8);
    java.lang.String var10 = var9.toString();
    org.apache.commons.collections.set.TestAll var11 = new org.apache.commons.collections.set.TestAll(var10);
    org.apache.commons.collections.set.TestPredicatedSortedSet var12 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var10);
    org.apache.commons.collections.collection.TestSynchronizedCollection var14 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var15 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var18 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var19 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var21 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var28 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var31 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var28, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    java.lang.Boolean var37 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var23, (java.lang.Object)true, (java.lang.Boolean)var36);
    org.apache.commons.collections.collection.TestSynchronizedCollection var39 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var40 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var41 = var40.getCompatibilityVersion();
    var40.testValuesClearChangesMap();
    java.lang.String var43 = var40.getCompatibilityVersion();
    boolean var44 = var0.containsKey((java.lang.Object)var4, (java.lang.Object)var12, (java.lang.Object)"hi!", (java.lang.Object)var37, (java.lang.Object)var43);
    java.util.Set var45 = var12.makeEmptySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[  ]"+ "'", var8.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var10.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + (-1.0d)+ "'", var31.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + true+ "'", var37.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "3"+ "'", var41.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "3"+ "'", var43.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);

  }

  public void test90() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.map.TestReferenceIdentityMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test91() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestDoubleOrderedMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test92() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    org.apache.commons.collections.comparators.ComparatorChain var2 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var1);
    org.apache.commons.collections.comparators.ComparatorChain var3 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var2);
    org.apache.commons.collections.collection.TestSynchronizedCollection var5 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var6 = var5.countTestCases();
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var10 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var11 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var8, (java.util.Collection)var10);
    junit.framework.Test var12 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    org.apache.commons.collections.ResettableListIterator var14 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var13);
    org.apache.commons.collections.Transformer var15 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var16 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var14, var15);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    java.util.Collection var22 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var10, var15, (java.util.Collection)var18);
    org.apache.commons.collections.comparators.TransformingComparator var23 = new org.apache.commons.collections.comparators.TransformingComparator(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setComparator(var6, (java.util.Comparator)var23);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test93() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.iterators.LoopingIterator var5 = new org.apache.commons.collections.iterators.LoopingIterator((java.util.Collection)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = var5.next();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test94() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.set.TestPredicatedSet.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test95() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var10 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var11 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var8, (java.util.Collection)var10);
    junit.framework.Test var12 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    org.apache.commons.collections.ResettableListIterator var14 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var13);
    org.apache.commons.collections.Transformer var15 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var16 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var14, var15);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    java.util.Collection var22 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var10, var15, (java.util.Collection)var18);
    boolean var23 = var5.removeAll((java.util.Collection)var18);
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    float var28 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var25, (java.lang.Object)100L, 100.0f);
    org.apache.commons.collections.MultiHashMap var31 = new org.apache.commons.collections.MultiHashMap(0);
    boolean var33 = var31.equals((java.lang.Object)1L);
    java.lang.Object var34 = var25.put((java.lang.Object)(-1.0d), (java.lang.Object)1L);
    org.apache.commons.collections.Buffer var35 = org.apache.commons.collections.BufferUtils.blockingBuffer((org.apache.commons.collections.Buffer)var18, 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + 1L+ "'", var34.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);

  }

  public void test96() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    int var16 = var15.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.buffer.BoundedFifoBuffer var17 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test97() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestObjectArrayListIterator2.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test98() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var3 = var2.getCompatibilityVersion();
    var2.testValuesClearChangesMap();
    java.lang.String var5 = var2.getCompatibilityVersion();
    var2.testMapToString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "3"+ "'", var3.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "3"+ "'", var5.equals("3"));

  }

  public void test99() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    var6.testCollectionAdd();
    org.apache.commons.collections.BulkTest var8 = var6.bulkTestSortedSetTailSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test100() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    boolean var2 = var1.isEmpty();
    org.apache.commons.collections.buffer.PriorityBuffer var3 = new org.apache.commons.collections.buffer.PriorityBuffer(var2);
    java.lang.String var4 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ]"+ "'", var4.equals("[  ]"));

  }

  public void test101() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    int var6 = var0.size();
    org.apache.commons.collections.map.IdentityMap var7 = new org.apache.commons.collections.map.IdentityMap((java.util.Map)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = var0.firstKey();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test102() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var3 = var2.getCompatibilityVersion();
    var2.testValuesClearChangesMap();
    var2.testKeySetRemoveChangesMap();
    java.util.Map var6 = var2.makeFullMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "3"+ "'", var3.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test103() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.set.TestUnmodifiableSet.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test104() throws Throwable {

    org.apache.commons.collections.BinaryHeap var2 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var4 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var5 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var2, (java.util.Collection)var4);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var10 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var7, (java.util.Collection)var9);
    org.apache.commons.collections.BinaryHeap var12 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var15 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var12, (java.util.Collection)var14);
    boolean var16 = var9.containsAll((java.util.Collection)var12);
    java.util.Collection var17 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var4, (java.util.Collection)var9);
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var22 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var19, (java.util.Collection)var21);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var27 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var24, (java.util.Collection)var26);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var32 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var29, (java.util.Collection)var31);
    boolean var33 = var26.containsAll((java.util.Collection)var29);
    java.util.Collection var34 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var21, (java.util.Collection)var26);
    boolean var35 = var4.retainAll((java.util.Collection)var26);
    boolean var36 = org.apache.commons.collections.CollectionUtils.isEmpty((java.util.Collection)var26);
    org.apache.commons.collections.comparators.BooleanComparator var37 = org.apache.commons.collections.comparators.BooleanComparator.getTrueFirstComparator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var38 = org.apache.commons.collections.ComparatorUtils.min((java.lang.Object)(byte)100, (java.lang.Object)var26, (java.util.Comparator)var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);

  }

  public void test105() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var3 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var4 = var3.supportsSet();
    var3.testIterator();
    var3.testEqualsNull();
    var3.testWalkForwardAndBack();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test106() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    junit.framework.Test var5 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    org.apache.commons.collections.ResettableListIterator var7 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var6);
    org.apache.commons.collections.Transformer var8 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var9 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var7, var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.util.Collection var15 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var3, var8, (java.util.Collection)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.buffer.BoundedFifoBuffer var16 = new org.apache.commons.collections.buffer.BoundedFifoBuffer((java.util.Collection)var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);

  }

  public void test107() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.set.TestMapBackedSet.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test108() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.BeanMap var16 = new org.apache.commons.collections.BeanMap((java.lang.Object)var15);
    java.util.Set var17 = var16.entrySet();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var19 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    java.lang.Object var20 = var16.get((java.lang.Object)var19);
    var19.testDecorateFactory();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);

  }

  public void test109() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestSetUtils.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test110() throws Throwable {

    java.util.Comparator var0 = org.apache.commons.collections.ComparatorUtils.naturalComparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test111() throws Throwable {

    org.apache.commons.collections.Predicate var0 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var1 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.PredicateUtils.orPredicate(var0, var1);
    org.apache.commons.collections.Predicate[] var3 = new org.apache.commons.collections.Predicate[] { var1};
    org.apache.commons.collections.Predicate var4 = org.apache.commons.collections.PredicateUtils.anyPredicate(var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.buffer.UnboundedFifoBuffer var7 = new org.apache.commons.collections.buffer.UnboundedFifoBuffer(10);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.ResettableListIterator var10 = org.apache.commons.collections.IteratorUtils.arrayListIterator((java.lang.Object)var4, 10, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test112() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    var5.testToArrayPopulate();
    var5.testOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test113() throws Throwable {

    org.apache.commons.collections.map.HashedMap var0 = new org.apache.commons.collections.map.HashedMap();

  }

  public void test114() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestAll.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test115() throws Throwable {

    org.apache.commons.collections.Predicate var0 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var1 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.PredicateUtils.orPredicate(var0, var1);
    org.apache.commons.collections.Closure var3 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var4 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var5 = org.apache.commons.collections.functors.IfClosure.getInstance(var1, var3, var4);
    org.apache.commons.collections.map.DefaultedMap var7 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var8 = var7.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var9 = org.apache.commons.collections.set.ListOrderedSet.decorate(var8);
    java.lang.Object[] var10 = var9.toArray();
    org.apache.commons.collections.list.TreeList var11 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var9);
    org.apache.commons.collections.list.TestTreeList.benchmark((java.util.List)var11);
    org.apache.commons.collections.Predicate var13 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var14 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var15 = org.apache.commons.collections.PredicateUtils.orPredicate(var13, var14);
    org.apache.commons.collections.Closure var16 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var17 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var18 = org.apache.commons.collections.functors.IfClosure.getInstance(var14, var16, var17);
    int var19 = var11.indexOf((java.lang.Object)var17);
    org.apache.commons.collections.Closure var20 = org.apache.commons.collections.ClosureUtils.chainedClosure(var4, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test116() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    org.apache.commons.collections.TestListUtils var7 = new org.apache.commons.collections.TestListUtils(var4);
    java.lang.String[] var8 = var7.ignoredTests();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test117() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    java.lang.Object[] var5 = var4.toArray();
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var8 = var7.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var9 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var8);
    java.lang.String var10 = var9.toString();
    org.apache.commons.collections.set.TestAll var11 = new org.apache.commons.collections.set.TestAll(var10);
    org.apache.commons.collections.set.TestPredicatedSortedSet var12 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var10);
    org.apache.commons.collections.collection.TestSynchronizedCollection var14 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var15 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var18 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var19 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var21 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var28 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var31 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var28, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    java.lang.Boolean var37 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var23, (java.lang.Object)true, (java.lang.Boolean)var36);
    org.apache.commons.collections.collection.TestSynchronizedCollection var39 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var40 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var41 = var40.getCompatibilityVersion();
    var40.testValuesClearChangesMap();
    java.lang.String var43 = var40.getCompatibilityVersion();
    boolean var44 = var0.containsKey((java.lang.Object)var4, (java.lang.Object)var12, (java.lang.Object)"hi!", (java.lang.Object)var37, (java.lang.Object)var43);
    org.apache.commons.collections.map.MultiKeyMap var45 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.map.DefaultedMap var47 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var48 = var47.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var49 = org.apache.commons.collections.set.ListOrderedSet.decorate(var48);
    java.lang.Object[] var50 = var49.toArray();
    org.apache.commons.collections.BinaryHeap var52 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var53 = var52.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var54 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var53);
    java.lang.String var55 = var54.toString();
    org.apache.commons.collections.set.TestAll var56 = new org.apache.commons.collections.set.TestAll(var55);
    org.apache.commons.collections.set.TestPredicatedSortedSet var57 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var55);
    org.apache.commons.collections.collection.TestSynchronizedCollection var59 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var60 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var63 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var64 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var66 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.map.DefaultedMap var68 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var71 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var68, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var73 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var76 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var73, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var78 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var80 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var81 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var78, (java.util.Collection)var80);
    java.lang.Boolean var82 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var68, (java.lang.Object)true, (java.lang.Boolean)var81);
    org.apache.commons.collections.collection.TestSynchronizedCollection var84 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var85 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var86 = var85.getCompatibilityVersion();
    var85.testValuesClearChangesMap();
    java.lang.String var88 = var85.getCompatibilityVersion();
    boolean var89 = var45.containsKey((java.lang.Object)var49, (java.lang.Object)var57, (java.lang.Object)"hi!", (java.lang.Object)var82, (java.lang.Object)var88);
    java.lang.Object[] var90 = var49.toArray();
    org.apache.commons.collections.MultiHashMap var93 = new org.apache.commons.collections.MultiHashMap(100, 1.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var94 = var0.put((java.lang.Object)var49, (java.lang.Object)1.0f);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[  ]"+ "'", var8.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var10.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + (-1.0d)+ "'", var31.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + true+ "'", var37.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "3"+ "'", var41.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "3"+ "'", var43.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[  ]"+ "'", var53.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var55.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + (-1.0d)+ "'", var71.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + (-1.0d)+ "'", var76.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + true+ "'", var82.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "3"+ "'", var86.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "3"+ "'", var88.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var90 == null);

  }

  public void test118() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var1 = var0.isEmpty();
    java.util.Map var2 = org.apache.commons.collections.MapUtils.invertMap((java.util.Map)var0);
    java.util.Map var3 = org.apache.commons.collections.MapUtils.fixedSizeMap((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var4 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    org.apache.commons.collections.map.SingletonMap var9 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var4, (java.lang.Object)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.SortedMap var10 = var0.headMap((java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test119() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    org.apache.commons.collections.iterators.ObjectArrayListIterator var4 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var3);
    int var5 = var4.getStartIndex();
    junit.framework.Test var6 = org.apache.commons.collections.map.TestStaticBucketMap.suite();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.set((java.lang.Object)var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test120() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var10 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var12 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var13 = var12.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var14 = org.apache.commons.collections.set.ListOrderedSet.decorate(var13);
    org.apache.commons.collections.map.SingletonMap var15 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var10, (java.lang.Object)var13);
    boolean var17 = var15.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var18 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var19 = var18.getFullElements();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var22 = var21.countTestCases();
    org.apache.commons.collections.Predicate var23 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var22);
    java.lang.Object var24 = org.apache.commons.collections.CollectionUtils.get((java.lang.Object)var19, var22);
    java.lang.Object var25 = var0.remove((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)10+ "'", var9.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "the"+ "'", var24.equals("the"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);

  }

  public void test121() throws Throwable {

    org.apache.commons.collections.iterators.ArrayIterator var0 = new org.apache.commons.collections.iterators.ArrayIterator();
    org.apache.commons.collections.Transformer var1 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var2 = new org.apache.commons.collections.Transformer[] { var1};
    org.apache.commons.collections.functors.ChainedTransformer var3 = new org.apache.commons.collections.functors.ChainedTransformer(var2);
    org.apache.commons.collections.iterators.TransformIterator var4 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var0, (org.apache.commons.collections.Transformer)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    int var16 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var8);
    org.apache.commons.collections.MultiHashMap var17 = new org.apache.commons.collections.MultiHashMap(var16);
    org.apache.commons.collections.Predicate var18 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var19 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var20 = org.apache.commons.collections.PredicateUtils.orPredicate(var18, var19);
    org.apache.commons.collections.Predicate[] var21 = new org.apache.commons.collections.Predicate[] { var19};
    org.apache.commons.collections.Predicate var22 = org.apache.commons.collections.PredicateUtils.anyPredicate(var21);
    org.apache.commons.collections.map.DefaultedMap var24 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var25 = var24.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var26 = org.apache.commons.collections.set.ListOrderedSet.decorate(var25);
    java.lang.Object[] var27 = var26.toArray();
    org.apache.commons.collections.list.TreeList var28 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var26);
    org.apache.commons.collections.MultiHashMap var30 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var31 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    java.util.ListIterator var32 = var28.listIterator(0);
    org.apache.commons.collections.Predicate var33 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var34 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var35 = org.apache.commons.collections.PredicateUtils.orPredicate(var33, var34);
    int var36 = var28.indexOf((java.lang.Object)var33);
    java.util.Map var37 = org.apache.commons.collections.MapUtils.predicatedMap((java.util.Map)var17, var22, var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setArray((java.lang.Object)var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);

  }

  public void test122() throws Throwable {

    org.apache.commons.collections.BinaryHeap var2 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var3 = var2.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var4 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var3);
    java.lang.String var5 = var4.toString();
    org.apache.commons.collections.set.TestAll var6 = new org.apache.commons.collections.set.TestAll(var5);
    org.apache.commons.collections.set.TestPredicatedSortedSet var7 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var5);
    boolean var8 = var7.isEqualsCheckable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.assertEquals(false, var8);
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[  ]"+ "'", var3.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var5.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test123() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    int var10 = var0.size();
    org.apache.commons.collections.FastArrayList var11 = new org.apache.commons.collections.FastArrayList(var10);
    java.lang.String var12 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)10+ "'", var9.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "FastArrayList[[]]"+ "'", var12.equals("FastArrayList[[]]"));

  }

  public void test124() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.list.TestGrowthList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test125() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var10 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var11 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var8, (java.util.Collection)var10);
    junit.framework.Test var12 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    org.apache.commons.collections.ResettableListIterator var14 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var13);
    org.apache.commons.collections.Transformer var15 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var16 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var14, var15);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    java.util.Collection var22 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var10, var15, (java.util.Collection)var18);
    boolean var23 = var5.removeAll((java.util.Collection)var18);
    var18.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test126() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestPredicateUtils.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test127() throws Throwable {

    org.apache.commons.collections.buffer.UnboundedFifoBuffer var0 = new org.apache.commons.collections.buffer.UnboundedFifoBuffer();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var1 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var3 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var4 = var3.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var5 = org.apache.commons.collections.set.ListOrderedSet.decorate(var4);
    org.apache.commons.collections.map.SingletonMap var6 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.Properties var7 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var1);
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var10 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var13 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var14 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var16 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var17 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var18 = var17.isEmpty();
    org.apache.commons.collections.MultiHashMap var20 = new org.apache.commons.collections.MultiHashMap(0);
    float var23 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var20, (java.lang.Object)100L, 100.0f);
    boolean var24 = var20.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var18, var24);
    org.apache.commons.collections.BinaryHeap var27 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var28 = var27.toString();
    org.apache.commons.collections.MapUtils.safeAddToMap((java.util.Map)var7, (java.lang.Object)var24, (java.lang.Object)var28);
    org.apache.commons.collections.collection.TestAll var30 = new org.apache.commons.collections.collection.TestAll(var28);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var31 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var33 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var34 = var33.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var35 = org.apache.commons.collections.set.ListOrderedSet.decorate(var34);
    org.apache.commons.collections.map.SingletonMap var36 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var31, (java.lang.Object)var34);
    int var37 = var31.size();
    org.apache.commons.collections.map.IdentityMap var38 = new org.apache.commons.collections.map.IdentityMap((java.util.Map)var31);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var39 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var40 = var39.isEmpty();
    boolean var41 = var38.containsValue((java.lang.Object)var39);
    org.apache.commons.collections.keyvalue.MultiKey var42 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var0, (java.lang.Object)var28, (java.lang.Object)var39);
    java.lang.String var43 = var42.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[  ]"+ "'", var28.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "MultiKey[[], [  ], {}]"+ "'", var43.equals("MultiKey[[], [  ], {}]"));

  }

  public void test128() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.list.TestSetUniqueList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test129() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var6 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var8 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var9 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var10 = var9.isEmpty();
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    float var15 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var12, (java.lang.Object)100L, 100.0f);
    boolean var16 = var12.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var10, var16);
    org.apache.commons.collections.bag.TestTypedSortedBag var18 = new org.apache.commons.collections.bag.TestTypedSortedBag("hi!");
    var18.testDecorate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test130() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getTrueFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test131() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.map.TestTransformedSortedMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test132() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var16 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var17 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var14, (java.util.Collection)var16);
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var22 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var19, (java.util.Collection)var21);
    boolean var23 = var16.containsAll((java.util.Collection)var19);
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var27 = var19.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var28 = new org.apache.commons.collections.SequencedHashMap(0);
    int var29 = var28.size();
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var34 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var31, (java.util.Collection)var33);
    org.apache.commons.collections.BinaryHeap var36 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var39 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var36, (java.util.Collection)var38);
    org.apache.commons.collections.BinaryHeap var41 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var44 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var41, (java.util.Collection)var43);
    boolean var45 = var38.containsAll((java.util.Collection)var41);
    java.util.Collection var46 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var33, (java.util.Collection)var38);
    int var47 = var28.indexOf((java.lang.Object)var38);
    org.apache.commons.collections.BeanMap var48 = new org.apache.commons.collections.BeanMap();
    int var49 = var48.size();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var52 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var53 = var52.isEmpty();
    org.apache.commons.collections.map.LRUMap var54 = new org.apache.commons.collections.map.LRUMap(100, 1.0f, var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.map.ReferenceIdentityMap var55 = new org.apache.commons.collections.map.ReferenceIdentityMap(var11, var47, var49, 1.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test133() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    int var16 = var15.size();
    org.apache.commons.collections.map.MultiKeyMap var17 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var18 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var17);
    org.apache.commons.collections.collection.TestSynchronizedCollection var20 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var21 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var22 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var23 = var22.isEqualsCheckable();
    var22.testListIndexOf();
    java.lang.Short var26 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var17, (java.lang.Object)var22, (java.lang.Short)(short)10);
    int var27 = var17.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var28 = var15.getValue(var27);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (short)10+ "'", var26.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test134() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var2 = new org.apache.commons.collections.MultiHashMap(0);
    java.lang.Object[] var3 = new java.lang.Object[] { 0};
    org.apache.commons.collections.BinaryHeap var5 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var8 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var5, (java.util.Collection)var7);
    org.apache.commons.collections.BinaryHeap var10 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var12 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var13 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var10, (java.util.Collection)var12);
    boolean var14 = var7.containsAll((java.util.Collection)var10);
    int var15 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var7);
    org.apache.commons.collections.iterators.ObjectArrayListIterator var16 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var3, var15);
    org.apache.commons.collections.comparators.BooleanComparator var17 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var18 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var17);
    org.apache.commons.collections.comparators.ComparatorChain var19 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var18);
    org.apache.commons.collections.comparators.ComparatorChain var20 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var19);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(var15, (java.util.Comparator)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);

  }

  public void test135() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    var5.testOrdering();
    var5.testIteratorRemoveProtectsInvariants();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test136() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var16 = var15.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var16);
    java.lang.String var18 = var17.toString();
    org.apache.commons.collections.bag.TestTreeBag var19 = new org.apache.commons.collections.bag.TestTreeBag(var18);
    org.apache.commons.collections.iterators.TestIteratorChain var20 = new org.apache.commons.collections.iterators.TestIteratorChain(var18);
    java.lang.Object var21 = var12.nextKey((java.lang.Object)var18);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var12);
    java.lang.Object var23 = var22.firstKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[  ]"+ "'", var16.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var18.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);

  }

  public void test137() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.bag.TestPredicatedSortedBag.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test138() throws Throwable {

    org.apache.commons.collections.iterators.ArrayIterator var0 = new org.apache.commons.collections.iterators.ArrayIterator();
    org.apache.commons.collections.BinaryHeap var2 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var4 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var5 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var2, (java.util.Collection)var4);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var10 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var7, (java.util.Collection)var9);
    org.apache.commons.collections.BinaryHeap var12 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var15 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var12, (java.util.Collection)var14);
    boolean var16 = var9.containsAll((java.util.Collection)var12);
    java.util.Collection var17 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var4, (java.util.Collection)var9);
    org.apache.commons.collections.Buffer var18 = org.apache.commons.collections.buffer.BlockingBuffer.decorate((org.apache.commons.collections.Buffer)var9);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var22 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var23 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var20, (java.util.Collection)var22);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var27 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var28 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var25, (java.util.Collection)var27);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var32 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var33 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var30, (java.util.Collection)var32);
    boolean var34 = var27.containsAll((java.util.Collection)var30);
    java.util.Collection var35 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var22, (java.util.Collection)var27);
    java.util.Collection var36 = org.apache.commons.collections.CollectionUtils.disjunction((java.util.Collection)var9, (java.util.Collection)var27);
    org.apache.commons.collections.Predicate var37 = org.apache.commons.collections.functors.AllPredicate.getInstance((java.util.Collection)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setArray((java.lang.Object)var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);

  }

  public void test139() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.collection.TestPredicatedCollection.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test140() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = new org.apache.commons.collections.comparators.BooleanComparator();

  }

  public void test141() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var2 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var4 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var5 = var4.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var6 = org.apache.commons.collections.set.ListOrderedSet.decorate(var5);
    org.apache.commons.collections.map.SingletonMap var7 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var2, (java.lang.Object)var5);
    java.util.Properties var8 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var2);
    org.apache.commons.collections.collection.TestSynchronizedCollection var10 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var11 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var14 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var15 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var17 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var18 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var19 = var18.isEmpty();
    org.apache.commons.collections.MultiHashMap var21 = new org.apache.commons.collections.MultiHashMap(0);
    float var24 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var21, (java.lang.Object)100L, 100.0f);
    boolean var25 = var21.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var19, var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var29 = var28.toString();
    org.apache.commons.collections.MapUtils.safeAddToMap((java.util.Map)var8, (java.lang.Object)var25, (java.lang.Object)var29);
    boolean var31 = org.apache.commons.collections.MapUtils.isNotEmpty((java.util.Map)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.map.ReferenceMap var32 = new org.apache.commons.collections.map.ReferenceMap((-1), 1, var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[  ]"+ "'", var29.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test142() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    java.util.Map var7 = var6.makeEmptyMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test143() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    var1.testIllegalAdd();

  }

  public void test144() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.buffer.UnboundedFifoBuffer var2 = new org.apache.commons.collections.buffer.UnboundedFifoBuffer();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var3 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var5 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var6 = var5.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var7 = org.apache.commons.collections.set.ListOrderedSet.decorate(var6);
    org.apache.commons.collections.map.SingletonMap var8 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var3, (java.lang.Object)var6);
    java.util.Properties var9 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var3);
    org.apache.commons.collections.collection.TestSynchronizedCollection var11 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var12 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var15 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var16 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var18 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var19 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var20 = var19.isEmpty();
    org.apache.commons.collections.MultiHashMap var22 = new org.apache.commons.collections.MultiHashMap(0);
    float var25 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var22, (java.lang.Object)100L, 100.0f);
    boolean var26 = var22.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var20, var26);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var30 = var29.toString();
    org.apache.commons.collections.MapUtils.safeAddToMap((java.util.Map)var9, (java.lang.Object)var26, (java.lang.Object)var30);
    org.apache.commons.collections.collection.TestAll var32 = new org.apache.commons.collections.collection.TestAll(var30);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var33 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var35 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var36 = var35.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var37 = org.apache.commons.collections.set.ListOrderedSet.decorate(var36);
    org.apache.commons.collections.map.SingletonMap var38 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var33, (java.lang.Object)var36);
    int var39 = var33.size();
    org.apache.commons.collections.map.IdentityMap var40 = new org.apache.commons.collections.map.IdentityMap((java.util.Map)var33);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var41 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var42 = var41.isEmpty();
    boolean var43 = var40.containsValue((java.lang.Object)var41);
    org.apache.commons.collections.keyvalue.MultiKey var44 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var2, (java.lang.Object)var30, (java.lang.Object)var41);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var45 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var47 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var48 = var47.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var49 = org.apache.commons.collections.set.ListOrderedSet.decorate(var48);
    org.apache.commons.collections.map.SingletonMap var50 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var45, (java.lang.Object)var48);
    java.util.Properties var51 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var45);
    org.apache.commons.collections.collection.TestSynchronizedCollection var53 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var54 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var57 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var58 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var60 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var61 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var62 = var61.isEmpty();
    org.apache.commons.collections.MultiHashMap var64 = new org.apache.commons.collections.MultiHashMap(0);
    float var67 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var64, (java.lang.Object)100L, 100.0f);
    boolean var68 = var64.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var62, var68);
    org.apache.commons.collections.BinaryHeap var71 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var72 = var71.toString();
    org.apache.commons.collections.MapUtils.safeAddToMap((java.util.Map)var51, (java.lang.Object)var68, (java.lang.Object)var72);
    boolean var74 = org.apache.commons.collections.MapUtils.isNotEmpty((java.util.Map)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var75 = var0.put((java.lang.Object)var41, (java.lang.Object)var74);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[  ]"+ "'", var30.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "[  ]"+ "'", var72.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test145() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    org.apache.commons.collections.iterators.ObjectArrayListIterator var4 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var3);
    int var5 = var4.getStartIndex();
    java.lang.Object var6 = var4.next();
    java.util.ListIterator var7 = org.apache.commons.collections.IteratorUtils.unmodifiableListIterator((java.util.ListIterator)var4);
    boolean var8 = var4.hasPrevious();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test146() throws Throwable {

    org.apache.commons.collections.map.TestListOrderedMap2 var1 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    org.apache.commons.collections.set.TestSynchronizedSortedSet var2 = new org.apache.commons.collections.set.TestSynchronizedSortedSet("hi!");

  }

  public void test147() throws Throwable {

    org.apache.commons.collections.map.TestListOrderedMap2 var1 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    org.apache.commons.collections.Factory var2 = org.apache.commons.collections.FactoryUtils.prototypeFactory((java.lang.Object)"hi!");
    org.apache.commons.collections.iterators.TestArrayListIterator var3 = new org.apache.commons.collections.iterators.TestArrayListIterator("hi!");
    boolean var4 = var3.supportsRemove();
    var3.testListIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test148() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.map.TestDefaultedMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test149() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    java.util.List var7 = org.apache.commons.collections.list.FixedSizeList.decorate((java.util.List)var5);
    var5.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test150() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    boolean var4 = var1.containsKey((java.lang.Object)1.0d);
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var6 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var7 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var8 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.bag.TestTransformedSortedBag var9 = new org.apache.commons.collections.bag.TestTransformedSortedBag("");
    org.apache.commons.collections.Bag var10 = var9.makeBag();
    org.apache.commons.collections.BinaryHeap var12 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var15 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var12, (java.util.Collection)var14);
    junit.framework.Test var16 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    org.apache.commons.collections.ResettableListIterator var18 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var17);
    org.apache.commons.collections.Transformer var19 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var20 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var18, var19);
    org.apache.commons.collections.BinaryHeap var22 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var25 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var22, (java.util.Collection)var24);
    java.util.Collection var26 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var14, var19, (java.util.Collection)var22);
    org.apache.commons.collections.comparators.TransformingComparator var27 = new org.apache.commons.collections.comparators.TransformingComparator(var19);
    org.apache.commons.collections.Bag var28 = org.apache.commons.collections.BagUtils.transformedBag(var10, var19);
    java.util.Map var29 = org.apache.commons.collections.map.LazyMap.decorate((java.util.Map)var1, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);

  }

  public void test151() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.map.DefaultedMap var13 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var14 = var13.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var15 = org.apache.commons.collections.set.ListOrderedSet.decorate(var14);
    java.lang.Object[] var16 = var15.toArray();
    org.apache.commons.collections.list.TreeList var17 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var15);
    org.apache.commons.collections.MultiHashMap var19 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var20 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    java.util.ListIterator var21 = var17.listIterator(0);
    boolean var22 = org.apache.commons.collections.CollectionUtils.isEqualCollection((java.util.Collection)var3, (java.util.Collection)var17);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var27 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var24, (java.util.Collection)var26);
    org.apache.commons.collections.map.DefaultedMap var29 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var30 = var29.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var31 = org.apache.commons.collections.set.ListOrderedSet.decorate(var30);
    java.lang.Object[] var32 = var31.toArray();
    org.apache.commons.collections.list.TreeList var33 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var31);
    java.util.List var34 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var26, (java.util.Collection)var33);
    org.apache.commons.collections.list.SetUniqueList var35 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var33);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var36 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var38 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var39 = var38.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var40 = org.apache.commons.collections.set.ListOrderedSet.decorate(var39);
    org.apache.commons.collections.map.SingletonMap var41 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var36, (java.lang.Object)var39);
    int var42 = var36.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var44 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var45 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var48 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var49 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var51 = var35.subList(var42, 0);
    boolean var52 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var35);
    java.util.ListIterator var53 = var35.listIterator();
    org.apache.commons.collections.BinaryHeap var55 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var57 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var58 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var55, (java.util.Collection)var57);
    org.apache.commons.collections.BinaryHeap var60 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var62 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var63 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var60, (java.util.Collection)var62);
    boolean var64 = var57.containsAll((java.util.Collection)var60);
    org.apache.commons.collections.MultiHashMap var66 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var67 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var68 = var60.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var69 = new org.apache.commons.collections.SequencedHashMap(0);
    int var70 = var69.size();
    org.apache.commons.collections.BinaryHeap var72 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var74 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var75 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var72, (java.util.Collection)var74);
    junit.framework.Test var76 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var77 = new java.lang.Object[] { var76};
    org.apache.commons.collections.ResettableListIterator var78 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var77);
    org.apache.commons.collections.Transformer var79 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var80 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var78, var79);
    org.apache.commons.collections.BinaryHeap var82 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var84 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var85 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var82, (java.util.Collection)var84);
    java.util.Collection var86 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var74, var79, (java.util.Collection)var82);
    org.apache.commons.collections.comparators.TransformingComparator var87 = new org.apache.commons.collections.comparators.TransformingComparator(var79);
    org.apache.commons.collections.Predicate var88 = org.apache.commons.collections.functors.TransformerPredicate.getInstance(var79);
    var35.add(var70, (java.lang.Object)var88);
    org.apache.commons.collections.map.DefaultedMap var91 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var92 = var91.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var93 = org.apache.commons.collections.set.ListOrderedSet.decorate(var92);
    java.lang.Object[] var94 = var93.toArray();
    org.apache.commons.collections.list.TreeList var95 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var93);
    java.util.Collection var96 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var95);
    java.util.List var97 = org.apache.commons.collections.list.FixedSizeList.decorate((java.util.List)var95);
    boolean var98 = var35.addAll((java.util.Collection)var95);
    java.util.List var99 = org.apache.commons.collections.ListUtils.subtract((java.util.List)var17, (java.util.List)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var97 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var99 == null);

  }

  public void test152() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.buffer.TestUnboundedFifoBuffer.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test153() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var6 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.map.LinkedMap var8 = new org.apache.commons.collections.map.LinkedMap(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test154() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    java.util.ListIterator var29 = var12.listIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);

  }

  public void test155() throws Throwable {

    junit.framework.Assert.assertEquals((byte)0, (byte)0);

  }

  public void test156() throws Throwable {

    org.apache.commons.collections.BagUtils var0 = new org.apache.commons.collections.BagUtils();

  }

  public void test157() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getTrueFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    org.apache.commons.collections.MultiHashMap var4 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var5 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var10 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var7, (java.util.Collection)var9);
    org.apache.commons.collections.BinaryHeap var12 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var15 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var12, (java.util.Collection)var14);
    boolean var16 = var9.containsAll((java.util.Collection)var12);
    int var17 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var9);
    org.apache.commons.collections.ResettableIterator var18 = org.apache.commons.collections.IteratorUtils.arrayIterator(var2, 0, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);

  }

  public void test158() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.functors.ExceptionTransformer.getInstance();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    java.lang.Object[] var12 = var11.toArray();
    org.apache.commons.collections.list.TreeList var13 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var11);
    java.util.Collection var14 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var13);
    org.apache.commons.collections.Transformer var15 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var16 = new org.apache.commons.collections.Transformer[] { var15};
    org.apache.commons.collections.functors.ChainedTransformer var17 = new org.apache.commons.collections.functors.ChainedTransformer(var16);
    java.util.List var18 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var13, (org.apache.commons.collections.Transformer)var17);
    java.util.Map var19 = org.apache.commons.collections.MapUtils.transformedMap((java.util.Map)var0, var7, (org.apache.commons.collections.Transformer)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);

  }

  public void test159() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var1 = var0.isEmpty();
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var4 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var4.testComparator();
    org.apache.commons.collections.keyvalue.MultiKey var6 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var0, (java.lang.Object)var4);
    var4.testMapGet();
    var4.testComparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test160() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    int var16 = var15.size();
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    boolean var32 = var25.containsAll((java.util.Collection)var28);
    java.util.Collection var33 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var25);
    int var34 = var15.indexOf((java.lang.Object)var25);
    java.lang.String var35 = var15.toString();
    org.apache.commons.collections.map.TestPredicatedSortedMap var36 = new org.apache.commons.collections.map.TestPredicatedSortedMap(var35);
    java.lang.String var37 = var36.getCompatibilityVersion();
    var36.testMapGet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "3.1"+ "'", var37.equals("3.1"));

  }

  public void test161() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var16 = var15.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var16);
    java.lang.String var18 = var17.toString();
    org.apache.commons.collections.bag.TestTreeBag var19 = new org.apache.commons.collections.bag.TestTreeBag(var18);
    org.apache.commons.collections.iterators.TestIteratorChain var20 = new org.apache.commons.collections.iterators.TestIteratorChain(var18);
    java.lang.Object var21 = var12.nextKey((java.lang.Object)var18);
    org.apache.commons.collections.bidimap.DualHashBidiMap var22 = new org.apache.commons.collections.bidimap.DualHashBidiMap();
    org.apache.commons.collections.collection.TestSynchronizedCollection var24 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var25 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var26 = var22.removeValue((java.lang.Object)"hi!");
    float var27 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var12, (java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[  ]"+ "'", var16.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var18.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.0f);

  }

  public void test162() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var8 = new org.apache.commons.collections.Transformer[] { var7};
    org.apache.commons.collections.functors.ChainedTransformer var9 = new org.apache.commons.collections.functors.ChainedTransformer(var8);
    java.util.List var10 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var5, (org.apache.commons.collections.Transformer)var9);
    org.apache.commons.collections.iterators.ReverseListIterator var11 = new org.apache.commons.collections.iterators.ReverseListIterator(var10);
    var11.reset();
    boolean var13 = var11.hasPrevious();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test163() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.BeanMap var16 = new org.apache.commons.collections.BeanMap((java.lang.Object)var15);
    org.apache.commons.collections.MultiHashMap var18 = new org.apache.commons.collections.MultiHashMap(0);
    float var21 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var18, (java.lang.Object)100L, 100.0f);
    boolean var22 = var16.containsValue((java.lang.Object)100L);
    java.util.Iterator var23 = var16.entryIterator();
    java.lang.String var24 = var16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "BeanMap<true>"+ "'", var24.equals("BeanMap<true>"));

  }

  public void test164() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.buffer.TestTransformedBuffer.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test165() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    boolean var7 = var6.isEqualsCheckable();
    org.apache.commons.collections.Predicate var8 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var9 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var10 = org.apache.commons.collections.PredicateUtils.orPredicate(var8, var9);
    org.apache.commons.collections.Closure var11 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var12 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var13 = org.apache.commons.collections.functors.IfClosure.getInstance(var9, var11, var12);
    org.apache.commons.collections.Predicate var14 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var15 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var16 = org.apache.commons.collections.PredicateUtils.orPredicate(var14, var15);
    org.apache.commons.collections.Closure var17 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var18 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var19 = org.apache.commons.collections.functors.IfClosure.getInstance(var15, var17, var18);
    org.apache.commons.collections.map.DefaultedMap var21 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var24 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var21, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var26 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var29 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var26, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var34 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var31, (java.util.Collection)var33);
    java.lang.Boolean var35 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var21, (java.lang.Object)true, (java.lang.Boolean)var34);
    org.apache.commons.collections.map.DefaultedMap var38 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var41 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var38, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var43 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var46 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var43, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var50 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var51 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var48, (java.util.Collection)var50);
    java.lang.Boolean var52 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var38, (java.lang.Object)true, (java.lang.Boolean)var51);
    java.lang.Object var53 = var21.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var55 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var21, (java.lang.Object)1L);
    org.apache.commons.collections.Closure var56 = org.apache.commons.collections.functors.WhileClosure.getInstance(var9, var19, var55);
    org.apache.commons.collections.keyvalue.MultiKey var57 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var6, (java.lang.Object)var9);
    java.util.Collection var58 = var6.makeConfirmedCollection();
    org.apache.commons.collections.BulkTest var59 = var6.bulkTestSortedSetSubSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + (-1.0d)+ "'", var24.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + (-1.0d)+ "'", var29.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + true+ "'", var35.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + (-1.0d)+ "'", var41.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + (-1.0d)+ "'", var46.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + true+ "'", var52.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);

  }

  public void test166() throws Throwable {

    org.apache.commons.collections.comparators.ComparableComparator var0 = org.apache.commons.collections.comparators.ComparableComparator.getInstance();
    junit.framework.Test var1 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    org.apache.commons.collections.ResettableListIterator var3 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var2);
    org.apache.commons.collections.Transformer var4 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var5 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var3, var4);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var6 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var7 = var6.isEmpty();
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var10 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var10.testComparator();
    org.apache.commons.collections.keyvalue.MultiKey var12 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var6, (java.lang.Object)var10);
    boolean var13 = var6.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var14 = var0.compare((java.lang.Object)var3, (java.lang.Object)var13);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test167() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.bidimap.TestUnmodifiableBidiMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test168() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    var3.testListSetByIndexBoundsChecking2();
    var3.testListListIteratorNextRemoveNext();

  }

  public void test169() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var6 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var8 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.keyvalue.TestDefaultKeyValue var9 = new org.apache.commons.collections.keyvalue.TestDefaultKeyValue("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.assertEquals("hi!", 'a', '#');
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }

  }

  public void test170() throws Throwable {

    org.apache.commons.collections.list.TestNodeCachingLinkedList.compareSpeed();

  }

  public void test171() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var2.testComparator();
    var2.testMapContainsValue();

  }

  public void test172() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var8 = new org.apache.commons.collections.Transformer[] { var7};
    org.apache.commons.collections.functors.ChainedTransformer var9 = new org.apache.commons.collections.functors.ChainedTransformer(var8);
    java.util.List var10 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var5, (org.apache.commons.collections.Transformer)var9);
    org.apache.commons.collections.iterators.ReverseListIterator var11 = new org.apache.commons.collections.iterators.ReverseListIterator(var10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var16 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var13, (java.util.Collection)var15);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var19 = var18.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var20 = org.apache.commons.collections.set.ListOrderedSet.decorate(var19);
    java.lang.Object[] var21 = var20.toArray();
    org.apache.commons.collections.list.TreeList var22 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var20);
    java.util.List var23 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var15, (java.util.Collection)var22);
    org.apache.commons.collections.list.SetUniqueList var24 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var22);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var25 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var27 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var28 = var27.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var29 = org.apache.commons.collections.set.ListOrderedSet.decorate(var28);
    org.apache.commons.collections.map.SingletonMap var30 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var25, (java.lang.Object)var28);
    int var31 = var25.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var33 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var34 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var37 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var38 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var40 = var24.subList(var31, 0);
    org.apache.commons.collections.BinaryHeap var42 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var44 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var45 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var42, (java.util.Collection)var44);
    org.apache.commons.collections.map.DefaultedMap var47 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var48 = var47.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var49 = org.apache.commons.collections.set.ListOrderedSet.decorate(var48);
    java.lang.Object[] var50 = var49.toArray();
    org.apache.commons.collections.list.TreeList var51 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var49);
    java.util.List var52 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var44, (java.util.Collection)var51);
    org.apache.commons.collections.list.SetUniqueList var53 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var51);
    org.apache.commons.collections.comparators.BooleanComparator var54 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var55 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var54);
    org.apache.commons.collections.comparators.ComparatorChain var56 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var55);
    org.apache.commons.collections.buffer.PriorityBuffer var57 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var55);
    boolean var58 = var53.retainAll((java.util.Collection)var57);
    boolean var59 = var24.retainAll((java.util.Collection)var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.set((java.lang.Object)var53);
      fail("Expected exception of type org.apache.commons.collections.FunctorException");
    } catch (org.apache.commons.collections.FunctorException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test173() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    org.apache.commons.collections.comparators.ComparatorChain var2 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var1);
    org.apache.commons.collections.comparators.ComparatorChain var3 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var2);
    java.util.Comparator var4 = org.apache.commons.collections.ComparatorUtils.nullHighComparator((java.util.Comparator)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test174() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var8 = new org.apache.commons.collections.Transformer[] { var7};
    org.apache.commons.collections.functors.ChainedTransformer var9 = new org.apache.commons.collections.functors.ChainedTransformer(var8);
    java.util.List var10 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var5, (org.apache.commons.collections.Transformer)var9);
    org.apache.commons.collections.iterators.ReverseListIterator var11 = new org.apache.commons.collections.iterators.ReverseListIterator(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var12 = var11.next();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);

  }

  public void test175() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var1 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var2 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var1);
    org.apache.commons.collections.comparators.ComparatorChain var3 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var2);
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var6 = new org.apache.commons.collections.MultiHashMap(0);
    java.lang.Object[] var7 = new java.lang.Object[] { 0};
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var12 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var9, (java.util.Collection)var11);
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var16 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var17 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var14, (java.util.Collection)var16);
    boolean var18 = var11.containsAll((java.util.Collection)var14);
    int var19 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var11);
    org.apache.commons.collections.iterators.ObjectArrayListIterator var20 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var7, var19);
    java.util.Iterator[] var21 = new java.util.Iterator[] { var20};
    java.util.Iterator var22 = org.apache.commons.collections.IteratorUtils.collatedIterator((java.util.Comparator)var3, var21);
    org.apache.commons.collections.comparators.BooleanComparator var23 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var24 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var23);
    org.apache.commons.collections.comparators.ComparatorChain var25 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var24);
    org.apache.commons.collections.buffer.PriorityBuffer var26 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var24);
    org.apache.commons.collections.map.DefaultedMap var28 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var29 = var28.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var30 = org.apache.commons.collections.set.ListOrderedSet.decorate(var29);
    java.lang.Object[] var31 = var30.toArray();
    org.apache.commons.collections.list.TreeList var32 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var30);
    java.util.Collection var33 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var32);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var37 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var38 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var35, (java.util.Collection)var37);
    junit.framework.Test var39 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    org.apache.commons.collections.ResettableListIterator var41 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var40);
    org.apache.commons.collections.Transformer var42 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var43 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var41, var42);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var47 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var48 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var45, (java.util.Collection)var47);
    java.util.Collection var49 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var37, var42, (java.util.Collection)var45);
    boolean var50 = var32.removeAll((java.util.Collection)var45);
    var3.addComparator((java.util.Comparator)var24, var50);
    org.apache.commons.collections.BinaryHeap var52 = new org.apache.commons.collections.BinaryHeap(10, (java.util.Comparator)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test176() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    java.util.Collection var16 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var8);
    org.apache.commons.collections.Buffer var17 = org.apache.commons.collections.buffer.BlockingBuffer.decorate((org.apache.commons.collections.Buffer)var8);
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var22 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var19, (java.util.Collection)var21);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var27 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var24, (java.util.Collection)var26);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var32 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var29, (java.util.Collection)var31);
    boolean var33 = var26.containsAll((java.util.Collection)var29);
    java.util.Collection var34 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var21, (java.util.Collection)var26);
    java.util.Collection var35 = org.apache.commons.collections.CollectionUtils.disjunction((java.util.Collection)var8, (java.util.Collection)var26);
    org.apache.commons.collections.Transformer var36 = org.apache.commons.collections.functors.ConstantTransformer.getInstance((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);

  }

  public void test177() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var12 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    var12.testUnsupportedAdd();
    var12.testMaxSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test178() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var12 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    var12.testBufferOverflow();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test179() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    var1.testRemoveAll();

  }

  public void test180() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    boolean var7 = var6.isEqualsCheckable();
    java.lang.String var8 = var6.getCompatibilityVersion();
    var6.testCollectionToArray2();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "3.1"+ "'", var8.equals("3.1"));

  }

  public void test181() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    java.util.List var6 = var5.getComparableObjectsOrdered();
    var5.testComparatorChainOnMinvaluedCompatator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test182() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    int var6 = var0.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.map.CaseInsensitiveMap var8 = new org.apache.commons.collections.map.CaseInsensitiveMap(var6, (-1.0f));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test183() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    org.apache.commons.collections.BinaryHeap var32 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var34 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var35 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var32, (java.util.Collection)var34);
    org.apache.commons.collections.BinaryHeap var37 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var39 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var40 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var37, (java.util.Collection)var39);
    boolean var41 = var34.containsAll((java.util.Collection)var37);
    org.apache.commons.collections.MultiHashMap var43 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var44 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var45 = var37.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var46 = new org.apache.commons.collections.SequencedHashMap(0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var48 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var49 = var48.countTestCases();
    org.apache.commons.collections.list.GrowthList var50 = new org.apache.commons.collections.list.GrowthList(var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var51 = var12.subList(0, var49);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);

  }

  public void test184() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var6 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var8 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.keyvalue.TestDefaultKeyValue var9 = new org.apache.commons.collections.keyvalue.TestDefaultKeyValue("hi!");
    var9.testToString();

  }

  public void test185() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var12 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    var12.testConstructorException1();
    var12.testIsFull();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test186() throws Throwable {

    org.apache.commons.collections.map.CaseInsensitiveMap var0 = new org.apache.commons.collections.map.CaseInsensitiveMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    java.lang.Object[] var5 = var4.toArray();
    org.apache.commons.collections.list.TreeList var6 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var4);
    org.apache.commons.collections.MultiHashMap var8 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var9 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    java.util.ListIterator var10 = var6.listIterator(0);
    org.apache.commons.collections.Predicate var11 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var12 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var13 = org.apache.commons.collections.PredicateUtils.orPredicate(var11, var12);
    int var14 = var6.indexOf((java.lang.Object)var11);
    java.lang.Object var15 = org.apache.commons.collections.CollectionUtils.index((java.lang.Object)var0, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);

  }

  public void test187() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var2 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    org.apache.commons.collections.set.TestSynchronizedSortedSet var3 = new org.apache.commons.collections.set.TestSynchronizedSortedSet("hi!");

  }

  public void test188() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    boolean var3 = var1.equals((java.lang.Object)1L);
    org.apache.commons.collections.collection.TestSynchronizedCollection var5 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var6 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var7 = var6.getCompatibilityVersion();
    var6.testValuesClearChangesMap();
    var6.testKeySetRemoveChangesMap();
    var6.testClone();
    short var11 = org.apache.commons.collections.MapUtils.getShortValue((java.util.Map)var1, (java.lang.Object)var6);
    boolean var12 = var6.isRemoveSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "3"+ "'", var7.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test189() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.list.TestUnmodifiableList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test190() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    float var4 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var1, (java.lang.Object)100L, 100.0f);
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap((java.util.Map)var1);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var6 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var8 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var9 = var8.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var10 = org.apache.commons.collections.set.ListOrderedSet.decorate(var9);
    org.apache.commons.collections.map.SingletonMap var11 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var6, (java.lang.Object)var9);
    java.util.Properties var12 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var6);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    var12.putAll((java.util.Map)var18);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var22 = var21.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var23 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var22);
    java.lang.String var24 = var23.toString();
    org.apache.commons.collections.bag.TestTreeBag var25 = new org.apache.commons.collections.bag.TestTreeBag(var24);
    org.apache.commons.collections.iterators.TestIteratorChain var26 = new org.apache.commons.collections.iterators.TestIteratorChain(var24);
    java.lang.Object var27 = var18.nextKey((java.lang.Object)var24);
    java.util.Set var28 = org.apache.commons.collections.set.MapBackedSet.decorate((java.util.Map)var1, (java.lang.Object)var18);
    org.apache.commons.collections.collection.TestSynchronizedCollection var31 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var32 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    org.apache.commons.collections.keyvalue.TestDefaultMapEntry var33 = new org.apache.commons.collections.keyvalue.TestDefaultMapEntry("hi!");
    java.util.Map.Entry var34 = var33.makeMapEntry();
    boolean var35 = var1.containsValue((java.lang.Object)1.0f, (java.lang.Object)var33);
    org.apache.commons.collections.Factory var36 = org.apache.commons.collections.functors.ExceptionFactory.getInstance();
    org.apache.commons.collections.functors.FactoryTransformer var37 = new org.apache.commons.collections.functors.FactoryTransformer(var36);
    java.util.Map var38 = org.apache.commons.collections.map.DefaultedMap.decorate((java.util.Map)var1, var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[  ]"+ "'", var22.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var24.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);

  }

  public void test191() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    org.apache.commons.collections.iterators.TestIteratorChain var6 = new org.apache.commons.collections.iterators.TestIteratorChain(var4);
    var6.testEmptyChain();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test192() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.map.IdentityMap var16 = new org.apache.commons.collections.map.IdentityMap(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test193() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.iterators.TestCollatingIterator var2 = new org.apache.commons.collections.iterators.TestCollatingIterator("");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var2.testIterateEvenOdd();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test194() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var12 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    var12.testConstructorException1();
    var12.testConstructorException2();
    boolean var15 = var12.isNullSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test195() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.Predicate var5 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var6 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var7 = org.apache.commons.collections.PredicateUtils.orPredicate(var5, var6);
    org.apache.commons.collections.Closure var8 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var9 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var10 = org.apache.commons.collections.functors.IfClosure.getInstance(var6, var8, var9);
    org.apache.commons.collections.Buffer var11 = org.apache.commons.collections.buffer.PredicatedBuffer.decorate((org.apache.commons.collections.Buffer)var1, var6);
    org.apache.commons.collections.Predicate[] var12 = new org.apache.commons.collections.Predicate[] { var6};
    org.apache.commons.collections.Predicate var13 = org.apache.commons.collections.PredicateUtils.onePredicate(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test196() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    org.apache.commons.collections.list.TestUnmodifiableList var6 = new org.apache.commons.collections.list.TestUnmodifiableList(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test197() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    int var10 = var0.size();
    org.apache.commons.collections.FastArrayList var11 = new org.apache.commons.collections.FastArrayList(var10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var16 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var13, (java.util.Collection)var15);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var19 = var18.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var20 = org.apache.commons.collections.set.ListOrderedSet.decorate(var19);
    java.lang.Object[] var21 = var20.toArray();
    org.apache.commons.collections.list.TreeList var22 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var20);
    java.util.List var23 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var15, (java.util.Collection)var22);
    org.apache.commons.collections.list.SetUniqueList var24 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var22);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var25 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var27 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var28 = var27.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var29 = org.apache.commons.collections.set.ListOrderedSet.decorate(var28);
    org.apache.commons.collections.map.SingletonMap var30 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var25, (java.lang.Object)var28);
    int var31 = var25.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var33 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var34 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var37 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var38 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var40 = var24.subList(var31, 0);
    org.apache.commons.collections.BinaryHeap var42 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var44 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var45 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var42, (java.util.Collection)var44);
    org.apache.commons.collections.map.DefaultedMap var47 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var48 = var47.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var49 = org.apache.commons.collections.set.ListOrderedSet.decorate(var48);
    java.lang.Object[] var50 = var49.toArray();
    org.apache.commons.collections.list.TreeList var51 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var49);
    java.util.List var52 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var44, (java.util.Collection)var51);
    org.apache.commons.collections.list.SetUniqueList var53 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var51);
    org.apache.commons.collections.comparators.BooleanComparator var54 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var55 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var54);
    org.apache.commons.collections.comparators.ComparatorChain var56 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var55);
    org.apache.commons.collections.buffer.PriorityBuffer var57 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var55);
    boolean var58 = var53.retainAll((java.util.Collection)var57);
    boolean var59 = var24.retainAll((java.util.Collection)var53);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var62 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var63 = var62.isEmpty();
    org.apache.commons.collections.map.LRUMap var64 = new org.apache.commons.collections.map.LRUMap(100, 1.0f, var63);
    org.apache.commons.collections.Predicate var65 = org.apache.commons.collections.functors.IdentityPredicate.getInstance((java.lang.Object)var63);
    java.util.Collection var66 = org.apache.commons.collections.collection.PredicatedCollection.decorate((java.util.Collection)var24, var65);
    boolean var67 = var11.remove((java.lang.Object)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)10+ "'", var9.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test198() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    java.lang.String var2 = var1.getCompatibilityVersion();
    org.apache.commons.collections.BufferOverflowException var3 = new org.apache.commons.collections.BufferOverflowException(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "3.1"+ "'", var2.equals("3.1"));

  }

  public void test199() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var4 = var3.isEqualsCheckable();
    var3.testAddAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test200() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    java.util.Set var1 = var0.entrySet();
    java.util.Collection var2 = var0.values();
    org.apache.commons.collections.Transformer var3 = org.apache.commons.collections.functors.ExceptionTransformer.getInstance();
    boolean var4 = var0.containsKey((java.lang.Object)var3);
    java.util.Set var5 = var0.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test201() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var8 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var9 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var15 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var16 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var17 = var16.isEmpty();
    org.apache.commons.collections.MultiHashMap var19 = new org.apache.commons.collections.MultiHashMap(0);
    float var22 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var19, (java.lang.Object)100L, 100.0f);
    boolean var23 = var19.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var17, var23);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var27 = var26.toString();
    org.apache.commons.collections.MapUtils.safeAddToMap((java.util.Map)var6, (java.lang.Object)var23, (java.lang.Object)var27);
    org.apache.commons.collections.Predicate var29 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var30 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var31 = org.apache.commons.collections.PredicateUtils.orPredicate(var29, var30);
    org.apache.commons.collections.Closure var32 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var33 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var34 = org.apache.commons.collections.functors.IfClosure.getInstance(var30, var32, var33);
    java.lang.Double var35 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[  ]"+ "'", var27.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test202() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.list.TestSynchronizedList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test203() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    org.apache.commons.collections.comparators.ComparatorChain var2 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var1);
    org.apache.commons.collections.MultiHashMap var4 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    java.lang.Object[] var6 = new java.lang.Object[] { 0};
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var10 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var11 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var8, (java.util.Collection)var10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var16 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var13, (java.util.Collection)var15);
    boolean var17 = var10.containsAll((java.util.Collection)var13);
    int var18 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var10);
    org.apache.commons.collections.iterators.ObjectArrayListIterator var19 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var6, var18);
    java.util.Iterator[] var20 = new java.util.Iterator[] { var19};
    java.util.Iterator var21 = org.apache.commons.collections.IteratorUtils.collatedIterator((java.util.Comparator)var2, var20);
    junit.framework.Test var22 = org.apache.commons.collections.buffer.TestAll.suite();
    org.apache.commons.collections.collection.TestSynchronizedCollection var24 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var25 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var28 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var29 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var31 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var32 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var33 = var32.isEmpty();
    org.apache.commons.collections.MultiHashMap var35 = new org.apache.commons.collections.MultiHashMap(0);
    float var38 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var35, (java.lang.Object)100L, 100.0f);
    boolean var39 = var35.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var33, var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var41 = var2.compare((java.lang.Object)var22, (java.lang.Object)var39);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test204() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    var6.testBidiClear();
    var6.testBidiInverse();

  }

  public void test205() throws Throwable {

    org.apache.commons.collections.bag.TreeBag var0 = new org.apache.commons.collections.bag.TreeBag();

  }

  public void test206() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    boolean var7 = var6.isEqualsCheckable();
    var6.testCollectionRemove();
    java.lang.Object[] var9 = var6.getOtherElements();
    org.apache.commons.collections.iterators.SingletonIterator var10 = new org.apache.commons.collections.iterators.SingletonIterator((java.lang.Object)var9);
    var10.reset();
    boolean var12 = var10.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test207() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestBoundedFifoBuffer2.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test208() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.buffer.UnboundedFifoBuffer var2 = new org.apache.commons.collections.buffer.UnboundedFifoBuffer(10);
    boolean var3 = var2.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test209() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    boolean var6 = var5.supportsEmptyCollections();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test210() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.BeanMap var16 = new org.apache.commons.collections.BeanMap((java.lang.Object)var15);
    boolean var17 = org.apache.commons.collections.MapUtils.isNotEmpty((java.util.Map)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test211() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    var3.testListIteratorAdd();
    var3.testListAddByIndexBoundsChecking();

  }

  public void test212() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.keyvalue.TestDefaultKeyValue var3 = new org.apache.commons.collections.keyvalue.TestDefaultKeyValue(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));

  }

  public void test213() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestFastArrayList.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test214() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var16 = var15.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var16);
    java.lang.String var18 = var17.toString();
    org.apache.commons.collections.bag.TestTreeBag var19 = new org.apache.commons.collections.bag.TestTreeBag(var18);
    org.apache.commons.collections.iterators.TestIteratorChain var20 = new org.apache.commons.collections.iterators.TestIteratorChain(var18);
    java.lang.Object var21 = var12.nextKey((java.lang.Object)var18);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var12);
    org.apache.commons.collections.map.DefaultedMap var24 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var25 = var24.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var26 = org.apache.commons.collections.set.ListOrderedSet.decorate(var25);
    org.apache.commons.collections.Predicate var27 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Set var28 = org.apache.commons.collections.SetUtils.predicatedSet(var25, var27);
    boolean var29 = var22.containsKey((java.lang.Object)var27);
    java.util.Map var30 = org.apache.commons.collections.MapUtils.synchronizedMap((java.util.Map)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[  ]"+ "'", var16.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var18.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);

  }

  public void test215() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var8 = new org.apache.commons.collections.Transformer[] { var7};
    org.apache.commons.collections.functors.ChainedTransformer var9 = new org.apache.commons.collections.functors.ChainedTransformer(var8);
    java.util.List var10 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var5, (org.apache.commons.collections.Transformer)var9);
    org.apache.commons.collections.iterators.ReverseListIterator var11 = new org.apache.commons.collections.iterators.ReverseListIterator(var10);
    var11.reset();
    boolean var13 = var11.hasNext();
    org.apache.commons.collections.iterators.TransformIterator var14 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test216() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.collection.TestSynchronizedCollection.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test217() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    org.apache.commons.collections.TestDoubleOrderedMap var4 = new org.apache.commons.collections.TestDoubleOrderedMap(var2);
    var4.testSize();
    var4.testValuesByValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));

  }

  public void test218() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    org.apache.commons.collections.set.TestTransformedSortedSet var7 = new org.apache.commons.collections.set.TestTransformedSortedSet(var4);
    java.lang.String var8 = var7.getCompatibilityVersion();
    org.apache.commons.collections.TestListUtils var9 = new org.apache.commons.collections.TestListUtils(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "3.1"+ "'", var8.equals("3.1"));

  }

  public void test219() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    org.apache.commons.collections.map.DefaultedMap var32 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var33 = var32.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var34 = org.apache.commons.collections.set.ListOrderedSet.decorate(var33);
    java.lang.Object[] var35 = var34.toArray();
    org.apache.commons.collections.list.TreeList var36 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var34);
    java.util.Collection var37 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var36);
    org.apache.commons.collections.Transformer var38 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var39 = new org.apache.commons.collections.Transformer[] { var38};
    org.apache.commons.collections.functors.ChainedTransformer var40 = new org.apache.commons.collections.functors.ChainedTransformer(var39);
    java.util.List var41 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var36, (org.apache.commons.collections.Transformer)var40);
    org.apache.commons.collections.iterators.ReverseListIterator var42 = new org.apache.commons.collections.iterators.ReverseListIterator(var41);
    var42.reset();
    boolean var44 = var42.hasNext();
    java.util.Enumeration var45 = org.apache.commons.collections.IteratorUtils.asEnumeration((java.util.Iterator)var42);
    java.lang.Object[] var46 = new java.lang.Object[] { var42};
    java.lang.Object[] var47 = var12.toArray(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);

  }

  public void test220() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var3 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var4 = org.apache.commons.collections.PredicateUtils.orPredicate(var2, var3);
    int var5 = org.apache.commons.collections.CollectionUtils.countMatches((java.util.Collection)var1, var3);
    org.apache.commons.collections.buffer.UnboundedFifoBuffer var6 = new org.apache.commons.collections.buffer.UnboundedFifoBuffer();
    org.apache.commons.collections.map.DefaultedMap var8 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var9 = var8.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var10 = org.apache.commons.collections.set.ListOrderedSet.decorate(var9);
    java.util.Collection var11 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var6, (java.util.Collection)var10);
    boolean var12 = org.apache.commons.collections.CollectionUtils.isProperSubCollection((java.util.Collection)var1, (java.util.Collection)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test221() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.map.LinkedMap var16 = new org.apache.commons.collections.map.LinkedMap(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test222() throws Throwable {

    org.apache.commons.collections.map.TestListOrderedMap2 var1 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    org.apache.commons.collections.Factory var2 = org.apache.commons.collections.FactoryUtils.prototypeFactory((java.lang.Object)"hi!");
    org.apache.commons.collections.iterators.TestArrayListIterator var3 = new org.apache.commons.collections.iterators.TestArrayListIterator("hi!");
    boolean var4 = var3.supportsRemove();
    var3.testReset();
    var3.testListIterator();
    var3.testListIteratorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test223() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    org.apache.commons.collections.TestDoubleOrderedMap var4 = new org.apache.commons.collections.TestDoubleOrderedMap(var2);
    boolean var5 = var4.isPutChangeSupported();
    var4.testKeySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test224() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    var2.testLooping2();
    var2.testJoggingNotOverBoundary();

  }

  public void test225() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    int var10 = var0.size();
    org.apache.commons.collections.FastArrayList var11 = new org.apache.commons.collections.FastArrayList(var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var12 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var14 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var15 = var14.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var16 = org.apache.commons.collections.set.ListOrderedSet.decorate(var15);
    org.apache.commons.collections.map.SingletonMap var17 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var12, (java.lang.Object)var15);
    java.util.Properties var18 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var12);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var19 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var21 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var22 = var21.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var23 = org.apache.commons.collections.set.ListOrderedSet.decorate(var22);
    org.apache.commons.collections.map.SingletonMap var24 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var19, (java.lang.Object)var22);
    var18.putAll((java.util.Map)var24);
    org.apache.commons.collections.BinaryHeap var27 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var30 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var27, (java.util.Collection)var29);
    org.apache.commons.collections.map.DefaultedMap var32 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var33 = var32.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var34 = org.apache.commons.collections.set.ListOrderedSet.decorate(var33);
    java.lang.Object[] var35 = var34.toArray();
    org.apache.commons.collections.list.TreeList var36 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var34);
    java.util.List var37 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var29, (java.util.Collection)var36);
    org.apache.commons.collections.list.SetUniqueList var38 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var36);
    org.apache.commons.collections.comparators.BooleanComparator var39 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var40 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var39);
    org.apache.commons.collections.comparators.ComparatorChain var41 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var40);
    org.apache.commons.collections.buffer.PriorityBuffer var42 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var40);
    boolean var43 = var38.retainAll((java.util.Collection)var42);
    java.util.List var44 = org.apache.commons.collections.ListUtils.unmodifiableList((java.util.List)var38);
    boolean var45 = var18.equals((java.lang.Object)var44);
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.lang.Object[] var47 = var11.toArray(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)10+ "'", var9.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);

  }

  public void test226() throws Throwable {

    org.apache.commons.collections.Predicate var0 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Transformer var1 = org.apache.commons.collections.TransformerUtils.asTransformer(var0);
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.PredicateUtils.notPredicate(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test227() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestFastHashMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test228() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestBagUtils.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test229() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var2 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    org.apache.commons.collections.set.TestTransformedSortedSet var3 = new org.apache.commons.collections.set.TestTransformedSortedSet("hi!");

  }

  public void test230() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var16 = var15.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var16);
    java.lang.String var18 = var17.toString();
    org.apache.commons.collections.bag.TestTreeBag var19 = new org.apache.commons.collections.bag.TestTreeBag(var18);
    org.apache.commons.collections.iterators.TestIteratorChain var20 = new org.apache.commons.collections.iterators.TestIteratorChain(var18);
    java.lang.Object var21 = var12.nextKey((java.lang.Object)var18);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var12);
    org.apache.commons.collections.map.SingletonMap var23 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[  ]"+ "'", var16.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var18.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);

  }

  public void test231() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.BulkTest var7 = var6.bulkTestHeadMap();
    org.apache.commons.collections.BidiMap var8 = var6.makeFullBidiMap();
    java.lang.String var9 = var6.getCompatibilityVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "3"+ "'", var9.equals("3"));

  }

  public void test232() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var2 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    var2.testEmptyChain();
    var2.testRemoveFromFilteredIterator();

  }

  public void test233() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var3 = var2.getCompatibilityVersion();
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.buffer.UnboundedFifoBuffer var7 = new org.apache.commons.collections.buffer.UnboundedFifoBuffer(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.ResettableListIterator var8 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var4, 10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "3"+ "'", var3.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test234() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.iterators.TestIteratorChain var2 = new org.apache.commons.collections.iterators.TestIteratorChain("");

  }

  public void test235() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.buffer.TestPriorityBuffer.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test236() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    java.lang.String var7 = var6.getCompatibilityVersion();
    org.apache.commons.collections.BulkTest var8 = var6.bulkTestBidiMapIterator();
    var6.testBidiPut();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "3"+ "'", var7.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test237() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    org.apache.commons.collections.iterators.TestIteratorChain var6 = new org.apache.commons.collections.iterators.TestIteratorChain(var4);
    org.apache.commons.collections.TestDoubleOrderedMap var7 = new org.apache.commons.collections.TestDoubleOrderedMap(var4);
    var7.testEntrySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test238() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    int var10 = var0.size();
    org.apache.commons.collections.FastArrayList var11 = new org.apache.commons.collections.FastArrayList(var10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var16 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var13, (java.util.Collection)var15);
    junit.framework.Test var17 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    org.apache.commons.collections.ResettableListIterator var19 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var18);
    org.apache.commons.collections.Transformer var20 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var21 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var19, var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    java.util.Collection var27 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var15, var20, (java.util.Collection)var23);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var32 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var29, (java.util.Collection)var31);
    org.apache.commons.collections.BinaryHeap var34 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var36 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var37 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var34, (java.util.Collection)var36);
    org.apache.commons.collections.BinaryHeap var39 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var41 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var42 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var39, (java.util.Collection)var41);
    boolean var43 = var36.containsAll((java.util.Collection)var39);
    java.util.Collection var44 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var31, (java.util.Collection)var36);
    org.apache.commons.collections.Buffer var45 = org.apache.commons.collections.buffer.BlockingBuffer.decorate((org.apache.commons.collections.Buffer)var36);
    java.util.Collection var46 = org.apache.commons.collections.CollectionUtils.removeAll(var27, (java.util.Collection)var36);
    boolean var47 = var11.containsAll((java.util.Collection)var36);
    org.apache.commons.collections.BinaryHeap var49 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var51 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var52 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var49, (java.util.Collection)var51);
    org.apache.commons.collections.map.DefaultedMap var54 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var55 = var54.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var56 = org.apache.commons.collections.set.ListOrderedSet.decorate(var55);
    java.lang.Object[] var57 = var56.toArray();
    org.apache.commons.collections.list.TreeList var58 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var56);
    java.util.List var59 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var51, (java.util.Collection)var58);
    org.apache.commons.collections.list.SetUniqueList var60 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var58);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var61 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var63 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var64 = var63.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var65 = org.apache.commons.collections.set.ListOrderedSet.decorate(var64);
    org.apache.commons.collections.map.SingletonMap var66 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var61, (java.lang.Object)var64);
    int var67 = var61.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var69 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var70 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var73 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var74 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var76 = var60.subList(var67, 0);
    boolean var77 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var60);
    java.util.ListIterator var78 = var60.listIterator();
    java.util.Iterator var79 = var60.iterator();
    org.apache.commons.collections.map.DefaultedMap var82 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var83 = var82.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var84 = org.apache.commons.collections.set.ListOrderedSet.decorate(var83);
    java.lang.Object[] var85 = var84.toArray();
    org.apache.commons.collections.list.TreeList var86 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var84);
    java.util.Collection var87 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var86);
    boolean var88 = var60.addAll((-1), (java.util.Collection)var86);
    org.apache.commons.collections.map.StaticBucketMap var89 = new org.apache.commons.collections.map.StaticBucketMap((-1));
    boolean var90 = var11.add((java.lang.Object)var89);
    
    // Checks the contract:  equals-symmetric on var87 and var44.
    assertTrue("Contract failed: equals-symmetric on var87 and var44.", var87.equals(var44) ? var44.equals(var87) : true);
    
    // Checks the contract:  equals-symmetric on var87 and var46.
    assertTrue("Contract failed: equals-symmetric on var87 and var46.", var87.equals(var46) ? var46.equals(var87) : true);

  }

  public void test239() throws Throwable {

    org.apache.commons.collections.iterators.ProxyListIterator var0 = new org.apache.commons.collections.iterators.ProxyListIterator();
    java.util.ListIterator var1 = var0.getListIterator();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.Object var2 = var0.previous();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test240() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    java.util.Iterator var31 = var12.iterator();
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var41 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var38, (java.util.Collection)var40);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var46 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var43, (java.util.Collection)var45);
    boolean var47 = var40.containsAll((java.util.Collection)var43);
    java.util.Collection var48 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var35, (java.util.Collection)var40);
    boolean var49 = var12.containsAll(var48);
    org.apache.commons.collections.ResettableListIterator var50 = org.apache.commons.collections.IteratorUtils.loopingListIterator((java.util.List)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);

  }

  public void test241() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    java.util.Collection var16 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    boolean var32 = var25.containsAll((java.util.Collection)var28);
    java.util.Collection var33 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var25);
    boolean var34 = var3.retainAll((java.util.Collection)var25);
    var3.clear();
    org.apache.commons.collections.iterators.IteratorChain var36 = new org.apache.commons.collections.iterators.IteratorChain((java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var41 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var38, (java.util.Collection)var40);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var46 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var43, (java.util.Collection)var45);
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var50 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var51 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var48, (java.util.Collection)var50);
    boolean var52 = var45.containsAll((java.util.Collection)var48);
    java.util.Collection var53 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var40, (java.util.Collection)var45);
    org.apache.commons.collections.Buffer var54 = org.apache.commons.collections.buffer.BlockingBuffer.decorate((org.apache.commons.collections.Buffer)var45);
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    org.apache.commons.collections.iterators.ObjectArrayIterator var56 = new org.apache.commons.collections.iterators.ObjectArrayIterator(var55);
    var36.addIterator((java.util.Iterator)var56);
    org.apache.commons.collections.BinaryHeap var59 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.collection.TestSynchronizedCollection var61 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var62 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var65 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var66 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var68 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    java.util.Iterator var69 = var68.makeFullIterator();
    org.apache.commons.collections.iterators.IteratorChain var70 = new org.apache.commons.collections.iterators.IteratorChain(var69);
    boolean var71 = var70.hasNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var36.setIterator(10, (java.util.Iterator)var70);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test242() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var17 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var18 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var15, (java.util.Collection)var17);
    org.apache.commons.collections.map.DefaultedMap var20 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var21 = var20.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var22 = org.apache.commons.collections.set.ListOrderedSet.decorate(var21);
    java.lang.Object[] var23 = var22.toArray();
    org.apache.commons.collections.list.TreeList var24 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var22);
    java.util.List var25 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var17, (java.util.Collection)var24);
    org.apache.commons.collections.list.SetUniqueList var26 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var24);
    org.apache.commons.collections.comparators.BooleanComparator var27 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var28 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var27);
    org.apache.commons.collections.comparators.ComparatorChain var29 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var28);
    org.apache.commons.collections.buffer.PriorityBuffer var30 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var28);
    boolean var31 = var26.retainAll((java.util.Collection)var30);
    java.util.List var32 = org.apache.commons.collections.ListUtils.unmodifiableList((java.util.List)var26);
    boolean var33 = var6.equals((java.lang.Object)var32);
    int var34 = var6.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);

  }

  public void test243() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var12 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    org.apache.commons.collections.map.TestDefaultedMap var13 = new org.apache.commons.collections.map.TestDefaultedMap("hi!");
    var13.testMapGet4();
    java.lang.String var15 = var13.getCompatibilityVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "3.2"+ "'", var15.equals("3.2"));

  }

  public void test244() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var2.testComparator();
    org.apache.commons.collections.BulkTest var4 = var2.bulkTestSubMap();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var2.verifyValues();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test245() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    org.apache.commons.collections.comparators.ComparatorChain var2 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var1);
    org.apache.commons.collections.comparators.ComparatorChain var3 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var2);
    boolean var4 = var3.isLocked();
    org.apache.commons.collections.BeanMap var5 = new org.apache.commons.collections.BeanMap();
    int var6 = var5.size();
    org.apache.commons.collections.comparators.BooleanComparator var7 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var8 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var7);
    org.apache.commons.collections.comparators.ComparatorChain var9 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var8);
    org.apache.commons.collections.MultiHashMap var11 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    java.lang.Object[] var13 = new java.lang.Object[] { 0};
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var17 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var18 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var15, (java.util.Collection)var17);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var22 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var23 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var20, (java.util.Collection)var22);
    boolean var24 = var17.containsAll((java.util.Collection)var20);
    int var25 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var17);
    org.apache.commons.collections.iterators.ObjectArrayListIterator var26 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var13, var25);
    java.util.Iterator[] var27 = new java.util.Iterator[] { var26};
    java.util.Iterator var28 = org.apache.commons.collections.IteratorUtils.collatedIterator((java.util.Comparator)var9, var27);
    org.apache.commons.collections.comparators.BooleanComparator var29 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var30 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var29);
    org.apache.commons.collections.comparators.ComparatorChain var31 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var30);
    org.apache.commons.collections.buffer.PriorityBuffer var32 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var30);
    org.apache.commons.collections.map.DefaultedMap var34 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var35 = var34.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var36 = org.apache.commons.collections.set.ListOrderedSet.decorate(var35);
    java.lang.Object[] var37 = var36.toArray();
    org.apache.commons.collections.list.TreeList var38 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var36);
    java.util.Collection var39 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var38);
    org.apache.commons.collections.BinaryHeap var41 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var44 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var41, (java.util.Collection)var43);
    junit.framework.Test var45 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    org.apache.commons.collections.ResettableListIterator var47 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var46);
    org.apache.commons.collections.Transformer var48 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var49 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var47, var48);
    org.apache.commons.collections.BinaryHeap var51 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var53 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var54 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var51, (java.util.Collection)var53);
    java.util.Collection var55 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var43, var48, (java.util.Collection)var51);
    boolean var56 = var38.removeAll((java.util.Collection)var51);
    var9.addComparator((java.util.Comparator)var30, var56);
    var3.setComparator(var6, (java.util.Comparator)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test246() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.iterators.TestSingletonIterator var12 = new org.apache.commons.collections.iterators.TestSingletonIterator("hi!");
    org.apache.commons.collections.iterators.TestLoopingListIterator var13 = new org.apache.commons.collections.iterators.TestLoopingListIterator("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test247() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    org.apache.commons.collections.comparators.ComparatorChain var2 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var1);
    org.apache.commons.collections.comparators.ComparatorChain var3 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var2);
    org.apache.commons.collections.comparators.BooleanComparator var4 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var5 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var4);
    org.apache.commons.collections.collection.TestSynchronizedCollection var7 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var8 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var11 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var12 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var14 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var15 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var16 = var15.isEmpty();
    org.apache.commons.collections.MultiHashMap var18 = new org.apache.commons.collections.MultiHashMap(0);
    float var21 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var18, (java.lang.Object)100L, 100.0f);
    boolean var22 = var18.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var16, var22);
    var2.addComparator((java.util.Comparator)var4, var22);
    org.apache.commons.collections.comparators.ComparableComparator var25 = org.apache.commons.collections.comparators.ComparableComparator.getInstance();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var27 = var2.compare((java.lang.Object)var25, (java.lang.Object)0.0f);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);

  }

  public void test248() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestAll.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test249() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.map.MultiKeyMap var12 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var13 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var12);
    org.apache.commons.collections.collection.TestSynchronizedCollection var15 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var16 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var17 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var18 = var17.isEqualsCheckable();
    var17.testListIndexOf();
    java.lang.Short var21 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var12, (java.lang.Object)var17, (java.lang.Short)(short)10);
    int var22 = var12.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.assertEquals(var11, var22);
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (short)10+ "'", var21.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test250() throws Throwable {

    org.apache.commons.collections.PredicateUtils var0 = new org.apache.commons.collections.PredicateUtils();

  }

  public void test251() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var4 = var3.isEqualsCheckable();
    java.util.Collection var5 = var3.makeFullCollection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test252() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    java.util.Collection var16 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var8);
    org.apache.commons.collections.Buffer var17 = org.apache.commons.collections.buffer.BlockingBuffer.decorate((org.apache.commons.collections.Buffer)var8);
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    org.apache.commons.collections.iterators.ObjectArrayIterator var19 = new org.apache.commons.collections.iterators.ObjectArrayIterator(var18);
    org.apache.commons.collections.iterators.ArrayIterator var20 = new org.apache.commons.collections.iterators.ArrayIterator();
    org.apache.commons.collections.Transformer var21 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var22 = new org.apache.commons.collections.Transformer[] { var21};
    org.apache.commons.collections.functors.ChainedTransformer var23 = new org.apache.commons.collections.functors.ChainedTransformer(var22);
    org.apache.commons.collections.iterators.TransformIterator var24 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var20, (org.apache.commons.collections.Transformer)var23);
    java.util.Iterator var25 = org.apache.commons.collections.IteratorUtils.chainedIterator((java.util.Iterator)var19, (java.util.Iterator)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);

  }

  public void test253() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.keyvalue.TestAll.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test254() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    float var4 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var1, (java.lang.Object)100L, 100.0f);
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap((java.util.Map)var1);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var10 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var7, (java.util.Collection)var9);
    org.apache.commons.collections.map.DefaultedMap var12 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var13 = var12.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var14 = org.apache.commons.collections.set.ListOrderedSet.decorate(var13);
    java.lang.Object[] var15 = var14.toArray();
    org.apache.commons.collections.list.TreeList var16 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var14);
    java.util.List var17 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var9, (java.util.Collection)var16);
    org.apache.commons.collections.list.SetUniqueList var18 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var16);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var19 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var21 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var22 = var21.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var23 = org.apache.commons.collections.set.ListOrderedSet.decorate(var22);
    org.apache.commons.collections.map.SingletonMap var24 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var19, (java.lang.Object)var22);
    int var25 = var19.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var27 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var28 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var31 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var32 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var34 = var18.subList(var25, 0);
    boolean var35 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var18);
    java.util.ListIterator var36 = var18.listIterator();
    java.util.Iterator var37 = var18.iterator();
    org.apache.commons.collections.map.DefaultedMap var40 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var41 = var40.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var42 = org.apache.commons.collections.set.ListOrderedSet.decorate(var41);
    java.lang.Object[] var43 = var42.toArray();
    org.apache.commons.collections.list.TreeList var44 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var42);
    java.util.Collection var45 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var44);
    boolean var46 = var18.addAll((-1), (java.util.Collection)var44);
    float var48 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var1, (java.lang.Object)(-1), 100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.UnboundedFifoBuffer var49 = new org.apache.commons.collections.UnboundedFifoBuffer((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 100.0f);

  }

  public void test255() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var4 = var3.isEqualsCheckable();
    var3.testListIndexOf();
    var3.testListSubListFailFastOnAdd();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test256() throws Throwable {

    org.apache.commons.collections.map.TestListOrderedMap2 var1 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    org.apache.commons.collections.Factory var2 = org.apache.commons.collections.FactoryUtils.prototypeFactory((java.lang.Object)"hi!");
    org.apache.commons.collections.iterators.TestArrayListIterator var3 = new org.apache.commons.collections.iterators.TestArrayListIterator("hi!");
    boolean var4 = var3.supportsRemove();
    var3.testReset();
    var3.testReset();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test257() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var3 = var2.getCompatibilityVersion();
    var2.testValuesClearChangesMap();
    var2.testCaseInsensitive();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "3"+ "'", var3.equals("3"));

  }

  public void test258() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.map.DefaultedMap var17 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var18 = var17.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var19 = org.apache.commons.collections.set.ListOrderedSet.decorate(var18);
    org.apache.commons.collections.Predicate var20 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Set var21 = org.apache.commons.collections.SetUtils.predicatedSet(var18, var20);
    boolean var22 = var1.containsKey((java.lang.Object)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test259() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("");
    var4.resetEmpty();

  }

  public void test260() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    int var16 = var15.size();
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    java.lang.Boolean var32 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var18, (java.lang.Object)true, (java.lang.Boolean)var31);
    org.apache.commons.collections.BeanMap var33 = new org.apache.commons.collections.BeanMap((java.lang.Object)var32);
    java.util.Set var34 = var33.entrySet();
    org.apache.commons.collections.map.MultiKeyMap var35 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var36 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var35);
    org.apache.commons.collections.collection.TestSynchronizedCollection var38 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var39 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var40 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var41 = var40.isEqualsCheckable();
    var40.testListIndexOf();
    java.lang.Short var44 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var35, (java.lang.Object)var40, (java.lang.Short)(short)10);
    int var45 = var35.size();
    org.apache.commons.collections.FastArrayList var46 = new org.apache.commons.collections.FastArrayList(var45);
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var50 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var51 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var48, (java.util.Collection)var50);
    org.apache.commons.collections.BinaryHeap var53 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var55 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var56 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var53, (java.util.Collection)var55);
    boolean var57 = var50.containsAll((java.util.Collection)var53);
    int var58 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var50);
    org.apache.commons.collections.MultiHashMap var59 = new org.apache.commons.collections.MultiHashMap(var58);
    var46.ensureCapacity(var58);
    boolean var61 = var46.isEmpty();
    java.util.Collection var62 = org.apache.commons.collections.CollectionUtils.removeAll((java.util.Collection)var34, (java.util.Collection)var46);
    boolean var63 = var15.containsKey((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + true+ "'", var32.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (short)10+ "'", var44.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test261() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var16 = var15.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var16);
    java.lang.String var18 = var17.toString();
    org.apache.commons.collections.bag.TestTreeBag var19 = new org.apache.commons.collections.bag.TestTreeBag(var18);
    org.apache.commons.collections.iterators.TestIteratorChain var20 = new org.apache.commons.collections.iterators.TestIteratorChain(var18);
    java.lang.Object var21 = var12.nextKey((java.lang.Object)var18);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var12);
    org.apache.commons.collections.map.DefaultedMap var24 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var25 = var24.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var26 = org.apache.commons.collections.set.ListOrderedSet.decorate(var25);
    org.apache.commons.collections.Predicate var27 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Set var28 = org.apache.commons.collections.SetUtils.predicatedSet(var25, var27);
    boolean var29 = var22.containsKey((java.lang.Object)var27);
    org.apache.commons.collections.Predicate[] var30 = new org.apache.commons.collections.Predicate[] { var27};
    org.apache.commons.collections.functors.NonePredicate var31 = new org.apache.commons.collections.functors.NonePredicate(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[  ]"+ "'", var16.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var18.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);

  }

  public void test262() throws Throwable {

    org.apache.commons.collections.ClosureUtils var0 = new org.apache.commons.collections.ClosureUtils();

  }

  public void test263() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("");
    java.lang.Object[] var5 = var4.getSampleValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test264() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.collection.TestSynchronizedCollection var15 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var16 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var19 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var20 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var22 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var23 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var24 = var23.isEmpty();
    org.apache.commons.collections.MultiHashMap var26 = new org.apache.commons.collections.MultiHashMap(0);
    float var29 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var26, (java.lang.Object)100L, 100.0f);
    boolean var30 = var26.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var24, var30);
    java.lang.Object var32 = var12.nextKey((java.lang.Object)var30);
    org.apache.commons.collections.OrderedMapIterator var33 = var12.orderedMapIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);

  }

  public void test265() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var8 = new org.apache.commons.collections.Transformer[] { var7};
    org.apache.commons.collections.functors.ChainedTransformer var9 = new org.apache.commons.collections.functors.ChainedTransformer(var8);
    java.util.List var10 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var5, (org.apache.commons.collections.Transformer)var9);
    org.apache.commons.collections.iterators.ReverseListIterator var11 = new org.apache.commons.collections.iterators.ReverseListIterator(var10);
    var11.reset();
    boolean var13 = var11.hasNext();
    java.util.Enumeration var14 = org.apache.commons.collections.IteratorUtils.asEnumeration((java.util.Iterator)var11);
    int var15 = var11.previousIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test266() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    var1.testIteratorRemoveProtectsInvariants();
    var1.testlegalAddRemove();
    var1.testIterator();

  }

  public void test267() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    var6.clear();
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var12 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var9, (java.util.Collection)var11);
    org.apache.commons.collections.map.DefaultedMap var14 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var15 = var14.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var16 = org.apache.commons.collections.set.ListOrderedSet.decorate(var15);
    java.lang.Object[] var17 = var16.toArray();
    org.apache.commons.collections.list.TreeList var18 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var16);
    java.util.List var19 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var11, (java.util.Collection)var18);
    org.apache.commons.collections.list.SetUniqueList var20 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var18);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var21 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var24 = var23.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var25 = org.apache.commons.collections.set.ListOrderedSet.decorate(var24);
    org.apache.commons.collections.map.SingletonMap var26 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var21, (java.lang.Object)var24);
    int var27 = var21.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var29 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var30 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var33 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var34 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var36 = var20.subList(var27, 0);
    java.lang.Object[] var37 = var20.toArray();
    java.lang.Object var38 = var6.remove((java.lang.Object)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test268() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.comparators.TestComparatorChain.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test269() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.map.TestStaticBucketMap var5 = new org.apache.commons.collections.map.TestStaticBucketMap(var4);
    var5.test_containsValue_nullMatchesIncorrectly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test270() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.BulkTest var7 = var6.bulkTestHeadMap();
    org.apache.commons.collections.BulkTest var8 = var6.bulkTestInverseMap();
    var6.testSampleMappings();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var6.verifyKeySet();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test271() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    org.apache.commons.collections.iterators.TestIteratorChain var6 = new org.apache.commons.collections.iterators.TestIteratorChain(var4);
    java.util.Iterator var7 = var6.makeEmptyIterator();
    var6.testFirstIteratorIsEmptyBug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test272() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.Transformer var5 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var10 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var7, (java.util.Collection)var9);
    org.apache.commons.collections.map.DefaultedMap var12 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var13 = var12.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var14 = org.apache.commons.collections.set.ListOrderedSet.decorate(var13);
    java.lang.Object[] var15 = var14.toArray();
    org.apache.commons.collections.list.TreeList var16 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var14);
    java.util.List var17 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var9, (java.util.Collection)var16);
    org.apache.commons.collections.list.SetUniqueList var18 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var16);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var19 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var21 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var22 = var21.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var23 = org.apache.commons.collections.set.ListOrderedSet.decorate(var22);
    org.apache.commons.collections.map.SingletonMap var24 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var19, (java.lang.Object)var22);
    int var25 = var19.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var27 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var28 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var31 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var32 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var34 = var18.subList(var25, 0);
    org.apache.commons.collections.set.ListOrderedSet var35 = org.apache.commons.collections.set.ListOrderedSet.decorate((java.util.Set)var3, var34);
    org.apache.commons.collections.Predicate var36 = org.apache.commons.collections.functors.AnyPredicate.getInstance((java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var41 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var38, (java.util.Collection)var40);
    org.apache.commons.collections.map.DefaultedMap var43 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var44 = var43.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var45 = org.apache.commons.collections.set.ListOrderedSet.decorate(var44);
    java.lang.Object[] var46 = var45.toArray();
    org.apache.commons.collections.list.TreeList var47 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var45);
    java.util.List var48 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var40, (java.util.Collection)var47);
    org.apache.commons.collections.list.SetUniqueList var49 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var47);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var50 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var52 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var53 = var52.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var54 = org.apache.commons.collections.set.ListOrderedSet.decorate(var53);
    org.apache.commons.collections.map.SingletonMap var55 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var50, (java.lang.Object)var53);
    int var56 = var50.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var58 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var59 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var62 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var63 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var65 = var49.subList(var56, 0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var66 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var68 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var69 = var68.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var70 = org.apache.commons.collections.set.ListOrderedSet.decorate(var69);
    org.apache.commons.collections.map.SingletonMap var71 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var66, (java.lang.Object)var69);
    java.util.Properties var72 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var66);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var73 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var75 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var76 = var75.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var77 = org.apache.commons.collections.set.ListOrderedSet.decorate(var76);
    org.apache.commons.collections.map.SingletonMap var78 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var73, (java.lang.Object)var76);
    var72.putAll((java.util.Map)var78);
    org.apache.commons.collections.BinaryHeap var81 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var82 = var81.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var83 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var82);
    java.lang.String var84 = var83.toString();
    org.apache.commons.collections.bag.TestTreeBag var85 = new org.apache.commons.collections.bag.TestTreeBag(var84);
    org.apache.commons.collections.iterators.TestIteratorChain var86 = new org.apache.commons.collections.iterators.TestIteratorChain(var84);
    java.lang.Object var87 = var78.nextKey((java.lang.Object)var84);
    org.apache.commons.collections.map.SingletonMap var88 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.add(var56, (java.lang.Object)var78);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "[  ]"+ "'", var82.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var84.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);

  }

  public void test273() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    java.lang.Object var7 = var6.makeObject();
    var6.testMapSize();
    var6.testBidiClearByHeadMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test274() throws Throwable {

    org.apache.commons.collections.iterators.FilterListIterator var0 = new org.apache.commons.collections.iterators.FilterListIterator();
    java.util.ListIterator var1 = var0.getListIterator();
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var3 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var4 = org.apache.commons.collections.PredicateUtils.orPredicate(var2, var3);
    org.apache.commons.collections.Predicate[] var5 = new org.apache.commons.collections.Predicate[] { var2};
    org.apache.commons.collections.functors.AllPredicate var6 = new org.apache.commons.collections.functors.AllPredicate(var5);
    var0.setPredicate((org.apache.commons.collections.Predicate)var6);
    org.apache.commons.collections.Predicate[] var8 = var6.getPredicates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test275() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var4 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var5 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var6 = var5.supportsSet();
    var5.testIterator();
    var5.testEqualsNull();
    var5.testEmptyListIteratorIsIndeedEmpty();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var12 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var13 = var12.isEmpty();
    org.apache.commons.collections.map.LRUMap var14 = new org.apache.commons.collections.map.LRUMap(100, 1.0f, var13);
    org.apache.commons.collections.BinaryHeap var16 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var17 = var16.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var18 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var17);
    java.lang.String var19 = var18.toString();
    org.apache.commons.collections.set.TestAll var20 = new org.apache.commons.collections.set.TestAll(var19);
    java.lang.Object var21 = var0.remove((java.lang.Object)var5, (java.lang.Object)var14, (java.lang.Object)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.map.DefaultedMap var28 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var29 = var28.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var30 = org.apache.commons.collections.set.ListOrderedSet.decorate(var29);
    java.lang.Object[] var31 = var30.toArray();
    org.apache.commons.collections.list.TreeList var32 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var30);
    java.util.List var33 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var25, (java.util.Collection)var32);
    org.apache.commons.collections.list.SetUniqueList var34 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var32);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var35 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var37 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var38 = var37.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var39 = org.apache.commons.collections.set.ListOrderedSet.decorate(var38);
    org.apache.commons.collections.map.SingletonMap var40 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var35, (java.lang.Object)var38);
    int var41 = var35.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var43 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var44 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var47 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var48 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var50 = var34.subList(var41, 0);
    boolean var51 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var34);
    org.apache.commons.collections.list.GrowthList var52 = new org.apache.commons.collections.list.GrowthList();
    org.apache.commons.collections.keyvalue.DefaultKeyValue var53 = new org.apache.commons.collections.keyvalue.DefaultKeyValue((java.lang.Object)var34, (java.lang.Object)var52);
    java.util.List var54 = org.apache.commons.collections.list.FixedSizeList.decorate((java.util.List)var34);
    org.apache.commons.collections.map.MultiKeyMap var55 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var56 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var55);
    org.apache.commons.collections.collection.TestSynchronizedCollection var58 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var59 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var60 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var61 = var60.isEqualsCheckable();
    var60.testListIndexOf();
    java.lang.Short var64 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var55, (java.lang.Object)var60, (java.lang.Short)(short)10);
    java.lang.Object var65 = var14.put((java.lang.Object)var34, (java.lang.Object)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[  ]"+ "'", var17.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var19.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + (short)10+ "'", var64.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);

  }

  public void test276() throws Throwable {

    org.apache.commons.collections.buffer.UnboundedFifoBuffer var0 = new org.apache.commons.collections.buffer.UnboundedFifoBuffer();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var1 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var3 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var4 = var3.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var5 = org.apache.commons.collections.set.ListOrderedSet.decorate(var4);
    org.apache.commons.collections.map.SingletonMap var6 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var1, (java.lang.Object)var4);
    java.util.Properties var7 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var1);
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var10 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var13 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var14 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var16 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var17 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var18 = var17.isEmpty();
    org.apache.commons.collections.MultiHashMap var20 = new org.apache.commons.collections.MultiHashMap(0);
    float var23 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var20, (java.lang.Object)100L, 100.0f);
    boolean var24 = var20.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var18, var24);
    org.apache.commons.collections.BinaryHeap var27 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var28 = var27.toString();
    org.apache.commons.collections.MapUtils.safeAddToMap((java.util.Map)var7, (java.lang.Object)var24, (java.lang.Object)var28);
    org.apache.commons.collections.collection.TestAll var30 = new org.apache.commons.collections.collection.TestAll(var28);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var31 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var33 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var34 = var33.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var35 = org.apache.commons.collections.set.ListOrderedSet.decorate(var34);
    org.apache.commons.collections.map.SingletonMap var36 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var31, (java.lang.Object)var34);
    int var37 = var31.size();
    org.apache.commons.collections.map.IdentityMap var38 = new org.apache.commons.collections.map.IdentityMap((java.util.Map)var31);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var39 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var40 = var39.isEmpty();
    boolean var41 = var38.containsValue((java.lang.Object)var39);
    org.apache.commons.collections.keyvalue.MultiKey var42 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var0, (java.lang.Object)var28, (java.lang.Object)var39);
    org.apache.commons.collections.MultiHashMap var45 = new org.apache.commons.collections.MultiHashMap(0);
    float var48 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var45, (java.lang.Object)100L, 100.0f);
    org.apache.commons.collections.MultiHashMap var49 = new org.apache.commons.collections.MultiHashMap((java.util.Map)var45);
    org.apache.commons.collections.Closure var50 = org.apache.commons.collections.functors.SwitchClosure.getInstance((java.util.Map)var49);
    org.apache.commons.collections.functors.ForClosure var51 = new org.apache.commons.collections.functors.ForClosure(1, var50);
    int var52 = var51.getCount();
    boolean var53 = var42.equals((java.lang.Object)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[  ]"+ "'", var28.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test277() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var8 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var9 = var8.getFullElements();
    var8.testCollectionContainsAll();
    var8.testBasicComparatorOps();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);

  }

  public void test278() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var3 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var4 = var3.supportsSet();
    var3.testIterator();
    var3.testEqualsNull();
    var3.testEmptyListIteratorIsIndeedEmpty();
    java.lang.Object var8 = var3.addSetValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test279() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestSingletonListIterator.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test280() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var4 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var5 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var6 = var5.supportsSet();
    var5.testIterator();
    var5.testEqualsNull();
    var5.testEmptyListIteratorIsIndeedEmpty();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var12 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var13 = var12.isEmpty();
    org.apache.commons.collections.map.LRUMap var14 = new org.apache.commons.collections.map.LRUMap(100, 1.0f, var13);
    org.apache.commons.collections.BinaryHeap var16 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var17 = var16.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var18 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var17);
    java.lang.String var19 = var18.toString();
    org.apache.commons.collections.set.TestAll var20 = new org.apache.commons.collections.set.TestAll(var19);
    java.lang.Object var21 = var0.remove((java.lang.Object)var5, (java.lang.Object)var14, (java.lang.Object)var20);
    java.util.ListIterator var22 = var5.makeFullListIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[  ]"+ "'", var17.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var19.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);

  }

  public void test281() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.Transformer var5 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var10 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var7, (java.util.Collection)var9);
    org.apache.commons.collections.map.DefaultedMap var12 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var13 = var12.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var14 = org.apache.commons.collections.set.ListOrderedSet.decorate(var13);
    java.lang.Object[] var15 = var14.toArray();
    org.apache.commons.collections.list.TreeList var16 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var14);
    java.util.List var17 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var9, (java.util.Collection)var16);
    org.apache.commons.collections.list.SetUniqueList var18 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var16);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var19 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var21 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var22 = var21.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var23 = org.apache.commons.collections.set.ListOrderedSet.decorate(var22);
    org.apache.commons.collections.map.SingletonMap var24 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var19, (java.lang.Object)var22);
    int var25 = var19.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var27 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var28 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var31 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var32 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var34 = var18.subList(var25, 0);
    org.apache.commons.collections.set.ListOrderedSet var35 = org.apache.commons.collections.set.ListOrderedSet.decorate((java.util.Set)var3, var34);
    org.apache.commons.collections.Predicate var36 = org.apache.commons.collections.functors.AnyPredicate.getInstance((java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var41 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var38, (java.util.Collection)var40);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var46 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var43, (java.util.Collection)var45);
    boolean var47 = var40.containsAll((java.util.Collection)var43);
    org.apache.commons.collections.MultiHashMap var49 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var50 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var51 = var43.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var52 = new org.apache.commons.collections.SequencedHashMap(0);
    int var53 = var52.size();
    java.util.Collection var54 = var52.values();
    java.lang.Object[] var55 = new java.lang.Object[] { var52};
    java.lang.Object[] var56 = var3.toArray(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);

  }

  public void test282() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    java.lang.Object var7 = var6.makeObject();
    boolean var8 = var6.isAllowNullValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test283() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var4 = var3.isEqualsCheckable();
    java.util.List var5 = var3.getConfirmedList();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var3.verify();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test284() throws Throwable {

    org.apache.commons.collections.BufferUnderflowException var0 = new org.apache.commons.collections.BufferUnderflowException();

  }

  public void test285() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    int var16 = var15.size();
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    boolean var32 = var25.containsAll((java.util.Collection)var28);
    java.util.Collection var33 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var25);
    int var34 = var15.indexOf((java.lang.Object)var25);
    java.lang.String var35 = var15.toString();
    org.apache.commons.collections.comparators.TestFixedOrderComparator var36 = new org.apache.commons.collections.comparators.TestFixedOrderComparator(var35);
    var36.testListConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));

  }

  public void test286() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.BulkTest var7 = var6.bulkTestHeadMap();
    org.apache.commons.collections.BidiMap var8 = var6.makeFullBidiMap();
    java.util.Map var9 = var6.makeEmptyMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);

  }

  public void test287() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var4 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var5 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var6 = var5.supportsSet();
    var5.testIterator();
    var5.testEqualsNull();
    var5.testEmptyListIteratorIsIndeedEmpty();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var12 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var13 = var12.isEmpty();
    org.apache.commons.collections.map.LRUMap var14 = new org.apache.commons.collections.map.LRUMap(100, 1.0f, var13);
    org.apache.commons.collections.BinaryHeap var16 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var17 = var16.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var18 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var17);
    java.lang.String var19 = var18.toString();
    org.apache.commons.collections.set.TestAll var20 = new org.apache.commons.collections.set.TestAll(var19);
    java.lang.Object var21 = var0.remove((java.lang.Object)var5, (java.lang.Object)var14, (java.lang.Object)var20);
    org.apache.commons.collections.Factory var22 = org.apache.commons.collections.FactoryUtils.nullFactory();
    org.apache.commons.collections.map.DefaultedMap var24 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var25 = var24.entrySet();
    boolean var27 = var24.containsKey((java.lang.Object)1.0d);
    org.apache.commons.collections.MultiHashMap var29 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var30 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.map.DefaultedMap var32 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var35 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var32, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var37 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var40 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var37, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var42 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var44 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var45 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var42, (java.util.Collection)var44);
    java.lang.Boolean var46 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var32, (java.lang.Object)true, (java.lang.Boolean)var45);
    org.apache.commons.collections.map.DefaultedMap var49 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var52 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var49, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var54 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var57 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var54, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var59 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var61 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var62 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var59, (java.util.Collection)var61);
    java.lang.Boolean var63 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var49, (java.lang.Object)true, (java.lang.Boolean)var62);
    java.lang.Object var64 = var32.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var66 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var32, (java.lang.Object)1L);
    java.lang.Long var67 = org.apache.commons.collections.MapUtils.getLong((java.util.Map)var24, (java.lang.Object)0, (java.lang.Long)1L);
    boolean var68 = var0.containsKey((java.lang.Object)var22, (java.lang.Object)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[  ]"+ "'", var17.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var19.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + (-1.0d)+ "'", var35.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + (-1.0d)+ "'", var40.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + true+ "'", var46.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + (-1.0d)+ "'", var52.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + (-1.0d)+ "'", var57.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + true+ "'", var63.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + (-1L)+ "'", var67.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test288() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var16 = var15.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var16);
    java.lang.String var18 = var17.toString();
    org.apache.commons.collections.bag.TestTreeBag var19 = new org.apache.commons.collections.bag.TestTreeBag(var18);
    org.apache.commons.collections.iterators.TestIteratorChain var20 = new org.apache.commons.collections.iterators.TestIteratorChain(var18);
    java.lang.Object var21 = var12.nextKey((java.lang.Object)var18);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var12);
    org.apache.commons.collections.map.DefaultedMap var24 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var25 = var24.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var26 = org.apache.commons.collections.set.ListOrderedSet.decorate(var25);
    org.apache.commons.collections.Predicate var27 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Set var28 = org.apache.commons.collections.SetUtils.predicatedSet(var25, var27);
    boolean var29 = var22.containsKey((java.lang.Object)var27);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var30 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var32 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var33 = var32.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var34 = org.apache.commons.collections.set.ListOrderedSet.decorate(var33);
    org.apache.commons.collections.map.SingletonMap var35 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var30, (java.lang.Object)var33);
    java.util.Properties var36 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var30);
    org.apache.commons.collections.Closure var37 = org.apache.commons.collections.functors.SwitchClosure.getInstance((java.util.Map)var30);
    org.apache.commons.collections.Closure var38 = org.apache.commons.collections.functors.IfClosure.getInstance(var27, var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[  ]"+ "'", var16.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var18.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);

  }

  public void test289() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    java.util.Set var7 = var6.makeEmptySet();
    int var8 = org.apache.commons.collections.SetUtils.hashCodeForSet((java.util.Collection)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test290() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    org.apache.commons.collections.TestListUtils var7 = new org.apache.commons.collections.TestListUtils(var4);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var7.testRetainAll();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test291() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.iterators.TestCollatingIterator var2 = new org.apache.commons.collections.iterators.TestCollatingIterator("");
    java.lang.String var3 = var2.getName();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var2.testRemoveFromSingle();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test292() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var8 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    boolean var9 = var8.isFailFastSupported();
    boolean var10 = var8.isFailFastSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test293() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.BulkTest var7 = var6.bulkTestHeadMap();
    org.apache.commons.collections.BidiMap var8 = var6.makeFullBidiMap();
    var6.testMapSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test294() throws Throwable {

    org.apache.commons.collections.StaticBucketMap var0 = new org.apache.commons.collections.StaticBucketMap();
    java.util.Collection var1 = var0.values();
    boolean var2 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test295() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var3 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var4 = var3.supportsSet();
    var3.testIterator();
    java.util.Iterator var6 = var3.makeFullIterator();
    java.util.Iterator[] var7 = new java.util.Iterator[] { var6};
    org.apache.commons.collections.iterators.IteratorChain var8 = new org.apache.commons.collections.iterators.IteratorChain(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test296() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Iterator var6 = var5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test297() throws Throwable {

    org.apache.commons.collections.ResettableIterator var0 = org.apache.commons.collections.IteratorUtils.emptyIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test298() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    boolean var4 = var1.containsKey((java.lang.Object)1.0d);
    boolean var5 = org.apache.commons.collections.MapUtils.isEmpty((java.util.Map)var1);
    org.apache.commons.collections.map.IdentityMap var6 = new org.apache.commons.collections.map.IdentityMap((java.util.Map)var1);
    int var7 = var6.size();
    org.apache.commons.collections.Factory var8 = org.apache.commons.collections.FactoryUtils.nullFactory();
    org.apache.commons.collections.Transformer var9 = org.apache.commons.collections.functors.FactoryTransformer.getInstance(var8);
    java.util.Map var10 = org.apache.commons.collections.map.DefaultedMap.decorate((java.util.Map)var6, var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);

  }

  public void test299() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var6 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var8 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    var8.testIterator();

  }

  public void test300() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.comparators.BooleanComparator var13 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var14 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var13);
    org.apache.commons.collections.comparators.ComparatorChain var15 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var14);
    org.apache.commons.collections.buffer.PriorityBuffer var16 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var14);
    boolean var17 = var12.retainAll((java.util.Collection)var16);
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var22 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var19, (java.util.Collection)var21);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var27 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var24, (java.util.Collection)var26);
    boolean var28 = var21.containsAll((java.util.Collection)var24);
    org.apache.commons.collections.MultiHashMap var30 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var31 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var32 = var24.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var33 = new org.apache.commons.collections.SequencedHashMap(0);
    int var34 = var33.size();
    org.apache.commons.collections.BinaryHeap var36 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var39 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var36, (java.util.Collection)var38);
    org.apache.commons.collections.BinaryHeap var41 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var44 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var41, (java.util.Collection)var43);
    org.apache.commons.collections.BinaryHeap var46 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var49 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var46, (java.util.Collection)var48);
    boolean var50 = var43.containsAll((java.util.Collection)var46);
    java.util.Collection var51 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var38, (java.util.Collection)var43);
    int var52 = var33.indexOf((java.lang.Object)var43);
    boolean var53 = var12.contains((java.lang.Object)var33);
    org.apache.commons.collections.iterators.ArrayIterator var54 = new org.apache.commons.collections.iterators.ArrayIterator();
    org.apache.commons.collections.Transformer var55 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var56 = new org.apache.commons.collections.Transformer[] { var55};
    org.apache.commons.collections.functors.ChainedTransformer var57 = new org.apache.commons.collections.functors.ChainedTransformer(var56);
    org.apache.commons.collections.iterators.TransformIterator var58 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var54, (org.apache.commons.collections.Transformer)var57);
    java.lang.Object var59 = var54.getArray();
    org.apache.commons.collections.iterators.ProxyIterator var60 = new org.apache.commons.collections.iterators.ProxyIterator((java.util.Iterator)var54);
    org.apache.commons.collections.Transformer var61 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var62 = new org.apache.commons.collections.Transformer[] { var61};
    org.apache.commons.collections.functors.ChainedTransformer var63 = new org.apache.commons.collections.functors.ChainedTransformer(var62);
    java.lang.Object var64 = var33.put((java.lang.Object)var60, (java.lang.Object)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);

  }

  public void test301() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var10 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var11 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var8, (java.util.Collection)var10);
    junit.framework.Test var12 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    org.apache.commons.collections.ResettableListIterator var14 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var13);
    org.apache.commons.collections.Transformer var15 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var16 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var14, var15);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    java.util.Collection var22 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var10, var15, (java.util.Collection)var18);
    boolean var23 = var5.removeAll((java.util.Collection)var18);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var24 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var26 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var27 = var26.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var28 = org.apache.commons.collections.set.ListOrderedSet.decorate(var27);
    org.apache.commons.collections.map.SingletonMap var29 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var24, (java.lang.Object)var27);
    java.util.Properties var30 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var24);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var31 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var33 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var34 = var33.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var35 = org.apache.commons.collections.set.ListOrderedSet.decorate(var34);
    org.apache.commons.collections.map.SingletonMap var36 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var31, (java.lang.Object)var34);
    var30.putAll((java.util.Map)var36);
    org.apache.commons.collections.BinaryHeap var39 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var40 = var39.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var41 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var40);
    java.lang.String var42 = var41.toString();
    org.apache.commons.collections.bag.TestTreeBag var43 = new org.apache.commons.collections.bag.TestTreeBag(var42);
    org.apache.commons.collections.iterators.TestIteratorChain var44 = new org.apache.commons.collections.iterators.TestIteratorChain(var42);
    java.lang.Object var45 = var36.nextKey((java.lang.Object)var42);
    org.apache.commons.collections.map.SingletonMap var46 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var36);
    org.apache.commons.collections.map.DefaultedMap var48 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var49 = var48.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var50 = org.apache.commons.collections.set.ListOrderedSet.decorate(var49);
    org.apache.commons.collections.Predicate var51 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Set var52 = org.apache.commons.collections.SetUtils.predicatedSet(var49, var51);
    boolean var53 = var46.containsKey((java.lang.Object)var51);
    java.util.Set var54 = var46.keySet();
    java.util.Collection var55 = org.apache.commons.collections.CollectionUtils.disjunction((java.util.Collection)var5, (java.util.Collection)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[  ]"+ "'", var40.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var42.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);

  }

  public void test302() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var8 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var9 = var8.getFullElements();
    org.apache.commons.collections.collection.TestSynchronizedCollection var11 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var12 = var11.countTestCases();
    org.apache.commons.collections.Predicate var13 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var12);
    java.lang.Object var14 = org.apache.commons.collections.CollectionUtils.get((java.lang.Object)var9, var12);
    org.apache.commons.collections.buffer.BoundedFifoBuffer var15 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(var12);
    boolean var16 = var15.isEmpty();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var17 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var19 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var20 = var19.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var21 = org.apache.commons.collections.set.ListOrderedSet.decorate(var20);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var17, (java.lang.Object)var20);
    java.util.Properties var23 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var17);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var24 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var26 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var27 = var26.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var28 = org.apache.commons.collections.set.ListOrderedSet.decorate(var27);
    org.apache.commons.collections.map.SingletonMap var29 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var24, (java.lang.Object)var27);
    var23.putAll((java.util.Map)var29);
    org.apache.commons.collections.BinaryHeap var32 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var33 = var32.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var34 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var33);
    java.lang.String var35 = var34.toString();
    org.apache.commons.collections.bag.TestTreeBag var36 = new org.apache.commons.collections.bag.TestTreeBag(var35);
    org.apache.commons.collections.iterators.TestIteratorChain var37 = new org.apache.commons.collections.iterators.TestIteratorChain(var35);
    java.lang.Object var38 = var29.nextKey((java.lang.Object)var35);
    org.apache.commons.collections.map.SingletonMap var39 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var29);
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var42 = var41.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var43 = org.apache.commons.collections.set.ListOrderedSet.decorate(var42);
    org.apache.commons.collections.Predicate var44 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Set var45 = org.apache.commons.collections.SetUtils.predicatedSet(var42, var44);
    boolean var46 = var39.containsKey((java.lang.Object)var44);
    org.apache.commons.collections.Predicate[] var47 = new org.apache.commons.collections.Predicate[] { var44};
    org.apache.commons.collections.functors.NonePredicate var48 = new org.apache.commons.collections.functors.NonePredicate(var47);
    java.lang.Object[] var49 = new java.lang.Object[] { var47};
    org.apache.commons.collections.CollectionUtils.addAll((java.util.Collection)var15, (java.lang.Object[])var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "the"+ "'", var14.equals("the"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[  ]"+ "'", var33.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var35.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);

  }

  public void test303() throws Throwable {

    org.apache.commons.collections.comparators.BooleanComparator var0 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var1 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var0);
    org.apache.commons.collections.comparators.ComparatorChain var2 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var1);
    org.apache.commons.collections.buffer.PriorityBuffer var3 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var1);
    var3.clear();
    org.apache.commons.collections.Predicate var5 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var6 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var7 = org.apache.commons.collections.PredicateUtils.orPredicate(var5, var6);
    org.apache.commons.collections.Predicate var8 = org.apache.commons.collections.PredicateUtils.nullIsExceptionPredicate(var7);
    org.apache.commons.collections.Buffer var9 = org.apache.commons.collections.BufferUtils.predicatedBuffer((org.apache.commons.collections.Buffer)var3, var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);

  }

  public void test304() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.set.TestTransformedSortedSet.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test305() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.Transformer var5 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var10 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var7, (java.util.Collection)var9);
    org.apache.commons.collections.map.DefaultedMap var12 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var13 = var12.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var14 = org.apache.commons.collections.set.ListOrderedSet.decorate(var13);
    java.lang.Object[] var15 = var14.toArray();
    org.apache.commons.collections.list.TreeList var16 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var14);
    java.util.List var17 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var9, (java.util.Collection)var16);
    org.apache.commons.collections.list.SetUniqueList var18 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var16);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var19 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var21 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var22 = var21.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var23 = org.apache.commons.collections.set.ListOrderedSet.decorate(var22);
    org.apache.commons.collections.map.SingletonMap var24 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var19, (java.lang.Object)var22);
    int var25 = var19.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var27 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var28 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var31 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var32 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var34 = var18.subList(var25, 0);
    org.apache.commons.collections.set.ListOrderedSet var35 = org.apache.commons.collections.set.ListOrderedSet.decorate((java.util.Set)var3, var34);
    org.apache.commons.collections.Predicate var36 = org.apache.commons.collections.functors.AnyPredicate.getInstance((java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.Predicate var39 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var40 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var41 = org.apache.commons.collections.PredicateUtils.orPredicate(var39, var40);
    int var42 = org.apache.commons.collections.CollectionUtils.countMatches((java.util.Collection)var38, var40);
    org.apache.commons.collections.map.DefaultedMap var44 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var45 = var44.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var46 = org.apache.commons.collections.set.ListOrderedSet.decorate(var45);
    java.lang.Object[] var47 = var46.toArray();
    org.apache.commons.collections.list.TreeList var48 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var46);
    java.util.Set var49 = org.apache.commons.collections.set.UnmodifiableSet.decorate((java.util.Set)var46);
    boolean var50 = var3.addAll(var42, (java.util.Collection)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test306() throws Throwable {

    org.apache.commons.collections.Predicate var0 = org.apache.commons.collections.functors.NotNullPredicate.getInstance();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test307() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    org.apache.commons.collections.BinaryHeap var32 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var34 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var35 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var32, (java.util.Collection)var34);
    org.apache.commons.collections.BinaryHeap var37 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var39 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var40 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var37, (java.util.Collection)var39);
    boolean var41 = var34.containsAll((java.util.Collection)var37);
    org.apache.commons.collections.MultiHashMap var43 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var44 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var45 = var37.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var46 = new org.apache.commons.collections.SequencedHashMap(0);
    int var47 = var46.size();
    org.apache.commons.collections.BinaryHeap var49 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var51 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var52 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var49, (java.util.Collection)var51);
    junit.framework.Test var53 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    org.apache.commons.collections.ResettableListIterator var55 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var54);
    org.apache.commons.collections.Transformer var56 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var57 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var55, var56);
    org.apache.commons.collections.BinaryHeap var59 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var61 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var62 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var59, (java.util.Collection)var61);
    java.util.Collection var63 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var51, var56, (java.util.Collection)var59);
    org.apache.commons.collections.comparators.TransformingComparator var64 = new org.apache.commons.collections.comparators.TransformingComparator(var56);
    org.apache.commons.collections.Predicate var65 = org.apache.commons.collections.functors.TransformerPredicate.getInstance(var56);
    var12.add(var47, (java.lang.Object)var65);
    org.apache.commons.collections.Predicate var67 = org.apache.commons.collections.PredicateUtils.nullIsFalsePredicate(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);

  }

  public void test308() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var3 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var4 = var3.supportsSet();
    var3.testSet();
    boolean var6 = var3.supportsAdd();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test309() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    java.util.Set var1 = var0.entrySet();
    java.util.Collection var2 = var0.values();
    org.apache.commons.collections.Predicate var3 = org.apache.commons.collections.PredicateUtils.onePredicate(var2);
    java.lang.Class[] var5 = new java.lang.Class[] { null};
    org.apache.commons.collections.map.DefaultedMap var7 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var8 = var7.entrySet();
    boolean var10 = var7.containsKey((java.lang.Object)1.0d);
    boolean var11 = org.apache.commons.collections.MapUtils.isEmpty((java.util.Map)var7);
    java.lang.Object[] var12 = new java.lang.Object[] { var7};
    org.apache.commons.collections.functors.InstantiateTransformer var13 = new org.apache.commons.collections.functors.InstantiateTransformer(var5, var12);
    org.apache.commons.collections.CollectionUtils.transform(var2, (org.apache.commons.collections.Transformer)var13);
    org.apache.commons.collections.Predicate var15 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var16 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var17 = org.apache.commons.collections.PredicateUtils.orPredicate(var15, var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var18 = var13.transform((java.lang.Object)var15);
      fail("Expected exception of type org.apache.commons.collections.FunctorException");
    } catch (org.apache.commons.collections.FunctorException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);

  }

  public void test310() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.BeanMap var16 = new org.apache.commons.collections.BeanMap((java.lang.Object)var15);
    java.util.Set var17 = var16.entrySet();
    org.apache.commons.collections.map.MultiKeyMap var18 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var19 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var18);
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var22 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var23 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var24 = var23.isEqualsCheckable();
    var23.testListIndexOf();
    java.lang.Short var27 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var18, (java.lang.Object)var23, (java.lang.Short)(short)10);
    int var28 = var18.size();
    org.apache.commons.collections.FastArrayList var29 = new org.apache.commons.collections.FastArrayList(var28);
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var34 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var31, (java.util.Collection)var33);
    org.apache.commons.collections.BinaryHeap var36 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var39 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var36, (java.util.Collection)var38);
    boolean var40 = var33.containsAll((java.util.Collection)var36);
    int var41 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var33);
    org.apache.commons.collections.MultiHashMap var42 = new org.apache.commons.collections.MultiHashMap(var41);
    var29.ensureCapacity(var41);
    boolean var44 = var29.isEmpty();
    java.util.Collection var45 = org.apache.commons.collections.CollectionUtils.removeAll((java.util.Collection)var17, (java.util.Collection)var29);
    org.apache.commons.collections.BinaryHeap var47 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var49 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var50 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var47, (java.util.Collection)var49);
    org.apache.commons.collections.map.DefaultedMap var52 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var53 = var52.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var54 = org.apache.commons.collections.set.ListOrderedSet.decorate(var53);
    java.lang.Object[] var55 = var54.toArray();
    org.apache.commons.collections.list.TreeList var56 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var54);
    java.util.List var57 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var49, (java.util.Collection)var56);
    org.apache.commons.collections.list.SetUniqueList var58 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var56);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var59 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var61 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var62 = var61.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var63 = org.apache.commons.collections.set.ListOrderedSet.decorate(var62);
    org.apache.commons.collections.map.SingletonMap var64 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var59, (java.lang.Object)var62);
    int var65 = var59.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var67 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var68 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var71 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var72 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var74 = var58.subList(var65, 0);
    java.util.ListIterator var75 = var29.listIterator(0);
    junit.framework.Test var76 = org.apache.commons.collections.iterators.TestSingletonIterator2.suite();
    java.lang.Object[] var77 = new java.lang.Object[] { var76};
    java.lang.Object[] var78 = var29.toArray(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (short)10+ "'", var27.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);

  }

  public void test311() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var9 = var8.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var10 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var9);
    java.lang.String var11 = var10.toString();
    org.apache.commons.collections.set.TestAll var12 = new org.apache.commons.collections.set.TestAll(var11);
    org.apache.commons.collections.set.TestPredicatedSortedSet var13 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var11);
    org.apache.commons.collections.set.TestTransformedSortedSet var14 = new org.apache.commons.collections.set.TestTransformedSortedSet(var11);
    java.lang.String var15 = var14.getCompatibilityVersion();
    org.apache.commons.collections.collection.TestSynchronizedCollection var17 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var18 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var19 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.assertEquals("", var15, "hi!");
      fail("Expected exception of type junit.framework.ComparisonFailure");
    } catch (junit.framework.ComparisonFailure e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[  ]"+ "'", var9.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var11.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "3.1"+ "'", var15.equals("3.1"));

  }

  public void test312() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.list.TestGrowthList var8 = new org.apache.commons.collections.list.TestGrowthList("hi!");
    var8.testListSetByIndexBoundsChecking2();
    var8.testListSetByIndexBoundsChecking2();
    java.util.List var11 = var8.makeEmptyList();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);

  }

  public void test313() throws Throwable {

    org.apache.commons.collections.iterators.ArrayIterator var0 = new org.apache.commons.collections.iterators.ArrayIterator();
    org.apache.commons.collections.Transformer var1 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var2 = new org.apache.commons.collections.Transformer[] { var1};
    org.apache.commons.collections.functors.ChainedTransformer var3 = new org.apache.commons.collections.functors.ChainedTransformer(var2);
    org.apache.commons.collections.iterators.TransformIterator var4 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var0, (org.apache.commons.collections.Transformer)var3);
    java.lang.Object var5 = var0.getArray();
    org.apache.commons.collections.iterators.ProxyIterator var6 = new org.apache.commons.collections.iterators.ProxyIterator((java.util.Iterator)var0);
    boolean var7 = var0.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test314() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    java.lang.Object var13 = var12.clone();
    org.apache.commons.collections.map.MultiKeyMap var14 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var15 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var14);
    org.apache.commons.collections.keyvalue.TiedMapEntry var16 = new org.apache.commons.collections.keyvalue.TiedMapEntry((java.util.Map)var12, (java.lang.Object)var14);
    java.lang.String var17 = var16.toString();
    org.apache.commons.collections.Transformer var18 = org.apache.commons.collections.functors.InvokerTransformer.getInstance(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "{}=null"+ "'", var17.equals("{}=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);

  }

  public void test315() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    var6.testBidiClear();
    var6.testBidiRemoveBySubMap();

  }

  public void test316() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.TestCollectionUtils var2 = new org.apache.commons.collections.TestCollectionUtils("");
    var2.testSizeIsEmpty_List();
    var2.testMaxSize();
    var2.testCardinalityOfNull();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var2.testCollect();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test317() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    java.util.Set var1 = var0.entrySet();
    java.util.Collection var2 = var0.values();
    java.util.Set var3 = var0.entrySet();
    java.lang.String var4 = var0.toString();
    org.apache.commons.collections.iterators.TestArrayListIterator var5 = new org.apache.commons.collections.iterators.TestArrayListIterator(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "{}"+ "'", var4.equals("{}"));

  }

  public void test318() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.Buffer var2 = org.apache.commons.collections.BufferUtils.synchronizedBuffer((org.apache.commons.collections.Buffer)var1);
    org.apache.commons.collections.BinaryHeap var4 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var7 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var4, (java.util.Collection)var6);
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    java.lang.Object[] var12 = var11.toArray();
    org.apache.commons.collections.list.TreeList var13 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var11);
    java.util.List var14 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var6, (java.util.Collection)var13);
    org.apache.commons.collections.list.SetUniqueList var15 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var13);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var16 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var19 = var18.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var20 = org.apache.commons.collections.set.ListOrderedSet.decorate(var19);
    org.apache.commons.collections.map.SingletonMap var21 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var16, (java.lang.Object)var19);
    int var22 = var16.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var24 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var25 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var28 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var29 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var31 = var15.subList(var22, 0);
    boolean var32 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var15);
    org.apache.commons.collections.LRUMap var33 = new org.apache.commons.collections.LRUMap();
    boolean var34 = var15.contains((java.lang.Object)var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.assertSame((java.lang.Object)var1, (java.lang.Object)var33);
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test319() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    org.apache.commons.collections.iterators.TestIteratorChain var6 = new org.apache.commons.collections.iterators.TestIteratorChain(var4);
    org.apache.commons.collections.collection.TestSynchronizedCollection var8 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var9 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    var6.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test320() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var6 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var8 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var9 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var10 = var9.isEmpty();
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    float var15 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var12, (java.lang.Object)100L, 100.0f);
    boolean var16 = var12.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var10, var16);
    org.apache.commons.collections.bag.TestTypedSortedBag var18 = new org.apache.commons.collections.bag.TestTypedSortedBag("hi!");
    java.lang.Class[] var20 = new java.lang.Class[] { null};
    org.apache.commons.collections.map.DefaultedMap var22 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var23 = var22.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var24 = org.apache.commons.collections.set.ListOrderedSet.decorate(var23);
    java.lang.Object[] var25 = var24.toArray();
    org.apache.commons.collections.list.TreeList var26 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var24);
    java.util.Collection var27 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var26);
    java.lang.Object[] var28 = new java.lang.Object[] { var26};
    org.apache.commons.collections.functors.InvokerTransformer var29 = new org.apache.commons.collections.functors.InvokerTransformer("hi!", var20, var28);
    org.apache.commons.collections.buffer.TestBoundedBuffer var30 = new org.apache.commons.collections.buffer.TestBoundedBuffer("hi!");
    var30.testAddToFullBufferRemoveViaIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);

  }

  public void test321() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    var2.testLooping2();
    var2.testConstructorEx();

  }

  public void test322() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.BulkTest var7 = var6.bulkTestHeadMap();
    org.apache.commons.collections.BulkTest var8 = var6.bulkTestInverseMap();
    var6.testSampleMappings();
    org.apache.commons.collections.BulkTest var10 = var6.bulkTestSubMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);

  }

  public void test323() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    java.lang.Boolean var32 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var18, (java.lang.Object)true, (java.lang.Boolean)var31);
    java.lang.Object var33 = var1.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var35 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var1, (java.lang.Object)1L);
    org.apache.commons.collections.map.LRUMap var36 = new org.apache.commons.collections.map.LRUMap((java.util.Map)var1);
    org.apache.commons.collections.map.TestListOrderedMap2 var38 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    var38.testPreviousKey();
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var44 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var41, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    double var45 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var36, (java.lang.Object)var38, (double)var44);
    boolean var46 = var36.isFull();
    org.apache.commons.collections.Predicate var47 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var48 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var49 = org.apache.commons.collections.PredicateUtils.orPredicate(var47, var48);
    org.apache.commons.collections.Predicate var50 = org.apache.commons.collections.PredicateUtils.nullIsTruePredicate(var47);
    org.apache.commons.collections.MultiHashMap var52 = new org.apache.commons.collections.MultiHashMap(0);
    float var55 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var52, (java.lang.Object)100L, 100.0f);
    org.apache.commons.collections.MultiHashMap var58 = new org.apache.commons.collections.MultiHashMap(0);
    boolean var60 = var58.equals((java.lang.Object)1L);
    java.lang.Object var61 = var52.put((java.lang.Object)(-1.0d), (java.lang.Object)1L);
    java.lang.Double var62 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var36, (java.lang.Object)var47, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.Predicate[] var63 = new org.apache.commons.collections.Predicate[] { var47};
    org.apache.commons.collections.Factory var64 = org.apache.commons.collections.FactoryUtils.nullFactory();
    org.apache.commons.collections.Transformer var65 = org.apache.commons.collections.functors.FactoryTransformer.getInstance(var64);
    org.apache.commons.collections.Transformer[] var66 = new org.apache.commons.collections.Transformer[] { var65};
    org.apache.commons.collections.collection.TestSynchronizedCollection var68 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var69 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    java.util.Map var70 = var69.makeFullMap();
    org.apache.commons.collections.Transformer var71 = org.apache.commons.collections.functors.ConstantTransformer.getInstance((java.lang.Object)var69);
    org.apache.commons.collections.functors.SwitchTransformer var72 = new org.apache.commons.collections.functors.SwitchTransformer(var63, var66, var71);
    org.apache.commons.collections.collection.TestSynchronizedCollection var74 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var75 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var76 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var77 = var76.supportsSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var78 = var72.transform((java.lang.Object)var76);
      fail("Expected exception of type org.apache.commons.collections.FunctorException");
    } catch (org.apache.commons.collections.FunctorException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + true+ "'", var32.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (-1.0d)+ "'", var44.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + 1L+ "'", var61.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + (-1.0d)+ "'", var62.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test324() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var2.testLastKey();
    java.util.Map var4 = var2.makeFullMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test325() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    org.apache.commons.collections.TestDoubleOrderedMap var4 = new org.apache.commons.collections.TestDoubleOrderedMap(var2);
    var4.testSize();
    java.util.Map var6 = var4.makeEmptyMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test326() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.list.TestAll.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test327() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    boolean var20 = var18.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var21 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var22 = var21.getFullElements();
    org.apache.commons.collections.collection.TestSynchronizedCollection var24 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var25 = var24.countTestCases();
    org.apache.commons.collections.Predicate var26 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var25);
    java.lang.Object var27 = org.apache.commons.collections.CollectionUtils.get((java.lang.Object)var22, var25);
    org.apache.commons.collections.buffer.BoundedFifoBuffer var28 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(var25);
    boolean var30 = var28.add((java.lang.Object)0L);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var31 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var33 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var34 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var35 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var36 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var37 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var38 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.MultiHashMap var40 = new org.apache.commons.collections.MultiHashMap(0);
    boolean var42 = var40.equals((java.lang.Object)1L);
    java.lang.Long var43 = org.apache.commons.collections.MapUtils.getLong((java.util.Map)var31, (java.lang.Object)"", (java.lang.Long)1L);
    java.lang.Number var44 = org.apache.commons.collections.MapUtils.getNumber((java.util.Map)var12, (java.lang.Object)var28, (java.lang.Number)var43);
    var12.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "the"+ "'", var27.equals("the"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 1L+ "'", var43.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + 1L+ "'", var44.equals(1L));

  }

  public void test328() throws Throwable {

    org.apache.commons.collections.MultiHashMap var2 = new org.apache.commons.collections.MultiHashMap(0);
    float var5 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var2, (java.lang.Object)100L, 100.0f);
    org.apache.commons.collections.MultiHashMap var6 = new org.apache.commons.collections.MultiHashMap((java.util.Map)var2);
    org.apache.commons.collections.Closure var7 = org.apache.commons.collections.functors.SwitchClosure.getInstance((java.util.Map)var6);
    org.apache.commons.collections.functors.ForClosure var8 = new org.apache.commons.collections.functors.ForClosure(1, var7);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var9 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var10 = var9.isEmpty();
    org.apache.commons.collections.collection.TestSynchronizedCollection var12 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var13 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var13.testComparator();
    org.apache.commons.collections.keyvalue.MultiKey var15 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var9, (java.lang.Object)var13);
    org.apache.commons.collections.Transformer var16 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var17 = new org.apache.commons.collections.Transformer[] { var16};
    org.apache.commons.collections.functors.ChainedTransformer var18 = new org.apache.commons.collections.functors.ChainedTransformer(var17);
    org.apache.commons.collections.map.DefaultedMap var20 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var21 = var20.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var22 = org.apache.commons.collections.set.ListOrderedSet.decorate(var21);
    java.lang.Object[] var23 = var22.toArray();
    org.apache.commons.collections.Transformer var24 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((java.util.Collection)var22);
    java.util.SortedMap var25 = org.apache.commons.collections.MapUtils.transformedSortedMap((java.util.SortedMap)var9, (org.apache.commons.collections.Transformer)var18, var24);
    org.apache.commons.collections.BinaryHeap var27 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var30 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var27, (java.util.Collection)var29);
    org.apache.commons.collections.map.DefaultedMap var32 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var33 = var32.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var34 = org.apache.commons.collections.set.ListOrderedSet.decorate(var33);
    java.lang.Object[] var35 = var34.toArray();
    org.apache.commons.collections.list.TreeList var36 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var34);
    java.util.List var37 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var29, (java.util.Collection)var36);
    org.apache.commons.collections.list.SetUniqueList var38 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var36);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var39 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var42 = var41.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var43 = org.apache.commons.collections.set.ListOrderedSet.decorate(var42);
    org.apache.commons.collections.map.SingletonMap var44 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var39, (java.lang.Object)var42);
    int var45 = var39.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var47 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var48 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var51 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var52 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var54 = var38.subList(var45, 0);
    boolean var55 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var38);
    java.util.ListIterator var56 = var38.listIterator();
    java.util.Iterator var57 = var38.iterator();
    org.apache.commons.collections.map.DefaultedMap var60 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var61 = var60.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var62 = org.apache.commons.collections.set.ListOrderedSet.decorate(var61);
    java.lang.Object[] var63 = var62.toArray();
    org.apache.commons.collections.list.TreeList var64 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var62);
    java.util.Collection var65 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var64);
    boolean var66 = var38.addAll((-1), (java.util.Collection)var64);
    java.lang.Byte var67 = org.apache.commons.collections.MapUtils.getByte((java.util.Map)var9, (java.lang.Object)var66);
    org.apache.commons.collections.comparators.BooleanComparator var68 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var69 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var68);
    org.apache.commons.collections.buffer.PriorityBuffer var70 = new org.apache.commons.collections.buffer.PriorityBuffer(1, var66, (java.util.Comparator)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);

  }

  public void test329() throws Throwable {

    org.apache.commons.collections.ArrayStack var0 = new org.apache.commons.collections.ArrayStack();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = var0.remove();
      fail("Expected exception of type org.apache.commons.collections.BufferUnderflowException");
    } catch (org.apache.commons.collections.BufferUnderflowException e) {
      // Expected exception.
    }

  }

  public void test330() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var12 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    var12.testBoundedFifoBufferRemove();
    java.util.Collection var14 = var12.makeConfirmedCollection();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test331() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var12 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    var12.testConstructorException1();
    var12.testConstructorException2();
    boolean var15 = var12.isAddSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test332() throws Throwable {

    org.apache.commons.collections.iterators.ArrayIterator var0 = new org.apache.commons.collections.iterators.ArrayIterator();
    org.apache.commons.collections.Transformer var1 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var2 = new org.apache.commons.collections.Transformer[] { var1};
    org.apache.commons.collections.functors.ChainedTransformer var3 = new org.apache.commons.collections.functors.ChainedTransformer(var2);
    org.apache.commons.collections.iterators.TransformIterator var4 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var0, (org.apache.commons.collections.Transformer)var3);
    var0.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test333() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.bag.TestTransformedSortedBag var4 = new org.apache.commons.collections.bag.TestTransformedSortedBag("");
    org.apache.commons.collections.Bag var5 = var4.makeBag();
    var4.testSimpleSerialization();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test334() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    var2.testSize();
    org.apache.commons.collections.Bag var4 = var2.makeBag();
    var2.testRemoveAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test335() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    java.util.Iterator var31 = var12.iterator();
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var41 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var38, (java.util.Collection)var40);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var46 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var43, (java.util.Collection)var45);
    boolean var47 = var40.containsAll((java.util.Collection)var43);
    java.util.Collection var48 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var35, (java.util.Collection)var40);
    boolean var49 = var12.containsAll(var48);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var52 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var53 = var52.isEmpty();
    org.apache.commons.collections.map.LRUMap var54 = new org.apache.commons.collections.map.LRUMap(100, 1.0f, var53);
    org.apache.commons.collections.BinaryHeap var56 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var58 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var59 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var56, (java.util.Collection)var58);
    org.apache.commons.collections.BinaryHeap var61 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var63 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var64 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var61, (java.util.Collection)var63);
    boolean var65 = var58.containsAll((java.util.Collection)var61);
    org.apache.commons.collections.MultiHashMap var67 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var68 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var69 = var61.remove((java.lang.Object)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var70 = var12.subList(100, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test336() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.iterators.TestLoopingIterator.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test337() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    java.lang.Boolean var32 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var18, (java.lang.Object)true, (java.lang.Boolean)var31);
    java.lang.Object var33 = var1.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var35 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var1, (java.lang.Object)1L);
    org.apache.commons.collections.map.LRUMap var36 = new org.apache.commons.collections.map.LRUMap((java.util.Map)var1);
    org.apache.commons.collections.map.TestListOrderedMap2 var38 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    var38.testPreviousKey();
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var44 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var41, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    double var45 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var36, (java.lang.Object)var38, (double)var44);
    org.apache.commons.collections.BinaryHeap var47 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var48 = var47.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var49 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var48);
    java.lang.String var50 = var49.toString();
    org.apache.commons.collections.bag.TestTreeBag var51 = new org.apache.commons.collections.bag.TestTreeBag(var50);
    org.apache.commons.collections.iterators.TestIteratorChain var52 = new org.apache.commons.collections.iterators.TestIteratorChain(var50);
    org.apache.commons.collections.TestDoubleOrderedMap var53 = new org.apache.commons.collections.TestDoubleOrderedMap(var50);
    java.lang.Number var54 = org.apache.commons.collections.MapUtils.getNumber((java.util.Map)var36, (java.lang.Object)var50);
    boolean var55 = var36.isScanUntilRemovable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + true+ "'", var32.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (-1.0d)+ "'", var44.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[  ]"+ "'", var48.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var50.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test338() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    org.apache.commons.collections.Predicate var13 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var14 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var15 = org.apache.commons.collections.PredicateUtils.orPredicate(var13, var14);
    org.apache.commons.collections.Predicate[] var16 = new org.apache.commons.collections.Predicate[] { var14};
    org.apache.commons.collections.Predicate var17 = org.apache.commons.collections.PredicateUtils.anyPredicate(var16);
    org.apache.commons.collections.map.DefaultedMap var19 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var20 = var19.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var21 = org.apache.commons.collections.set.ListOrderedSet.decorate(var20);
    java.lang.Object[] var22 = var21.toArray();
    org.apache.commons.collections.list.TreeList var23 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var21);
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    java.util.ListIterator var27 = var23.listIterator(0);
    org.apache.commons.collections.Predicate var28 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var29 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var30 = org.apache.commons.collections.PredicateUtils.orPredicate(var28, var29);
    int var31 = var23.indexOf((java.lang.Object)var28);
    java.util.Map var32 = org.apache.commons.collections.MapUtils.predicatedMap((java.util.Map)var12, var17, var28);
    org.apache.commons.collections.Predicate[] var33 = new org.apache.commons.collections.Predicate[] { var17};
    org.apache.commons.collections.functors.NonePredicate var34 = new org.apache.commons.collections.functors.NonePredicate(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);

  }

  public void test339() throws Throwable {

    org.apache.commons.collections.iterators.ArrayIterator var0 = new org.apache.commons.collections.iterators.ArrayIterator();
    org.apache.commons.collections.Transformer var1 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var2 = new org.apache.commons.collections.Transformer[] { var1};
    org.apache.commons.collections.functors.ChainedTransformer var3 = new org.apache.commons.collections.functors.ChainedTransformer(var2);
    org.apache.commons.collections.iterators.TransformIterator var4 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var0, (org.apache.commons.collections.Transformer)var3);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var5 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var7 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var8 = var7.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var9 = org.apache.commons.collections.set.ListOrderedSet.decorate(var8);
    org.apache.commons.collections.map.SingletonMap var10 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var5, (java.lang.Object)var8);
    boolean var12 = var10.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var13 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var14 = var13.getFullElements();
    org.apache.commons.collections.collection.TestSynchronizedCollection var16 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var17 = var16.countTestCases();
    org.apache.commons.collections.Predicate var18 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var17);
    java.lang.Object var19 = org.apache.commons.collections.CollectionUtils.get((java.lang.Object)var14, var17);
    org.apache.commons.collections.buffer.BoundedFifoBuffer var20 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(var17);
    boolean var22 = var20.add((java.lang.Object)0L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var23 = var3.transform((java.lang.Object)var20);
      fail("Expected exception of type org.apache.commons.collections.FunctorException");
    } catch (org.apache.commons.collections.FunctorException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "the"+ "'", var19.equals("the"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test340() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var16 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var17 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var14, (java.util.Collection)var16);
    org.apache.commons.collections.map.DefaultedMap var19 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var20 = var19.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var21 = org.apache.commons.collections.set.ListOrderedSet.decorate(var20);
    java.lang.Object[] var22 = var21.toArray();
    org.apache.commons.collections.list.TreeList var23 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var21);
    java.util.List var24 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var16, (java.util.Collection)var23);
    org.apache.commons.collections.list.SetUniqueList var25 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var23);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var26 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var28 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var29 = var28.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var30 = org.apache.commons.collections.set.ListOrderedSet.decorate(var29);
    org.apache.commons.collections.map.SingletonMap var31 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var26, (java.lang.Object)var29);
    int var32 = var26.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var34 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var35 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var38 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var39 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var41 = var25.subList(var32, 0);
    boolean var42 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var25);
    java.util.ListIterator var43 = var25.listIterator();
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var47 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var48 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var45, (java.util.Collection)var47);
    org.apache.commons.collections.BinaryHeap var50 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var52 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var53 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var50, (java.util.Collection)var52);
    boolean var54 = var47.containsAll((java.util.Collection)var50);
    org.apache.commons.collections.MultiHashMap var56 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var57 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var58 = var50.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var59 = new org.apache.commons.collections.SequencedHashMap(0);
    int var60 = var59.size();
    org.apache.commons.collections.BinaryHeap var62 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var64 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var65 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var62, (java.util.Collection)var64);
    junit.framework.Test var66 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    org.apache.commons.collections.ResettableListIterator var68 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var67);
    org.apache.commons.collections.Transformer var69 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var70 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var68, var69);
    org.apache.commons.collections.BinaryHeap var72 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var74 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var75 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var72, (java.util.Collection)var74);
    java.util.Collection var76 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var64, var69, (java.util.Collection)var72);
    org.apache.commons.collections.comparators.TransformingComparator var77 = new org.apache.commons.collections.comparators.TransformingComparator(var69);
    org.apache.commons.collections.Predicate var78 = org.apache.commons.collections.functors.TransformerPredicate.getInstance(var69);
    var25.add(var60, (java.lang.Object)var78);
    org.apache.commons.collections.map.DefaultedMap var81 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var82 = var81.entrySet();
    boolean var84 = var81.containsKey((java.lang.Object)1.0d);
    boolean var85 = org.apache.commons.collections.MapUtils.isEmpty((java.util.Map)var81);
    java.util.Map var86 = org.apache.commons.collections.MapUtils.orderedMap((java.util.Map)var81);
    java.util.Collection var87 = var81.values();
    boolean var88 = var25.add((java.lang.Object)var81);
    boolean var89 = org.apache.commons.collections.CollectionUtils.addIgnoreNull((java.util.Collection)var12, (java.lang.Object)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test341() throws Throwable {

    org.apache.commons.collections.map.ReferenceMap var0 = new org.apache.commons.collections.map.ReferenceMap();

  }

  public void test342() throws Throwable {

    org.apache.commons.collections.Closure var0 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.functors.IdentityPredicate var1 = new org.apache.commons.collections.functors.IdentityPredicate((java.lang.Object)var0);
    java.lang.Object var2 = var1.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test343() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    boolean var5 = var3.supportsEmptyIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test344() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    org.apache.commons.collections.iterators.ObjectArrayListIterator var4 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var3);
    int var5 = var4.getStartIndex();
    var4.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test345() throws Throwable {

    org.apache.commons.collections.SetUtils var0 = new org.apache.commons.collections.SetUtils();

  }

  public void test346() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.buffer.TestPredicatedBuffer var6 = new org.apache.commons.collections.buffer.TestPredicatedBuffer("");
    java.util.Collection var7 = var6.makeConfirmedFullCollection();
    java.util.Collection var8 = var6.makeCollection();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test347() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    java.lang.Boolean var32 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var18, (java.lang.Object)true, (java.lang.Boolean)var31);
    java.lang.Object var33 = var1.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var35 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var1, (java.lang.Object)1L);
    org.apache.commons.collections.map.LRUMap var36 = new org.apache.commons.collections.map.LRUMap((java.util.Map)var1);
    org.apache.commons.collections.map.TestListOrderedMap2 var38 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    var38.testPreviousKey();
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var44 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var41, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    double var45 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var36, (java.lang.Object)var38, (double)var44);
    org.apache.commons.collections.BinaryHeap var47 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var48 = var47.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var49 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var48);
    java.lang.String var50 = var49.toString();
    org.apache.commons.collections.bag.TestTreeBag var51 = new org.apache.commons.collections.bag.TestTreeBag(var50);
    org.apache.commons.collections.iterators.TestIteratorChain var52 = new org.apache.commons.collections.iterators.TestIteratorChain(var50);
    org.apache.commons.collections.TestDoubleOrderedMap var53 = new org.apache.commons.collections.TestDoubleOrderedMap(var50);
    java.lang.Number var54 = org.apache.commons.collections.MapUtils.getNumber((java.util.Map)var36, (java.lang.Object)var50);
    org.apache.commons.collections.comparators.TestFixedOrderComparator var56 = new org.apache.commons.collections.comparators.TestFixedOrderComparator("");
    short var57 = org.apache.commons.collections.MapUtils.getShortValue((java.util.Map)var36, (java.lang.Object)"");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + true+ "'", var32.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (-1.0d)+ "'", var44.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[  ]"+ "'", var48.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var50.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (short)0);

  }

  public void test348() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    org.apache.commons.collections.list.GrowthList var30 = new org.apache.commons.collections.list.GrowthList();
    org.apache.commons.collections.keyvalue.DefaultKeyValue var31 = new org.apache.commons.collections.keyvalue.DefaultKeyValue((java.lang.Object)var12, (java.lang.Object)var30);
    java.util.List var32 = org.apache.commons.collections.list.FixedSizeList.decorate((java.util.List)var12);
    org.apache.commons.collections.Predicate var33 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var34 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var35 = org.apache.commons.collections.PredicateUtils.orPredicate(var33, var34);
    org.apache.commons.collections.Closure var36 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var37 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var38 = org.apache.commons.collections.functors.IfClosure.getInstance(var34, var36, var37);
    org.apache.commons.collections.Predicate var39 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var40 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var41 = org.apache.commons.collections.PredicateUtils.orPredicate(var39, var40);
    org.apache.commons.collections.Closure var42 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var43 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var44 = org.apache.commons.collections.functors.IfClosure.getInstance(var40, var42, var43);
    org.apache.commons.collections.map.DefaultedMap var46 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var49 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var46, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var51 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var54 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var51, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var56 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var58 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var59 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var56, (java.util.Collection)var58);
    java.lang.Boolean var60 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var46, (java.lang.Object)true, (java.lang.Boolean)var59);
    org.apache.commons.collections.map.DefaultedMap var63 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var66 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var63, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var68 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var71 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var68, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var73 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var75 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var76 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var73, (java.util.Collection)var75);
    java.lang.Boolean var77 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var63, (java.lang.Object)true, (java.lang.Boolean)var76);
    java.lang.Object var78 = var46.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var80 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var46, (java.lang.Object)1L);
    org.apache.commons.collections.Closure var81 = org.apache.commons.collections.functors.WhileClosure.getInstance(var34, var44, var80);
    org.apache.commons.collections.Predicate var82 = org.apache.commons.collections.PredicateUtils.nullIsTruePredicate(var34);
    java.util.List var83 = org.apache.commons.collections.list.PredicatedList.decorate((java.util.List)var12, var82);
    org.apache.commons.collections.functors.ConstantFactory var84 = new org.apache.commons.collections.functors.ConstantFactory((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + (-1.0d)+ "'", var49.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + (-1.0d)+ "'", var54.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + true+ "'", var60.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + (-1.0d)+ "'", var66.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + (-1.0d)+ "'", var71.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + true+ "'", var77.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var81 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var82 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var83 == null);

  }

  public void test349() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    org.apache.commons.collections.map.DefaultedMap var31 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var34 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var31, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var36 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.Predicate var37 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var38 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var39 = org.apache.commons.collections.PredicateUtils.orPredicate(var37, var38);
    int var40 = org.apache.commons.collections.CollectionUtils.countMatches((java.util.Collection)var36, var38);
    boolean var41 = var31.containsValue((java.lang.Object)var36);
    org.apache.commons.collections.Transformer var42 = org.apache.commons.collections.TransformerUtils.switchTransformer((java.util.Map)var31);
    java.util.Collection var43 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var12, var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + (-1.0d)+ "'", var34.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);

  }

  public void test350() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.list.TestGrowthList var8 = new org.apache.commons.collections.list.TestGrowthList("hi!");
    var8.testListSetByIndexBoundsChecking2();
    var8.testListSetByIndexBoundsChecking2();
    var8.testListSetByIndexBoundsChecking2();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test351() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    var2.testRemovingElementsAndIteratingForward();
    java.lang.Object[] var4 = new java.lang.Object[] { var2};
    org.apache.commons.collections.MultiHashMap var6 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var7 = new org.apache.commons.collections.MultiHashMap(0);
    java.lang.Object[] var8 = new java.lang.Object[] { 0};
    org.apache.commons.collections.BinaryHeap var10 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var12 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var13 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var10, (java.util.Collection)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var17 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var18 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var15, (java.util.Collection)var17);
    boolean var19 = var12.containsAll((java.util.Collection)var15);
    int var20 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var12);
    org.apache.commons.collections.iterators.ObjectArrayListIterator var21 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var8, var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.map.DefaultedMap var28 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var29 = var28.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var30 = org.apache.commons.collections.set.ListOrderedSet.decorate(var29);
    java.lang.Object[] var31 = var30.toArray();
    org.apache.commons.collections.list.TreeList var32 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var30);
    java.util.List var33 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var25, (java.util.Collection)var32);
    org.apache.commons.collections.list.SetUniqueList var34 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var32);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var35 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var37 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var38 = var37.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var39 = org.apache.commons.collections.set.ListOrderedSet.decorate(var38);
    org.apache.commons.collections.map.SingletonMap var40 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var35, (java.lang.Object)var38);
    int var41 = var35.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var43 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var44 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var47 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var48 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var50 = var34.subList(var41, 0);
    boolean var51 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var34);
    java.util.ListIterator var52 = var34.listIterator();
    org.apache.commons.collections.BinaryHeap var54 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var56 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var57 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var54, (java.util.Collection)var56);
    org.apache.commons.collections.BinaryHeap var59 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var61 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var62 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var59, (java.util.Collection)var61);
    boolean var63 = var56.containsAll((java.util.Collection)var59);
    org.apache.commons.collections.MultiHashMap var65 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var66 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var67 = var59.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var68 = new org.apache.commons.collections.SequencedHashMap(0);
    int var69 = var68.size();
    org.apache.commons.collections.BinaryHeap var71 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var73 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var74 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var71, (java.util.Collection)var73);
    junit.framework.Test var75 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    org.apache.commons.collections.ResettableListIterator var77 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var76);
    org.apache.commons.collections.Transformer var78 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var79 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var77, var78);
    org.apache.commons.collections.BinaryHeap var81 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var83 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var84 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var81, (java.util.Collection)var83);
    java.util.Collection var85 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var73, var78, (java.util.Collection)var81);
    org.apache.commons.collections.comparators.TransformingComparator var86 = new org.apache.commons.collections.comparators.TransformingComparator(var78);
    org.apache.commons.collections.Predicate var87 = org.apache.commons.collections.functors.TransformerPredicate.getInstance(var78);
    var34.add(var69, (java.lang.Object)var87);
    org.apache.commons.collections.list.CursorableLinkedList var89 = new org.apache.commons.collections.list.CursorableLinkedList((java.util.Collection)var34);
    java.util.ListIterator var91 = var89.listIterator(1);
    org.apache.commons.collections.ResettableIterator var92 = org.apache.commons.collections.IteratorUtils.arrayIterator(var4, var20, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var92 == null);

  }

  public void test352() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    java.lang.Object var13 = var12.clone();
    org.apache.commons.collections.map.MultiKeyMap var14 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var15 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var14);
    org.apache.commons.collections.keyvalue.TiedMapEntry var16 = new org.apache.commons.collections.keyvalue.TiedMapEntry((java.util.Map)var12, (java.lang.Object)var14);
    java.lang.String var17 = var16.toString();
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var20 = var19.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var21 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var20);
    org.apache.commons.collections.TestDoubleOrderedMap var22 = new org.apache.commons.collections.TestDoubleOrderedMap(var20);
    var22.testSize();
    java.lang.Object var24 = var16.setValue((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "{}=null"+ "'", var17.equals("{}=null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[  ]"+ "'", var20.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);

  }

  public void test353() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    java.util.Iterator var31 = var12.iterator();
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var41 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var38, (java.util.Collection)var40);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var46 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var43, (java.util.Collection)var45);
    boolean var47 = var40.containsAll((java.util.Collection)var43);
    java.util.Collection var48 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var35, (java.util.Collection)var40);
    boolean var49 = var12.containsAll(var48);
    java.util.Collection var50 = org.apache.commons.collections.CollectionUtils.unmodifiableCollection((java.util.Collection)var12);
    
    // Checks the contract:  equals-symmetric on var50 and var48.
    assertTrue("Contract failed: equals-symmetric on var50 and var48.", var50.equals(var48) ? var48.equals(var50) : true);

  }

  public void test354() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    var5.testEmptyListSort();

  }

  public void test355() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    java.util.Set var1 = var0.entrySet();
    java.util.Collection var2 = var0.values();
    org.apache.commons.collections.Predicate var3 = org.apache.commons.collections.PredicateUtils.onePredicate(var2);
    org.apache.commons.collections.Predicate var4 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var5 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var6 = org.apache.commons.collections.PredicateUtils.orPredicate(var4, var5);
    org.apache.commons.collections.Closure var7 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var8 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var9 = org.apache.commons.collections.functors.IfClosure.getInstance(var5, var7, var8);
    org.apache.commons.collections.Predicate var10 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var11 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var12 = org.apache.commons.collections.PredicateUtils.orPredicate(var10, var11);
    org.apache.commons.collections.Closure var13 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var14 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var15 = org.apache.commons.collections.functors.IfClosure.getInstance(var11, var13, var14);
    org.apache.commons.collections.map.DefaultedMap var17 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var20 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var17, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var22 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var25 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var22, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var27 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var30 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var27, (java.util.Collection)var29);
    java.lang.Boolean var31 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var17, (java.lang.Object)true, (java.lang.Boolean)var30);
    org.apache.commons.collections.map.DefaultedMap var34 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var37 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var34, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var39 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var42 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var39, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var44 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var46 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var47 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var44, (java.util.Collection)var46);
    java.lang.Boolean var48 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var34, (java.lang.Object)true, (java.lang.Boolean)var47);
    java.lang.Object var49 = var17.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var51 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var17, (java.lang.Object)1L);
    org.apache.commons.collections.Closure var52 = org.apache.commons.collections.functors.WhileClosure.getInstance(var5, var15, var51);
    org.apache.commons.collections.Predicate var53 = org.apache.commons.collections.PredicateUtils.eitherPredicate(var3, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + (-1.0d)+ "'", var20.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + (-1.0d)+ "'", var25.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + true+ "'", var31.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + (-1.0d)+ "'", var37.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + (-1.0d)+ "'", var42.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + true+ "'", var48.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);

  }

  public void test356() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var16 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var17 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var14, (java.util.Collection)var16);
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var22 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var19, (java.util.Collection)var21);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var27 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var24, (java.util.Collection)var26);
    boolean var28 = var21.containsAll((java.util.Collection)var24);
    java.util.Collection var29 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var16, (java.util.Collection)var21);
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var34 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var31, (java.util.Collection)var33);
    org.apache.commons.collections.BinaryHeap var36 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var39 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var36, (java.util.Collection)var38);
    org.apache.commons.collections.BinaryHeap var41 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var44 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var41, (java.util.Collection)var43);
    boolean var45 = var38.containsAll((java.util.Collection)var41);
    java.util.Collection var46 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var33, (java.util.Collection)var38);
    boolean var47 = var16.retainAll((java.util.Collection)var38);
    var16.clear();
    org.apache.commons.collections.Closure var49 = org.apache.commons.collections.ClosureUtils.chainedClosure((java.util.Collection)var16);
    int var50 = var10.lastIndexOf((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));

  }

  public void test357() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.iterators.TestCollatingIterator var2 = new org.apache.commons.collections.iterators.TestCollatingIterator("");
    java.lang.String var3 = var2.getName();
    org.apache.commons.collections.TestAll var4 = new org.apache.commons.collections.TestAll(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test358() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var2.testComparator();
    org.apache.commons.collections.BulkTest var4 = var2.bulkTestSubMap();
    org.apache.commons.collections.BulkTest var5 = var2.bulkTestHeadMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);

  }

  public void test359() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    org.apache.commons.collections.LRUMap var30 = new org.apache.commons.collections.LRUMap();
    boolean var31 = var12.contains((java.lang.Object)var30);
    org.apache.commons.collections.comparators.BooleanComparator var32 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var33 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var32);
    org.apache.commons.collections.comparators.ComparatorChain var34 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var33);
    org.apache.commons.collections.MultiHashMap var36 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var37 = new org.apache.commons.collections.MultiHashMap(0);
    java.lang.Object[] var38 = new java.lang.Object[] { 0};
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var42 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var43 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var40, (java.util.Collection)var42);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var47 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var48 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var45, (java.util.Collection)var47);
    boolean var49 = var42.containsAll((java.util.Collection)var45);
    int var50 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var42);
    org.apache.commons.collections.iterators.ObjectArrayListIterator var51 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var38, var50);
    java.util.Iterator[] var52 = new java.util.Iterator[] { var51};
    java.util.Iterator var53 = org.apache.commons.collections.IteratorUtils.collatedIterator((java.util.Comparator)var34, var52);
    org.apache.commons.collections.comparators.BooleanComparator var54 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var55 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var54);
    org.apache.commons.collections.comparators.ComparatorChain var56 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var55);
    org.apache.commons.collections.buffer.PriorityBuffer var57 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var55);
    org.apache.commons.collections.map.DefaultedMap var59 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var60 = var59.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var61 = org.apache.commons.collections.set.ListOrderedSet.decorate(var60);
    java.lang.Object[] var62 = var61.toArray();
    org.apache.commons.collections.list.TreeList var63 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var61);
    java.util.Collection var64 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var63);
    org.apache.commons.collections.BinaryHeap var66 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var68 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var69 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var66, (java.util.Collection)var68);
    junit.framework.Test var70 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var71 = new java.lang.Object[] { var70};
    org.apache.commons.collections.ResettableListIterator var72 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var71);
    org.apache.commons.collections.Transformer var73 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var74 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var72, var73);
    org.apache.commons.collections.BinaryHeap var76 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var78 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var79 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var76, (java.util.Collection)var78);
    java.util.Collection var80 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var68, var73, (java.util.Collection)var76);
    boolean var81 = var63.removeAll((java.util.Collection)var76);
    var34.addComparator((java.util.Comparator)var55, var81);
    int var83 = var34.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var84 = var12.remove(var83);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 2);

  }

  public void test360() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    org.apache.commons.collections.Predicate var13 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var14 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var15 = org.apache.commons.collections.PredicateUtils.orPredicate(var13, var14);
    org.apache.commons.collections.Predicate[] var16 = new org.apache.commons.collections.Predicate[] { var14};
    org.apache.commons.collections.Predicate var17 = org.apache.commons.collections.PredicateUtils.anyPredicate(var16);
    org.apache.commons.collections.map.DefaultedMap var19 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var20 = var19.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var21 = org.apache.commons.collections.set.ListOrderedSet.decorate(var20);
    java.lang.Object[] var22 = var21.toArray();
    org.apache.commons.collections.list.TreeList var23 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var21);
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    java.util.ListIterator var27 = var23.listIterator(0);
    org.apache.commons.collections.Predicate var28 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var29 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var30 = org.apache.commons.collections.PredicateUtils.orPredicate(var28, var29);
    int var31 = var23.indexOf((java.lang.Object)var28);
    java.util.Map var32 = org.apache.commons.collections.MapUtils.predicatedMap((java.util.Map)var12, var17, var28);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var33 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var34 = var33.isEmpty();
    org.apache.commons.collections.collection.TestSynchronizedCollection var36 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var37 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var37.testComparator();
    org.apache.commons.collections.keyvalue.MultiKey var39 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var33, (java.lang.Object)var37);
    org.apache.commons.collections.Transformer var40 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var41 = new org.apache.commons.collections.Transformer[] { var40};
    org.apache.commons.collections.functors.ChainedTransformer var42 = new org.apache.commons.collections.functors.ChainedTransformer(var41);
    org.apache.commons.collections.map.DefaultedMap var44 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var45 = var44.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var46 = org.apache.commons.collections.set.ListOrderedSet.decorate(var45);
    java.lang.Object[] var47 = var46.toArray();
    org.apache.commons.collections.Transformer var48 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((java.util.Collection)var46);
    java.util.SortedMap var49 = org.apache.commons.collections.MapUtils.transformedSortedMap((java.util.SortedMap)var33, (org.apache.commons.collections.Transformer)var42, var48);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var50 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var51 = var50.isEmpty();
    org.apache.commons.collections.collection.TestSynchronizedCollection var53 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var54 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var54.testComparator();
    org.apache.commons.collections.keyvalue.MultiKey var56 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var50, (java.lang.Object)var54);
    org.apache.commons.collections.Transformer var57 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var58 = new org.apache.commons.collections.Transformer[] { var57};
    org.apache.commons.collections.functors.ChainedTransformer var59 = new org.apache.commons.collections.functors.ChainedTransformer(var58);
    org.apache.commons.collections.map.DefaultedMap var61 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var62 = var61.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var63 = org.apache.commons.collections.set.ListOrderedSet.decorate(var62);
    java.lang.Object[] var64 = var63.toArray();
    org.apache.commons.collections.Transformer var65 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((java.util.Collection)var63);
    java.util.SortedMap var66 = org.apache.commons.collections.MapUtils.transformedSortedMap((java.util.SortedMap)var50, (org.apache.commons.collections.Transformer)var59, var65);
    org.apache.commons.collections.Transformer var67 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var68 = new org.apache.commons.collections.Transformer[] { var67};
    org.apache.commons.collections.functors.ChainedTransformer var69 = new org.apache.commons.collections.functors.ChainedTransformer(var68);
    java.util.SortedMap var70 = org.apache.commons.collections.map.TransformedSortedMap.decorate((java.util.SortedMap)var33, var65, (org.apache.commons.collections.Transformer)var69);
    org.apache.commons.collections.Predicate var71 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var72 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var73 = org.apache.commons.collections.PredicateUtils.orPredicate(var71, var72);
    org.apache.commons.collections.Predicate[] var74 = new org.apache.commons.collections.Predicate[] { var71};
    org.apache.commons.collections.functors.AllPredicate var75 = new org.apache.commons.collections.functors.AllPredicate(var74);
    org.apache.commons.collections.Predicate var76 = org.apache.commons.collections.functors.TransformedPredicate.getInstance(var65, (org.apache.commons.collections.Predicate)var75);
    double var78 = org.apache.commons.collections.MapUtils.getDoubleValue(var32, (java.lang.Object)var75, 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 100.0d);

  }

  public void test361() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    org.apache.commons.collections.list.TestTreeList.benchmark((java.util.List)var5);
    org.apache.commons.collections.Predicate var7 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var8 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var9 = org.apache.commons.collections.PredicateUtils.orPredicate(var7, var8);
    org.apache.commons.collections.Closure var10 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var11 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var12 = org.apache.commons.collections.functors.IfClosure.getInstance(var8, var10, var11);
    int var13 = var5.indexOf((java.lang.Object)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.Predicate var14 = org.apache.commons.collections.functors.AnyPredicate.getInstance((java.util.Collection)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));

  }

  public void test362() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var16 = var15.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var16);
    java.lang.String var18 = var17.toString();
    org.apache.commons.collections.bag.TestTreeBag var19 = new org.apache.commons.collections.bag.TestTreeBag(var18);
    org.apache.commons.collections.iterators.TestIteratorChain var20 = new org.apache.commons.collections.iterators.TestIteratorChain(var18);
    java.lang.Object var21 = var12.nextKey((java.lang.Object)var18);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var12);
    org.apache.commons.collections.map.DefaultedMap var24 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var25 = var24.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var26 = org.apache.commons.collections.set.ListOrderedSet.decorate(var25);
    org.apache.commons.collections.Predicate var27 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Set var28 = org.apache.commons.collections.SetUtils.predicatedSet(var25, var27);
    boolean var29 = var22.containsKey((java.lang.Object)var27);
    org.apache.commons.collections.MapIterator var30 = var22.mapIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[  ]"+ "'", var16.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var18.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);

  }

  public void test363() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    float var4 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var1, (java.lang.Object)100L, 100.0f);
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap((java.util.Map)var1);
    org.apache.commons.collections.OrderedIterator var6 = org.apache.commons.collections.IteratorUtils.emptyOrderedIterator();
    java.lang.Object var7 = var5.remove((java.lang.Object)var6);
    java.util.Map var8 = org.apache.commons.collections.MapUtils.orderedMap((java.util.Map)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test364() throws Throwable {

    org.apache.commons.collections.buffer.UnboundedFifoBuffer var0 = new org.apache.commons.collections.buffer.UnboundedFifoBuffer();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    java.util.Collection var5 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var0, (java.util.Collection)var4);
    boolean var6 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test365() throws Throwable {

    org.apache.commons.collections.buffer.UnboundedFifoBuffer var0 = new org.apache.commons.collections.buffer.UnboundedFifoBuffer();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    java.util.Collection var5 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var0, (java.util.Collection)var4);
    org.apache.commons.collections.Buffer var6 = org.apache.commons.collections.buffer.UnmodifiableBuffer.decorate((org.apache.commons.collections.Buffer)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test366() throws Throwable {

    java.lang.Class[] var1 = new java.lang.Class[] { null};
    org.apache.commons.collections.map.DefaultedMap var3 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var4 = var3.entrySet();
    boolean var6 = var3.containsKey((java.lang.Object)1.0d);
    boolean var7 = org.apache.commons.collections.MapUtils.isEmpty((java.util.Map)var3);
    java.lang.Object[] var8 = new java.lang.Object[] { var3};
    org.apache.commons.collections.functors.InstantiateTransformer var9 = new org.apache.commons.collections.functors.InstantiateTransformer(var1, var8);
    org.apache.commons.collections.map.IdentityMap var10 = new org.apache.commons.collections.map.IdentityMap();
    org.apache.commons.collections.Transformer var11 = org.apache.commons.collections.TransformerUtils.mapTransformer((java.util.Map)var10);
    org.apache.commons.collections.Transformer var12 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((org.apache.commons.collections.Transformer)var9, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);

  }

  public void test367() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    var3.testTrailingBackSlash();
    var3.testSaveAndLoad();

  }

  public void test368() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    java.util.List var7 = org.apache.commons.collections.list.FixedSizeList.decorate((java.util.List)var5);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var12 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var9, (java.util.Collection)var11);
    org.apache.commons.collections.map.DefaultedMap var14 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var15 = var14.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var16 = org.apache.commons.collections.set.ListOrderedSet.decorate(var15);
    java.lang.Object[] var17 = var16.toArray();
    org.apache.commons.collections.list.TreeList var18 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var16);
    java.util.List var19 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var11, (java.util.Collection)var18);
    org.apache.commons.collections.map.DefaultedMap var21 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var22 = var21.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var23 = org.apache.commons.collections.set.ListOrderedSet.decorate(var22);
    java.lang.Object[] var24 = var23.toArray();
    org.apache.commons.collections.list.TreeList var25 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var23);
    org.apache.commons.collections.MultiHashMap var27 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var28 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    java.util.ListIterator var29 = var25.listIterator(0);
    boolean var30 = org.apache.commons.collections.CollectionUtils.isEqualCollection((java.util.Collection)var11, (java.util.Collection)var25);
    java.util.List var31 = org.apache.commons.collections.ListUtils.union((java.util.List)var5, (java.util.List)var25);
    java.lang.Object[] var32 = var25.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);

  }

  public void test369() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.comparators.BooleanComparator var13 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var14 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var13);
    org.apache.commons.collections.comparators.ComparatorChain var15 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var14);
    org.apache.commons.collections.buffer.PriorityBuffer var16 = new org.apache.commons.collections.buffer.PriorityBuffer((java.util.Comparator)var14);
    boolean var17 = var12.retainAll((java.util.Collection)var16);
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var22 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var19, (java.util.Collection)var21);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var27 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var24, (java.util.Collection)var26);
    boolean var28 = var21.containsAll((java.util.Collection)var24);
    org.apache.commons.collections.MultiHashMap var30 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var31 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var32 = var24.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var33 = new org.apache.commons.collections.SequencedHashMap(0);
    int var34 = var33.size();
    org.apache.commons.collections.BinaryHeap var36 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var39 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var36, (java.util.Collection)var38);
    org.apache.commons.collections.BinaryHeap var41 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var44 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var41, (java.util.Collection)var43);
    org.apache.commons.collections.BinaryHeap var46 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var49 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var46, (java.util.Collection)var48);
    boolean var50 = var43.containsAll((java.util.Collection)var46);
    java.util.Collection var51 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var38, (java.util.Collection)var43);
    int var52 = var33.indexOf((java.lang.Object)var43);
    boolean var53 = var12.contains((java.lang.Object)var33);
    int var54 = var33.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);

  }

  public void test370() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    org.apache.commons.collections.BinaryHeap var32 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var34 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var35 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var32, (java.util.Collection)var34);
    org.apache.commons.collections.BinaryHeap var37 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var39 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var40 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var37, (java.util.Collection)var39);
    boolean var41 = var34.containsAll((java.util.Collection)var37);
    org.apache.commons.collections.MultiHashMap var43 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var44 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var45 = var37.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var46 = new org.apache.commons.collections.SequencedHashMap(0);
    int var47 = var46.size();
    org.apache.commons.collections.BinaryHeap var49 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var51 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var52 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var49, (java.util.Collection)var51);
    junit.framework.Test var53 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    org.apache.commons.collections.ResettableListIterator var55 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var54);
    org.apache.commons.collections.Transformer var56 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var57 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var55, var56);
    org.apache.commons.collections.BinaryHeap var59 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var61 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var62 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var59, (java.util.Collection)var61);
    java.util.Collection var63 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var51, var56, (java.util.Collection)var59);
    org.apache.commons.collections.comparators.TransformingComparator var64 = new org.apache.commons.collections.comparators.TransformingComparator(var56);
    org.apache.commons.collections.Predicate var65 = org.apache.commons.collections.functors.TransformerPredicate.getInstance(var56);
    var12.add(var47, (java.lang.Object)var65);
    java.lang.String var67 = var12.toString();
    java.util.List var68 = org.apache.commons.collections.list.UnmodifiableList.decorate((java.util.List)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);

  }

  public void test371() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    java.lang.String var2 = var1.getName();
    org.apache.commons.collections.iterators.TestObjectArrayListIterator2 var3 = new org.apache.commons.collections.iterators.TestObjectArrayListIterator2(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));

  }

  public void test372() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var2 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    org.apache.commons.collections.keyvalue.TestDefaultMapEntry var3 = new org.apache.commons.collections.keyvalue.TestDefaultMapEntry("hi!");
    org.apache.commons.collections.BeanMap var4 = new org.apache.commons.collections.BeanMap();
    org.apache.commons.collections.ResettableIterator var6 = org.apache.commons.collections.IteratorUtils.singletonIterator((java.lang.Object)10.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      junit.framework.Assert.failNotEquals("hi!", (java.lang.Object)var4, (java.lang.Object)var6);
      fail("Expected exception of type junit.framework.AssertionFailedError");
    } catch (junit.framework.AssertionFailedError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test373() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    int var16 = var15.size();
    java.util.Collection var17 = var15.values();
    java.lang.Object var18 = var15.getFirstValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);

  }

  public void test374() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    int var10 = var0.size();
    org.apache.commons.collections.FastArrayList var11 = new org.apache.commons.collections.FastArrayList(var10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var16 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var13, (java.util.Collection)var15);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    boolean var22 = var15.containsAll((java.util.Collection)var18);
    int var23 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var15);
    org.apache.commons.collections.MultiHashMap var24 = new org.apache.commons.collections.MultiHashMap(var23);
    var11.ensureCapacity(var23);
    org.apache.commons.collections.collection.TestSynchronizedCollection var27 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var28 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var29 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var30 = var29.isEqualsCheckable();
    boolean var31 = var11.add((java.lang.Object)var29);
    java.lang.Object[] var32 = var11.toArray();
    boolean var33 = var11.getFast();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)10+ "'", var9.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test375() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var3 = var2.getCompatibilityVersion();
    org.apache.commons.collections.TestEnumerationUtils var4 = new org.apache.commons.collections.TestEnumerationUtils(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "3"+ "'", var3.equals("3"));

  }

  public void test376() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    int var6 = var0.size();
    org.apache.commons.collections.map.IdentityMap var7 = new org.apache.commons.collections.map.IdentityMap((java.util.Map)var0);
    org.apache.commons.collections.Predicate var8 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var9 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var10 = org.apache.commons.collections.PredicateUtils.orPredicate(var8, var9);
    org.apache.commons.collections.Closure var11 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var12 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var13 = org.apache.commons.collections.functors.IfClosure.getInstance(var9, var11, var12);
    org.apache.commons.collections.Predicate var14 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var15 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var16 = org.apache.commons.collections.PredicateUtils.orPredicate(var14, var15);
    org.apache.commons.collections.Closure var17 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var18 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var19 = org.apache.commons.collections.functors.IfClosure.getInstance(var15, var17, var18);
    org.apache.commons.collections.map.DefaultedMap var21 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var24 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var21, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var26 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var29 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var26, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var34 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var31, (java.util.Collection)var33);
    java.lang.Boolean var35 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var21, (java.lang.Object)true, (java.lang.Boolean)var34);
    org.apache.commons.collections.map.DefaultedMap var38 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var41 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var38, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var43 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var46 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var43, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var50 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var51 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var48, (java.util.Collection)var50);
    java.lang.Boolean var52 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var38, (java.lang.Object)true, (java.lang.Boolean)var51);
    java.lang.Object var53 = var21.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var55 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var21, (java.lang.Object)1L);
    org.apache.commons.collections.Closure var56 = org.apache.commons.collections.functors.WhileClosure.getInstance(var9, var19, var55);
    org.apache.commons.collections.collection.TestSynchronizedCollection var58 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var59 = var58.countTestCases();
    org.apache.commons.collections.Predicate var60 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var59);
    java.util.SortedMap var61 = org.apache.commons.collections.MapUtils.predicatedSortedMap((java.util.SortedMap)var0, var9, var60);
    org.apache.commons.collections.Transformer var62 = org.apache.commons.collections.functors.ExceptionTransformer.getInstance();
    java.util.SortedMap var63 = org.apache.commons.collections.map.LazySortedMap.decorate((java.util.SortedMap)var0, var62);
    org.apache.commons.collections.BinaryHeap var65 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var67 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var68 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var65, (java.util.Collection)var67);
    junit.framework.Test var69 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    org.apache.commons.collections.ResettableListIterator var71 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var70);
    org.apache.commons.collections.Transformer var72 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var73 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var71, var72);
    org.apache.commons.collections.BinaryHeap var75 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var77 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var78 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var75, (java.util.Collection)var77);
    java.util.Collection var79 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var67, var72, (java.util.Collection)var75);
    org.apache.commons.collections.comparators.TransformingComparator var80 = new org.apache.commons.collections.comparators.TransformingComparator(var72);
    org.apache.commons.collections.BinaryHeap var82 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var84 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var85 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var82, (java.util.Collection)var84);
    junit.framework.Test var86 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var87 = new java.lang.Object[] { var86};
    org.apache.commons.collections.ResettableListIterator var88 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var87);
    org.apache.commons.collections.Transformer var89 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var90 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var88, var89);
    org.apache.commons.collections.BinaryHeap var92 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var94 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var95 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var92, (java.util.Collection)var94);
    java.util.Collection var96 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var84, var89, (java.util.Collection)var92);
    org.apache.commons.collections.comparators.TransformingComparator var97 = new org.apache.commons.collections.comparators.TransformingComparator(var89);
    org.apache.commons.collections.Predicate var98 = org.apache.commons.collections.functors.TransformerPredicate.getInstance(var89);
    java.util.SortedMap var99 = org.apache.commons.collections.MapUtils.transformedSortedMap((java.util.SortedMap)var0, var72, var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + (-1.0d)+ "'", var24.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + (-1.0d)+ "'", var29.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + true+ "'", var35.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + (-1.0d)+ "'", var41.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + (-1.0d)+ "'", var46.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + true+ "'", var52.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var86 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var89 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var96 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var98 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var99 == null);

  }

  public void test377() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    org.apache.commons.collections.TestListUtils var7 = new org.apache.commons.collections.TestListUtils(var4);
    var7.testNothing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test378() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    var2.testSet();
    var2.testConstructorEx();

  }

  public void test379() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    java.lang.Object var13 = var12.clone();
    org.apache.commons.collections.map.MultiKeyMap var14 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var15 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var14);
    org.apache.commons.collections.keyvalue.TiedMapEntry var16 = new org.apache.commons.collections.keyvalue.TiedMapEntry((java.util.Map)var12, (java.lang.Object)var14);
    java.lang.String var17 = var16.toString();
    org.apache.commons.collections.bag.TestTransformedSortedBag var18 = new org.apache.commons.collections.bag.TestTransformedSortedBag(var17);
    org.apache.commons.collections.set.TestPredicatedSortedSet var19 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "{}=null"+ "'", var17.equals("{}=null"));

  }

  public void test380() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var8 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var9 = var8.getFullElements();
    org.apache.commons.collections.collection.TestSynchronizedCollection var11 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var12 = var11.countTestCases();
    org.apache.commons.collections.Predicate var13 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var12);
    java.lang.Object var14 = org.apache.commons.collections.CollectionUtils.get((java.lang.Object)var9, var12);
    org.apache.commons.collections.buffer.BoundedFifoBuffer var15 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(var12);
    boolean var16 = var15.isEmpty();
    int var17 = var15.maxSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "the"+ "'", var14.equals("the"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);

  }

  public void test381() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.set.TestPredicatedSortedSet.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test382() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.Buffer var5 = org.apache.commons.collections.buffer.SynchronizedBuffer.decorate((org.apache.commons.collections.Buffer)var3);
    java.lang.Object[] var6 = var3.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test383() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var16 = var15.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var16);
    java.lang.String var18 = var17.toString();
    org.apache.commons.collections.bag.TestTreeBag var19 = new org.apache.commons.collections.bag.TestTreeBag(var18);
    org.apache.commons.collections.iterators.TestIteratorChain var20 = new org.apache.commons.collections.iterators.TestIteratorChain(var18);
    java.lang.Object var21 = var12.nextKey((java.lang.Object)var18);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var12);
    org.apache.commons.collections.map.DefaultedMap var24 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var25 = var24.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var26 = org.apache.commons.collections.set.ListOrderedSet.decorate(var25);
    org.apache.commons.collections.Predicate var27 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Set var28 = org.apache.commons.collections.SetUtils.predicatedSet(var25, var27);
    boolean var29 = var22.containsKey((java.lang.Object)var27);
    org.apache.commons.collections.map.MultiKeyMap var30 = new org.apache.commons.collections.map.MultiKeyMap();
    java.util.Set var31 = var30.entrySet();
    java.util.Collection var32 = var30.values();
    org.apache.commons.collections.Transformer var33 = org.apache.commons.collections.functors.ExceptionTransformer.getInstance();
    boolean var34 = var30.containsKey((java.lang.Object)var33);
    org.apache.commons.collections.iterators.ObjectGraphIterator var35 = new org.apache.commons.collections.iterators.ObjectGraphIterator((java.lang.Object)var22, var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.remove();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[  ]"+ "'", var16.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var18.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test384() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var1 = new java.lang.Object[] { var0};
    org.apache.commons.collections.ResettableListIterator var2 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var1);
    org.apache.commons.collections.Transformer var3 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var4 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var2, var3);
    java.util.Iterator var5 = var4.getIterator();
    org.apache.commons.collections.iterators.ListIteratorWrapper var6 = new org.apache.commons.collections.iterators.ListIteratorWrapper((java.util.Iterator)var4);
    boolean var7 = var6.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test385() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.iterators.LoopingIterator var5 = new org.apache.commons.collections.iterators.LoopingIterator((java.util.Collection)var1);
    var5.reset();
    boolean var7 = var5.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test386() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    java.lang.Boolean var32 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var18, (java.lang.Object)true, (java.lang.Boolean)var31);
    java.lang.Object var33 = var1.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var35 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var1, (java.lang.Object)1L);
    org.apache.commons.collections.map.LRUMap var36 = new org.apache.commons.collections.map.LRUMap((java.util.Map)var1);
    org.apache.commons.collections.map.TestListOrderedMap2 var38 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    var38.testPreviousKey();
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var44 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var41, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    double var45 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var36, (java.lang.Object)var38, (double)var44);
    org.apache.commons.collections.MapIterator var46 = var36.mapIterator();
    org.apache.commons.collections.collection.TestSynchronizedCollection var48 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var49 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.Object var50 = var36.previousKey((java.lang.Object)"hi!");
    org.apache.commons.collections.comparators.TestAll var51 = new org.apache.commons.collections.comparators.TestAll("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + true+ "'", var32.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (-1.0d)+ "'", var44.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);

  }

  public void test387() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    java.util.Collection var16 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var17 = var8.peek();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);

  }

  public void test388() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    java.util.Collection var16 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    boolean var32 = var25.containsAll((java.util.Collection)var28);
    java.util.Collection var33 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var25);
    boolean var34 = var3.retainAll((java.util.Collection)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.collections.buffer.CircularFifoBuffer var35 = new org.apache.commons.collections.buffer.CircularFifoBuffer((java.util.Collection)var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test389() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.BeanMap var16 = new org.apache.commons.collections.BeanMap((java.lang.Object)var15);
    org.apache.commons.collections.MultiHashMap var18 = new org.apache.commons.collections.MultiHashMap(0);
    float var21 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var18, (java.lang.Object)100L, 100.0f);
    boolean var22 = var16.containsValue((java.lang.Object)100L);
    org.apache.commons.collections.map.TestListOrderedMap2 var24 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    java.lang.Object var25 = var16.get((java.lang.Object)var24);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var26 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var28 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var29 = var28.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var30 = org.apache.commons.collections.set.ListOrderedSet.decorate(var29);
    org.apache.commons.collections.map.SingletonMap var31 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var26, (java.lang.Object)var29);
    boolean var33 = var31.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var35 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var36 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var37 = var31.get((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBoundedFifoBuffer2 var38 = new org.apache.commons.collections.TestBoundedFifoBuffer2("hi!");
    org.apache.commons.collections.map.TestDefaultedMap var39 = new org.apache.commons.collections.map.TestDefaultedMap("hi!");
    var39.testMapGet4();
    java.util.Map var41 = org.apache.commons.collections.MapUtils.getMap((java.util.Map)var16, (java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);

  }

  public void test390() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    var3.testListSetByIndexBoundsChecking2();
    java.lang.String var5 = var3.getCompatibilityVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "3.1"+ "'", var5.equals("3.1"));

  }

  public void test391() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    org.apache.commons.collections.iterators.ObjectArrayListIterator var4 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var3);
    int var5 = var4.getStartIndex();
    java.lang.Object var6 = var4.next();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = var4.next();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test392() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    java.lang.Object[] var5 = var4.toArray();
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var8 = var7.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var9 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var8);
    java.lang.String var10 = var9.toString();
    org.apache.commons.collections.set.TestAll var11 = new org.apache.commons.collections.set.TestAll(var10);
    org.apache.commons.collections.set.TestPredicatedSortedSet var12 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var10);
    org.apache.commons.collections.collection.TestSynchronizedCollection var14 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var15 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var18 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var19 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var21 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var28 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var31 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var28, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    java.lang.Boolean var37 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var23, (java.lang.Object)true, (java.lang.Boolean)var36);
    org.apache.commons.collections.collection.TestSynchronizedCollection var39 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var40 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var41 = var40.getCompatibilityVersion();
    var40.testValuesClearChangesMap();
    java.lang.String var43 = var40.getCompatibilityVersion();
    boolean var44 = var0.containsKey((java.lang.Object)var4, (java.lang.Object)var12, (java.lang.Object)"hi!", (java.lang.Object)var37, (java.lang.Object)var43);
    java.lang.Object[] var45 = var4.toArray();
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var50 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var51 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var48, (java.util.Collection)var50);
    org.apache.commons.collections.BinaryHeap var53 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var55 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var56 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var53, (java.util.Collection)var55);
    boolean var57 = var50.containsAll((java.util.Collection)var53);
    int var58 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var50);
    org.apache.commons.collections.MultiHashMap var59 = new org.apache.commons.collections.MultiHashMap(var58);
    java.lang.Object var60 = var59.clone();
    org.apache.commons.collections.map.MultiKeyMap var61 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var62 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var61);
    org.apache.commons.collections.keyvalue.TiedMapEntry var63 = new org.apache.commons.collections.keyvalue.TiedMapEntry((java.util.Map)var59, (java.lang.Object)var61);
    org.apache.commons.collections.BinaryHeap var65 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var67 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var68 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var65, (java.util.Collection)var67);
    org.apache.commons.collections.BinaryHeap var70 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var72 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var73 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var70, (java.util.Collection)var72);
    boolean var74 = var67.containsAll((java.util.Collection)var70);
    org.apache.commons.collections.MultiHashMap var76 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var77 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var78 = var70.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var79 = new org.apache.commons.collections.SequencedHashMap(0);
    boolean var80 = var61.removeAll((java.lang.Object)0);
    org.apache.commons.collections.iterators.ObjectArrayIterator var81 = new org.apache.commons.collections.iterators.ObjectArrayIterator(var46, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[  ]"+ "'", var8.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var10.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + (-1.0d)+ "'", var31.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + true+ "'", var37.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "3"+ "'", var41.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "3"+ "'", var43.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test393() throws Throwable {

    org.apache.commons.collections.LRUMap var1 = new org.apache.commons.collections.LRUMap(1);

  }

  public void test394() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var1 = var0.isEmpty();
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var4 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var4.testComparator();
    org.apache.commons.collections.keyvalue.MultiKey var6 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var0, (java.lang.Object)var4);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var8 = new org.apache.commons.collections.Transformer[] { var7};
    org.apache.commons.collections.functors.ChainedTransformer var9 = new org.apache.commons.collections.functors.ChainedTransformer(var8);
    org.apache.commons.collections.map.DefaultedMap var11 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var12 = var11.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var13 = org.apache.commons.collections.set.ListOrderedSet.decorate(var12);
    java.lang.Object[] var14 = var13.toArray();
    org.apache.commons.collections.Transformer var15 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((java.util.Collection)var13);
    java.util.SortedMap var16 = org.apache.commons.collections.MapUtils.transformedSortedMap((java.util.SortedMap)var0, (org.apache.commons.collections.Transformer)var9, var15);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var24 = var23.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var25 = org.apache.commons.collections.set.ListOrderedSet.decorate(var24);
    java.lang.Object[] var26 = var25.toArray();
    org.apache.commons.collections.list.TreeList var27 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var25);
    java.util.List var28 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var27);
    org.apache.commons.collections.list.SetUniqueList var29 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var27);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var30 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var32 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var33 = var32.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var34 = org.apache.commons.collections.set.ListOrderedSet.decorate(var33);
    org.apache.commons.collections.map.SingletonMap var35 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var30, (java.lang.Object)var33);
    int var36 = var30.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var38 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var39 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var42 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var43 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var45 = var29.subList(var36, 0);
    boolean var46 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var29);
    java.util.ListIterator var47 = var29.listIterator();
    java.util.Iterator var48 = var29.iterator();
    org.apache.commons.collections.map.DefaultedMap var51 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var52 = var51.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var53 = org.apache.commons.collections.set.ListOrderedSet.decorate(var52);
    java.lang.Object[] var54 = var53.toArray();
    org.apache.commons.collections.list.TreeList var55 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var53);
    java.util.Collection var56 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var55);
    boolean var57 = var29.addAll((-1), (java.util.Collection)var55);
    java.lang.Byte var58 = org.apache.commons.collections.MapUtils.getByte((java.util.Map)var0, (java.lang.Object)var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var59 = var0.firstKey();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);

  }

  public void test395() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    int var10 = var0.size();
    org.apache.commons.collections.FastArrayList var11 = new org.apache.commons.collections.FastArrayList(var10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var16 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var13, (java.util.Collection)var15);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    boolean var22 = var15.containsAll((java.util.Collection)var18);
    int var23 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var15);
    org.apache.commons.collections.MultiHashMap var24 = new org.apache.commons.collections.MultiHashMap(var23);
    var11.ensureCapacity(var23);
    java.util.List var26 = org.apache.commons.collections.list.UnmodifiableList.decorate((java.util.List)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)10+ "'", var9.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);

  }

  public void test396() throws Throwable {

    org.apache.commons.collections.ResettableIterator var1 = org.apache.commons.collections.IteratorUtils.singletonIterator((java.lang.Object)10.0d);
    java.util.Iterator var2 = org.apache.commons.collections.IteratorUtils.unmodifiableIterator((java.util.Iterator)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);

  }

  public void test397() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var3 = var2.getCompatibilityVersion();
    var2.testValuesClearChangesMap();
    java.lang.String var5 = var2.getCompatibilityVersion();
    var2.testMapEquals();
    org.apache.commons.collections.Factory var7 = org.apache.commons.collections.FactoryUtils.prototypeFactory((java.lang.Object)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "3"+ "'", var3.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "3"+ "'", var5.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test398() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    java.util.Iterator var31 = var12.iterator();
    org.apache.commons.collections.map.DefaultedMap var34 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var35 = var34.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var36 = org.apache.commons.collections.set.ListOrderedSet.decorate(var35);
    java.lang.Object[] var37 = var36.toArray();
    org.apache.commons.collections.list.TreeList var38 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var36);
    java.util.Collection var39 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var38);
    boolean var40 = var12.addAll((-1), (java.util.Collection)var38);
    org.apache.commons.collections.MultiHashMap var42 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var43 = new org.apache.commons.collections.MultiHashMap(0);
    java.lang.Object[] var44 = new java.lang.Object[] { 0};
    org.apache.commons.collections.BinaryHeap var46 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var49 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var46, (java.util.Collection)var48);
    org.apache.commons.collections.BinaryHeap var51 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var53 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var54 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var51, (java.util.Collection)var53);
    boolean var55 = var48.containsAll((java.util.Collection)var51);
    int var56 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var48);
    org.apache.commons.collections.iterators.ObjectArrayListIterator var57 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var44, var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var58 = var38.get(var56);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);

  }

  public void test399() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var8 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    boolean var9 = var8.isFailFastSupported();
    java.util.Collection var10 = var8.makeConfirmedFullCollection();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);

  }

  public void test400() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    org.apache.commons.collections.bag.TestTypedSortedBag var4 = new org.apache.commons.collections.bag.TestTypedSortedBag(var2);
    var4.testToArrayPopulate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));

  }

  public void test401() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    var2.testRemovingElementsAndIteratingBackwards();
    var2.testLooping1();

  }

  public void test402() throws Throwable {

    org.apache.commons.collections.BinaryHeap var0 = new org.apache.commons.collections.BinaryHeap();

  }

  public void test403() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    java.util.Collection var16 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    boolean var32 = var25.containsAll((java.util.Collection)var28);
    java.util.Collection var33 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var25);
    boolean var34 = var3.retainAll((java.util.Collection)var25);
    var3.clear();
    org.apache.commons.collections.iterators.IteratorChain var36 = new org.apache.commons.collections.iterators.IteratorChain((java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var41 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var38, (java.util.Collection)var40);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var46 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var43, (java.util.Collection)var45);
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var50 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var51 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var48, (java.util.Collection)var50);
    boolean var52 = var45.containsAll((java.util.Collection)var48);
    java.util.Collection var53 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var40, (java.util.Collection)var45);
    org.apache.commons.collections.Buffer var54 = org.apache.commons.collections.buffer.BlockingBuffer.decorate((org.apache.commons.collections.Buffer)var45);
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    org.apache.commons.collections.iterators.ObjectArrayIterator var56 = new org.apache.commons.collections.iterators.ObjectArrayIterator(var55);
    var36.addIterator((java.util.Iterator)var56);
    boolean var58 = var56.hasNext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test404() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.iterators.TestSingletonIterator var12 = new org.apache.commons.collections.iterators.TestSingletonIterator("hi!");
    boolean var13 = var12.supportsRemove();
    boolean var14 = var12.supportsRemove();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test405() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    java.lang.Boolean var32 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var18, (java.lang.Object)true, (java.lang.Boolean)var31);
    java.lang.Object var33 = var1.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var35 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var1, (java.lang.Object)1L);
    org.apache.commons.collections.map.LRUMap var36 = new org.apache.commons.collections.map.LRUMap((java.util.Map)var1);
    org.apache.commons.collections.map.TestListOrderedMap2 var38 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    var38.testPreviousKey();
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var44 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var41, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    double var45 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var36, (java.lang.Object)var38, (double)var44);
    java.lang.String var46 = var36.toString();
    int var47 = var36.maxSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + true+ "'", var32.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (-1.0d)+ "'", var44.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "{100=true}"+ "'", var46.equals("{100=true}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);

  }

  public void test406() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    java.util.Set var5 = org.apache.commons.collections.SetUtils.unmodifiableSet((java.util.Set)var3);
    org.apache.commons.collections.set.ListOrderedSet var6 = org.apache.commons.collections.set.ListOrderedSet.decorate((java.util.Set)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test407() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var3 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var4 = org.apache.commons.collections.PredicateUtils.orPredicate(var2, var3);
    int var5 = org.apache.commons.collections.CollectionUtils.countMatches((java.util.Collection)var1, var3);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var9 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var10 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var7, (java.util.Collection)var9);
    org.apache.commons.collections.map.DefaultedMap var12 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var13 = var12.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var14 = org.apache.commons.collections.set.ListOrderedSet.decorate(var13);
    java.lang.Object[] var15 = var14.toArray();
    org.apache.commons.collections.list.TreeList var16 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var14);
    java.util.List var17 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var9, (java.util.Collection)var16);
    org.apache.commons.collections.list.SetUniqueList var18 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var16);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var19 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var21 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var22 = var21.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var23 = org.apache.commons.collections.set.ListOrderedSet.decorate(var22);
    org.apache.commons.collections.map.SingletonMap var24 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var19, (java.lang.Object)var22);
    int var25 = var19.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var27 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var28 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var31 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var32 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var34 = var18.subList(var25, 0);
    boolean var35 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var18);
    java.util.ListIterator var36 = var18.listIterator();
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var41 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var38, (java.util.Collection)var40);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var46 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var43, (java.util.Collection)var45);
    boolean var47 = var40.containsAll((java.util.Collection)var43);
    org.apache.commons.collections.MultiHashMap var49 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var50 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var51 = var43.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var52 = new org.apache.commons.collections.SequencedHashMap(0);
    int var53 = var52.size();
    org.apache.commons.collections.BinaryHeap var55 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var57 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var58 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var55, (java.util.Collection)var57);
    junit.framework.Test var59 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var60 = new java.lang.Object[] { var59};
    org.apache.commons.collections.ResettableListIterator var61 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var60);
    org.apache.commons.collections.Transformer var62 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var63 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var61, var62);
    org.apache.commons.collections.BinaryHeap var65 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var67 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var68 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var65, (java.util.Collection)var67);
    java.util.Collection var69 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var57, var62, (java.util.Collection)var65);
    org.apache.commons.collections.comparators.TransformingComparator var70 = new org.apache.commons.collections.comparators.TransformingComparator(var62);
    org.apache.commons.collections.Predicate var71 = org.apache.commons.collections.functors.TransformerPredicate.getInstance(var62);
    var18.add(var53, (java.lang.Object)var71);
    org.apache.commons.collections.Predicate var73 = org.apache.commons.collections.PredicateUtils.orPredicate(var3, var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);

  }

  public void test408() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.BulkTest var7 = var6.bulkTestHeadMap();
    org.apache.commons.collections.BidiMap var8 = var6.makeFullBidiMap();
    boolean var9 = var6.isPutAddSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test409() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    int var16 = var15.size();
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    boolean var32 = var25.containsAll((java.util.Collection)var28);
    java.util.Collection var33 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var25);
    int var34 = var15.indexOf((java.lang.Object)var25);
    java.lang.String var35 = var15.toString();
    org.apache.commons.collections.buffer.TestCircularFifoBuffer var36 = new org.apache.commons.collections.buffer.TestCircularFifoBuffer(var35);
    var36.testRemoveError1();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));

  }

  public void test410() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var8 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var9 = var8.getFullElements();
    org.apache.commons.collections.collection.TestSynchronizedCollection var11 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var12 = var11.countTestCases();
    org.apache.commons.collections.Predicate var13 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var12);
    java.lang.Object var14 = org.apache.commons.collections.CollectionUtils.get((java.lang.Object)var9, var12);
    org.apache.commons.collections.buffer.BoundedFifoBuffer var15 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(var12);
    boolean var16 = var15.isEmpty();
    java.util.Iterator var17 = var15.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "the"+ "'", var14.equals("the"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);

  }

  public void test411() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.TestMapUtils var2 = new org.apache.commons.collections.TestMapUtils("");
    var2.testVerbosePrintSelfReference();

  }

  public void test412() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var8 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var9 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var15 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var16 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var17 = var16.isEmpty();
    org.apache.commons.collections.MultiHashMap var19 = new org.apache.commons.collections.MultiHashMap(0);
    float var22 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var19, (java.lang.Object)100L, 100.0f);
    boolean var23 = var19.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var17, var23);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var27 = var26.toString();
    org.apache.commons.collections.MapUtils.safeAddToMap((java.util.Map)var6, (java.lang.Object)var23, (java.lang.Object)var27);
    java.util.Enumeration var29 = var6.elements();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      org.apache.commons.collections.Transformer var30 = org.apache.commons.collections.TransformerUtils.switchMapTransformer((java.util.Map)var6);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test413() throws Throwable {

    org.apache.commons.collections.map.LRUMap var0 = new org.apache.commons.collections.map.LRUMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var5 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var2, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var7 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var10 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var7, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var12 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var15 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var12, (java.util.Collection)var14);
    java.lang.Boolean var16 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var2, (java.lang.Object)true, (java.lang.Boolean)var15);
    org.apache.commons.collections.BeanMap var17 = new org.apache.commons.collections.BeanMap((java.lang.Object)var16);
    java.util.Set var18 = var17.entrySet();
    org.apache.commons.collections.map.MultiKeyMap var19 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var20 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var19);
    org.apache.commons.collections.collection.TestSynchronizedCollection var22 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var23 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var24 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var25 = var24.isEqualsCheckable();
    var24.testListIndexOf();
    java.lang.Short var28 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var19, (java.lang.Object)var24, (java.lang.Short)(short)10);
    int var29 = var19.size();
    org.apache.commons.collections.FastArrayList var30 = new org.apache.commons.collections.FastArrayList(var29);
    org.apache.commons.collections.BinaryHeap var32 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var34 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var35 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var32, (java.util.Collection)var34);
    org.apache.commons.collections.BinaryHeap var37 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var39 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var40 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var37, (java.util.Collection)var39);
    boolean var41 = var34.containsAll((java.util.Collection)var37);
    int var42 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var34);
    org.apache.commons.collections.MultiHashMap var43 = new org.apache.commons.collections.MultiHashMap(var42);
    var30.ensureCapacity(var42);
    boolean var45 = var30.isEmpty();
    java.util.Collection var46 = org.apache.commons.collections.CollectionUtils.removeAll((java.util.Collection)var18, (java.util.Collection)var30);
    org.apache.commons.collections.BinaryHeap var48 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var50 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var51 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var48, (java.util.Collection)var50);
    org.apache.commons.collections.map.DefaultedMap var53 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var54 = var53.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var55 = org.apache.commons.collections.set.ListOrderedSet.decorate(var54);
    java.lang.Object[] var56 = var55.toArray();
    org.apache.commons.collections.list.TreeList var57 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var55);
    java.util.List var58 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var50, (java.util.Collection)var57);
    org.apache.commons.collections.list.SetUniqueList var59 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var57);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var60 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var62 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var63 = var62.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var64 = org.apache.commons.collections.set.ListOrderedSet.decorate(var63);
    org.apache.commons.collections.map.SingletonMap var65 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var60, (java.lang.Object)var63);
    int var66 = var60.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var68 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var69 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var72 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var73 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var75 = var59.subList(var66, 0);
    java.util.ListIterator var76 = var30.listIterator(0);
    java.lang.Double var77 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var0, (java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + (-1.0d)+ "'", var5.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (-1.0d)+ "'", var10.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + true+ "'", var16.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + (short)10+ "'", var28.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);

  }

  public void test414() throws Throwable {

    org.apache.commons.collections.map.IdentityMap var0 = new org.apache.commons.collections.map.IdentityMap();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var2 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var3 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    var3.testRemovingElementsAndIteratingBackwards();
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var11 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var14 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var11, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var16 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var19 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var16, (java.util.Collection)var18);
    java.lang.Boolean var20 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var6, (java.lang.Object)true, (java.lang.Boolean)var19);
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var28 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var31 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var28, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    java.lang.Boolean var37 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var23, (java.lang.Object)true, (java.lang.Boolean)var36);
    java.lang.Object var38 = var6.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var40 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var6, (java.lang.Object)1L);
    org.apache.commons.collections.map.LRUMap var41 = new org.apache.commons.collections.map.LRUMap((java.util.Map)var6);
    org.apache.commons.collections.map.TestListOrderedMap2 var43 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    var43.testPreviousKey();
    org.apache.commons.collections.map.DefaultedMap var46 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var49 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var46, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    double var50 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var41, (java.lang.Object)var43, (double)var49);
    double var51 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var0, (java.lang.Object)var3, var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (-1.0d)+ "'", var14.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + true+ "'", var20.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + (-1.0d)+ "'", var31.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + true+ "'", var37.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + (-1.0d)+ "'", var49.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1.0d));

  }

  public void test415() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    int var6 = var0.size();
    org.apache.commons.collections.map.IdentityMap var7 = new org.apache.commons.collections.map.IdentityMap((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var8 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var9 = var8.isEmpty();
    boolean var10 = var7.containsValue((java.lang.Object)var8);
    boolean var11 = var8.isEmpty();
    org.apache.commons.collections.map.DefaultedMap var13 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var14 = var13.entrySet();
    boolean var16 = var13.containsKey((java.lang.Object)1.0d);
    boolean var17 = org.apache.commons.collections.MapUtils.isEmpty((java.util.Map)var13);
    java.lang.Object var18 = var8.previousKey((java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);

  }

  public void test416() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    java.util.Collection var6 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var5);
    org.apache.commons.collections.Transformer var7 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var8 = new org.apache.commons.collections.Transformer[] { var7};
    org.apache.commons.collections.functors.ChainedTransformer var9 = new org.apache.commons.collections.functors.ChainedTransformer(var8);
    java.util.List var10 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var5, (org.apache.commons.collections.Transformer)var9);
    org.apache.commons.collections.iterators.ReverseListIterator var11 = new org.apache.commons.collections.iterators.ReverseListIterator(var10);
    var11.reset();
    boolean var13 = var11.hasNext();
    org.apache.commons.collections.comparators.BooleanComparator var14 = org.apache.commons.collections.comparators.BooleanComparator.getBooleanComparator(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test417() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    junit.framework.Test var5 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    org.apache.commons.collections.ResettableListIterator var7 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var6);
    org.apache.commons.collections.Transformer var8 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var9 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var7, var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.util.Collection var15 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var3, var8, (java.util.Collection)var11);
    org.apache.commons.collections.BinaryHeap var17 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var20 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var17, (java.util.Collection)var19);
    org.apache.commons.collections.BinaryHeap var22 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var25 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var22, (java.util.Collection)var24);
    org.apache.commons.collections.BinaryHeap var27 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var30 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var27, (java.util.Collection)var29);
    boolean var31 = var24.containsAll((java.util.Collection)var27);
    java.util.Collection var32 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var19, (java.util.Collection)var24);
    org.apache.commons.collections.Buffer var33 = org.apache.commons.collections.buffer.BlockingBuffer.decorate((org.apache.commons.collections.Buffer)var24);
    java.util.Collection var34 = org.apache.commons.collections.CollectionUtils.removeAll(var15, (java.util.Collection)var24);
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    org.apache.commons.collections.map.DefaultedMap var37 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var38 = var37.entrySet();
    boolean var40 = var37.containsKey((java.lang.Object)1.0d);
    org.apache.commons.collections.MultiHashMap var42 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.MultiHashMap var43 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.map.DefaultedMap var45 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var48 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var45, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var50 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var53 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var50, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var55 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var57 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var58 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var55, (java.util.Collection)var57);
    java.lang.Boolean var59 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var45, (java.lang.Object)true, (java.lang.Boolean)var58);
    org.apache.commons.collections.map.DefaultedMap var62 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var65 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var62, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var67 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var70 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var67, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var72 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var74 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var75 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var72, (java.util.Collection)var74);
    java.lang.Boolean var76 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var62, (java.lang.Object)true, (java.lang.Boolean)var75);
    java.lang.Object var77 = var45.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var79 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var45, (java.lang.Object)1L);
    java.lang.Long var80 = org.apache.commons.collections.MapUtils.getLong((java.util.Map)var37, (java.lang.Object)0, (java.lang.Long)1L);
    org.apache.commons.collections.iterators.ObjectArrayIterator var81 = new org.apache.commons.collections.iterators.ObjectArrayIterator(var35, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + (-1.0d)+ "'", var48.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + (-1.0d)+ "'", var53.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + true+ "'", var59.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + (-1.0d)+ "'", var65.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + (-1.0d)+ "'", var70.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + true+ "'", var76.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + (-1L)+ "'", var80.equals((-1L)));

  }

  public void test418() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    org.apache.commons.collections.set.TestSynchronizedSortedSet var7 = new org.apache.commons.collections.set.TestSynchronizedSortedSet(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test419() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.map.TestHashedMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test420() throws Throwable {

    org.apache.commons.collections.Predicate var0 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var1 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.PredicateUtils.orPredicate(var0, var1);
    org.apache.commons.collections.Closure var3 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var4 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var5 = org.apache.commons.collections.functors.IfClosure.getInstance(var1, var3, var4);
    org.apache.commons.collections.Predicate var6 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var7 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var8 = org.apache.commons.collections.PredicateUtils.orPredicate(var6, var7);
    org.apache.commons.collections.Closure var9 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var10 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var11 = org.apache.commons.collections.functors.IfClosure.getInstance(var7, var9, var10);
    org.apache.commons.collections.map.DefaultedMap var13 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var16 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var13, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    java.lang.Boolean var27 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var13, (java.lang.Object)true, (java.lang.Boolean)var26);
    org.apache.commons.collections.map.DefaultedMap var30 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var33 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var30, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var35 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var38 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var35, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var42 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var43 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var40, (java.util.Collection)var42);
    java.lang.Boolean var44 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var30, (java.lang.Object)true, (java.lang.Boolean)var43);
    java.lang.Object var45 = var13.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var47 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var13, (java.lang.Object)1L);
    org.apache.commons.collections.Closure var48 = org.apache.commons.collections.functors.WhileClosure.getInstance(var1, var11, var47);
    org.apache.commons.collections.functors.ClosureTransformer var49 = new org.apache.commons.collections.functors.ClosureTransformer(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (-1.0d)+ "'", var16.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + true+ "'", var27.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + (-1.0d)+ "'", var33.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + (-1.0d)+ "'", var38.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + true+ "'", var44.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);

  }

  public void test421() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    var2.testSize();
    org.apache.commons.collections.Bag var4 = var2.makeBag();
    var2.testRetainAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test422() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.iterators.TestCollatingIterator var2 = new org.apache.commons.collections.iterators.TestCollatingIterator("");
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var2.testIterateEven();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test423() throws Throwable {

    org.apache.commons.collections.iterators.FilterListIterator var0 = new org.apache.commons.collections.iterators.FilterListIterator();
    java.util.ListIterator var1 = var0.getListIterator();
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var3 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var4 = org.apache.commons.collections.PredicateUtils.orPredicate(var2, var3);
    org.apache.commons.collections.Predicate[] var5 = new org.apache.commons.collections.Predicate[] { var2};
    org.apache.commons.collections.functors.AllPredicate var6 = new org.apache.commons.collections.functors.AllPredicate(var5);
    var0.setPredicate((org.apache.commons.collections.Predicate)var6);
    org.apache.commons.collections.iterators.FilterListIterator var8 = new org.apache.commons.collections.iterators.FilterListIterator();
    java.util.ListIterator var9 = var8.getListIterator();
    org.apache.commons.collections.Predicate var10 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var11 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var12 = org.apache.commons.collections.PredicateUtils.orPredicate(var10, var11);
    org.apache.commons.collections.Predicate[] var13 = new org.apache.commons.collections.Predicate[] { var10};
    org.apache.commons.collections.functors.AllPredicate var14 = new org.apache.commons.collections.functors.AllPredicate(var13);
    var8.setPredicate((org.apache.commons.collections.Predicate)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add((java.lang.Object)var8);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);

  }

  public void test424() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    int var16 = var15.size();
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    boolean var32 = var25.containsAll((java.util.Collection)var28);
    java.util.Collection var33 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var25);
    int var34 = var15.indexOf((java.lang.Object)var25);
    java.lang.String var35 = var15.toString();
    org.apache.commons.collections.map.TestPredicatedSortedMap var36 = new org.apache.commons.collections.map.TestPredicatedSortedMap(var35);
    java.lang.String var37 = var36.getCompatibilityVersion();
    org.apache.commons.collections.map.TestPredicatedSortedMap var38 = new org.apache.commons.collections.map.TestPredicatedSortedMap(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "3.1"+ "'", var37.equals("3.1"));

  }

  public void test425() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.TestMapUtils var2 = new org.apache.commons.collections.TestMapUtils("");
    var2.testIsEmptyWithNonEmptyMap();
    var2.testPredicatedMap();

  }

  public void test426() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    org.apache.commons.collections.iterators.ObjectArrayListIterator var4 = new org.apache.commons.collections.iterators.ObjectArrayListIterator(var3);
    int var5 = var4.getStartIndex();
    org.apache.commons.collections.Factory var6 = org.apache.commons.collections.functors.ExceptionFactory.getInstance();
    org.apache.commons.collections.functors.FactoryTransformer var7 = new org.apache.commons.collections.functors.FactoryTransformer(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var8 = org.apache.commons.collections.CollectionUtils.collect((java.util.Iterator)var4, (org.apache.commons.collections.Transformer)var7);
      fail("Expected exception of type org.apache.commons.collections.FunctorException");
    } catch (org.apache.commons.collections.FunctorException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);

  }

  public void test427() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    org.apache.commons.collections.TestDoubleOrderedMap var4 = new org.apache.commons.collections.TestDoubleOrderedMap(var2);
    var4.testSize();
    var4.testContainsValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));

  }

  public void test428() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var9 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var10 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var11 = var5.get((java.lang.Object)"hi!");
    org.apache.commons.collections.iterators.TestSingletonIterator var12 = new org.apache.commons.collections.iterators.TestSingletonIterator("hi!");
    org.apache.commons.collections.TestStaticBucketMap var13 = new org.apache.commons.collections.TestStaticBucketMap("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test429() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.map.DefaultedMap var11 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var12 = var11.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var13 = org.apache.commons.collections.set.ListOrderedSet.decorate(var12);
    java.lang.Object[] var14 = var13.toArray();
    org.apache.commons.collections.list.TreeList var15 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var13);
    java.util.List var16 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var8, (java.util.Collection)var15);
    org.apache.commons.collections.list.SetUniqueList var17 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var15);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var18 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var20 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var21 = var20.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var22 = org.apache.commons.collections.set.ListOrderedSet.decorate(var21);
    org.apache.commons.collections.map.SingletonMap var23 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var18, (java.lang.Object)var21);
    int var24 = var18.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var26 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var27 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var30 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var31 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var33 = var17.subList(var24, 0);
    boolean var34 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var17);
    java.util.ListIterator var35 = var17.listIterator();
    org.apache.commons.collections.BinaryHeap var37 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var39 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var40 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var37, (java.util.Collection)var39);
    org.apache.commons.collections.BinaryHeap var42 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var44 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var45 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var42, (java.util.Collection)var44);
    boolean var46 = var39.containsAll((java.util.Collection)var42);
    org.apache.commons.collections.MultiHashMap var48 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var49 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var50 = var42.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var51 = new org.apache.commons.collections.SequencedHashMap(0);
    int var52 = var51.size();
    org.apache.commons.collections.BinaryHeap var54 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var56 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var57 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var54, (java.util.Collection)var56);
    junit.framework.Test var58 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    org.apache.commons.collections.ResettableListIterator var60 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var59);
    org.apache.commons.collections.Transformer var61 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var62 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var60, var61);
    org.apache.commons.collections.BinaryHeap var64 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var66 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var67 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var64, (java.util.Collection)var66);
    java.util.Collection var68 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var56, var61, (java.util.Collection)var64);
    org.apache.commons.collections.comparators.TransformingComparator var69 = new org.apache.commons.collections.comparators.TransformingComparator(var61);
    org.apache.commons.collections.Predicate var70 = org.apache.commons.collections.functors.TransformerPredicate.getInstance(var61);
    var17.add(var52, (java.lang.Object)var70);
    org.apache.commons.collections.map.DefaultedMap var73 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var74 = var73.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var75 = org.apache.commons.collections.set.ListOrderedSet.decorate(var74);
    java.lang.Object[] var76 = var75.toArray();
    org.apache.commons.collections.list.TreeList var77 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var75);
    java.util.Collection var78 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var77);
    java.util.List var79 = org.apache.commons.collections.list.FixedSizeList.decorate((java.util.List)var77);
    boolean var80 = var17.addAll((java.util.Collection)var77);
    boolean var81 = var3.removeAll((java.util.Collection)var77);
    org.apache.commons.collections.MultiHashMap var83 = new org.apache.commons.collections.MultiHashMap(0);
    float var86 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var83, (java.lang.Object)100L, 100.0f);
    boolean var87 = var3.remove((java.lang.Object)var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var78 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test430() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var3 = var2.getCompatibilityVersion();
    var2.testValuesClearChangesMap();
    java.lang.String var5 = var2.getCompatibilityVersion();
    org.apache.commons.collections.TestTransformerUtils var6 = new org.apache.commons.collections.TestTransformerUtils(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "3"+ "'", var3.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "3"+ "'", var5.equals("3"));

  }

  public void test431() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var6 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var8 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var9 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var10 = var9.isEmpty();
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    float var15 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var12, (java.lang.Object)100L, 100.0f);
    boolean var16 = var12.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var10, var16);
    org.apache.commons.collections.bag.TestTypedSortedBag var18 = new org.apache.commons.collections.bag.TestTypedSortedBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonIterator2 var19 = new org.apache.commons.collections.iterators.TestSingletonIterator2("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test432() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var2 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var3 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var4 = var3.isEqualsCheckable();
    var3.testListIndexOf();
    var3.verify();
    org.apache.commons.collections.BulkTest var7 = var3.bulkTestSubList();
    var3.testListListIteratorNextRemoveNext();
    java.lang.Object[] var9 = var3.getOtherNonNullStringElements();
    boolean var10 = var3.isEqualsCheckable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test433() throws Throwable {

    org.apache.commons.collections.ArrayStack var0 = new org.apache.commons.collections.ArrayStack();
    boolean var1 = var0.empty();
    org.apache.commons.collections.Closure var2 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.functors.IdentityPredicate var3 = new org.apache.commons.collections.functors.IdentityPredicate((java.lang.Object)var2);
    org.apache.commons.collections.BinaryHeap var5 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var7 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var8 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var5, (java.util.Collection)var7);
    junit.framework.Test var9 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    org.apache.commons.collections.ResettableListIterator var11 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var10);
    org.apache.commons.collections.Transformer var12 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var13 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var11, var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var17 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var18 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var15, (java.util.Collection)var17);
    java.util.Collection var19 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var7, var12, (java.util.Collection)var15);
    boolean var20 = var3.evaluate((java.lang.Object)var19);
    int var21 = var0.search((java.lang.Object)var19);
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var24 = var23.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var25 = org.apache.commons.collections.set.ListOrderedSet.decorate(var24);
    java.lang.Object[] var26 = var25.toArray();
    org.apache.commons.collections.list.TreeList var27 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var25);
    org.apache.commons.collections.collection.TestSynchronizedCollection var29 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var30 = var29.countTestCases();
    var29.testCollectionIsEmpty();
    java.util.Collection var32 = var29.makeCollection();
    java.util.List var33 = org.apache.commons.collections.ListUtils.removeAll((java.util.Collection)var25, var32);
    java.lang.Object var34 = var0.push((java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);

  }

  public void test434() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    float var4 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var1, (java.lang.Object)100L, 100.0f);
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap((java.util.Map)var1);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var6 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var8 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var9 = var8.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var10 = org.apache.commons.collections.set.ListOrderedSet.decorate(var9);
    org.apache.commons.collections.map.SingletonMap var11 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var6, (java.lang.Object)var9);
    java.util.Properties var12 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var6);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    var12.putAll((java.util.Map)var18);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var22 = var21.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var23 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var22);
    java.lang.String var24 = var23.toString();
    org.apache.commons.collections.bag.TestTreeBag var25 = new org.apache.commons.collections.bag.TestTreeBag(var24);
    org.apache.commons.collections.iterators.TestIteratorChain var26 = new org.apache.commons.collections.iterators.TestIteratorChain(var24);
    java.lang.Object var27 = var18.nextKey((java.lang.Object)var24);
    java.util.Set var28 = org.apache.commons.collections.set.MapBackedSet.decorate((java.util.Map)var1, (java.lang.Object)var18);
    org.apache.commons.collections.Predicate var29 = org.apache.commons.collections.functors.NonePredicate.getInstance((java.util.Collection)var28);
    boolean var30 = org.apache.commons.collections.CollectionUtils.isNotEmpty((java.util.Collection)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "[  ]"+ "'", var22.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var24.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test435() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.map.TestPredicatedMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test436() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.buffer.TestPredicatedBuffer.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test437() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    boolean var7 = var5.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.list.TestGrowthList var8 = new org.apache.commons.collections.list.TestGrowthList("hi!");
    java.util.List var9 = var8.makeEmptyList();
    var8.testGrowthAdd();
    var8.testListSetByIndexBoundsChecking();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);

  }

  public void test438() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    java.lang.Boolean var32 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var18, (java.lang.Object)true, (java.lang.Boolean)var31);
    java.lang.Object var33 = var1.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var35 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var1, (java.lang.Object)1L);
    org.apache.commons.collections.map.LRUMap var36 = new org.apache.commons.collections.map.LRUMap((java.util.Map)var1);
    org.apache.commons.collections.map.TestListOrderedMap2 var38 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    var38.testPreviousKey();
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var44 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var41, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    double var45 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var36, (java.lang.Object)var38, (double)var44);
    org.apache.commons.collections.BinaryHeap var47 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var48 = var47.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var49 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var48);
    java.lang.String var50 = var49.toString();
    org.apache.commons.collections.bag.TestTreeBag var51 = new org.apache.commons.collections.bag.TestTreeBag(var50);
    org.apache.commons.collections.iterators.TestIteratorChain var52 = new org.apache.commons.collections.iterators.TestIteratorChain(var50);
    org.apache.commons.collections.TestDoubleOrderedMap var53 = new org.apache.commons.collections.TestDoubleOrderedMap(var50);
    java.lang.Number var54 = org.apache.commons.collections.MapUtils.getNumber((java.util.Map)var36, (java.lang.Object)var50);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var55 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var57 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var58 = var57.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var59 = org.apache.commons.collections.set.ListOrderedSet.decorate(var58);
    org.apache.commons.collections.map.SingletonMap var60 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var55, (java.lang.Object)var58);
    java.util.Properties var61 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var55);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var62 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var64 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var65 = var64.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var66 = org.apache.commons.collections.set.ListOrderedSet.decorate(var65);
    org.apache.commons.collections.map.SingletonMap var67 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var62, (java.lang.Object)var65);
    var61.putAll((java.util.Map)var67);
    org.apache.commons.collections.collection.TestSynchronizedCollection var70 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var71 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var74 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var75 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var77 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var78 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var79 = var78.isEmpty();
    org.apache.commons.collections.MultiHashMap var81 = new org.apache.commons.collections.MultiHashMap(0);
    float var84 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var81, (java.lang.Object)100L, 100.0f);
    boolean var85 = var81.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var79, var85);
    java.lang.Object var87 = var67.nextKey((java.lang.Object)var85);
    java.lang.Object var88 = var67.firstKey();
    org.apache.commons.collections.BinaryHeap var90 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var91 = var90.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var92 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var91);
    java.lang.String var93 = var92.toString();
    org.apache.commons.collections.set.TestAll var94 = new org.apache.commons.collections.set.TestAll(var93);
    org.apache.commons.collections.set.TestPredicatedSortedSet var95 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var93);
    org.apache.commons.collections.TestListUtils var96 = new org.apache.commons.collections.TestListUtils(var93);
    java.lang.Number var97 = org.apache.commons.collections.MapUtils.getNumber((java.util.Map)var67, (java.lang.Object)var96);
    java.lang.Object var98 = var36.get((java.lang.Object)var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + true+ "'", var32.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (-1.0d)+ "'", var44.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[  ]"+ "'", var48.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var50.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var88 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "[  ]"+ "'", var91.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var93.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == null);

  }

  public void test439() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var2 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    org.apache.commons.collections.iterators.TestSingletonListIterator var3 = new org.apache.commons.collections.iterators.TestSingletonListIterator("hi!");
    boolean var4 = var3.supportsSet();
    var3.testIterator();
    java.util.Iterator var6 = var3.makeFullIterator();
    org.apache.commons.collections.iterators.UniqueFilterIterator var7 = new org.apache.commons.collections.iterators.UniqueFilterIterator(var6);
    boolean var8 = var7.hasNext();
    java.lang.Object var9 = var7.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "foo"+ "'", var9.equals("foo"));

  }

  public void test440() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    junit.framework.Test var5 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    org.apache.commons.collections.ResettableListIterator var7 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var6);
    org.apache.commons.collections.Transformer var8 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var9 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var7, var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.util.Collection var15 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var3, var8, (java.util.Collection)var11);
    org.apache.commons.collections.Closure var16 = org.apache.commons.collections.ClosureUtils.asClosure(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);

  }

  public void test441() throws Throwable {

    org.apache.commons.collections.MultiHashMap var2 = new org.apache.commons.collections.MultiHashMap(100, 1.0f);
    org.apache.commons.collections.map.DefaultedMap var4 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var5 = var4.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var6 = org.apache.commons.collections.set.ListOrderedSet.decorate(var5);
    java.lang.Object[] var7 = var6.toArray();
    org.apache.commons.collections.Transformer var8 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((java.util.Collection)var6);
    org.apache.commons.collections.collection.TestSynchronizedCollection var10 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var11 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var14 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var15 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    int var17 = var6.indexOf((java.lang.Object)0);
    int var18 = var2.size((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test442() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    java.lang.Boolean var32 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var18, (java.lang.Object)true, (java.lang.Boolean)var31);
    java.lang.Object var33 = var1.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var35 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var1, (java.lang.Object)1L);
    org.apache.commons.collections.map.LRUMap var36 = new org.apache.commons.collections.map.LRUMap((java.util.Map)var1);
    org.apache.commons.collections.map.TestListOrderedMap2 var38 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    var38.testPreviousKey();
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var44 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var41, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    double var45 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var36, (java.lang.Object)var38, (double)var44);
    org.apache.commons.collections.BulkTest var46 = var38.bulkTestListView();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + true+ "'", var32.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (-1.0d)+ "'", var44.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);

  }

  public void test443() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    java.util.Set var1 = var0.entrySet();
    java.util.Collection var2 = var0.values();
    org.apache.commons.collections.Transformer var3 = org.apache.commons.collections.functors.ExceptionTransformer.getInstance();
    boolean var4 = var0.containsKey((java.lang.Object)var3);
    org.apache.commons.collections.Closure var5 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.functors.IdentityPredicate var6 = new org.apache.commons.collections.functors.IdentityPredicate((java.lang.Object)var5);
    org.apache.commons.collections.Predicate var7 = org.apache.commons.collections.PredicateUtils.transformedPredicate(var3, (org.apache.commons.collections.Predicate)var6);
    java.lang.Object var8 = var6.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test444() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    int var10 = var0.size();
    org.apache.commons.collections.FastArrayList var11 = new org.apache.commons.collections.FastArrayList(var10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var16 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var13, (java.util.Collection)var15);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    boolean var22 = var15.containsAll((java.util.Collection)var18);
    int var23 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var15);
    org.apache.commons.collections.MultiHashMap var24 = new org.apache.commons.collections.MultiHashMap(var23);
    var11.ensureCapacity(var23);
    org.apache.commons.collections.collection.TestSynchronizedCollection var27 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var28 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var29 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var30 = var29.isEqualsCheckable();
    boolean var31 = var11.add((java.lang.Object)var29);
    org.apache.commons.collections.collection.TestSynchronizedCollection var33 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var34 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var37 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var38 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.BinaryHeap var41 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var44 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var41, (java.util.Collection)var43);
    org.apache.commons.collections.map.DefaultedMap var46 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var47 = var46.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var48 = org.apache.commons.collections.set.ListOrderedSet.decorate(var47);
    java.lang.Object[] var49 = var48.toArray();
    org.apache.commons.collections.list.TreeList var50 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var48);
    java.util.List var51 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var43, (java.util.Collection)var50);
    org.apache.commons.collections.list.SetUniqueList var52 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var50);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var53 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var55 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var56 = var55.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var57 = org.apache.commons.collections.set.ListOrderedSet.decorate(var56);
    org.apache.commons.collections.map.SingletonMap var58 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var53, (java.lang.Object)var56);
    int var59 = var53.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var61 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var62 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var65 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var66 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var68 = var52.subList(var59, 0);
    boolean var69 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var52);
    org.apache.commons.collections.list.GrowthList var70 = new org.apache.commons.collections.list.GrowthList();
    org.apache.commons.collections.keyvalue.DefaultKeyValue var71 = new org.apache.commons.collections.keyvalue.DefaultKeyValue((java.lang.Object)var52, (java.lang.Object)var70);
    java.lang.Object var72 = var11.set(0, (java.lang.Object)var71);
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var74 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var75 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var76 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.bag.TestTransformedSortedBag var77 = new org.apache.commons.collections.bag.TestTransformedSortedBag("");
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var79 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var80 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var81 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.bag.TestTransformedSortedBag var82 = new org.apache.commons.collections.bag.TestTransformedSortedBag("");
    junit.framework.Assert.assertEquals("", "");
    boolean var84 = var71.equals((java.lang.Object)"");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)10+ "'", var9.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test445() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.buffer.TestBoundedFifoBuffer2 var7 = new org.apache.commons.collections.buffer.TestBoundedFifoBuffer2("");

  }

  public void test446() throws Throwable {

    org.apache.commons.collections.list.GrowthList var0 = new org.apache.commons.collections.list.GrowthList();
    org.apache.commons.collections.collection.TestSynchronizedCollection var2 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var3 = var2.countTestCases();
    org.apache.commons.collections.list.GrowthList var4 = new org.apache.commons.collections.list.GrowthList(var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var7 = var6.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var8 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var7);
    org.apache.commons.collections.TestDoubleOrderedMap var9 = new org.apache.commons.collections.TestDoubleOrderedMap(var7);
    boolean var10 = var9.isPutChangeSupported();
    var9.testGetKeyForValue();
    var9.testMapContainsKey();
    var9.testClear();
    var0.add(var3, (java.lang.Object)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[  ]"+ "'", var7.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test447() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.keyvalue.TestDefaultKeyValue.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test448() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.TestCollectionUtils var2 = new org.apache.commons.collections.TestCollectionUtils("");
    var2.testSizeIsEmpty_List();
    var2.testMaxSize();
    var2.testAddIgnoreNull();
    var2.testSizeIsEmpty_Map();

  }

  public void test449() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    var6.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);

  }

  public void test450() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.iterators.TestArrayIterator2 var6 = new org.apache.commons.collections.iterators.TestArrayIterator2(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test451() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var1 = var0.isEmpty();
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var4 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    var4.testComparator();
    org.apache.commons.collections.keyvalue.MultiKey var6 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var0, (java.lang.Object)var4);
    boolean var7 = var0.isEmpty();
    java.util.Comparator var8 = var0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test452() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    java.util.Iterator var31 = var12.iterator();
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    org.apache.commons.collections.map.DefaultedMap var38 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var39 = var38.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var40 = org.apache.commons.collections.set.ListOrderedSet.decorate(var39);
    java.lang.Object[] var41 = var40.toArray();
    org.apache.commons.collections.list.TreeList var42 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var40);
    java.util.List var43 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var35, (java.util.Collection)var42);
    org.apache.commons.collections.list.SetUniqueList var44 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var42);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var45 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var47 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var48 = var47.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var49 = org.apache.commons.collections.set.ListOrderedSet.decorate(var48);
    org.apache.commons.collections.map.SingletonMap var50 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var45, (java.lang.Object)var48);
    int var51 = var45.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var53 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var54 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var57 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var58 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var60 = var44.subList(var51, 0);
    boolean var61 = var12.contains((java.lang.Object)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test453() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var8 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var9 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var15 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var16 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var17 = var16.isEmpty();
    org.apache.commons.collections.MultiHashMap var19 = new org.apache.commons.collections.MultiHashMap(0);
    float var22 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var19, (java.lang.Object)100L, 100.0f);
    boolean var23 = var19.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var17, var23);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var27 = var26.toString();
    org.apache.commons.collections.MapUtils.safeAddToMap((java.util.Map)var6, (java.lang.Object)var23, (java.lang.Object)var27);
    org.apache.commons.collections.list.TestCursorableLinkedList var29 = new org.apache.commons.collections.list.TestCursorableLinkedList(var27);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var29.testRetainAll();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test454() throws Throwable {

    org.apache.commons.collections.comparators.TestFixedOrderComparator var1 = new org.apache.commons.collections.comparators.TestFixedOrderComparator("");
    var1.testArrayConstructor();
    var1.testAddAsEqual();

  }

  public void test455() throws Throwable {

    org.apache.commons.collections.iterators.ArrayIterator var0 = new org.apache.commons.collections.iterators.ArrayIterator();
    org.apache.commons.collections.Transformer var1 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var2 = new org.apache.commons.collections.Transformer[] { var1};
    org.apache.commons.collections.functors.ChainedTransformer var3 = new org.apache.commons.collections.functors.ChainedTransformer(var2);
    org.apache.commons.collections.iterators.TransformIterator var4 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var0, (org.apache.commons.collections.Transformer)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.map.DefaultedMap var11 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var12 = var11.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var13 = org.apache.commons.collections.set.ListOrderedSet.decorate(var12);
    java.lang.Object[] var14 = var13.toArray();
    org.apache.commons.collections.list.TreeList var15 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var13);
    java.util.List var16 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var8, (java.util.Collection)var15);
    org.apache.commons.collections.list.SetUniqueList var17 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var15);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var18 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var20 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var21 = var20.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var22 = org.apache.commons.collections.set.ListOrderedSet.decorate(var21);
    org.apache.commons.collections.map.SingletonMap var23 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var18, (java.lang.Object)var21);
    int var24 = var18.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var26 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var27 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var30 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var31 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var33 = var17.subList(var24, 0);
    boolean var34 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var17);
    org.apache.commons.collections.LRUMap var35 = new org.apache.commons.collections.LRUMap();
    boolean var36 = var17.contains((java.lang.Object)var35);
    org.apache.commons.collections.Predicate var37 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var38 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var39 = org.apache.commons.collections.PredicateUtils.orPredicate(var37, var38);
    org.apache.commons.collections.Predicate var40 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Map var41 = org.apache.commons.collections.MapUtils.predicatedMap((java.util.Map)var35, var37, var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setArray((java.lang.Object)var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);

  }

  public void test456() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var2 = var1.countTestCases();
    var1.testCollectionIsEmpty();
    java.util.Collection var4 = var1.makeCollection();
    java.lang.String var5 = var1.getCompatibilityVersion();
    org.apache.commons.collections.bidimap.DualTreeBidiMap var6 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var8 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var9 = var8.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var10 = org.apache.commons.collections.set.ListOrderedSet.decorate(var9);
    org.apache.commons.collections.map.SingletonMap var11 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var6, (java.lang.Object)var9);
    boolean var13 = var11.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var14 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var15 = var14.getFullElements();
    org.apache.commons.collections.collection.TestSynchronizedCollection var17 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var18 = var17.countTestCases();
    org.apache.commons.collections.Predicate var19 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var18);
    java.lang.Object var20 = org.apache.commons.collections.CollectionUtils.get((java.lang.Object)var15, var18);
    org.apache.commons.collections.buffer.BoundedFifoBuffer var21 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(var18);
    boolean var22 = var21.isEmpty();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var24 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var25 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var26 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var27 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    var27.testAccessorsAndMutators();
    org.apache.commons.collections.keyvalue.MultiKey var29 = new org.apache.commons.collections.keyvalue.MultiKey((java.lang.Object)var5, (java.lang.Object)var21, (java.lang.Object)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "3.1"+ "'", var5.equals("3.1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "the"+ "'", var20.equals("the"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test457() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    boolean var20 = var18.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var21 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var22 = var21.getFullElements();
    org.apache.commons.collections.collection.TestSynchronizedCollection var24 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var25 = var24.countTestCases();
    org.apache.commons.collections.Predicate var26 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var25);
    java.lang.Object var27 = org.apache.commons.collections.CollectionUtils.get((java.lang.Object)var22, var25);
    org.apache.commons.collections.buffer.BoundedFifoBuffer var28 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(var25);
    boolean var30 = var28.add((java.lang.Object)0L);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var31 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var33 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var34 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var35 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var36 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var37 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var38 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.MultiHashMap var40 = new org.apache.commons.collections.MultiHashMap(0);
    boolean var42 = var40.equals((java.lang.Object)1L);
    java.lang.Long var43 = org.apache.commons.collections.MapUtils.getLong((java.util.Map)var31, (java.lang.Object)"", (java.lang.Long)1L);
    java.lang.Number var44 = org.apache.commons.collections.MapUtils.getNumber((java.util.Map)var12, (java.lang.Object)var28, (java.lang.Number)var43);
    org.apache.commons.collections.BinaryHeap var46 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var47 = var46.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var48 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var47);
    java.lang.String var49 = var48.toString();
    org.apache.commons.collections.bag.TestTreeBag var50 = new org.apache.commons.collections.bag.TestTreeBag(var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var51 = var28.add((java.lang.Object)var49);
      fail("Expected exception of type org.apache.commons.collections.BufferOverflowException");
    } catch (org.apache.commons.collections.BufferOverflowException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "the"+ "'", var27.equals("the"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 1L+ "'", var43.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + 1L+ "'", var44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[  ]"+ "'", var47.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var49.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test458() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    java.util.Iterator var31 = var12.iterator();
    org.apache.commons.collections.map.DefaultedMap var34 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var35 = var34.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var36 = org.apache.commons.collections.set.ListOrderedSet.decorate(var35);
    java.lang.Object[] var37 = var36.toArray();
    org.apache.commons.collections.list.TreeList var38 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var36);
    java.util.Collection var39 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var38);
    boolean var40 = var12.addAll((-1), (java.util.Collection)var38);
    org.apache.commons.collections.map.StaticBucketMap var41 = new org.apache.commons.collections.map.StaticBucketMap((-1));
    int var42 = var41.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test459() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    boolean var20 = var18.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.TestBinaryHeap var21 = new org.apache.commons.collections.TestBinaryHeap("hi!");
    java.lang.Object[] var22 = var21.getFullElements();
    org.apache.commons.collections.collection.TestSynchronizedCollection var24 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var25 = var24.countTestCases();
    org.apache.commons.collections.Predicate var26 = org.apache.commons.collections.PredicateUtils.equalPredicate((java.lang.Object)var25);
    java.lang.Object var27 = org.apache.commons.collections.CollectionUtils.get((java.lang.Object)var22, var25);
    org.apache.commons.collections.buffer.BoundedFifoBuffer var28 = new org.apache.commons.collections.buffer.BoundedFifoBuffer(var25);
    boolean var30 = var28.add((java.lang.Object)0L);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var31 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var33 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var34 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var35 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var36 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var37 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var38 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    org.apache.commons.collections.MultiHashMap var40 = new org.apache.commons.collections.MultiHashMap(0);
    boolean var42 = var40.equals((java.lang.Object)1L);
    java.lang.Long var43 = org.apache.commons.collections.MapUtils.getLong((java.util.Map)var31, (java.lang.Object)"", (java.lang.Long)1L);
    java.lang.Number var44 = org.apache.commons.collections.MapUtils.getNumber((java.util.Map)var12, (java.lang.Object)var28, (java.lang.Number)var43);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var45 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var47 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var48 = var47.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var49 = org.apache.commons.collections.set.ListOrderedSet.decorate(var48);
    org.apache.commons.collections.map.SingletonMap var50 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var45, (java.lang.Object)var48);
    java.util.Properties var51 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var45);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var52 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var54 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var55 = var54.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var56 = org.apache.commons.collections.set.ListOrderedSet.decorate(var55);
    org.apache.commons.collections.map.SingletonMap var57 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var52, (java.lang.Object)var55);
    var51.putAll((java.util.Map)var57);
    org.apache.commons.collections.BinaryHeap var60 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var61 = var60.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var62 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var61);
    java.lang.String var63 = var62.toString();
    org.apache.commons.collections.bag.TestTreeBag var64 = new org.apache.commons.collections.bag.TestTreeBag(var63);
    org.apache.commons.collections.iterators.TestIteratorChain var65 = new org.apache.commons.collections.iterators.TestIteratorChain(var63);
    java.lang.Object var66 = var57.nextKey((java.lang.Object)var63);
    org.apache.commons.collections.map.SingletonMap var67 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var57);
    org.apache.commons.collections.map.DefaultedMap var69 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var70 = var69.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var71 = org.apache.commons.collections.set.ListOrderedSet.decorate(var70);
    org.apache.commons.collections.Predicate var72 = org.apache.commons.collections.PredicateUtils.nullPredicate();
    java.util.Set var73 = org.apache.commons.collections.SetUtils.predicatedSet(var70, var72);
    boolean var74 = var67.containsKey((java.lang.Object)var72);
    boolean var75 = var12.containsValue((java.lang.Object)var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "the"+ "'", var27.equals("the"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 1L+ "'", var43.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + 1L+ "'", var44.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[  ]"+ "'", var61.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var63.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test460() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var2 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var5 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var6 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var8 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    java.util.Iterator var9 = var8.makeFullIterator();
    org.apache.commons.collections.iterators.IteratorChain var10 = new org.apache.commons.collections.iterators.IteratorChain(var9);
    org.apache.commons.collections.iterators.IteratorEnumeration var11 = new org.apache.commons.collections.iterators.IteratorEnumeration((java.util.Iterator)var10);
    boolean var12 = var11.hasMoreElements();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test461() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = var6.get();
      fail("Expected exception of type org.apache.commons.collections.BufferUnderflowException");
    } catch (org.apache.commons.collections.BufferUnderflowException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test462() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.TestMapUtils var2 = new org.apache.commons.collections.TestMapUtils("");
    var2.testPredicatedMap();

  }

  public void test463() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    org.apache.commons.collections.comparators.BooleanComparator var2 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var3 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var2);
    org.apache.commons.collections.comparators.ComparatorChain var4 = new org.apache.commons.collections.comparators.ComparatorChain((java.util.Comparator)var3);
    org.apache.commons.collections.comparators.BooleanComparator var5 = org.apache.commons.collections.comparators.BooleanComparator.getFalseFirstComparator();
    org.apache.commons.collections.comparators.NullComparator var6 = new org.apache.commons.collections.comparators.NullComparator((java.util.Comparator)var5);
    java.util.Comparator var7 = org.apache.commons.collections.ComparatorUtils.nullLowComparator((java.util.Comparator)var6);
    var4.addComparator((java.util.Comparator)var6, true);
    boolean var10 = var1.equals((java.lang.Object)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test464() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    org.apache.commons.collections.BinaryHeap var32 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var34 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var35 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var32, (java.util.Collection)var34);
    org.apache.commons.collections.BinaryHeap var37 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var39 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var40 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var37, (java.util.Collection)var39);
    boolean var41 = var34.containsAll((java.util.Collection)var37);
    org.apache.commons.collections.MultiHashMap var43 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var44 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var45 = var37.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var46 = new org.apache.commons.collections.SequencedHashMap(0);
    int var47 = var46.size();
    org.apache.commons.collections.BinaryHeap var49 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var51 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var52 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var49, (java.util.Collection)var51);
    junit.framework.Test var53 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    org.apache.commons.collections.ResettableListIterator var55 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var54);
    org.apache.commons.collections.Transformer var56 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var57 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var55, var56);
    org.apache.commons.collections.BinaryHeap var59 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var61 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var62 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var59, (java.util.Collection)var61);
    java.util.Collection var63 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var51, var56, (java.util.Collection)var59);
    org.apache.commons.collections.comparators.TransformingComparator var64 = new org.apache.commons.collections.comparators.TransformingComparator(var56);
    org.apache.commons.collections.Predicate var65 = org.apache.commons.collections.functors.TransformerPredicate.getInstance(var56);
    var12.add(var47, (java.lang.Object)var65);
    java.lang.String var67 = var12.toString();
    org.apache.commons.collections.map.DefaultedMap var69 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    org.apache.commons.collections.bidimap.DualTreeBidiMap var70 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var72 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var73 = var72.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var74 = org.apache.commons.collections.set.ListOrderedSet.decorate(var73);
    org.apache.commons.collections.map.SingletonMap var75 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var70, (java.lang.Object)var73);
    boolean var77 = var75.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.list.TestGrowthList var78 = new org.apache.commons.collections.list.TestGrowthList("hi!");
    var78.testListSetByIndexBoundsChecking2();
    var78.testCollectionRemoveAll();
    junit.framework.Assert.assertNotSame(var67, (java.lang.Object)var69, (java.lang.Object)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var56 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test465() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var2 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    boolean var3 = var2.supportsEmptyIterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test466() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var4 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var5 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var6 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    java.lang.String var7 = var6.getCompatibilityVersion();
    org.apache.commons.collections.BulkTest var8 = var6.bulkTestTailMap();
    boolean var9 = var6.isAllowNullKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "3"+ "'", var7.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test467() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    int var10 = var0.size();
    org.apache.commons.collections.FastArrayList var11 = new org.apache.commons.collections.FastArrayList(var10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var16 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var13, (java.util.Collection)var15);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    boolean var22 = var15.containsAll((java.util.Collection)var18);
    int var23 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var15);
    org.apache.commons.collections.MultiHashMap var24 = new org.apache.commons.collections.MultiHashMap(var23);
    var11.ensureCapacity(var23);
    org.apache.commons.collections.collection.TestSynchronizedCollection var27 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var28 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var29 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var30 = var29.isEqualsCheckable();
    boolean var31 = var11.add((java.lang.Object)var29);
    java.lang.Object[] var32 = var11.toArray();
    java.lang.Object[] var33 = var11.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)10+ "'", var9.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);

  }

  public void test468() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    org.apache.commons.collections.set.TestTransformedSortedSet var7 = new org.apache.commons.collections.set.TestTransformedSortedSet(var4);
    java.util.Collection var8 = var7.makeConfirmedCollection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test469() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var18 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var19 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.bag.TestTransformedSortedBag var20 = new org.apache.commons.collections.bag.TestTransformedSortedBag("");
    org.apache.commons.collections.Bag var21 = var20.makeBag();
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    junit.framework.Test var27 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    org.apache.commons.collections.ResettableListIterator var29 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var28);
    org.apache.commons.collections.Transformer var30 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var31 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var29, var30);
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    java.util.Collection var37 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var25, var30, (java.util.Collection)var33);
    org.apache.commons.collections.comparators.TransformingComparator var38 = new org.apache.commons.collections.comparators.TransformingComparator(var30);
    org.apache.commons.collections.Bag var39 = org.apache.commons.collections.BagUtils.transformedBag(var21, var30);
    org.apache.commons.collections.Predicate var40 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var41 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var42 = org.apache.commons.collections.PredicateUtils.orPredicate(var40, var41);
    org.apache.commons.collections.Bag var43 = org.apache.commons.collections.BagUtils.predicatedBag(var21, var41);
    java.util.Map var44 = org.apache.commons.collections.map.DefaultedMap.decorate((java.util.Map)var1, (java.lang.Object)var21);
    org.apache.commons.collections.Bag var45 = org.apache.commons.collections.bag.SynchronizedBag.decorate(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);

  }

  public void test470() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var8 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var9 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    org.apache.commons.collections.iterators.TestArrayIterator2 var15 = new org.apache.commons.collections.iterators.TestArrayIterator2("hi!");
    org.apache.commons.collections.bidimap.DualTreeBidiMap var16 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var17 = var16.isEmpty();
    org.apache.commons.collections.MultiHashMap var19 = new org.apache.commons.collections.MultiHashMap(0);
    float var22 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var19, (java.lang.Object)100L, 100.0f);
    boolean var23 = var19.isEmpty();
    junit.framework.Assert.assertEquals("hi!", var17, var23);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var27 = var26.toString();
    org.apache.commons.collections.MapUtils.safeAddToMap((java.util.Map)var6, (java.lang.Object)var23, (java.lang.Object)var27);
    org.apache.commons.collections.list.TestCursorableLinkedList var29 = new org.apache.commons.collections.list.TestCursorableLinkedList(var27);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var29.testInternalState_CursorNextNextPreviousRemoveIndex1ByList();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test471() throws Throwable {

    org.apache.commons.collections.Predicate var0 = org.apache.commons.collections.functors.UniquePredicate.getInstance();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test472() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    boolean var7 = var6.isEqualsCheckable();
    var6.testCollectionRemove();
    java.lang.Object[] var9 = var6.getOtherElements();
    java.util.Set var10 = var6.getConfirmedSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);

  }

  public void test473() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var7 = var6.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var8 = org.apache.commons.collections.set.ListOrderedSet.decorate(var7);
    java.lang.Object[] var9 = var8.toArray();
    org.apache.commons.collections.list.TreeList var10 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var8);
    java.util.List var11 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var10);
    org.apache.commons.collections.list.SetUniqueList var12 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var10);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var13 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var15 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var16 = var15.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var17 = org.apache.commons.collections.set.ListOrderedSet.decorate(var16);
    org.apache.commons.collections.map.SingletonMap var18 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var13, (java.lang.Object)var16);
    int var19 = var13.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var21 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var22 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var25 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var26 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var28 = var12.subList(var19, 0);
    boolean var29 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var12);
    java.util.ListIterator var30 = var12.listIterator();
    java.util.Iterator var31 = var12.iterator();
    org.apache.commons.collections.BinaryHeap var33 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var35 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var36 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var33, (java.util.Collection)var35);
    org.apache.commons.collections.BinaryHeap var38 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var40 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var41 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var38, (java.util.Collection)var40);
    org.apache.commons.collections.BinaryHeap var43 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var45 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var46 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var43, (java.util.Collection)var45);
    boolean var47 = var40.containsAll((java.util.Collection)var43);
    java.util.Collection var48 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var35, (java.util.Collection)var40);
    boolean var49 = var12.containsAll(var48);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var52 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    boolean var53 = var52.isEmpty();
    org.apache.commons.collections.map.LRUMap var54 = new org.apache.commons.collections.map.LRUMap(100, 1.0f, var53);
    org.apache.commons.collections.Predicate var55 = org.apache.commons.collections.functors.IdentityPredicate.getInstance((java.lang.Object)var53);
    boolean var56 = var12.contains((java.lang.Object)var53);
    org.apache.commons.collections.Predicate var57 = org.apache.commons.collections.functors.OnePredicate.getInstance((java.util.Collection)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57 == null);

  }

  public void test474() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    java.util.Set var1 = var0.entrySet();
    java.util.Collection var2 = var0.values();
    org.apache.commons.collections.Transformer var3 = org.apache.commons.collections.functors.ExceptionTransformer.getInstance();
    boolean var4 = var0.containsKey((java.lang.Object)var3);
    org.apache.commons.collections.Closure var5 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.functors.IdentityPredicate var6 = new org.apache.commons.collections.functors.IdentityPredicate((java.lang.Object)var5);
    org.apache.commons.collections.Predicate var7 = org.apache.commons.collections.PredicateUtils.transformedPredicate(var3, (org.apache.commons.collections.Predicate)var6);
    org.apache.commons.collections.Predicate var8 = org.apache.commons.collections.PredicateUtils.nullIsFalsePredicate(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);

  }

  public void test475() throws Throwable {

    org.apache.commons.collections.MultiHashMap var1 = new org.apache.commons.collections.MultiHashMap(0);
    boolean var3 = var1.equals((java.lang.Object)1L);
    org.apache.commons.collections.collection.TestSynchronizedCollection var5 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var6 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    java.lang.String var7 = var6.getCompatibilityVersion();
    var6.testValuesClearChangesMap();
    var6.testKeySetRemoveChangesMap();
    var6.testClone();
    short var11 = org.apache.commons.collections.MapUtils.getShortValue((java.util.Map)var1, (java.lang.Object)var6);
    org.apache.commons.collections.FastHashMap var12 = new org.apache.commons.collections.FastHashMap((java.util.Map)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "3"+ "'", var7.equals("3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (short)0);

  }

  public void test476() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var3 = org.apache.commons.collections.set.ListOrderedSet.decorate(var2);
    java.lang.Object[] var4 = var3.toArray();
    org.apache.commons.collections.list.TreeList var5 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var7 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var8 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    java.util.ListIterator var9 = var5.listIterator(0);
    org.apache.commons.collections.Predicate var10 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var11 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var12 = org.apache.commons.collections.PredicateUtils.orPredicate(var10, var11);
    int var13 = var5.indexOf((java.lang.Object)var10);
    org.apache.commons.collections.Predicate[] var14 = new org.apache.commons.collections.Predicate[] { var10};
    org.apache.commons.collections.Predicate var15 = org.apache.commons.collections.functors.OnePredicate.getInstance(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15 == null);

  }

  public void test477() throws Throwable {

    org.apache.commons.collections.map.MultiKeyMap var0 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var1 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var0);
    org.apache.commons.collections.collection.TestSynchronizedCollection var3 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestCaseInsensitiveMap var4 = new org.apache.commons.collections.map.TestCaseInsensitiveMap("hi!");
    org.apache.commons.collections.list.TestSetUniqueList var5 = new org.apache.commons.collections.list.TestSetUniqueList("hi!");
    boolean var6 = var5.isEqualsCheckable();
    var5.testListIndexOf();
    java.lang.Short var9 = org.apache.commons.collections.MapUtils.getShort((java.util.Map)var0, (java.lang.Object)var5, (java.lang.Short)(short)10);
    int var10 = var0.size();
    org.apache.commons.collections.FastArrayList var11 = new org.apache.commons.collections.FastArrayList(var10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var16 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var13, (java.util.Collection)var15);
    junit.framework.Test var17 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    org.apache.commons.collections.ResettableListIterator var19 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var18);
    org.apache.commons.collections.Transformer var20 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var21 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var19, var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    java.util.Collection var27 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var15, var20, (java.util.Collection)var23);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var32 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var29, (java.util.Collection)var31);
    org.apache.commons.collections.BinaryHeap var34 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var36 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var37 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var34, (java.util.Collection)var36);
    org.apache.commons.collections.BinaryHeap var39 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var41 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var42 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var39, (java.util.Collection)var41);
    boolean var43 = var36.containsAll((java.util.Collection)var39);
    java.util.Collection var44 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var31, (java.util.Collection)var36);
    org.apache.commons.collections.Buffer var45 = org.apache.commons.collections.buffer.BlockingBuffer.decorate((org.apache.commons.collections.Buffer)var36);
    java.util.Collection var46 = org.apache.commons.collections.CollectionUtils.removeAll(var27, (java.util.Collection)var36);
    boolean var47 = var11.containsAll((java.util.Collection)var36);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var48 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var50 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var51 = var50.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var52 = org.apache.commons.collections.set.ListOrderedSet.decorate(var51);
    org.apache.commons.collections.map.SingletonMap var53 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var48, (java.lang.Object)var51);
    boolean var55 = var53.equals((java.lang.Object)"hi!");
    org.apache.commons.collections.collection.TestSynchronizedCollection var57 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var58 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    java.lang.Object var59 = var53.get((java.lang.Object)"hi!");
    org.apache.commons.collections.iterators.TestSingletonIterator var60 = new org.apache.commons.collections.iterators.TestSingletonIterator("hi!");
    boolean var61 = var60.supportsRemove();
    var60.testIterator();
    var60.testRemove();
    boolean var64 = var11.contains((java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)10+ "'", var9.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var44 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test478() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    boolean var7 = var6.isEqualsCheckable();
    var6.testCollectionRemove();
    java.lang.Object[] var9 = var6.getOtherElements();
    org.apache.commons.collections.iterators.SingletonIterator var10 = new org.apache.commons.collections.iterators.SingletonIterator((java.lang.Object)var9);
    var10.reset();
    java.lang.Object var12 = var10.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);

  }

  public void test479() throws Throwable {

    java.lang.Class[] var1 = new java.lang.Class[] { null};
    org.apache.commons.collections.map.DefaultedMap var3 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var4 = var3.entrySet();
    boolean var6 = var3.containsKey((java.lang.Object)1.0d);
    boolean var7 = org.apache.commons.collections.MapUtils.isEmpty((java.util.Map)var3);
    java.lang.Object[] var8 = new java.lang.Object[] { var3};
    org.apache.commons.collections.functors.InstantiateTransformer var9 = new org.apache.commons.collections.functors.InstantiateTransformer(var1, var8);
    org.apache.commons.collections.map.IdentityMap var10 = new org.apache.commons.collections.map.IdentityMap();
    org.apache.commons.collections.Transformer var11 = org.apache.commons.collections.TransformerUtils.mapTransformer((java.util.Map)var10);
    org.apache.commons.collections.Transformer var12 = org.apache.commons.collections.functors.ChainedTransformer.getInstance((org.apache.commons.collections.Transformer)var9, var11);
    org.apache.commons.collections.Transformer[] var13 = new org.apache.commons.collections.Transformer[] { var12};
    org.apache.commons.collections.Transformer var14 = org.apache.commons.collections.TransformerUtils.chainedTransformer(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14 == null);

  }

  public void test480() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    org.apache.commons.collections.iterators.TestIteratorChain var6 = new org.apache.commons.collections.iterators.TestIteratorChain(var4);
    org.apache.commons.collections.TestDoubleOrderedMap var7 = new org.apache.commons.collections.TestDoubleOrderedMap(var4);
    var7.tearDown();
    var7.testEntrySetContains1();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test481() throws Throwable {

    org.apache.commons.collections.Predicate var0 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var1 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var2 = org.apache.commons.collections.PredicateUtils.orPredicate(var0, var1);
    org.apache.commons.collections.Closure var3 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var4 = org.apache.commons.collections.ClosureUtils.nopClosure();
    org.apache.commons.collections.Closure var5 = org.apache.commons.collections.functors.IfClosure.getInstance(var1, var3, var4);
    org.apache.commons.collections.functors.NullIsTruePredicate var6 = new org.apache.commons.collections.functors.NullIsTruePredicate(var1);
    org.apache.commons.collections.map.DefaultedMap var8 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var9 = var8.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var10 = org.apache.commons.collections.set.ListOrderedSet.decorate(var9);
    java.lang.Object[] var11 = var10.toArray();
    org.apache.commons.collections.list.TreeList var12 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var10);
    org.apache.commons.collections.collection.TestSynchronizedCollection var14 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    int var15 = var14.countTestCases();
    var14.testCollectionIsEmpty();
    java.util.Collection var17 = var14.makeCollection();
    java.util.List var18 = org.apache.commons.collections.ListUtils.removeAll((java.util.Collection)var10, var17);
    org.apache.commons.collections.Predicate var19 = org.apache.commons.collections.functors.NullPredicate.getInstance();
    java.util.Collection var20 = org.apache.commons.collections.CollectionUtils.predicatedCollection((java.util.Collection)var10, var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = var6.evaluate((java.lang.Object)var10);
      fail("Expected exception of type org.apache.commons.collections.FunctorException");
    } catch (org.apache.commons.collections.FunctorException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);

  }

  public void test482() throws Throwable {

    org.apache.commons.collections.iterators.ProxyListIterator var0 = new org.apache.commons.collections.iterators.ProxyListIterator();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    java.lang.Object[] var5 = var4.toArray();
    org.apache.commons.collections.list.TreeList var6 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var4);
    java.util.Collection var7 = org.apache.commons.collections.collection.SynchronizedCollection.decorate((java.util.Collection)var6);
    org.apache.commons.collections.Transformer var8 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.Transformer[] var9 = new org.apache.commons.collections.Transformer[] { var8};
    org.apache.commons.collections.functors.ChainedTransformer var10 = new org.apache.commons.collections.functors.ChainedTransformer(var9);
    java.util.List var11 = org.apache.commons.collections.list.TransformedList.decorate((java.util.List)var6, (org.apache.commons.collections.Transformer)var10);
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      var0.set((java.lang.Object)var10);
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test483() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var13 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var14 = var6.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var15 = new org.apache.commons.collections.SequencedHashMap(0);
    int var16 = var15.size();
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    boolean var32 = var25.containsAll((java.util.Collection)var28);
    java.util.Collection var33 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var20, (java.util.Collection)var25);
    int var34 = var15.indexOf((java.lang.Object)var25);
    java.lang.String var35 = var15.toString();
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var36 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry(var35);
    org.apache.commons.collections.bag.TestTransformedSortedBag var37 = new org.apache.commons.collections.bag.TestTransformedSortedBag(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "[]"+ "'", var35.equals("[]"));

  }

  public void test484() throws Throwable {

    org.apache.commons.collections.iterators.FilterListIterator var0 = new org.apache.commons.collections.iterators.FilterListIterator();
    java.util.ListIterator var1 = var0.getListIterator();
    java.util.ListIterator var2 = var0.getListIterator();
    // Checks that no java.lang.NullPointerException is thrown.
    try {
      java.lang.Object var3 = var0.previous();
    } catch (java.lang.NullPointerException e) {
      fail("Statement throw java.lang.NullPointerException.");
    }

  }

  public void test485() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var4 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var1, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var6 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var9 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var6, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    java.lang.Boolean var15 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var1, (java.lang.Object)true, (java.lang.Boolean)var14);
    org.apache.commons.collections.map.DefaultedMap var18 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var21 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var18, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.map.DefaultedMap var23 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var26 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var23, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var28 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var30 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var31 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var28, (java.util.Collection)var30);
    java.lang.Boolean var32 = org.apache.commons.collections.MapUtils.getBoolean((java.util.Map)var18, (java.lang.Object)true, (java.lang.Boolean)var31);
    java.lang.Object var33 = var1.put((java.lang.Object)(short)100, (java.lang.Object)true);
    boolean var35 = org.apache.commons.collections.MapUtils.getBooleanValue((java.util.Map)var1, (java.lang.Object)1L);
    org.apache.commons.collections.map.LRUMap var36 = new org.apache.commons.collections.map.LRUMap((java.util.Map)var1);
    org.apache.commons.collections.map.TestListOrderedMap2 var38 = new org.apache.commons.collections.map.TestListOrderedMap2("hi!");
    var38.testPreviousKey();
    org.apache.commons.collections.map.DefaultedMap var41 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.lang.Double var44 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var41, (java.lang.Object)true, (java.lang.Double)(-1.0d));
    double var45 = org.apache.commons.collections.MapUtils.getDoubleValue((java.util.Map)var36, (java.lang.Object)var38, (double)var44);
    boolean var46 = var36.isFull();
    org.apache.commons.collections.Predicate var47 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var48 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var49 = org.apache.commons.collections.PredicateUtils.orPredicate(var47, var48);
    org.apache.commons.collections.Predicate var50 = org.apache.commons.collections.PredicateUtils.nullIsTruePredicate(var47);
    org.apache.commons.collections.MultiHashMap var52 = new org.apache.commons.collections.MultiHashMap(0);
    float var55 = org.apache.commons.collections.MapUtils.getFloatValue((java.util.Map)var52, (java.lang.Object)100L, 100.0f);
    org.apache.commons.collections.MultiHashMap var58 = new org.apache.commons.collections.MultiHashMap(0);
    boolean var60 = var58.equals((java.lang.Object)1L);
    java.lang.Object var61 = var52.put((java.lang.Object)(-1.0d), (java.lang.Object)1L);
    java.lang.Double var62 = org.apache.commons.collections.MapUtils.getDouble((java.util.Map)var36, (java.lang.Object)var47, (java.lang.Double)(-1.0d));
    org.apache.commons.collections.BinaryHeap var64 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var66 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var67 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var64, (java.util.Collection)var66);
    org.apache.commons.collections.map.DefaultedMap var69 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var70 = var69.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var71 = org.apache.commons.collections.set.ListOrderedSet.decorate(var70);
    java.lang.Object[] var72 = var71.toArray();
    org.apache.commons.collections.list.TreeList var73 = new org.apache.commons.collections.list.TreeList((java.util.Collection)var71);
    java.util.List var74 = org.apache.commons.collections.ListUtils.retainAll((java.util.Collection)var66, (java.util.Collection)var73);
    org.apache.commons.collections.list.SetUniqueList var75 = org.apache.commons.collections.list.SetUniqueList.decorate((java.util.List)var73);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var76 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var78 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var79 = var78.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var80 = org.apache.commons.collections.set.ListOrderedSet.decorate(var79);
    org.apache.commons.collections.map.SingletonMap var81 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var76, (java.lang.Object)var79);
    int var82 = var76.size();
    org.apache.commons.collections.collection.TestSynchronizedCollection var84 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.map.TestUnmodifiableSortedMap var85 = new org.apache.commons.collections.map.TestUnmodifiableSortedMap("hi!");
    org.apache.commons.collections.MultiHashMap var88 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var89 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    junit.framework.Assert.assertEquals("hi!", 0, 0);
    java.util.List var91 = var75.subList(var82, 0);
    boolean var92 = org.apache.commons.collections.CollectionUtils.isFull((java.util.Collection)var75);
    java.util.ListIterator var93 = var75.listIterator();
    java.util.Iterator var94 = var75.iterator();
    boolean var95 = var36.equals((java.lang.Object)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (-1.0d)+ "'", var4.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0d)+ "'", var9.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + (-1.0d)+ "'", var21.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1.0d)+ "'", var26.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + true+ "'", var32.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + (-1.0d)+ "'", var44.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + 1L+ "'", var61.equals(1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + (-1.0d)+ "'", var62.equals((-1.0d)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var71 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var74 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var75 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var91 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var93 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var94 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test486() throws Throwable {

    org.apache.commons.collections.collection.TestSynchronizedCollection var1 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.iterators.TestIteratorChain var2 = new org.apache.commons.collections.iterators.TestIteratorChain("hi!");
    org.apache.commons.collections.keyvalue.TestDefaultMapEntry var3 = new org.apache.commons.collections.keyvalue.TestDefaultMapEntry("hi!");
    java.util.Map.Entry var4 = var3.makeMapEntry();
    org.apache.commons.collections.keyvalue.UnmodifiableMapEntry var5 = new org.apache.commons.collections.keyvalue.UnmodifiableMapEntry(var4);
    org.apache.commons.collections.collection.TestSynchronizedCollection var7 = new org.apache.commons.collections.collection.TestSynchronizedCollection("hi!");
    org.apache.commons.collections.bag.TestHashBag var8 = new org.apache.commons.collections.bag.TestHashBag("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var9 = var5.setValue((java.lang.Object)var8);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);

  }

  public void test487() throws Throwable {

    junit.framework.Test var0 = org.apache.commons.collections.TestStaticBucketMap.suite();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0 == null);

  }

  public void test488() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    boolean var10 = var3.containsAll((java.util.Collection)var6);
    int var11 = org.apache.commons.collections.ListUtils.hashCodeForList((java.util.Collection)var3);
    org.apache.commons.collections.MultiHashMap var12 = new org.apache.commons.collections.MultiHashMap(var11);
    java.lang.Object var13 = var12.clone();
    org.apache.commons.collections.map.MultiKeyMap var14 = new org.apache.commons.collections.map.MultiKeyMap();
    org.apache.commons.collections.bidimap.DualHashBidiMap var15 = new org.apache.commons.collections.bidimap.DualHashBidiMap((java.util.Map)var14);
    org.apache.commons.collections.keyvalue.TiedMapEntry var16 = new org.apache.commons.collections.keyvalue.TiedMapEntry((java.util.Map)var12, (java.lang.Object)var14);
    org.apache.commons.collections.BinaryHeap var18 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var20 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var21 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var18, (java.util.Collection)var20);
    org.apache.commons.collections.BinaryHeap var23 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var25 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var26 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var23, (java.util.Collection)var25);
    boolean var27 = var20.containsAll((java.util.Collection)var23);
    org.apache.commons.collections.MultiHashMap var29 = new org.apache.commons.collections.MultiHashMap(0);
    org.apache.commons.collections.functors.EqualPredicate var30 = new org.apache.commons.collections.functors.EqualPredicate((java.lang.Object)0);
    boolean var31 = var23.remove((java.lang.Object)0);
    org.apache.commons.collections.SequencedHashMap var32 = new org.apache.commons.collections.SequencedHashMap(0);
    boolean var33 = var14.removeAll((java.lang.Object)0);
    org.apache.commons.collections.Transformer var34 = org.apache.commons.collections.TransformerUtils.cloneTransformer();
    java.util.Map var35 = org.apache.commons.collections.map.DefaultedMap.decorate((java.util.Map)var14, var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);

  }

  public void test489() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    org.apache.commons.collections.TestFastTreeMap var6 = new org.apache.commons.collections.TestFastTreeMap(var4);
    java.util.Map var7 = var6.makeEmptyMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7 == null);

  }

  public void test490() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.bag.TestTreeBag var5 = new org.apache.commons.collections.bag.TestTreeBag(var4);
    var5.testOrdering();
    java.lang.String var7 = var5.getCompatibilityVersion();
    org.apache.commons.collections.collection.TestTransformedCollection var8 = new org.apache.commons.collections.collection.TestTransformedCollection(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "3"+ "'", var7.equals("3"));

  }

  public void test491() throws Throwable {

    org.apache.commons.collections.keyvalue.DefaultKeyValue var0 = new org.apache.commons.collections.keyvalue.DefaultKeyValue();
    java.lang.Object var1 = var0.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test492() throws Throwable {

    org.apache.commons.collections.bidimap.DualTreeBidiMap var0 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var2 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var3 = var2.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var4 = org.apache.commons.collections.set.ListOrderedSet.decorate(var3);
    org.apache.commons.collections.map.SingletonMap var5 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var0, (java.lang.Object)var3);
    java.util.Properties var6 = org.apache.commons.collections.MapUtils.toProperties((java.util.Map)var0);
    org.apache.commons.collections.bidimap.DualTreeBidiMap var7 = new org.apache.commons.collections.bidimap.DualTreeBidiMap();
    org.apache.commons.collections.map.DefaultedMap var9 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var10 = var9.entrySet();
    org.apache.commons.collections.set.ListOrderedSet var11 = org.apache.commons.collections.set.ListOrderedSet.decorate(var10);
    org.apache.commons.collections.map.SingletonMap var12 = new org.apache.commons.collections.map.SingletonMap((java.lang.Object)var7, (java.lang.Object)var10);
    var6.putAll((java.util.Map)var12);
    org.apache.commons.collections.BinaryHeap var15 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var16 = var15.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var17 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var16);
    java.lang.String var18 = var17.toString();
    org.apache.commons.collections.bag.TestTreeBag var19 = new org.apache.commons.collections.bag.TestTreeBag(var18);
    org.apache.commons.collections.iterators.TestIteratorChain var20 = new org.apache.commons.collections.iterators.TestIteratorChain(var18);
    java.lang.Object var21 = var12.nextKey((java.lang.Object)var18);
    org.apache.commons.collections.map.SingletonMap var22 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var12);
    org.apache.commons.collections.map.SingletonMap var23 = new org.apache.commons.collections.map.SingletonMap((org.apache.commons.collections.KeyValue)var22);
    java.util.Map[] var24 = new java.util.Map[] { var23};
    org.apache.commons.collections.map.CompositeMap var25 = new org.apache.commons.collections.map.CompositeMap(var24);
    java.util.Set var26 = var25.entrySet();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var28 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var29 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var30 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.keyvalue.TestTiedMapEntry var31 = new org.apache.commons.collections.keyvalue.TestTiedMapEntry("");
    org.apache.commons.collections.comparators.TestComparatorChain var32 = new org.apache.commons.collections.comparators.TestComparatorChain("");
    org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap var33 = new org.apache.commons.collections.bidimap.TestUnmodifiableSortedBidiMap("");
    java.lang.Object var34 = var25.get((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[  ]"+ "'", var16.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var18.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var24 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test493() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    java.lang.String var2 = var1.toString();
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var3 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator(var2);
    java.lang.String var4 = var3.toString();
    org.apache.commons.collections.set.TestAll var5 = new org.apache.commons.collections.set.TestAll(var4);
    org.apache.commons.collections.set.TestPredicatedSortedSet var6 = new org.apache.commons.collections.set.TestPredicatedSortedSet(var4);
    org.apache.commons.collections.set.TestTransformedSortedSet var7 = new org.apache.commons.collections.set.TestTransformedSortedSet(var4);
    org.apache.commons.collections.iterators.TestAll var8 = new org.apache.commons.collections.iterators.TestAll(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[  ]"+ "'", var2.equals("[  ]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "+ "'", var4.equals("[  ](org.apache.commons.collections.iterators.TestUnmodifiableIterator) "));

  }

  public void test494() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.TestCollectionUtils var2 = new org.apache.commons.collections.TestCollectionUtils("");
    var2.testIsEmptyWithEmptyCollection();
    var2.testSizeIsEmpty_Array();
    var2.testIntersectionUsesMethodEquals();
    var2.testCountMatches();

  }

  public void test495() throws Throwable {

    org.apache.commons.collections.StaticBucketMap var0 = new org.apache.commons.collections.StaticBucketMap();
    boolean var1 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test496() throws Throwable {

    org.apache.commons.collections.iterators.TestUnmodifiableIterator var1 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var2 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var3 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.bag.TestTransformedSortedBag var4 = new org.apache.commons.collections.bag.TestTransformedSortedBag("");
    org.apache.commons.collections.map.TestReferenceMap var5 = new org.apache.commons.collections.map.TestReferenceMap("");
    var5.testNullHandling();
    var5.testNullHandling();

  }

  public void test497() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.TestCollectionUtils var2 = new org.apache.commons.collections.TestCollectionUtils("");
    var2.testSizeIsEmpty_List();
    var2.testMaxSize();
    var2.testAddIgnoreNull();
    var2.testIntersectionUsesMethodEquals();
    var2.testSynchronizedCollection();

  }

  public void test498() throws Throwable {

    org.apache.commons.collections.bag.TestPredicatedBag var1 = new org.apache.commons.collections.bag.TestPredicatedBag("");
    org.apache.commons.collections.iterators.TestCollatingIterator var2 = new org.apache.commons.collections.iterators.TestCollatingIterator("");
    java.util.Iterator var3 = var2.makeEmptyIterator();
    var2.setUp();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3 == null);

  }

  public void test499() throws Throwable {

    org.apache.commons.collections.BinaryHeap var1 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var3 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var4 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var1, (java.util.Collection)var3);
    org.apache.commons.collections.BinaryHeap var6 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var8 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var9 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var6, (java.util.Collection)var8);
    org.apache.commons.collections.BinaryHeap var11 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var13 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var14 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var11, (java.util.Collection)var13);
    boolean var15 = var8.containsAll((java.util.Collection)var11);
    java.util.Collection var16 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var3, (java.util.Collection)var8);
    org.apache.commons.collections.Buffer var17 = org.apache.commons.collections.buffer.BlockingBuffer.decorate((org.apache.commons.collections.Buffer)var8);
    org.apache.commons.collections.BinaryHeap var19 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var21 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var22 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var19, (java.util.Collection)var21);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var27 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var24, (java.util.Collection)var26);
    org.apache.commons.collections.BinaryHeap var29 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var31 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var32 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var29, (java.util.Collection)var31);
    boolean var33 = var26.containsAll((java.util.Collection)var29);
    java.util.Collection var34 = org.apache.commons.collections.CollectionUtils.retainAll((java.util.Collection)var21, (java.util.Collection)var26);
    java.util.Collection var35 = org.apache.commons.collections.CollectionUtils.disjunction((java.util.Collection)var8, (java.util.Collection)var26);
    org.apache.commons.collections.Transformer var36 = org.apache.commons.collections.functors.ConstantTransformer.getInstance((java.lang.Object)var8);
    org.apache.commons.collections.Transformer[] var37 = new org.apache.commons.collections.Transformer[] { var36};
    org.apache.commons.collections.functors.ChainedTransformer var38 = new org.apache.commons.collections.functors.ChainedTransformer(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37 == null);

  }

  public void test500() throws Throwable {

    org.apache.commons.collections.map.DefaultedMap var1 = new org.apache.commons.collections.map.DefaultedMap((java.lang.Object)(-1L));
    java.util.Set var2 = var1.entrySet();
    boolean var4 = var1.containsKey((java.lang.Object)1.0d);
    boolean var5 = org.apache.commons.collections.MapUtils.isEmpty((java.util.Map)var1);
    java.util.Map var6 = org.apache.commons.collections.MapUtils.orderedMap((java.util.Map)var1);
    org.apache.commons.collections.iterators.TestUnmodifiableIterator var8 = new org.apache.commons.collections.iterators.TestUnmodifiableIterator("");
    org.apache.commons.collections.iterators.TestLoopingListIterator var9 = new org.apache.commons.collections.iterators.TestLoopingListIterator("");
    org.apache.commons.collections.TestExtendedProperties var10 = new org.apache.commons.collections.TestExtendedProperties("");
    org.apache.commons.collections.bag.TestTransformedSortedBag var11 = new org.apache.commons.collections.bag.TestTransformedSortedBag("");
    org.apache.commons.collections.Bag var12 = var11.makeBag();
    org.apache.commons.collections.BinaryHeap var14 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var16 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var17 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var14, (java.util.Collection)var16);
    junit.framework.Test var18 = org.apache.commons.collections.bidimap.TestUnmodifiableOrderedBidiMap.suite();
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    org.apache.commons.collections.ResettableListIterator var20 = org.apache.commons.collections.IteratorUtils.arrayListIterator(var19);
    org.apache.commons.collections.Transformer var21 = org.apache.commons.collections.TransformerUtils.exceptionTransformer();
    org.apache.commons.collections.iterators.TransformIterator var22 = new org.apache.commons.collections.iterators.TransformIterator((java.util.Iterator)var20, var21);
    org.apache.commons.collections.BinaryHeap var24 = new org.apache.commons.collections.BinaryHeap(10);
    org.apache.commons.collections.BinaryHeap var26 = new org.apache.commons.collections.BinaryHeap(10);
    boolean var27 = org.apache.commons.collections.ListUtils.isEqualList((java.util.Collection)var24, (java.util.Collection)var26);
    java.util.Collection var28 = org.apache.commons.collections.CollectionUtils.collect((java.util.Collection)var16, var21, (java.util.Collection)var24);
    org.apache.commons.collections.comparators.TransformingComparator var29 = new org.apache.commons.collections.comparators.TransformingComparator(var21);
    org.apache.commons.collections.Bag var30 = org.apache.commons.collections.BagUtils.transformedBag(var12, var21);
    org.apache.commons.collections.Predicate var31 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var32 = org.apache.commons.collections.functors.ExceptionPredicate.getInstance();
    org.apache.commons.collections.Predicate var33 = org.apache.commons.collections.PredicateUtils.orPredicate(var31, var32);
    org.apache.commons.collections.Bag var34 = org.apache.commons.collections.BagUtils.predicatedBag(var12, var32);
    java.lang.Object var35 = var1.get((java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + (-1L)+ "'", var35.equals((-1L)));

  }

}
